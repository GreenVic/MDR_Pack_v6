/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     MDR1986VE3.h
 * @brief    CMSIS HeaderFile
 * @version  2.0
 * @date     06. November 2018
 * @note     Generated by SVDConv V3.3.18 on Tuesday, 06.11.2018 12:08:46
 *           from File '../_src/MDR1986VE3.svd',
 *           last modified on Tuesday, 06.11.2018 09:07:52
 */



/** @addtogroup Milandr
  * @{
  */


/** @addtogroup MDR1986VE3
  * @{
  */


#ifndef MDR1986VE3_H
#define MDR1986VE3_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M1 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  MDR1986VE3 Specific Interrupt Numbers  ========================================= */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M1 Processor and Core Peripherals  =========================== */
#define __CM1_REV                 0x0100U       /*!< CM1 Core Revision                                                         */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm1.h"                           /*!< ARM Cortex-M1 processor and core peripherals                              */
#include "system_MDR1986VE3.h"                  /*!< MDR1986VE3 System                                                         */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLock Control (MDR_RST_CLOCK)
  */

typedef struct {                                /*!< (@ 0x40020000) MDR_RST_CLOCK Structure                                    */
  
  union {
    __IM  uint32_t CLOCK_STATUS;                /*!< (@ 0x00000000) Clock Status Register                                      */
    
    struct {
      __IM  uint32_t PLL_USB_RDY : 1;           /*!< [0..0] PLL USP ready                                                      */
      __IM  uint32_t PLL_CPU_RDY : 1;           /*!< [1..1] PLL CPU ready                                                      */
      __IM  uint32_t HSE_RDY    : 1;            /*!< [2..2] HSE generator ready                                                */
      __IM  uint32_t HSE2_RDY   : 1;            /*!< [3..3] HSE2 generator ready                                               */
    } CLOCK_STATUS_b;
  } ;
  
  union {
    __IOM uint32_t PLL_CONTROL;                 /*!< (@ 0x00000004) PLL Control Register                                       */
    
    struct {
      __IOM uint32_t PLL_USB_ON : 1;            /*!< [0..0] PLL USB Enable                                                     */
      __IOM uint32_t PLL_USB_PLD : 1;           /*!< [1..1] PLL USB Restart                                                    */
      __IOM uint32_t PLL_CPU_ON : 1;            /*!< [2..2] PLL CPU Enable                                                     */
      __IOM uint32_t PLL_CPU_PLD : 1;           /*!< [3..3] PLL CPU Restart                                                    */
      __IOM uint32_t PLL_USB_MUL : 4;           /*!< [7..4] PLL USB Mul, [x1 .. x16]                                           */
      __IOM uint32_t PLL_CPU_MUL : 4;           /*!< [11..8] PLL CPU Mul, [x1 .. x16]                                          */
    } PLL_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t HS_CONTROL;                  /*!< (@ 0x00000008) HSE Generator Control                                      */
    
    struct {
      __IOM uint32_t HSE_ON     : 1;            /*!< [0..0] HSE Enable                                                         */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [1..1] HSE Bypass Mode                                                    */
      __IOM uint32_t HSE2_ON    : 1;            /*!< [2..2] HSE2 Enable                                                        */
      __IOM uint32_t HSE2_BYP   : 1;            /*!< [3..3] HSE2 Bypass Mode                                                   */
    } HS_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CLOCK;                   /*!< (@ 0x0000000C) CPU Clock Control                                          */
    
    struct {
      __IOM uint32_t CPU_C1_SEL : 2;            /*!< [1..0] CPU_C1 mux freq select                                             */
      __IOM uint32_t CPU_C2_SEL : 1;            /*!< [2..2] CPU_C2 mux freq select                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CPU_C3_SEL : 4;            /*!< [7..4] CPU_C2 mux output freq devider, [/1, /2, /4 .. /256]               */
      __IOM uint32_t HCLK_SEL   : 2;            /*!< [9..8] Select Clock for CPU                                               */
    } CPU_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t USB_CLOCK;                   /*!< (@ 0x00000010) USB Clock Control                                          */
    
    struct {
      __IOM uint32_t USB_C1_SEL : 2;            /*!< [1..0] USB_C1 mux freq select                                             */
      __IOM uint32_t USB_C2_SEL : 1;            /*!< [2..2] USB_C2 mux freq select                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t USB_C3_SEL : 1;            /*!< [4..4] USB_C3 Input Select                                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t USB_EN     : 1;            /*!< [8..8] USB Clock Enable                                                   */
    } USB_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t ADC_CLOCK;                   /*!< (@ 0x00000014) ADC Clock Control                                          */
    
    struct {
      __IOM uint32_t ADC_C1_SEL : 2;            /*!< [1..0] ADC_C1 mux freq select                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADC_C2_SEL : 2;            /*!< [5..4] ADC_C2 mux freq select                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADC_C3_SEL : 4;            /*!< [11..8] ADC_C2 mux output freq devider, [/1, /2, /4 .. /256]              */
      __IM  uint32_t            : 1;
      __IOM uint32_t ADC_CLK_EN : 1;            /*!< [13..13] ADC Clock Enable                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t AUC_C1_SEL : 2;            /*!< [17..16] AUC_C1 mux input select                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t AUC_C2_SEL : 2;            /*!< [21..20] AUC_C2 mux input select                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t AUC_C3_SEL : 4;            /*!< [27..24] AUC_C3 mux input select                                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t AUC_CLK_EN : 1;            /*!< [31..31] AudioCodec Clock Enable                                          */
    } ADC_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CLOCK;                   /*!< (@ 0x00000018) RTC Clock Control                                          */
    
    struct {
      __IOM uint32_t HSE_SEL    : 4;            /*!< [3..0] RTC HSE freq devider, [/1, /2, /4 .. /256]                         */
      __IOM uint32_t HSI_SEL    : 4;            /*!< [7..4] RTC HSI freq devider, [/1, /2, /4 .. /256]                         */
      __IOM uint32_t HSE_RTC_EN : 1;            /*!< [8..8] RTC HSE Clock enable                                               */
      __IOM uint32_t HSI_RTC_EN : 1;            /*!< [9..9] RTC HSI Clock enable                                               */
    } RTC_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t PER_CLOCK;                   /*!< (@ 0x0000001C) Peripherials Clock Control                                 */
    
    struct {
      __IOM uint32_t CAN1_CLK_EN : 1;           /*!< [0..0] CAN1 Clock Enable                                                  */
      __IOM uint32_t CAN2_CLK_EN : 1;           /*!< [1..1] CAN2 Clock Enable                                                  */
      __IOM uint32_t USB_CLK_EN : 1;            /*!< [2..2] USB Clock Enable                                                   */
      __IOM uint32_t EEPROM_CLK_EN : 1;         /*!< [3..3] EEPROM Controller Clock Enable                                     */
      __IOM uint32_t RST_CLK_EN : 1;            /*!< [4..4] RST Clock Enable                                                   */
      __IOM uint32_t DMA_CLK_EN : 1;            /*!< [5..5] DMA Clock Enable                                                   */
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [6..6] UART1 Clock Enable                                                 */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [7..7] UART2 Clock Enable                                                 */
      __IOM uint32_t SPI1_CLK_EN : 1;           /*!< [8..8] SPI1 Clock Enable                                                  */
      __IOM uint32_t MIL1_CLK_EN : 1;           /*!< [9..9] MIL1 Clock Enable                                                  */
      __IOM uint32_t MIL2_CLK_EN : 1;           /*!< [10..10] MIL2 Clock Enable                                                */
      __IOM uint32_t PWR_CLK_EN : 1;            /*!< [11..11] Power Clock Enable                                               */
      __IOM uint32_t WWDT_CLK_EN : 1;           /*!< [12..12] WWDT Clock Enable                                                */
      __IOM uint32_t IWDT_CLK_EN : 1;           /*!< [13..13] IWDT Clock Enable                                                */
      __IOM uint32_t TIMER1_CLK_EN : 1;         /*!< [14..14] TIMER1 Clock Enable                                              */
      __IOM uint32_t TIMER2_CLK_EN : 1;         /*!< [15..15] TIMER2 Clock Enable                                              */
      __IOM uint32_t TIMER3_CLK_EN : 1;         /*!< [16..16] TIMER3 Clock Enable                                              */
      __IOM uint32_t ADC_CLK_EN : 1;            /*!< [17..17] ADC Clock Enable                                                 */
      __IOM uint32_t DAC_CLK_EN : 1;            /*!< [18..18] DAC Clock Enable                                                 */
      __IOM uint32_t TIMER4_CLK_EN : 1;         /*!< [19..19] TIMER4 Clock Enable                                              */
      __IOM uint32_t SPI2_CLK_EN : 1;           /*!< [20..20] SPI2 Clock Enable                                                */
      __IOM uint32_t PORTA_CLK_EN : 1;          /*!< [21..21] GPIO PORT_A Clock Enable                                         */
      __IOM uint32_t PORTB_CLK_EN : 1;          /*!< [22..22] GPIO PORT_B Clock Enable                                         */
      __IOM uint32_t PORTC_CLK_EN : 1;          /*!< [23..23] GPIO PORT_C Clock Enable                                         */
      __IOM uint32_t PORTD_CLK_EN : 1;          /*!< [24..24] GPIO PORT_D Clock Enable                                         */
      __IOM uint32_t PORTE_CLK_EN : 1;          /*!< [25..25] GPIO PORT_E Clock Enable                                         */
      __IOM uint32_t ARINC_RX_CLK_EN : 1;       /*!< [26..26] ARINC_RX Clock Enable                                            */
      __IOM uint32_t BKP_CLK_EN : 1;            /*!< [27..27] Backup Clock Enable                                              */
      __IOM uint32_t ARINC_TX_CLK_EN : 1;       /*!< [28..28] ARINC_TX Clock Enable                                            */
      __IOM uint32_t PORTF_CLK_EN : 1;          /*!< [29..29] GPIO PORT_F Clock Enable                                         */
      __IOM uint32_t EBC_CLK_EN : 1;            /*!< [30..30] External Bus Clock Enable                                        */
      __IOM uint32_t SPI3_CLK_EN : 1;           /*!< [31..31] SPI3 Clock Enable                                                */
    } PER_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t CAN_CLOCK;                   /*!< (@ 0x00000020) CAN's Clock Control                                        */
    
    struct {
      __IOM uint32_t CAN1_BRG   : 3;            /*!< [2..0] HCLK divider to get CAN1_CLOCK, [/1, /2, /4 .. /128]               */
      __IM  uint32_t            : 5;
      __IOM uint32_t CAN2_BRG   : 3;            /*!< [10..8] HCLK freq divider to get CAN2_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 13;
      __IOM uint32_t CAN1_CLK_EN : 1;           /*!< [24..24] CAN1_CLOCK enable                                                */
      __IOM uint32_t CAN2_CLK_EN : 1;           /*!< [25..25] CAN2_CLOCK enable                                                */
    } CAN_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t TIM_CLOCK;                   /*!< (@ 0x00000024) Timer's Clock Control                                      */
    
    struct {
      __IOM uint32_t TIM1_BRG   : 3;            /*!< [2..0] HCLK freq divider to get TIM1_CLOCK, [/1, /2, /4 .. /128]          */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM2_BRG   : 3;            /*!< [10..8] HCLK freq divider to get TIM2_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM3_BRG   : 3;            /*!< [18..16] HCLK freq divider to get TIM3_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM1_CLK_EN : 1;           /*!< [24..24] TIM1_CLOCK enable                                                */
      __IOM uint32_t TIM2_CLK_EN : 1;           /*!< [25..25] TIM2_CLOCK enable                                                */
      __IOM uint32_t TIM3_CLK_EN : 1;           /*!< [26..26] TIM3_CLOCK enable                                                */
    } TIM_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t UART_CLOCK;                  /*!< (@ 0x00000028) UART's Clock Control                                       */
    
    struct {
      __IOM uint32_t UART1_BRG  : 3;            /*!< [2..0] HCLK freq divider to get UART1_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t UART2_BRG  : 3;            /*!< [10..8] HCLK freq divider to get UART2_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM4_BRG   : 3;            /*!< [18..16] HCLK freq divider to get TIM4_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [24..24] UART1_CLOCK enable                                               */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [25..25] UART2_CLOCK enable                                               */
      __IOM uint32_t TIM4_CLK_EN : 1;           /*!< [26..26] TIM4_CLOCK enable                                                */
    } UART_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t SSP_CLOCK;                   /*!< (@ 0x0000002C) SSP's Clock Control                                        */
    
    struct {
      __IOM uint32_t SSP1_BRG   : 3;            /*!< [2..0] HCLK freq divider to get SSP1_CLOCK, [/1, /2, /4 .. /128]          */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSP2_BRG   : 3;            /*!< [10..8] HCLK freq divider to get SSP2_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSP3_BRG   : 3;            /*!< [18..16] HCLK freq divider to get SSP3_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSP1_CLK_EN : 1;           /*!< [24..24] SSP1_CLOCK Enable                                                */
      __IOM uint32_t SSP2_CLK_EN : 1;           /*!< [25..25] SSP2_CLOCK Enable                                                */
      __IOM uint32_t SSP3_CLK_EN : 1;           /*!< [26..26] SSP3_CLOCK Enable                                                */
    } SSP_CLOCK_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ETH_CLOCK;                   /*!< (@ 0x00000034) Ethernet and MIL Clock Control                             */
    
    struct {
      __IOM uint32_t ETH_BRG    : 8;            /*!< [7..0] Always set to 0!                                                   */
      __IOM uint32_t MIL_BRG    : 3;            /*!< [10..8] HCLK freq divider to get MAN_CLOCK, [/1, /2, /4 .. /128]          */
      __IM  uint32_t            : 5;
      __IOM uint32_t PHY_BRG    : 3;            /*!< [18..16] HCLK freq divider to get PHY_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t ETH_CLK_EN : 1;            /*!< [24..24] Ethernet MAC Clock Enable                                        */
      __IOM uint32_t MIL_CLK_EN : 1;            /*!< [25..25] MIL-STD CLOCK Enable                                             */
      __IOM uint32_t SLEEP      : 1;            /*!< [26..26] Switch to Sleep mode                                             */
      __IOM uint32_t PHY_CLK_EN : 1;            /*!< [27..27] Ethernet PHY CLOCK Enable                                        */
      __IOM uint32_t PHY_CLK_SEL : 2;           /*!< [29..28] Ethernet PHY CLOCK Select                                        */
      __IOM uint32_t ETH2_CLK_EN : 1;           /*!< [30..30] Ethernet2 MAC Clock Enable                                       */
    } ETH_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t PER2_CLOCK;                  /*!< (@ 0x00000038) Peripherials Clock Control 2                               */
    
    struct {
      __IOM uint32_t AUC_CLK_EN : 1;            /*!< [0..0] AudioCodec Clock Enable                                            */
      __IOM uint32_t LED_CLK_EN : 1;            /*!< [1..1] LED Clock Enable                                                   */
      __IOM uint32_t KEY_CLK_EN : 1;            /*!< [2..2] Keyboard Clock Enable                                              */
      __IOM uint32_t PORTG_CLK_EN : 1;          /*!< [3..3] PORT_G Clock Enable                                                */
      __IOM uint32_t UART3_CLK_EN : 1;          /*!< [4..4] UART3 Clock Enable                                                 */
      __IOM uint32_t UART4_CLK_EN : 1;          /*!< [5..5] UART4 Clock Enable                                                 */
      __IOM uint32_t SSP4_CLK_EN : 1;           /*!< [6..6] SSP4 Clock Enable                                                  */
      __IOM uint32_t PORTH_CLK_EN : 1;          /*!< [7..7] PORT_H Clock Enable                                                */
      __IOM uint32_t PORTI_CLK_EN : 1;          /*!< [8..8] PORT_I Clock Enable                                                */
    } PER2_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t UART_SSP_CLOCK;              /*!< (@ 0x0000003C) UART and SSP Clock Control                                 */
    
    struct {
      __IOM uint32_t UART3_BRG  : 3;            /*!< [2..0] HCLK freq divider to get UART3_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t UART4_BRG  : 3;            /*!< [10..8] HCLK freq divider to get UART4_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSP3_BRG   : 3;            /*!< [18..16] HCLK freq divider to get SSP3_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t UART3_CLK_EN : 1;          /*!< [24..24] UART3_CLOCK enable                                               */
      __IOM uint32_t UART4_CLK_EN : 1;          /*!< [25..25] UART4_CLOCK enable                                               */
      __IOM uint32_t SSP3_CLK_EN : 1;           /*!< [26..26] SSP3_CLOCK enable                                                */
    } UART_SSP_CLOCK_b;
  } ;
} MDR_RST_CLOCK_Type;                           /*!< Size = 64 (0x40)                                                          */



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup and RTC Control (MDR_BKP)
  */

typedef struct {                                /*!< (@ 0x400D8000) MDR_BKP Structure                                          */
  __IOM uint32_t  REG_00;                       /*!< (@ 0x00000000) User backup registers                                      */
  __IOM uint32_t  REG_01;                       /*!< (@ 0x00000004) User backup registers                                      */
  __IOM uint32_t  REG_02;                       /*!< (@ 0x00000008) User backup registers                                      */
  __IOM uint32_t  REG_03;                       /*!< (@ 0x0000000C) User backup registers                                      */
  __IOM uint32_t  REG_04;                       /*!< (@ 0x00000010) User backup registers                                      */
  __IOM uint32_t  REG_05;                       /*!< (@ 0x00000014) User backup registers                                      */
  __IOM uint32_t  REG_06;                       /*!< (@ 0x00000018) User backup registers                                      */
  __IOM uint32_t  REG_07;                       /*!< (@ 0x0000001C) User backup registers                                      */
  __IOM uint32_t  REG_08;                       /*!< (@ 0x00000020) User backup registers                                      */
  __IOM uint32_t  REG_09;                       /*!< (@ 0x00000024) User backup registers                                      */
  __IOM uint32_t  REG_0A;                       /*!< (@ 0x00000028) User backup registers                                      */
  __IOM uint32_t  REG_0B;                       /*!< (@ 0x0000002C) User backup registers                                      */
  __IOM uint32_t  REG_0C;                       /*!< (@ 0x00000030) User backup registers                                      */
  __IOM uint32_t  REG_0D;                       /*!< (@ 0x00000034) User backup registers                                      */
  
  union {
    __IOM uint32_t REG_0E;                      /*!< (@ 0x00000038) REG_OE Control register                                    */
    
    struct {
      __IOM uint32_t LOW        : 3;            /*!< [2..0] DUcc Freq control                                                  */
      __IOM uint32_t SelectRI   : 3;            /*!< [5..3] DUcc extra I, should be equals to LOW field!                       */
      __IOM uint32_t StandAlone : 1;            /*!< [6..6] Switch to StandAlone mode                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t Trim_dDUcc : 3;            /*!< [10..8] Ducc adjust voltages                                              */
      __IOM uint32_t FPOR       : 1;            /*!< [11..11] Power Reset Flag                                                 */
      __IOM uint32_t Trim_DUcc  : 2;            /*!< [13..12] Select DUcc voltage                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t I_LimEn    : 1;            /*!< [15..15] Enable I 150mA protection                                        */
    } REG_0E_b;
  } ;
  
  union {
    __IOM uint32_t REG_0F;                      /*!< (@ 0x0000003C) REG_OF Control register                                    */
    
    struct {
      __IOM uint32_t LSE_ON     : 1;            /*!< [0..0] LSE generator enable                                               */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE generator                                                      */
      __IOM uint32_t RTC_SEL    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_EN     : 1;            /*!< [4..4] RTC enable                                                         */
      __IOM uint32_t RTC_CAL    : 8;            /*!< [12..5] RTC calibration                                                   */
      __IM  uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE frequency ready                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSI_ON     : 1;            /*!< [15..15] LSI generator enable                                             */
      __IOM uint32_t LSI_TRIM   : 5;            /*!< [20..16] LSI frequency adjust                                             */
      __IM  uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI frequency ready                                              */
      __IOM uint32_t HSI_ON     : 1;            /*!< [22..22] HSI generator enable                                             */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI frequency ready                                              */
      __IOM uint32_t HSI_TRIM   : 6;            /*!< [29..24] HSI frequency adjust                                             */
      __IOM uint32_t Standby    : 1;            /*!< [30..30] Standby sleep mode                                               */
      __IOM uint32_t RTC_RESET  : 1;            /*!< [31..31] Reset RTC bit                                                    */
    } REG_0F_b;
  } ;
  __IOM uint32_t  RTC_CNT;                      /*!< (@ 0x00000040) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV;                     /*!< (@ 0x00000044) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL;                     /*!< (@ 0x00000048) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM;                    /*!< (@ 0x0000004C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS;                      /*!< (@ 0x00000050) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
    } RTC_CS_b;
  } ;
} MDR_BKP_Type;                                 /*!< Size = 84 (0x54)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define MDR_RST_CLOCK_BASE          0x40020000UL
#define MDR_BKP_BASE                0x400D8000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define MDR_RST_CLOCK               ((MDR_RST_CLOCK_Type*)     MDR_RST_CLOCK_BASE)
#define MDR_BKP                     ((MDR_BKP_Type*)           MDR_BKP_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* =====================================================  CLOCK_STATUS  ====================================================== */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_USB_RDY_Pos (0UL)            /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_USB_RDY (Bit 0)       */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_USB_RDY_Msk (0x1UL)          /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_USB_RDY (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY_Pos (1UL)            /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_CPU_RDY (Bit 1)       */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY_Msk (0x2UL)          /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_CPU_RDY (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY_Pos (2UL)                /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE_RDY (Bit 2)           */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY_Msk (0x4UL)              /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE_RDY (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE2_RDY_Pos (3UL)               /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE2_RDY (Bit 3)          */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE2_RDY_Msk (0x8UL)             /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE2_RDY (Bitfield-Mask: 0x01) */
/* ======================================================  PLL_CONTROL  ====================================================== */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_ON_Pos (0UL)              /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_ON (Bit 0)         */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_ON_Msk (0x1UL)            /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_PLD_Pos (1UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_PLD (Bit 1)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_PLD_Msk (0x2UL)           /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_PLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON_Pos (2UL)              /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_ON (Bit 2)         */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON_Msk (0x4UL)            /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD_Pos (3UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_PLD (Bit 3)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD_Msk (0x8UL)           /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_PLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_MUL_Pos (4UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_MUL (Bit 4)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_MUL_Msk (0xf0UL)          /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_MUL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL_Pos (8UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_MUL (Bit 8)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL_Msk (0xf00UL)         /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_MUL (Bitfield-Mask: 0x0f) */
/* ======================================================  HS_CONTROL  ======================================================= */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_ON_Pos (0UL)                   /*!< MDR_RST_CLOCK HS_CONTROL: HSE_ON (Bit 0)              */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_ON_Msk (0x1UL)                 /*!< MDR_RST_CLOCK HS_CONTROL: HSE_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_BYP_Pos (1UL)                  /*!< MDR_RST_CLOCK HS_CONTROL: HSE_BYP (Bit 1)             */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_BYP_Msk (0x2UL)                /*!< MDR_RST_CLOCK HS_CONTROL: HSE_BYP (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HS_CONTROL_HSE2_ON_Pos (2UL)                  /*!< MDR_RST_CLOCK HS_CONTROL: HSE2_ON (Bit 2)             */
#define MDR_RST_CLOCK_HS_CONTROL_HSE2_ON_Msk (0x4UL)                /*!< MDR_RST_CLOCK HS_CONTROL: HSE2_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HS_CONTROL_HSE2_BYP_Pos (3UL)                 /*!< MDR_RST_CLOCK HS_CONTROL: HSE2_BYP (Bit 3)            */
#define MDR_RST_CLOCK_HS_CONTROL_HSE2_BYP_Msk (0x8UL)               /*!< MDR_RST_CLOCK HS_CONTROL: HSE2_BYP (Bitfield-Mask: 0x01) */
/* =======================================================  CPU_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL_Pos (2UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C2_SEL (Bit 2)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL_Msk (0x4UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C2_SEL (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C3_SEL (Bit 4)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL_Msk (0xf0UL)             /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL_Pos (8UL)                  /*!< MDR_RST_CLOCK CPU_CLOCK: HCLK_SEL (Bit 8)             */
#define MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL_Msk (0x300UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: HCLK_SEL (Bitfield-Mask: 0x03) */
/* =======================================================  USB_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK USB_CLOCK: USB_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK USB_CLOCK: USB_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C2_SEL_Pos (2UL)                /*!< MDR_RST_CLOCK USB_CLOCK: USB_C2_SEL (Bit 2)           */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C2_SEL_Msk (0x4UL)              /*!< MDR_RST_CLOCK USB_CLOCK: USB_C2_SEL (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C3_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK USB_CLOCK: USB_C3_SEL (Bit 4)           */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C3_SEL_Msk (0x10UL)             /*!< MDR_RST_CLOCK USB_CLOCK: USB_C3_SEL (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_USB_CLOCK_USB_EN_Pos (8UL)                    /*!< MDR_RST_CLOCK USB_CLOCK: USB_EN (Bit 8)               */
#define MDR_RST_CLOCK_USB_CLOCK_USB_EN_Msk (0x100UL)                /*!< MDR_RST_CLOCK USB_CLOCK: USB_EN (Bitfield-Mask: 0x01) */
/* =======================================================  ADC_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C2_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C2_SEL (Bit 4)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C2_SEL_Msk (0x30UL)             /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C2_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Pos (8UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C3_SEL (Bit 8)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Msk (0xf00UL)            /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN_Pos (13UL)               /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_CLK_EN (Bit 13)          */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN_Msk (0x2000UL)           /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ADC_CLOCK_AUC_C1_SEL_Pos (16UL)               /*!< MDR_RST_CLOCK ADC_CLOCK: AUC_C1_SEL (Bit 16)          */
#define MDR_RST_CLOCK_ADC_CLOCK_AUC_C1_SEL_Msk (0x30000UL)          /*!< MDR_RST_CLOCK ADC_CLOCK: AUC_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_AUC_C2_SEL_Pos (20UL)               /*!< MDR_RST_CLOCK ADC_CLOCK: AUC_C2_SEL (Bit 20)          */
#define MDR_RST_CLOCK_ADC_CLOCK_AUC_C2_SEL_Msk (0x300000UL)         /*!< MDR_RST_CLOCK ADC_CLOCK: AUC_C2_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_Pos (24UL)               /*!< MDR_RST_CLOCK ADC_CLOCK: AUC_C3_SEL (Bit 24)          */
#define MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_Msk (0xf000000UL)        /*!< MDR_RST_CLOCK ADC_CLOCK: AUC_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_ADC_CLOCK_AUC_CLK_EN_Pos (31UL)               /*!< MDR_RST_CLOCK ADC_CLOCK: AUC_CLK_EN (Bit 31)          */
#define MDR_RST_CLOCK_ADC_CLOCK_AUC_CLK_EN_Msk (0x80000000UL)       /*!< MDR_RST_CLOCK ADC_CLOCK: AUC_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  RTC_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Pos (0UL)                   /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_SEL (Bit 0)              */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Msk (0xfUL)                 /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Pos (4UL)                   /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_SEL (Bit 4)              */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Msk (0xf0UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN_Pos (8UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_RTC_EN (Bit 8)           */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN_Msk (0x100UL)            /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_RTC_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN_Pos (9UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_RTC_EN (Bit 9)           */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN_Msk (0x200UL)            /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_RTC_EN (Bitfield-Mask: 0x01) */
/* =======================================================  PER_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_PER_CLOCK_CAN1_CLK_EN_Pos (0UL)               /*!< MDR_RST_CLOCK PER_CLOCK: CAN1_CLK_EN (Bit 0)          */
#define MDR_RST_CLOCK_PER_CLOCK_CAN1_CLK_EN_Msk (0x1UL)             /*!< MDR_RST_CLOCK PER_CLOCK: CAN1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_Pos (1UL)               /*!< MDR_RST_CLOCK PER_CLOCK: CAN2_CLK_EN (Bit 1)          */
#define MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_Msk (0x2UL)             /*!< MDR_RST_CLOCK PER_CLOCK: CAN2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_USB_CLK_EN_Pos (2UL)                /*!< MDR_RST_CLOCK PER_CLOCK: USB_CLK_EN (Bit 2)           */
#define MDR_RST_CLOCK_PER_CLOCK_USB_CLK_EN_Msk (0x4UL)              /*!< MDR_RST_CLOCK PER_CLOCK: USB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_Pos (3UL)             /*!< MDR_RST_CLOCK PER_CLOCK: EEPROM_CLK_EN (Bit 3)        */
#define MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_Msk (0x8UL)           /*!< MDR_RST_CLOCK PER_CLOCK: EEPROM_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_Pos (4UL)                /*!< MDR_RST_CLOCK PER_CLOCK: RST_CLK_EN (Bit 4)           */
#define MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_Msk (0x10UL)             /*!< MDR_RST_CLOCK PER_CLOCK: RST_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_Pos (5UL)                /*!< MDR_RST_CLOCK PER_CLOCK: DMA_CLK_EN (Bit 5)           */
#define MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_Msk (0x20UL)             /*!< MDR_RST_CLOCK PER_CLOCK: DMA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_Pos (6UL)              /*!< MDR_RST_CLOCK PER_CLOCK: UART1_CLK_EN (Bit 6)         */
#define MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_Msk (0x40UL)           /*!< MDR_RST_CLOCK PER_CLOCK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_Pos (7UL)              /*!< MDR_RST_CLOCK PER_CLOCK: UART2_CLK_EN (Bit 7)         */
#define MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_Msk (0x80UL)           /*!< MDR_RST_CLOCK PER_CLOCK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_Pos (8UL)               /*!< MDR_RST_CLOCK PER_CLOCK: SPI1_CLK_EN (Bit 8)          */
#define MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_Msk (0x100UL)           /*!< MDR_RST_CLOCK PER_CLOCK: SPI1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_Pos (9UL)               /*!< MDR_RST_CLOCK PER_CLOCK: MIL1_CLK_EN (Bit 9)          */
#define MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_Msk (0x200UL)           /*!< MDR_RST_CLOCK PER_CLOCK: MIL1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_Pos (10UL)              /*!< MDR_RST_CLOCK PER_CLOCK: MIL2_CLK_EN (Bit 10)         */
#define MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_Msk (0x400UL)           /*!< MDR_RST_CLOCK PER_CLOCK: MIL2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_Pos (11UL)               /*!< MDR_RST_CLOCK PER_CLOCK: PWR_CLK_EN (Bit 11)          */
#define MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_Msk (0x800UL)            /*!< MDR_RST_CLOCK PER_CLOCK: PWR_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_Pos (12UL)              /*!< MDR_RST_CLOCK PER_CLOCK: WWDT_CLK_EN (Bit 12)         */
#define MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_Msk (0x1000UL)          /*!< MDR_RST_CLOCK PER_CLOCK: WWDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_Pos (13UL)              /*!< MDR_RST_CLOCK PER_CLOCK: IWDT_CLK_EN (Bit 13)         */
#define MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_Msk (0x2000UL)          /*!< MDR_RST_CLOCK PER_CLOCK: IWDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_Pos (14UL)            /*!< MDR_RST_CLOCK PER_CLOCK: TIMER1_CLK_EN (Bit 14)       */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_Msk (0x4000UL)        /*!< MDR_RST_CLOCK PER_CLOCK: TIMER1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_Pos (15UL)            /*!< MDR_RST_CLOCK PER_CLOCK: TIMER2_CLK_EN (Bit 15)       */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_Msk (0x8000UL)        /*!< MDR_RST_CLOCK PER_CLOCK: TIMER2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_Pos (16UL)            /*!< MDR_RST_CLOCK PER_CLOCK: TIMER3_CLK_EN (Bit 16)       */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_Msk (0x10000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: TIMER3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_Pos (17UL)               /*!< MDR_RST_CLOCK PER_CLOCK: ADC_CLK_EN (Bit 17)          */
#define MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_Msk (0x20000UL)          /*!< MDR_RST_CLOCK PER_CLOCK: ADC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_Pos (18UL)               /*!< MDR_RST_CLOCK PER_CLOCK: DAC_CLK_EN (Bit 18)          */
#define MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_Msk (0x40000UL)          /*!< MDR_RST_CLOCK PER_CLOCK: DAC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_Pos (19UL)            /*!< MDR_RST_CLOCK PER_CLOCK: TIMER4_CLK_EN (Bit 19)       */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_Msk (0x80000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: TIMER4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_Pos (20UL)              /*!< MDR_RST_CLOCK PER_CLOCK: SPI2_CLK_EN (Bit 20)         */
#define MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_Msk (0x100000UL)        /*!< MDR_RST_CLOCK PER_CLOCK: SPI2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_Pos (21UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTA_CLK_EN (Bit 21)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_Msk (0x200000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: PORTA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_Pos (22UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTB_CLK_EN (Bit 22)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_Msk (0x400000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: PORTB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_Pos (23UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTC_CLK_EN (Bit 23)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_Msk (0x800000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: PORTC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_Pos (24UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTD_CLK_EN (Bit 24)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK PER_CLOCK: PORTD_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_Pos (25UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTE_CLK_EN (Bit 25)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK PER_CLOCK: PORTE_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_Pos (26UL)          /*!< MDR_RST_CLOCK PER_CLOCK: ARINC_RX_CLK_EN (Bit 26)     */
#define MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_Msk (0x4000000UL)   /*!< MDR_RST_CLOCK PER_CLOCK: ARINC_RX_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_Pos (27UL)               /*!< MDR_RST_CLOCK PER_CLOCK: BKP_CLK_EN (Bit 27)          */
#define MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_Msk (0x8000000UL)        /*!< MDR_RST_CLOCK PER_CLOCK: BKP_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_Pos (28UL)          /*!< MDR_RST_CLOCK PER_CLOCK: ARINC_TX_CLK_EN (Bit 28)     */
#define MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_Msk (0x10000000UL)  /*!< MDR_RST_CLOCK PER_CLOCK: ARINC_TX_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_Pos (29UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTF_CLK_EN (Bit 29)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_Msk (0x20000000UL)     /*!< MDR_RST_CLOCK PER_CLOCK: PORTF_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_Pos (30UL)               /*!< MDR_RST_CLOCK PER_CLOCK: EBC_CLK_EN (Bit 30)          */
#define MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_Msk (0x40000000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: EBC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_Pos (31UL)              /*!< MDR_RST_CLOCK PER_CLOCK: SPI3_CLK_EN (Bit 31)         */
#define MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_Msk (0x80000000UL)      /*!< MDR_RST_CLOCK PER_CLOCK: SPI3_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  CAN_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK CAN_CLOCK: CAN1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK CAN_CLOCK: CAN1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_Pos (8UL)                  /*!< MDR_RST_CLOCK CAN_CLOCK: CAN2_BRG (Bit 8)             */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_Msk (0x700UL)              /*!< MDR_RST_CLOCK CAN_CLOCK: CAN2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK CAN_CLOCK: CAN1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK CAN_CLOCK: CAN1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN2_CLK_EN_Pos (25UL)              /*!< MDR_RST_CLOCK CAN_CLOCK: CAN2_CLK_EN (Bit 25)         */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN2_CLK_EN_Msk (0x2000000UL)       /*!< MDR_RST_CLOCK CAN_CLOCK: CAN2_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  TIM_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Pos (8UL)                  /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_BRG (Bit 8)             */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Msk (0x700UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_Pos (16UL)                 /*!< MDR_RST_CLOCK TIM_CLOCK: TIM3_BRG (Bit 16)            */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_Msk (0x70000UL)            /*!< MDR_RST_CLOCK TIM_CLOCK: TIM3_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN_Pos (25UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_CLK_EN (Bit 25)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN_Msk (0x2000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM3_CLK_EN_Pos (26UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM3_CLK_EN (Bit 26)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM3_CLK_EN_Msk (0x4000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM3_CLK_EN (Bitfield-Mask: 0x01) */
/* ======================================================  UART_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Pos (0UL)                /*!< MDR_RST_CLOCK UART_CLOCK: UART1_BRG (Bit 0)           */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Msk (0x7UL)              /*!< MDR_RST_CLOCK UART_CLOCK: UART1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Pos (8UL)                /*!< MDR_RST_CLOCK UART_CLOCK: UART2_BRG (Bit 8)           */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Msk (0x700UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_Pos (16UL)                /*!< MDR_RST_CLOCK UART_CLOCK: TIM4_BRG (Bit 16)           */
#define MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_Msk (0x70000UL)           /*!< MDR_RST_CLOCK UART_CLOCK: TIM4_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN_Pos (24UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART1_CLK_EN (Bit 24)       */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK UART_CLOCK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN_Pos (25UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART2_CLK_EN (Bit 25)       */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK UART_CLOCK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART_CLOCK_TIM4_CLK_EN_Pos (26UL)             /*!< MDR_RST_CLOCK UART_CLOCK: TIM4_CLK_EN (Bit 26)        */
#define MDR_RST_CLOCK_UART_CLOCK_TIM4_CLK_EN_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK UART_CLOCK: TIM4_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  SSP_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_Pos (8UL)                  /*!< MDR_RST_CLOCK SSP_CLOCK: SSP2_BRG (Bit 8)             */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_Msk (0x700UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_Pos (16UL)                 /*!< MDR_RST_CLOCK SSP_CLOCK: SSP3_BRG (Bit 16)            */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_Msk (0x70000UL)            /*!< MDR_RST_CLOCK SSP_CLOCK: SSP3_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP2_CLK_EN_Pos (25UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP2_CLK_EN (Bit 25)         */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP2_CLK_EN_Msk (0x2000000UL)       /*!< MDR_RST_CLOCK SSP_CLOCK: SSP2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP3_CLK_EN_Pos (26UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP3_CLK_EN (Bit 26)         */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP3_CLK_EN_Msk (0x4000000UL)       /*!< MDR_RST_CLOCK SSP_CLOCK: SSP3_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  ETH_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH_BRG_Pos (0UL)                   /*!< MDR_RST_CLOCK ETH_CLOCK: ETH_BRG (Bit 0)              */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH_BRG_Msk (0xffUL)                /*!< MDR_RST_CLOCK ETH_CLOCK: ETH_BRG (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_Pos (8UL)                   /*!< MDR_RST_CLOCK ETH_CLOCK: MIL_BRG (Bit 8)              */
#define MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_Msk (0x700UL)               /*!< MDR_RST_CLOCK ETH_CLOCK: MIL_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_Pos (16UL)                  /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_BRG (Bit 16)             */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_Msk (0x70000UL)             /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH_CLK_EN_Pos (24UL)               /*!< MDR_RST_CLOCK ETH_CLOCK: ETH_CLK_EN (Bit 24)          */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH_CLK_EN_Msk (0x1000000UL)        /*!< MDR_RST_CLOCK ETH_CLOCK: ETH_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ETH_CLOCK_MIL_CLK_EN_Pos (25UL)               /*!< MDR_RST_CLOCK ETH_CLOCK: MIL_CLK_EN (Bit 25)          */
#define MDR_RST_CLOCK_ETH_CLOCK_MIL_CLK_EN_Msk (0x2000000UL)        /*!< MDR_RST_CLOCK ETH_CLOCK: MIL_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ETH_CLOCK_SLEEP_Pos (26UL)                    /*!< MDR_RST_CLOCK ETH_CLOCK: SLEEP (Bit 26)               */
#define MDR_RST_CLOCK_ETH_CLOCK_SLEEP_Msk (0x4000000UL)             /*!< MDR_RST_CLOCK ETH_CLOCK: SLEEP (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_EN_Pos (27UL)               /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_CLK_EN (Bit 27)          */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_EN_Msk (0x8000000UL)        /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_SEL_Pos (28UL)              /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_CLK_SEL (Bit 28)         */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_SEL_Msk (0x30000000UL)      /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_CLK_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH2_CLK_EN_Pos (30UL)              /*!< MDR_RST_CLOCK ETH_CLOCK: ETH2_CLK_EN (Bit 30)         */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH2_CLK_EN_Msk (0x40000000UL)      /*!< MDR_RST_CLOCK ETH_CLOCK: ETH2_CLK_EN (Bitfield-Mask: 0x01) */
/* ======================================================  PER2_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_PER2_CLOCK_AUC_CLK_EN_Pos (0UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: AUC_CLK_EN (Bit 0)          */
#define MDR_RST_CLOCK_PER2_CLOCK_AUC_CLK_EN_Msk (0x1UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: AUC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_LED_CLK_EN_Pos (1UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: LED_CLK_EN (Bit 1)          */
#define MDR_RST_CLOCK_PER2_CLOCK_LED_CLK_EN_Msk (0x2UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: LED_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_KEY_CLK_EN_Pos (2UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: KEY_CLK_EN (Bit 2)          */
#define MDR_RST_CLOCK_PER2_CLOCK_KEY_CLK_EN_Msk (0x4UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: KEY_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTG_CLK_EN_Pos (3UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: PORTG_CLK_EN (Bit 3)        */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTG_CLK_EN_Msk (0x8UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: PORTG_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_UART3_CLK_EN_Pos (4UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: UART3_CLK_EN (Bit 4)        */
#define MDR_RST_CLOCK_PER2_CLOCK_UART3_CLK_EN_Msk (0x10UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: UART3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_UART4_CLK_EN_Pos (5UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: UART4_CLK_EN (Bit 5)        */
#define MDR_RST_CLOCK_PER2_CLOCK_UART4_CLK_EN_Msk (0x20UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: UART4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_SSP4_CLK_EN_Pos (6UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: SSP4_CLK_EN (Bit 6)         */
#define MDR_RST_CLOCK_PER2_CLOCK_SSP4_CLK_EN_Msk (0x40UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: SSP4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTH_CLK_EN_Pos (7UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: PORTH_CLK_EN (Bit 7)        */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTH_CLK_EN_Msk (0x80UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: PORTH_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTI_CLK_EN_Pos (8UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: PORTI_CLK_EN (Bit 8)        */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTI_CLK_EN_Msk (0x100UL)         /*!< MDR_RST_CLOCK PER2_CLOCK: PORTI_CLK_EN (Bitfield-Mask: 0x01) */
/* ====================================================  UART_SSP_CLOCK  ===================================================== */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_Pos (0UL)            /*!< MDR_RST_CLOCK UART_SSP_CLOCK: UART3_BRG (Bit 0)       */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_Msk (0x7UL)          /*!< MDR_RST_CLOCK UART_SSP_CLOCK: UART3_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_Pos (8UL)            /*!< MDR_RST_CLOCK UART_SSP_CLOCK: UART4_BRG (Bit 8)       */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_Msk (0x700UL)        /*!< MDR_RST_CLOCK UART_SSP_CLOCK: UART4_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_Pos (16UL)            /*!< MDR_RST_CLOCK UART_SSP_CLOCK: SSP3_BRG (Bit 16)       */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_Msk (0x70000UL)       /*!< MDR_RST_CLOCK UART_SSP_CLOCK: SSP3_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_CLK_EN_Pos (24UL)        /*!< MDR_RST_CLOCK UART_SSP_CLOCK: UART3_CLK_EN (Bit 24)   */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_CLK_EN_Msk (0x1000000UL) /*!< MDR_RST_CLOCK UART_SSP_CLOCK: UART3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_CLK_EN_Pos (25UL)        /*!< MDR_RST_CLOCK UART_SSP_CLOCK: UART4_CLK_EN (Bit 25)   */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_CLK_EN_Msk (0x2000000UL) /*!< MDR_RST_CLOCK UART_SSP_CLOCK: UART4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_CLK_EN_Pos (26UL)         /*!< MDR_RST_CLOCK UART_SSP_CLOCK: SSP3_CLK_EN (Bit 26)    */
#define MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_CLK_EN_Msk (0x4000000UL)  /*!< MDR_RST_CLOCK UART_SSP_CLOCK: SSP3_CLK_EN (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  REG_0  ========================================================= */
/* ========================================================  REG_0E  ========================================================= */
#define MDR_BKP_REG_0E_LOW_Pos            (0UL)                     /*!< MDR_BKP REG_0E: LOW (Bit 0)                           */
#define MDR_BKP_REG_0E_LOW_Msk            (0x7UL)                   /*!< MDR_BKP REG_0E: LOW (Bitfield-Mask: 0x07)             */
#define MDR_BKP_REG_0E_SelectRI_Pos       (3UL)                     /*!< MDR_BKP REG_0E: SelectRI (Bit 3)                      */
#define MDR_BKP_REG_0E_SelectRI_Msk       (0x38UL)                  /*!< MDR_BKP REG_0E: SelectRI (Bitfield-Mask: 0x07)        */
#define MDR_BKP_REG_0E_StandAlone_Pos     (6UL)                     /*!< MDR_BKP REG_0E: StandAlone (Bit 6)                    */
#define MDR_BKP_REG_0E_StandAlone_Msk     (0x40UL)                  /*!< MDR_BKP REG_0E: StandAlone (Bitfield-Mask: 0x01)      */
#define MDR_BKP_REG_0E_Trim_dDUcc_Pos     (8UL)                     /*!< MDR_BKP REG_0E: Trim_dDUcc (Bit 8)                    */
#define MDR_BKP_REG_0E_Trim_dDUcc_Msk     (0x700UL)                 /*!< MDR_BKP REG_0E: Trim_dDUcc (Bitfield-Mask: 0x07)      */
#define MDR_BKP_REG_0E_FPOR_Pos           (11UL)                    /*!< MDR_BKP REG_0E: FPOR (Bit 11)                         */
#define MDR_BKP_REG_0E_FPOR_Msk           (0x800UL)                 /*!< MDR_BKP REG_0E: FPOR (Bitfield-Mask: 0x01)            */
#define MDR_BKP_REG_0E_Trim_DUcc_Pos      (12UL)                    /*!< MDR_BKP REG_0E: Trim_DUcc (Bit 12)                    */
#define MDR_BKP_REG_0E_Trim_DUcc_Msk      (0x3000UL)                /*!< MDR_BKP REG_0E: Trim_DUcc (Bitfield-Mask: 0x03)       */
#define MDR_BKP_REG_0E_I_LimEn_Pos        (15UL)                    /*!< MDR_BKP REG_0E: I_LimEn (Bit 15)                      */
#define MDR_BKP_REG_0E_I_LimEn_Msk        (0x8000UL)                /*!< MDR_BKP REG_0E: I_LimEn (Bitfield-Mask: 0x01)         */
/* ========================================================  REG_0F  ========================================================= */
#define MDR_BKP_REG_0F_LSE_ON_Pos         (0UL)                     /*!< MDR_BKP REG_0F: LSE_ON (Bit 0)                        */
#define MDR_BKP_REG_0F_LSE_ON_Msk         (0x1UL)                   /*!< MDR_BKP REG_0F: LSE_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_LSE_BYP_Pos        (1UL)                     /*!< MDR_BKP REG_0F: LSE_BYP (Bit 1)                       */
#define MDR_BKP_REG_0F_LSE_BYP_Msk        (0x2UL)                   /*!< MDR_BKP REG_0F: LSE_BYP (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_RTC_SEL_Pos        (2UL)                     /*!< MDR_BKP REG_0F: RTC_SEL (Bit 2)                       */
#define MDR_BKP_REG_0F_RTC_SEL_Msk        (0xcUL)                   /*!< MDR_BKP REG_0F: RTC_SEL (Bitfield-Mask: 0x03)         */
#define MDR_BKP_REG_0F_RTC_EN_Pos         (4UL)                     /*!< MDR_BKP REG_0F: RTC_EN (Bit 4)                        */
#define MDR_BKP_REG_0F_RTC_EN_Msk         (0x10UL)                  /*!< MDR_BKP REG_0F: RTC_EN (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_RTC_CAL_Pos        (5UL)                     /*!< MDR_BKP REG_0F: RTC_CAL (Bit 5)                       */
#define MDR_BKP_REG_0F_RTC_CAL_Msk        (0x1fe0UL)                /*!< MDR_BKP REG_0F: RTC_CAL (Bitfield-Mask: 0xff)         */
#define MDR_BKP_REG_0F_LSE_RDY_Pos        (13UL)                    /*!< MDR_BKP REG_0F: LSE_RDY (Bit 13)                      */
#define MDR_BKP_REG_0F_LSE_RDY_Msk        (0x2000UL)                /*!< MDR_BKP REG_0F: LSE_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_LSI_ON_Pos         (15UL)                    /*!< MDR_BKP REG_0F: LSI_ON (Bit 15)                       */
#define MDR_BKP_REG_0F_LSI_ON_Msk         (0x8000UL)                /*!< MDR_BKP REG_0F: LSI_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_LSI_TRIM_Pos       (16UL)                    /*!< MDR_BKP REG_0F: LSI_TRIM (Bit 16)                     */
#define MDR_BKP_REG_0F_LSI_TRIM_Msk       (0x1f0000UL)              /*!< MDR_BKP REG_0F: LSI_TRIM (Bitfield-Mask: 0x1f)        */
#define MDR_BKP_REG_0F_LSI_RDY_Pos        (21UL)                    /*!< MDR_BKP REG_0F: LSI_RDY (Bit 21)                      */
#define MDR_BKP_REG_0F_LSI_RDY_Msk        (0x200000UL)              /*!< MDR_BKP REG_0F: LSI_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_HSI_ON_Pos         (22UL)                    /*!< MDR_BKP REG_0F: HSI_ON (Bit 22)                       */
#define MDR_BKP_REG_0F_HSI_ON_Msk         (0x400000UL)              /*!< MDR_BKP REG_0F: HSI_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_HSI_RDY_Pos        (23UL)                    /*!< MDR_BKP REG_0F: HSI_RDY (Bit 23)                      */
#define MDR_BKP_REG_0F_HSI_RDY_Msk        (0x800000UL)              /*!< MDR_BKP REG_0F: HSI_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_HSI_TRIM_Pos       (24UL)                    /*!< MDR_BKP REG_0F: HSI_TRIM (Bit 24)                     */
#define MDR_BKP_REG_0F_HSI_TRIM_Msk       (0x3f000000UL)            /*!< MDR_BKP REG_0F: HSI_TRIM (Bitfield-Mask: 0x3f)        */
#define MDR_BKP_REG_0F_Standby_Pos        (30UL)                    /*!< MDR_BKP REG_0F: Standby (Bit 30)                      */
#define MDR_BKP_REG_0F_Standby_Msk        (0x40000000UL)            /*!< MDR_BKP REG_0F: Standby (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_RTC_RESET_Pos      (31UL)                    /*!< MDR_BKP REG_0F: RTC_RESET (Bit 31)                    */
#define MDR_BKP_REG_0F_RTC_RESET_Msk      (0x80000000UL)            /*!< MDR_BKP REG_0F: RTC_RESET (Bitfield-Mask: 0x01)       */
/* ========================================================  RTC_CNT  ======================================================== */
/* ========================================================  RTC_DIV  ======================================================== */
#define MDR_BKP_RTC_DIV_Value_Pos         (0UL)                     /*!< MDR_BKP RTC_DIV: Value (Bit 0)                        */
#define MDR_BKP_RTC_DIV_Value_Msk         (0xfffffUL)               /*!< MDR_BKP RTC_DIV: Value (Bitfield-Mask: 0xfffff)       */
/* ========================================================  RTC_PRL  ======================================================== */
#define MDR_BKP_RTC_PRL_Value_Pos         (0UL)                     /*!< MDR_BKP RTC_PRL: Value (Bit 0)                        */
#define MDR_BKP_RTC_PRL_Value_Msk         (0xfffffUL)               /*!< MDR_BKP RTC_PRL: Value (Bitfield-Mask: 0xfffff)       */
/* =======================================================  RTC_ALRM  ======================================================== */
#define MDR_BKP_RTC_ALRM_Value_Pos        (0UL)                     /*!< MDR_BKP RTC_ALRM: Value (Bit 0)                       */
#define MDR_BKP_RTC_ALRM_Value_Msk        (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM: Value (Bitfield-Mask: 0xffffffff)   */
/* ========================================================  RTC_CS  ========================================================= */
#define MDR_BKP_RTC_CS_OWF_Pos            (0UL)                     /*!< MDR_BKP RTC_CS: OWF (Bit 0)                           */
#define MDR_BKP_RTC_CS_OWF_Msk            (0x1UL)                   /*!< MDR_BKP RTC_CS: OWF (Bitfield-Mask: 0x01)             */
#define MDR_BKP_RTC_CS_SECF_Pos           (1UL)                     /*!< MDR_BKP RTC_CS: SECF (Bit 1)                          */
#define MDR_BKP_RTC_CS_SECF_Msk           (0x2UL)                   /*!< MDR_BKP RTC_CS: SECF (Bitfield-Mask: 0x01)            */
#define MDR_BKP_RTC_CS_ALRF_Pos           (2UL)                     /*!< MDR_BKP RTC_CS: ALRF (Bit 2)                          */
#define MDR_BKP_RTC_CS_ALRF_Msk           (0x4UL)                   /*!< MDR_BKP RTC_CS: ALRF (Bitfield-Mask: 0x01)            */
#define MDR_BKP_RTC_CS_OWF_IE_Pos         (3UL)                     /*!< MDR_BKP RTC_CS: OWF_IE (Bit 3)                        */
#define MDR_BKP_RTC_CS_OWF_IE_Msk         (0x8UL)                   /*!< MDR_BKP RTC_CS: OWF_IE (Bitfield-Mask: 0x01)          */
#define MDR_BKP_RTC_CS_SECF_IE_Pos        (4UL)                     /*!< MDR_BKP RTC_CS: SECF_IE (Bit 4)                       */
#define MDR_BKP_RTC_CS_SECF_IE_Msk        (0x10UL)                  /*!< MDR_BKP RTC_CS: SECF_IE (Bitfield-Mask: 0x01)         */
#define MDR_BKP_RTC_CS_ALRF_IE_Pos        (5UL)                     /*!< MDR_BKP RTC_CS: ALRF_IE (Bit 5)                       */
#define MDR_BKP_RTC_CS_ALRF_IE_Msk        (0x20UL)                  /*!< MDR_BKP RTC_CS: ALRF_IE (Bitfield-Mask: 0x01)         */
#define MDR_BKP_RTC_CS_WEC_Pos            (6UL)                     /*!< MDR_BKP RTC_CS: WEC (Bit 6)                           */
#define MDR_BKP_RTC_CS_WEC_Msk            (0x40UL)                  /*!< MDR_BKP RTC_CS: WEC (Bitfield-Mask: 0x01)             */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* =====================================================  CLOCK_STATUS  ====================================================== */
/* =====================================  MDR_RST_CLOCK CLOCK_STATUS PLL_USB_RDY [0..0]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_PLL_USB_RDY                                    */
  MDR_RST__STATUS__PLL_USB_RDY__NotReady = 0,   /*!< NotReady : PLL not ready                                                  */
  MDR_RST__STATUS__PLL_USB_RDY__Ready  = 1,     /*!< Ready : PLL ready                                                         */
} MDR_RST__STATUS__PLL_USB_RDY__Enum;

/* =====================================  MDR_RST_CLOCK CLOCK_STATUS PLL_CPU_RDY [1..1]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY                                    */
  MDR_RST__STATUS__PLL_CPU_RDY__NotReady = 0,   /*!< NotReady : PLL not ready                                                  */
  MDR_RST__STATUS__PLL_CPU_RDY__Ready  = 1,     /*!< Ready : PLL ready                                                         */
} MDR_RST__STATUS__PLL_CPU_RDY__Enum;

/* =======================================  MDR_RST_CLOCK CLOCK_STATUS HSE_RDY [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY                                        */
  MDR_RST__STATUS__HSE_RDY__NotReady   = 0,     /*!< NotReady : HSE not ready                                                  */
  MDR_RST__STATUS__HSE_RDY__Ready      = 1,     /*!< Ready : HSE ready                                                         */
} MDR_RST__STATUS__HSE_RDY__Enum;

/* ======================================  MDR_RST_CLOCK CLOCK_STATUS HSE2_RDY [3..3]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_HSE2_RDY                                       */
  MDR_RST__STATUS__HSE2_RDY__NotReady  = 0,     /*!< NotReady : HSE2 not ready                                                 */
  MDR_RST__STATUS__HSE2_RDY__Ready     = 1,     /*!< Ready : HSE2 ready                                                        */
} MDR_RST__STATUS__HSE2_RDY__Enum;

/* ======================================================  PLL_CONTROL  ====================================================== */
/* ======================================  MDR_RST_CLOCK PLL_CONTROL PLL_USB_ON [0..0]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_ON                                      */
  MDR_RST__PLL__USB_EN__Off            = 0,     /*!< Off : PLL Off                                                             */
  MDR_RST__PLL__USB_EN__On             = 1,     /*!< On : PLL On                                                               */
} MDR_RST__PLL__USB_EN__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_USB_PLD [1..1]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_PLD                                     */
  MDR_RST__PLL__USB_PLD__RestartOff    = 0,     /*!< RestartOff : PLL restart inactive                                         */
  MDR_RST__PLL__USB_PLD__DoRestart     = 1,     /*!< DoRestart : PLL Do Restart                                                */
} MDR_RST__PLL__USB_PLD__Enum;

/* ======================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_ON [2..2]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON                                      */
  MDR_RST__PLL__CPU_EN__Off            = 0,     /*!< Off : PLL Off                                                             */
  MDR_RST__PLL__CPU_EN__On             = 1,     /*!< On : PLL On                                                               */
} MDR_RST__PLL__CPU_EN__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_PLD [3..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD                                     */
  MDR_RST__PLL__CPU_PLD__RestartOff    = 0,     /*!< RestartOff : PLL restart inactive                                         */
  MDR_RST__PLL__CPU_PLD__DoRestart     = 1,     /*!< DoRestart : PLL Do Restart                                                */
} MDR_RST__PLL__CPU_PLD__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_USB_MUL [4..7]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_MUL                                     */
  MDR_RST__PLL__USB_MUL__x1            = 0,     /*!< x1 : PLL mul x1                                                           */
  MDR_RST__PLL__USB_MUL__x2            = 1,     /*!< x2 : PLL mul x2                                                           */
  MDR_RST__PLL__USB_MUL__x3            = 2,     /*!< x3 : PLL mul x3                                                           */
  MDR_RST__PLL__USB_MUL__x4            = 3,     /*!< x4 : PLL mul x4                                                           */
  MDR_RST__PLL__USB_MUL__x5            = 4,     /*!< x5 : PLL mul x5                                                           */
  MDR_RST__PLL__USB_MUL__x6            = 5,     /*!< x6 : PLL mul x6                                                           */
  MDR_RST__PLL__USB_MUL__x7            = 6,     /*!< x7 : PLL mul x7                                                           */
  MDR_RST__PLL__USB_MUL__x8            = 7,     /*!< x8 : PLL mul x8                                                           */
  MDR_RST__PLL__USB_MUL__x9            = 8,     /*!< x9 : PLL mul x9                                                           */
  MDR_RST__PLL__USB_MUL__x10           = 9,     /*!< x10 : PLL mul x10                                                         */
  MDR_RST__PLL__USB_MUL__x11           = 10,    /*!< x11 : PLL mul x11                                                         */
  MDR_RST__PLL__USB_MUL__x12           = 11,    /*!< x12 : PLL mul x12                                                         */
  MDR_RST__PLL__USB_MUL__x13           = 12,    /*!< x13 : PLL mul x13                                                         */
  MDR_RST__PLL__USB_MUL__x14           = 13,    /*!< x14 : PLL mul x14                                                         */
  MDR_RST__PLL__USB_MUL__x15           = 14,    /*!< x15 : PLL mul x15                                                         */
  MDR_RST__PLL__USB_MUL__x16           = 15,    /*!< x16 : PLL mul x16                                                         */
} MDR_RST__PLL__USB_MUL__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_MUL [8..11]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL                                     */
  MDR_RST__PLL__CPU_MUL__x1            = 0,     /*!< x1 : PLL mul x1                                                           */
  MDR_RST__PLL__CPU_MUL__x2            = 1,     /*!< x2 : PLL mul x2                                                           */
  MDR_RST__PLL__CPU_MUL__x3            = 2,     /*!< x3 : PLL mul x3                                                           */
  MDR_RST__PLL__CPU_MUL__x4            = 3,     /*!< x4 : PLL mul x4                                                           */
  MDR_RST__PLL__CPU_MUL__x5            = 4,     /*!< x5 : PLL mul x5                                                           */
  MDR_RST__PLL__CPU_MUL__x6            = 5,     /*!< x6 : PLL mul x6                                                           */
  MDR_RST__PLL__CPU_MUL__x7            = 6,     /*!< x7 : PLL mul x7                                                           */
  MDR_RST__PLL__CPU_MUL__x8            = 7,     /*!< x8 : PLL mul x8                                                           */
  MDR_RST__PLL__CPU_MUL__x9            = 8,     /*!< x9 : PLL mul x9                                                           */
  MDR_RST__PLL__CPU_MUL__x10           = 9,     /*!< x10 : PLL mul x10                                                         */
  MDR_RST__PLL__CPU_MUL__x11           = 10,    /*!< x11 : PLL mul x11                                                         */
  MDR_RST__PLL__CPU_MUL__x12           = 11,    /*!< x12 : PLL mul x12                                                         */
  MDR_RST__PLL__CPU_MUL__x13           = 12,    /*!< x13 : PLL mul x13                                                         */
  MDR_RST__PLL__CPU_MUL__x14           = 13,    /*!< x14 : PLL mul x14                                                         */
  MDR_RST__PLL__CPU_MUL__x15           = 14,    /*!< x15 : PLL mul x15                                                         */
  MDR_RST__PLL__CPU_MUL__x16           = 15,    /*!< x16 : PLL mul x16                                                         */
} MDR_RST__PLL__CPU_MUL__Enum;

/* ======================================================  HS_CONTROL  ======================================================= */
/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE_ON [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE_ON                                           */
  MDR_RST__HS__HSE_EN__Off             = 0,     /*!< Off : HSE Off                                                             */
  MDR_RST__HS__HSE_EN__On              = 1,     /*!< On : HSE On                                                               */
} MDR_RST__HS__HSE_EN__Enum;

/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE_BYP [1..1]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE_BYP                                          */
  MDR_RST__HS__HSE_BYP__Off            = 0,     /*!< Off : HSE forms Clock from external oscillator                            */
  MDR_RST__HS__HSE_BYP__On             = 1,     /*!< On : HSE passes Clock from external generator                             */
} MDR_RST__HS__HSE_BYP__Enum;

/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE2_ON [2..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE2_ON                                          */
  MDR_RST__HS__HSE2_EN__Off            = 0,     /*!< Off : HSE2 Off                                                            */
  MDR_RST__HS__HSE2_EN__On             = 1,     /*!< On : HSE2 On                                                              */
} MDR_RST__HS__HSE2_EN__Enum;

/* =======================================  MDR_RST_CLOCK HS_CONTROL HSE2_BYP [3..3]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE2_BYP                                         */
  MDR_RST__HS__HSE2_BYP__Off           = 0,     /*!< Off : HSE2 forms Clock from external oscillator                           */
  MDR_RST__HS__HSE2_BYP__On            = 1,     /*!< On : HSE2 passes Clock from external generator                            */
} MDR_RST__HS__HSE2_BYP__Enum;

/* =======================================================  CPU_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL                                        */
  MDR_RST__CPU__C1__HSI                = 0,     /*!< HSI : CPU_C1 output is HSI                                                */
  MDR_RST__CPU__C1__HSI/2              = 1,     /*!< HSI/2 : CPU_C1 output is HSI/2                                            */
  MDR_RST__CPU__C1__HSE                = 2,     /*!< HSE : CPU_C1 output is HSE                                                */
  MDR_RST__CPU__C1__HSE/2              = 3,     /*!< HSE/2 : CPU_C1 output is HSE/2                                            */
} MDR_RST__CPU__C1__Enum;

/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C2_SEL [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL                                        */
  MDR_RST__CPU__C2__CPU_C1             = 0,     /*!< CPU_C1 : Freq from CPU_C1 mux direct                                      */
  MDR_RST__CPU__C2__PLLCPUo            = 1,     /*!< PLLCPUo : Freq from CPU_C1 mux through PLL                                */
} MDR_RST__CPU__C2__Enum;

/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C3_SEL [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL                                        */
  MDR_RST__CPU__C3__div1_0             = 0,     /*!< div1_0 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_1             = 1,     /*!< div1_1 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_2             = 2,     /*!< div1_2 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_3             = 3,     /*!< div1_3 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_4             = 4,     /*!< div1_4 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_5             = 5,     /*!< div1_5 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_6             = 6,     /*!< div1_6 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_7             = 7,     /*!< div1_7 : div by 1                                                         */
  MDR_RST__CPU__C3__div2               = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST__CPU__C3__div4               = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST__CPU__C3__div8               = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST__CPU__C3__div16              = 11,    /*!< div16 : div by 16                                                         */
  MDR_RST__CPU__C3__div32              = 12,    /*!< div32 : div by 32                                                         */
  MDR_RST__CPU__C3__div64              = 13,    /*!< div64 : div by 64                                                         */
  MDR_RST__CPU__C3__div128             = 14,    /*!< div128 : div by 128                                                       */
  MDR_RST__CPU__C3__div256             = 15,    /*!< div256 : div by 256                                                       */
} MDR_RST__CPU__C3__Enum;

/* ========================================  MDR_RST_CLOCK CPU_CLOCK HCLK_SEL [8..9]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL                                          */
  MDR_RST__CPU__HCLK__HSI              = 0,     /*!< HSI : CPU clock is HSI                                                    */
  MDR_RST__CPU__HCLK__CPU_C3           = 1,     /*!< CPU_C3 : CPU clock is CPU_C3 output                                       */
  MDR_RST__CPU__HCLK__LSE              = 2,     /*!< LSE : CPU clock is LSE                                                    */
  MDR_RST__CPU__HCLK__LSI              = 3,     /*!< LSI : CPU clock is LSI                                                    */
} MDR_RST__CPU__HCLK__Enum;

/* =======================================================  USB_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK USB_CLOCK USB_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLOCK_USB_C1_SEL                                        */
  MDR_RST__USB__C1__HSI                = 0,     /*!< HSI : USB_C1 output is HSI                                                */
  MDR_RST__USB__C1__HSI/2              = 1,     /*!< HSI/2 : USB_C1 output is HSI/2                                            */
  MDR_RST__USB__C1__HSE                = 2,     /*!< HSE : USB_C1 output is HSE                                                */
  MDR_RST__USB__C1__HSE/2              = 3,     /*!< HSE/2 : USB_C1 output is HSE/2                                            */
} MDR_RST__USB__C1__Enum;

/* =======================================  MDR_RST_CLOCK USB_CLOCK USB_C2_SEL [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLOCK_USB_C2_SEL                                        */
  MDR_RST__USB__C2__USB_C1             = 0,     /*!< USB_C1 : Freq from CPU_C1 mux direct                                      */
  MDR_RST__USB__C2__PLLUSBo            = 1,     /*!< PLLUSBo : Freq from CPU_C1 mux through PLL_USB                            */
} MDR_RST__USB__C2__Enum;

/* =======================================  MDR_RST_CLOCK USB_CLOCK USB_C3_SEL [4..4]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLOCK_USB_C3_SEL                                        */
  MDR_RST__USB__C3__USB_C2             = 0,     /*!< USB_C2 : C3 Input is freq from C2                                         */
  MDR_RST__USB__C3__USB_C2_div2        = 1,     /*!< USB_C2_div2 : C3 Input is freq from C2/2                                  */
} MDR_RST__USB__C3__Enum;

/* =========================================  MDR_RST_CLOCK USB_CLOCK USB_EN [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLOCK_USB_EN                                            */
  MDR_RST__USB__CLOCK__Off             = 0,     /*!< Off : Clock Disabled                                                      */
  MDR_RST__USB__CLOCK__On              = 1,     /*!< On : Clock Enabled                                                        */
} MDR_RST__USB__CLOCK__Enum;

/* =======================================================  ADC_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL                                        */
  MDR_RST__ADC__C1__CPU_C1             = 0,     /*!< CPU_C1 : ADC_C1 output is CPU_C1                                          */
  MDR_RST__ADC__C1__USB_C1             = 1,     /*!< USB_C1 : ADC_C1 output is USB_C1                                          */
  MDR_RST__ADC__C1__CPU_C2             = 2,     /*!< CPU_C2 : ADC_C1 output is CPU_C2                                          */
  MDR_RST__ADC__C1__USB_C2             = 3,     /*!< USB_C2 : ADC_C1 output is USB_C2                                          */
} MDR_RST__ADC__C1__Enum;

/* =======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C2_SEL [4..5]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C2_SEL                                        */
  MDR_RST__ADC__C2__LSE                = 0,     /*!< LSE : ADC_C2 output is LSE                                                */
  MDR_RST__ADC__C2__LSI                = 1,     /*!< LSI : ADC_C2 output is LSI                                                */
  MDR_RST__ADC__C2__ADC_C1             = 2,     /*!< ADC_C1 : ADC_C2 output is ADC_C1                                          */
  MDR_RST__ADC__C2__HSI_C1             = 3,     /*!< HSI_C1 : ADC_C2 output is HSI_C1                                          */
} MDR_RST__ADC__C2__Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C3_SEL [8..11]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL                                        */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_0 = 0,/*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_1 = 1,/*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_2 = 2,/*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_3 = 3,/*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_4 = 4,/*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_5 = 5,/*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_6 = 6,/*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_7 = 7,/*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div2 = 8,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div4 = 9,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div8 = 10, /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div16 = 11,/*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div32 = 12,/*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div64 = 13,/*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div128 = 14,/*!< div128 : div by 128                                                      */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div256 = 15,/*!< div256 : div by 256                                                      */
} MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK ADC_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN                                        */
  MDR_RST__ADC__CLK_EN__Off            = 0,     /*!< Off : ADC clock disabled                                                  */
  MDR_RST__ADC__CLK_EN__On             = 1,     /*!< On : ADC clock enabled                                                    */
} MDR_RST__ADC__CLK_EN__Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK AUC_C1_SEL [16..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_AUC_C1_SEL                                        */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C1_SEL_HSI = 0,   /*!< HSI : CPU_C1 output is HSI                                                */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C1_SEL_HSI/2 = 1, /*!< HSI/2 : CPU_C1 output is HSI/2                                            */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C1_SEL_HSE = 2,   /*!< HSE : CPU_C1 output is HSE                                                */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C1_SEL_HSE/2 = 3, /*!< HSE/2 : CPU_C1 output is HSE/2                                            */
} MDR_RST_CLOCK_ADC_CLOCK_AUC_C1_SEL_Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK AUC_C2_SEL [20..21]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_AUC_C2_SEL                                        */
  MDR_RST__ADC__AUC_C2__AUC_C1         = 0,     /*!< AUC_C1 : AUC_C2 output is AUC_C1 select                                   */
  MDR_RST__ADC__AUC_C2__PLLCPUo        = 1,     /*!< PLLCPUo : AUC_C2 output is PLLCPUo                                        */
  MDR_RST__ADC__AUC_C2__PLLUSBo        = 2,     /*!< PLLUSBo : AUC_C2 output is PLLUSBo                                        */
  MDR_RST__ADC__AUC_C2__0              = 3,     /*!< 0 : No signal from AUC_C2                                                 */
} MDR_RST__ADC__AUC_C2__Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK AUC_C3_SEL [24..27]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL                                        */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div1_0 = 0,/*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div1_1 = 1,/*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div1_2 = 2,/*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div1_3 = 3,/*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div1_4 = 4,/*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div1_5 = 5,/*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div1_6 = 6,/*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div1_7 = 7,/*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div2 = 8,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div4 = 9,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div8 = 10, /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div16 = 11,/*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div32 = 12,/*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div64 = 13,/*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div128 = 14,/*!< div128 : div by 128                                                      */
  MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_div256 = 15,/*!< div256 : div by 256                                                      */
} MDR_RST_CLOCK_ADC_CLOCK_AUC_C3_SEL_Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK AUC_CLK_EN [31..31]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_AUC_CLK_EN                                        */
  MDR_RST__ADC__AUC_EN__Off            = 0,     /*!< Off : AUC clock disabled                                                  */
  MDR_RST__ADC__AUC_EN__On             = 1,     /*!< On : AUC clock enabled                                                    */
} MDR_RST__ADC__AUC_EN__Enum;

/* =======================================================  RTC_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK RTC_CLOCK HSE_SEL [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_0 = 0,   /*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_1 = 1,   /*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_2 = 2,   /*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_3 = 3,   /*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_4 = 4,   /*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_5 = 5,   /*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_6 = 6,   /*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_7 = 7,   /*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div2 = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div4 = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div8 = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div16 = 11,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div32 = 12,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div64 = 13,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div128 = 14,  /*!< div128 : div by 128                                                       */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div256 = 15,  /*!< div256 : div by 256                                                       */
} MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Enum;

/* ========================================  MDR_RST_CLOCK RTC_CLOCK HSI_SEL [4..7]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_0 = 0,   /*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_1 = 1,   /*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_2 = 2,   /*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_3 = 3,   /*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_4 = 4,   /*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_5 = 5,   /*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_6 = 6,   /*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_7 = 7,   /*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div2 = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div4 = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div8 = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div16 = 11,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div32 = 12,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div64 = 13,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div128 = 14,  /*!< div128 : div by 128                                                       */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div256 = 15,  /*!< div256 : div by 256                                                       */
} MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Enum;

/* =======================================  MDR_RST_CLOCK RTC_CLOCK HSE_RTC_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN                                        */
  MDR_RST__RTC__HSE_RTC_CLOCK__Off     = 0,     /*!< Off : RTC HSE Clock Disabled                                              */
  MDR_RST__RTC__HSE_RTC_CLOCK__On      = 1,     /*!< On : RTC HSE Clock Enabled                                                */
} MDR_RST__RTC__HSE_RTC_CLOCK__Enum;

/* =======================================  MDR_RST_CLOCK RTC_CLOCK HSI_RTC_EN [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN                                        */
  MDR_RST__RTC__HSI_RTC_CLOCK__Off     = 0,     /*!< Off : RTC HSI Clock Disabled                                              */
  MDR_RST__RTC__HSI_RTC_CLOCK__On      = 1,     /*!< On : RTC HSI Clock Enabled                                                */
} MDR_RST__RTC__HSI_RTC_CLOCK__Enum;

/* =======================================================  PER_CLOCK  ======================================================= */
/* ======================================  MDR_RST_CLOCK PER_CLOCK CAN1_CLK_EN [0..0]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_CAN1_CLK_EN                                       */
  MDR_RST__PER__CAN1_CLOCK__Off        = 0,     /*!< Off : Clock Disabled                                                      */
  MDR_RST__PER__CAN1_CLOCK__On         = 1,     /*!< On : Clock Enabled                                                        */
} MDR_RST__PER__CAN1_CLOCK__Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK CAN2_CLK_EN [1..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER_CLOCK USB_CLK_EN [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_USB_CLK_EN                                        */
  MDR_RST__PER__SSP_CLOCK__Off         = 0,     /*!< Off : Clock Disabled                                                      */
  MDR_RST__PER__SSP_CLOCK__On          = 1,     /*!< On : Clock Enabled                                                        */
} MDR_RST__PER__SSP_CLOCK__Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK EEPROM_CLK_EN [3..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER_CLOCK RST_CLK_EN [4..4]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER_CLOCK DMA_CLK_EN [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK UART1_CLK_EN [6..6]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK UART2_CLK_EN [7..7]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK SPI1_CLK_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK MIL1_CLK_EN [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK MIL2_CLK_EN [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK PWR_CLK_EN [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK WWDT_CLK_EN [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK IWDT_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER_CLOCK TIMER1_CLK_EN [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER_CLOCK TIMER2_CLK_EN [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER_CLOCK TIMER3_CLK_EN [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK ADC_CLK_EN [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK DAC_CLK_EN [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER_CLOCK TIMER4_CLK_EN [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK SPI2_CLK_EN [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTA_CLK_EN [21..21]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTB_CLK_EN [22..22]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTC_CLK_EN [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTD_CLK_EN [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTE_CLK_EN [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_Enum;

/* ===================================  MDR_RST_CLOCK PER_CLOCK ARINC_RX_CLK_EN [26..26]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN                                   */
  MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                    */
  MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_On = 1,/*!< On : Clock Enabled                                                       */
} MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK BKP_CLK_EN [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_Enum;

/* ===================================  MDR_RST_CLOCK PER_CLOCK ARINC_TX_CLK_EN [28..28]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN                                   */
  MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                    */
  MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_On = 1,/*!< On : Clock Enabled                                                       */
} MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTF_CLK_EN [29..29]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK EBC_CLK_EN [30..30]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK SPI3_CLK_EN [31..31]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_Enum;

/* =======================================================  CAN_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK CAN_CLOCK CAN1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN_CLOCK_CAN1_BRG                                          */
  MDR_RST__CAN1__BRG__div1             = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST__CAN1__BRG__div2             = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST__CAN1__BRG__div4             = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST__CAN1__BRG__div8             = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST__CAN1__BRG__div16            = 4,     /*!< div16 : div by 16                                                         */
  MDR_RST__CAN1__BRG__div32            = 5,     /*!< div32 : div by 32                                                         */
  MDR_RST__CAN1__BRG__div64            = 6,     /*!< div64 : div by 64                                                         */
  MDR_RST__CAN1__BRG__div128           = 7,     /*!< div128 : div by 128                                                       */
} MDR_RST__CAN1__BRG__Enum;

/* =======================================  MDR_RST_CLOCK CAN_CLOCK CAN2_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG                                          */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_Enum;

/* =====================================  MDR_RST_CLOCK CAN_CLOCK CAN1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN_CLOCK_CAN1_CLK_EN                                       */
  MDR_RST__CAN__CAN1_CLK__Off          = 0,     /*!< Off : CAN1 Clock Disabled                                                 */
  MDR_RST__CAN__CAN1_CLK__On           = 1,     /*!< On : CAN1 Clock Enabled                                                   */
} MDR_RST__CAN__CAN1_CLK__Enum;

/* =====================================  MDR_RST_CLOCK CAN_CLOCK CAN2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN_CLOCK_CAN2_CLK_EN                                       */
  MDR_RST__CAN__CAN2_CLK__Off          = 0,     /*!< Off : CAN2 Clock Disabled                                                 */
  MDR_RST__CAN__CAN2_CLK__On           = 1,     /*!< On : CAN2 Clock Enabled                                                   */
} MDR_RST__CAN__CAN2_CLK__Enum;

/* =======================================================  TIM_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK TIM_CLOCK TIM1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG                                          */
  MDR_RST__TIM1__BRG__div1             = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST__TIM1__BRG__div2             = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST__TIM1__BRG__div4             = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST__TIM1__BRG__div8             = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST__TIM1__BRG__div16            = 4,     /*!< div16 : div by 16                                                         */
  MDR_RST__TIM1__BRG__div32            = 5,     /*!< div32 : div by 32                                                         */
  MDR_RST__TIM1__BRG__div64            = 6,     /*!< div64 : div by 64                                                         */
  MDR_RST__TIM1__BRG__div128           = 7,     /*!< div128 : div by 128                                                       */
} MDR_RST__TIM1__BRG__Enum;

/* =======================================  MDR_RST_CLOCK TIM_CLOCK TIM2_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG                                          */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Enum;

/* =======================================  MDR_RST_CLOCK TIM_CLOCK TIM3_BRG [16..18]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG                                          */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN                                       */
  MDR_RST__TIM__TIM1_CLK__Off          = 0,     /*!< Off : Timer1 Clock Disabled                                               */
  MDR_RST__TIM__TIM1_CLK__On           = 1,     /*!< On : Timer1 Clock Enabled                                                 */
} MDR_RST__TIM__TIM1_CLK__Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN                                       */
  MDR_RST__TIM__TIM2_CLK__Off          = 0,     /*!< Off : Timer2 Clock Disabled                                               */
  MDR_RST__TIM__TIM2_CLK__On           = 1,     /*!< On : Timer2 Clock Enabled                                                 */
} MDR_RST__TIM__TIM2_CLK__Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM3_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM3_CLK_EN                                       */
  MDR_RST__TIM__TIM3_CLK__Off          = 0,     /*!< Off : Timer3 Clock Disabled                                               */
  MDR_RST__TIM__TIM3_CLK__On           = 1,     /*!< On : Timer3 Clock Enabled                                                 */
} MDR_RST__TIM__TIM3_CLK__Enum;

/* ======================================================  UART_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK UART_CLOCK UART1_BRG [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART1_BRG                                        */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div1 = 0,  /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div2 = 1,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div4 = 2,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div8 = 3,  /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div16 = 4, /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div32 = 5, /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div64 = 6, /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div128 = 7,/*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Enum;

/* ======================================  MDR_RST_CLOCK UART_CLOCK UART2_BRG [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART2_BRG                                        */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div1 = 0,  /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div2 = 1,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div4 = 2,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div8 = 3,  /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div16 = 4, /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div32 = 5, /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div64 = 6, /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div128 = 7,/*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Enum;

/* ======================================  MDR_RST_CLOCK UART_CLOCK TIM4_BRG [16..18]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG                                         */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div1 = 0,   /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div2 = 1,   /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div4 = 2,   /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div8 = 3,   /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div16 = 4,  /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div32 = 5,  /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div64 = 6,  /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div128 = 7, /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_Enum;

/* ====================================  MDR_RST_CLOCK UART_CLOCK UART1_CLK_EN [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN                                     */
  MDR_RST__UART__UART1_CLK__Off        = 0,     /*!< Off : UART1 Clock Disabled                                                */
  MDR_RST__UART__UART1_CLK__On         = 1,     /*!< On : UART1 Clock Enabled                                                  */
} MDR_RST__UART__UART1_CLK__Enum;

/* ====================================  MDR_RST_CLOCK UART_CLOCK UART2_CLK_EN [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN                                     */
  MDR_RST__UART__UART2_CLK__Off        = 0,     /*!< Off : UART2 Clock Disabled                                                */
  MDR_RST__UART__UART2_CLK__On         = 1,     /*!< On : UART2 Clock Enabled                                                  */
} MDR_RST__UART__UART2_CLK__Enum;

/* =====================================  MDR_RST_CLOCK UART_CLOCK TIM4_CLK_EN [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_TIM4_CLK_EN                                      */
  MDR_RST__UART__TIM4_CLK__Off         = 0,     /*!< Off : Timer4 Clock Disabled                                               */
  MDR_RST__UART__TIM4_CLK__On          = 1,     /*!< On : Timer4 Clock Enabled                                                 */
} MDR_RST__UART__TIM4_CLK__Enum;

/* =======================================================  SSP_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK SSP_CLOCK SSP1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG                                          */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Enum;

/* =======================================  MDR_RST_CLOCK SSP_CLOCK SSP2_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG                                          */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_Enum;

/* =======================================  MDR_RST_CLOCK SSP_CLOCK SSP3_BRG [16..18]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG                                          */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_Enum;

/* =====================================  MDR_RST_CLOCK SSP_CLOCK SSP1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN                                       */
  MDR_RST__SSP__SSP1_CLK__Off          = 0,     /*!< Off : SSP1 Clock Disabled                                                 */
  MDR_RST__SSP__SSP1_CLK__On           = 1,     /*!< On : SSP1 Clock Enabled                                                   */
} MDR_RST__SSP__SSP1_CLK__Enum;

/* =====================================  MDR_RST_CLOCK SSP_CLOCK SSP2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP2_CLK_EN                                       */
  MDR_RST__SSP__SSP2_CLK__Off          = 0,     /*!< Off : SSP2 Clock Disabled                                                 */
  MDR_RST__SSP__SSP2_CLK__On           = 1,     /*!< On : SSP2 Clock Enabled                                                   */
} MDR_RST__SSP__SSP2_CLK__Enum;

/* =====================================  MDR_RST_CLOCK SSP_CLOCK SSP3_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP3_CLK_EN                                       */
  MDR_RST__SSP__SSP3_CLK__Off          = 0,     /*!< Off : SSP3 Clock Disabled                                                 */
  MDR_RST__SSP__SSP3_CLK__On           = 1,     /*!< On : SSP3 Clock Enabled                                                   */
} MDR_RST__SSP__SSP3_CLK__Enum;

/* =======================================================  ETH_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK ETH_CLOCK MIL_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div1 = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div2 = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div4 = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div8 = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div16 = 4,    /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div32 = 5,    /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div64 = 6,    /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div128 = 7,   /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_Enum;

/* =======================================  MDR_RST_CLOCK ETH_CLOCK PHY_BRG [16..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div1 = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div2 = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div4 = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div8 = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div16 = 4,    /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div32 = 5,    /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div64 = 6,    /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div128 = 7,   /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_Enum;

/* ======================================  MDR_RST_CLOCK ETH_CLOCK ETH_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_ETH_CLK_EN                                        */
  MDR_RST__ETH__MAC_CLK__Off           = 0,     /*!< Off : MAC Clock Disabled                                                  */
  MDR_RST__ETH__MAC_CLK__On            = 1,     /*!< On : MAC Clock Enabled                                                    */
} MDR_RST__ETH__MAC_CLK__Enum;

/* ======================================  MDR_RST_CLOCK ETH_CLOCK MIL_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_MIL_CLK_EN                                        */
  MDR_RST__ETH__MIL_CLK__Off           = 0,     /*!< Off : MIL Clock Disabled                                                  */
  MDR_RST__ETH__MIL_CLK__On            = 1,     /*!< On : MIL Clock Enabled                                                    */
} MDR_RST__ETH__MIL_CLK__Enum;

/* ========================================  MDR_RST_CLOCK ETH_CLOCK SLEEP [26..26]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_SLEEP                                             */
  MDR_RST__ETH__SLEEP__Off             = 0,     /*!< Off : Normal Mode                                                         */
  MDR_RST__ETH__SLEEP__GoSLEEP         = 1,     /*!< GoSLEEP : Go to SLEEP                                                     */
} MDR_RST__ETH__SLEEP__Enum;

/* ======================================  MDR_RST_CLOCK ETH_CLOCK PHY_CLK_EN [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_EN                                        */
  MDR_RST__ETH__PHY_CLK__Off           = 0,     /*!< Off : MIL Clock Disabled                                                  */
  MDR_RST__ETH__PHY_CLK__On            = 1,     /*!< On : MIL Clock Enabled                                                    */
} MDR_RST__ETH__PHY_CLK__Enum;

/* =====================================  MDR_RST_CLOCK ETH_CLOCK PHY_CLK_SEL [28..29]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_SEL                                       */
  MDR_RST__ETH__PHY_SEL__HSI           = 0,     /*!< HSI : PHY Clock from HSI                                                  */
  MDR_RST__ETH__PHY_SEL__HSE           = 1,     /*!< HSE : PHY Clock from HSE                                                  */
  MDR_RST__ETH__PHY_SEL__PLLCPUo       = 2,     /*!< PLLCPUo : PHY Clock from PLLCPUo                                          */
  MDR_RST__ETH__PHY_SEL__HSE2          = 3,     /*!< HSE2 : PHY Clock from HSE2                                                */
} MDR_RST__ETH__PHY_SEL__Enum;

/* =====================================  MDR_RST_CLOCK ETH_CLOCK ETH2_CLK_EN [30..30]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_ETH2_CLK_EN                                       */
  MDR_RST__ETH__MAC2_CLK__Off          = 0,     /*!< Off : MAC Clock Disabled                                                  */
  MDR_RST__ETH__MAC2_CLK__On           = 1,     /*!< On : MAC Clock Enabled                                                    */
} MDR_RST__ETH__MAC2_CLK__Enum;

/* ======================================================  PER2_CLOCK  ======================================================= */
/* ======================================  MDR_RST_CLOCK PER2_CLOCK AUC_CLK_EN [0..0]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_AUC_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_AUC_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_AUC_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_AUC_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK LED_CLK_EN [1..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_LED_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_LED_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_LED_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_LED_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK KEY_CLK_EN [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_KEY_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_KEY_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_KEY_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_KEY_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK PORTG_CLK_EN [3..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTG_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTG_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTG_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTG_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK UART3_CLK_EN [4..4]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_UART3_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_UART3_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_UART3_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_UART3_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK UART4_CLK_EN [5..5]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_UART4_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_UART4_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_UART4_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_UART4_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK SSP4_CLK_EN [6..6]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_SSP4_CLK_EN                                      */
  MDR_RST_CLOCK_PER2_CLOCK_SSP4_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_SSP4_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_SSP4_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK PORTH_CLK_EN [7..7]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTH_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTH_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTH_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTH_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK PORTI_CLK_EN [8..8]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTI_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTI_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTI_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTI_CLK_EN_Enum;

/* ====================================================  UART_SSP_CLOCK  ===================================================== */
/* =====================================  MDR_RST_CLOCK UART_SSP_CLOCK UART3_BRG [0..2]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG                                    */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_div1 = 0,/*!< div1 : div by 1                                                         */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_div2 = 1,/*!< div2 : div by 2                                                         */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_div4 = 2,/*!< div4 : div by 4                                                         */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_div8 = 3,/*!< div8 : div by 8                                                         */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_div16 = 4,/*!< div16 : div by 16                                                      */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_div32 = 5,/*!< div32 : div by 32                                                      */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_div64 = 6,/*!< div64 : div by 64                                                      */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_div128 = 7,/*!< div128 : div by 128                                                   */
} MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_BRG_Enum;

/* ====================================  MDR_RST_CLOCK UART_SSP_CLOCK UART4_BRG [8..10]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG                                    */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_div1 = 0,/*!< div1 : div by 1                                                         */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_div2 = 1,/*!< div2 : div by 2                                                         */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_div4 = 2,/*!< div4 : div by 4                                                         */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_div8 = 3,/*!< div8 : div by 8                                                         */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_div16 = 4,/*!< div16 : div by 16                                                      */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_div32 = 5,/*!< div32 : div by 32                                                      */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_div64 = 6,/*!< div64 : div by 64                                                      */
  MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_div128 = 7,/*!< div128 : div by 128                                                   */
} MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_BRG_Enum;

/* ====================================  MDR_RST_CLOCK UART_SSP_CLOCK SSP3_BRG [16..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG                                     */
  MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_div1 = 0,/*!< div1 : div by 1                                                          */
  MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_div2 = 1,/*!< div2 : div by 2                                                          */
  MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_div4 = 2,/*!< div4 : div by 4                                                          */
  MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_div8 = 3,/*!< div8 : div by 8                                                          */
  MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_div16 = 4,/*!< div16 : div by 16                                                       */
  MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_div32 = 5,/*!< div32 : div by 32                                                       */
  MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_div64 = 6,/*!< div64 : div by 64                                                       */
  MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_div128 = 7,/*!< div128 : div by 128                                                    */
} MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_BRG_Enum;

/* ==================================  MDR_RST_CLOCK UART_SSP_CLOCK UART3_CLK_EN [24..24]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_SSP_CLOCK_UART3_CLK_EN                                 */
  MDR_RST__UARTSSP__UART3_CLK__Off     = 0,     /*!< Off : UART3 Clock Disabled                                                */
  MDR_RST__UARTSSP__UART3_CLK__On      = 1,     /*!< On : UART3 Clock Enabled                                                  */
} MDR_RST__UARTSSP__UART3_CLK__Enum;

/* ==================================  MDR_RST_CLOCK UART_SSP_CLOCK UART4_CLK_EN [25..25]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_SSP_CLOCK_UART4_CLK_EN                                 */
  MDR_RST__UARTSSP__UART4_CLK__Off     = 0,     /*!< Off : UART4 Clock Disabled                                                */
  MDR_RST__UARTSSP__UART4_CLK__On      = 1,     /*!< On : UART4 Clock Enabled                                                  */
} MDR_RST__UARTSSP__UART4_CLK__Enum;

/* ===================================  MDR_RST_CLOCK UART_SSP_CLOCK SSP3_CLK_EN [26..26]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_SSP_CLOCK_SSP3_CLK_EN                                  */
  MDR_RST__UARTSSP__SSP3_CLK__Off      = 0,     /*!< Off : SSP3 Clock Disabled                                                 */
  MDR_RST__UARTSSP__SSP3_CLK__On       = 1,     /*!< On : SSP3 Clock Enabled                                                   */
} MDR_RST__UARTSSP__SSP3_CLK__Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  REG_00  ========================================================= */
/* ========================================================  REG_01  ========================================================= */
/* ========================================================  REG_02  ========================================================= */
/* ========================================================  REG_03  ========================================================= */
/* ========================================================  REG_04  ========================================================= */
/* ========================================================  REG_05  ========================================================= */
/* ========================================================  REG_06  ========================================================= */
/* ========================================================  REG_07  ========================================================= */
/* ========================================================  REG_08  ========================================================= */
/* ========================================================  REG_09  ========================================================= */
/* ========================================================  REG_0A  ========================================================= */
/* ========================================================  REG_0B  ========================================================= */
/* ========================================================  REG_0C  ========================================================= */
/* ========================================================  REG_0D  ========================================================= */
/* ========================================================  REG_0E  ========================================================= */
/* ===============================================  MDR_BKP REG_0E LOW [0..2]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_LOW                                                        */
  MDR_BKP_0E__LOW__10MHz               = 0,     /*!< 10MHz : CPU Clock less then 10MHz                                         */
  MDR_BKP_0E__LOW__200KHz              = 1,     /*!< 200KHz : CPU Clock less then 200KHz                                       */
  MDR_BKP_0E__LOW__500KHz              = 2,     /*!< 500KHz : CPU Clock less then 500KHz                                       */
  MDR_BKP_0E__LOW__1MHz                = 3,     /*!< 1MHz : CPU Clock less then 1MHz                                           */
  MDR_BKP_0E__LOW__GensOffz            = 4,     /*!< GensOffz : Generators Off                                                 */
  MDR_BKP_0E__LOW__40MHz               = 5,     /*!< 40MHz : CPU Clock less then 40MHz                                         */
  MDR_BKP_0E__LOW__80MHz               = 6,     /*!< 80MHz : CPU Clock less then 80MHz                                         */
  MDR_BKP_0E__LOW__above_80MHz         = 7,     /*!< above_80MHz : CPU Clock above 10MHz                                       */
} MDR_BKP_0E__LOW__Enum;

/* ============================================  MDR_BKP REG_0E SelectRI [3..5]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0E_SelectRI                                                   */
  MDR_BKP_0E__SelRI__10MHz             = 0,     /*!< 10MHz : Additional I ~ 300uA                                              */
  MDR_BKP_0E__SelRI__200KHz            = 1,     /*!< 200KHz : Additional I ~ 6.6uA                                             */
  MDR_BKP_0E__SelRI__500KHz            = 2,     /*!< 500KHz : Additional I ~ 20A                                               */
  MDR_BKP_0E__SelRI__1MHz              = 3,     /*!< 1MHz : Additional I ~ 80uA                                                */
  MDR_BKP_0E__SelRI__GensOffz          = 4,     /*!< GensOffz : Additional I ~ 2uA                                             */
  MDR_BKP_0E__SelRI__40MHz             = 5,     /*!< 40MHz : Additional I ~ 900uA                                              */
  MDR_BKP_0E__SelRI__80MHz             = 6,     /*!< 80MHz : Additional I ~ 4.4mA                                              */
  MDR_BKP_0E__SelRI__above_80MHz       = 7,     /*!< above_80MHz : Additional I ~ 19mA                                         */
} MDR_BKP_0E__SelRI__Enum;

/* ===========================================  MDR_BKP REG_0E StandAlone [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0E_StandAlone                                                 */
  MDR_BKP_0E__StandAlone__Disable      = 0,     /*!< Disable : Microcontroller mode                                            */
  MDR_BKP_0E__StandAlone__Enable       = 1,     /*!< Enable : Switch to interface IC                                           */
} MDR_BKP_0E__StandAlone__Enum;

/* ===========================================  MDR_BKP REG_0E Trim_dDUcc [8..10]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Trim_dDUcc                                                 */
  MDR_BKP_0E__dDUcc__+0.1              = 0,     /*!< +0.1 : DUcc += 0.1 V                                                      */
  MDR_BKP_0E__dDUcc__+0.06             = 1,     /*!< +0.06 : DUcc += 0.06 V                                                    */
  MDR_BKP_0E__dDUcc__+0.04             = 2,     /*!< +0.04 : DUcc += 0.04 V                                                    */
  MDR_BKP_0E__dDUcc__+0.01             = 3,     /*!< +0.01 : DUcc += 0.01 V                                                    */
  MDR_BKP_0E__dDUcc__-0.01             = 4,     /*!< -0.01 : DUcc -= 0.01 V                                                    */
  MDR_BKP_0E__dDUcc__-0.04             = 5,     /*!< -0.04 : DUcc -= 0.04 V                                                    */
  MDR_BKP_0E__dDUcc__-0.6              = 6,     /*!< -0.6 : DUcc -= 0.06 V                                                     */
  MDR_BKP_0E__dDUcc__-0.1              = 7,     /*!< -0.1 : DUcc -= 0.1 V                                                      */
} MDR_BKP_0E__dDUcc__Enum;

/* =============================================  MDR_BKP REG_0E FPOR [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_FPOR                                                       */
  MDR_BKP_0E__FPOR__Low                = 0,     /*!< Low : No Bootloader                                                       */
  MDR_BKP_0E__FPOR__High               = 1,     /*!< High : Bootloader completed                                               */
} MDR_BKP_0E__FPOR__Enum;

/* ===========================================  MDR_BKP REG_0E Trim_DUcc [12..13]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Trim_DUcc                                                  */
  MDR_BKP_0E__DUcc__1.8                = 0,     /*!< 1.8 : DUcc = 1.8 V                                                        */
  MDR_BKP_0E__DUcc__1.6                = 1,     /*!< 1.6 : DUcc = 1.6 V                                                        */
  MDR_BKP_0E__DUcc__1.4                = 2,     /*!< 1.4 : DUcc = 1.4 V                                                        */
  MDR_BKP_0E__DUcc__Forbiden           = 3,     /*!< Forbiden : Forbiden value                                                 */
} MDR_BKP_0E__DUcc__Enum;

/* ============================================  MDR_BKP REG_0E I_LimEn [15..15]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0E_I_LimEn                                                    */
  MDR_BKP_0E__Ilim__Disable            = 0,     /*!< Disable : Disabled                                                        */
  MDR_BKP_0E__Ilim__Enable             = 1,     /*!< Enable : Enabled                                                          */
} MDR_BKP_0E__Ilim__Enum;

/* ========================================================  REG_0F  ========================================================= */
/* =============================================  MDR_BKP REG_0F LSE_ON [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_ON                                                     */
  MDR_RTC__LSE_ON__Off                 = 0,     /*!< Off : Disable state                                                       */
  MDR_RTC__LSE_ON__On                  = 1,     /*!< On : Enable state                                                         */
} MDR_RTC__LSE_ON__Enum;

/* =============================================  MDR_BKP REG_0F LSE_BYP [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_BYP                                                    */
  MDR_RTC__LSE_BYP__Off                = 0,     /*!< Off : Use for external resonator                                          */
  MDR_RTC__LSE_BYP__On                 = 1,     /*!< On : Use for external generator                                           */
} MDR_RTC__LSE_BYP__Enum;

/* =============================================  MDR_BKP REG_0F RTC_SEL [2..3]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_SEL                                                    */
  MDR_BKP_REG_0F_RTC_SEL_LSI           = 0,     /*!< LSI : RTC use LSI clock                                                   */
  MDR_BKP_REG_0F_RTC_SEL_LSE           = 1,     /*!< LSE : RTC use LSE clock                                                   */
  MDR_BKP_REG_0F_RTC_SEL_HSIRTC        = 2,     /*!< HSIRTC : RTC use HSIRTC clock                                             */
  MDR_BKP_REG_0F_RTC_SEL_HSERTC        = 3,     /*!< HSERTC : RTC use HSERTC clock                                             */
} MDR_BKP_REG_0F_RTC_SEL_Enum;

/* =============================================  MDR_BKP REG_0F RTC_EN [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_EN                                                     */
  MDR_BKP_REG_0F_RTC_EN_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_RTC_EN_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_RTC_EN_Enum;

/* ============================================  MDR_BKP REG_0F LSE_RDY [13..13]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_RDY                                                    */
  MDR_BKP_REG_0F_LSE_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_LSE_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_LSE_RDY_Enum;

/* ============================================  MDR_BKP REG_0F LSI_ON [15..15]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_ON                                                     */
  MDR_BKP_REG_0F_LSI_ON_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_LSI_ON_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_LSI_ON_Enum;

/* ===========================================  MDR_BKP REG_0F LSI_TRIM [16..20]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_TRIM                                                   */
  MDR_BKP_REG_0F_LSI_TRIM_69KHz        = 0,     /*!< 69KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_65KHz        = 1,     /*!< 65KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_60KHz        = 2,     /*!< 60KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_58KHz        = 3,     /*!< 58KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_52KHz        = 4,     /*!< 52KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_50KHz        = 5,     /*!< 50KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_49KHz        = 6,     /*!< 49KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_45KHz        = 7,     /*!< 45KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_44KHz        = 8,     /*!< 44KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_42KHz        = 9,     /*!< 42KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_40KHz        = 10,    /*!< 40KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_39KHz        = 11,    /*!< 39KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_37KHz        = 12,    /*!< 37KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_36KHz        = 13,    /*!< 36KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_35KHz        = 14,    /*!< 35KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_33KHz        = 15,    /*!< 33KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_32KHz        = 16,    /*!< 32KHz : LSI frequency tuner                                               */
} MDR_BKP_REG_0F_LSI_TRIM_Enum;

/* ============================================  MDR_BKP REG_0F LSI_RDY [21..21]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_RDY                                                    */
  MDR_BKP_REG_0F_LSI_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_LSI_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_LSI_RDY_Enum;

/* ============================================  MDR_BKP REG_0F HSI_ON [22..22]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_HSI_ON                                                     */
  MDR_BKP_REG_0F_HSI_ON_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_HSI_ON_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_HSI_ON_Enum;

/* ============================================  MDR_BKP REG_0F HSI_RDY [23..23]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_HSI_RDY                                                    */
  MDR_BKP_REG_0F_HSI_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_HSI_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_HSI_RDY_Enum;

/* ============================================  MDR_BKP REG_0F Standby [30..30]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_Standby                                                    */
  MDR_BKP_REG_0F_Standby_Disable       = 0,     /*!< Disable : Normal mode, DUcc is On                                         */
  MDR_BKP_REG_0F_Standby_Enable        = 1,     /*!< Enable : Standby mode, DUcc is Off                                        */
} MDR_BKP_REG_0F_Standby_Enum;

/* ===========================================  MDR_BKP REG_0F RTC_RESET [31..31]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_RESET                                                  */
  MDR_BKP_REG_0F_RTC_RESET_Active      = 0,     /*!< Active : RTC active state                                                 */
  MDR_BKP_REG_0F_RTC_RESET_Reset       = 1,     /*!< Reset : RTC in Reset state                                                */
} MDR_BKP_REG_0F_RTC_RESET_Enum;

/* ========================================================  RTC_CNT  ======================================================== */
/* ========================================================  RTC_DIV  ======================================================== */
/* ========================================================  RTC_PRL  ======================================================== */
/* =======================================================  RTC_ALRM  ======================================================== */
/* ========================================================  RTC_CS  ========================================================= */
/* ===============================================  MDR_BKP RTC_CS OWF [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_OWF                                                        */
  MDR_BKP_RTC_CS_OWF_Off               = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_OWF_On                = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_OWF_Enum;

/* ==============================================  MDR_BKP RTC_CS SECF [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_SECF                                                       */
  MDR_BKP_RTC_CS_SECF_Off              = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_SECF_On               = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_SECF_Enum;

/* ==============================================  MDR_BKP RTC_CS ALRF [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_ALRF                                                       */
  MDR_BKP_RTC_CS_ALRF_Off              = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_ALRF_On               = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_ALRF_Enum;

/* =============================================  MDR_BKP RTC_CS OWF_IE [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_OWF_IE                                                     */
  MDR_BKP_RTC_CS_OWF_IE_Off            = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_OWF_IE_On             = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_OWF_IE_Enum;

/* =============================================  MDR_BKP RTC_CS SECF_IE [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_SECF_IE                                                    */
  MDR_BKP_RTC_CS_SECF_IE_Off           = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_SECF_IE_On            = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_SECF_IE_Enum;

/* =============================================  MDR_BKP RTC_CS ALRF_IE [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_ALRF_IE                                                    */
  MDR_BKP_RTC_CS_ALRF_IE_Off           = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_ALRF_IE_On            = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_ALRF_IE_Enum;

/* ===============================================  MDR_BKP RTC_CS WEC [6..6]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_WEC                                                        */
  MDR_BKP_RTC_CS_WEC_Ready             = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_WEC_Busy              = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_WEC_Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* MDR1986VE3_H */


/** @} */ /* End of group MDR1986VE3 */

/** @} */ /* End of group Milandr */
