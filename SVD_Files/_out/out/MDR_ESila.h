/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     MDR_ESila.h
 * @brief    CMSIS HeaderFile
 * @version  2.0
 * @date     23. May 2019
 * @note     Generated by SVDConv V3.3.18 on Thursday, 23.05.2019 10:32:57
 *           from File '../_src/MDR_ESila.svd',
 *           last modified on Thursday, 23.05.2019 07:32:52
 */



/** @addtogroup Milandr
  * @{
  */


/** @addtogroup MDR_ESila
  * @{
  */


#ifndef MDR_ESILA_H
#define MDR_ESILA_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  MDR_ESila Specific Interrupt Numbers  ========================================== */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM4_REV                 0x0000U       /*!< CM4 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  1        /*!< MPU present or not                                                        */
#define __FPU_PRESENT                  1        /*!< FPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm4.h"                           /*!< ARM Cortex-M4 processor and core peripherals                              */
#include "system_MDR_ESila.h"                   /*!< MDR_ESila System                                                          */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLock Control (MDR_RST_CLOCK)
  */

typedef struct {                                /*!< (@ 0x40000000) MDR_RST_CLOCK Structure                                    */
  
  union {
    __IOM uint32_t KEY;                         /*!< (@ 0x00000000) Clock Unlock Register                                      */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Reg value                                                         */
    } KEY_b;
  } ;
  
  union {
    __IOM uint32_t MAX_CLK;                     /*!< (@ 0x00000004) MAX_CLK Select Register                                    */
    
    struct {
      __IOM uint32_t Select     : 4;            /*!< [3..0] Select MAX_CLOCK source                                            */
    } MAX_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CLK;                     /*!< (@ 0x00000008) CPU_CLK Register                                           */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] CPU_CLock div from MAX_CLOCK                                      */
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } CPU_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PER0_CLK;                    /*!< (@ 0x0000000C) Periph0 Clock Enable Register                              */
    
    struct {
      __IM  uint32_t            : 13;
      __IOM uint32_t PortA_CLK_EN : 1;          /*!< [13..13] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortB_CLK_EN : 1;          /*!< [14..14] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortC_CLK_EN : 1;          /*!< [15..15] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortD_CLK_EN : 1;          /*!< [16..16] GPIO Port Clock Enable                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t SDIO_CLK_EN : 1;           /*!< [21..21] SDIO Clock Enable                                                */
      __IOM uint32_t SSP1_CLK_EN : 1;           /*!< [22..22] SSP1 Clock Enable                                                */
      __IOM uint32_t SSP2_CLK_EN : 1;           /*!< [23..23] SSP2 Clock Enable                                                */
      __IOM uint32_t CAN1_CLK_EN : 1;           /*!< [24..24] CAN1 Clock Enable                                                */
      __IOM uint32_t CAN2_CLK_EN : 1;           /*!< [25..25] CAN2 Clock Enable                                                */
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [26..26] UART1 Clock Enable                                               */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [27..27] UART2 Clock Enable                                               */
      __IOM uint32_t UART3_CLK_EN : 1;          /*!< [28..28] UART3 Clock Enable                                               */
      __IOM uint32_t UART4_CLK_EN : 1;          /*!< [29..29] UART4 Clock Enable                                               */
      __IOM uint32_t MIL_CLK_EN : 1;            /*!< [30..30] MIL Clock Enable                                                 */
      __IOM uint32_t USB_CLK_EN : 1;            /*!< [31..31] USB Clock Enable                                                 */
    } PER0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PER1_CLK;                    /*!< (@ 0x00000010) Periph1 Clock Enable Register                              */
    
    struct {
      __IOM uint32_t TIM1_CLK_EN : 1;           /*!< [0..0] Timer1 Clock Enable                                                */
      __IOM uint32_t TIM2_CLK_EN : 1;           /*!< [1..1] Timer1 Clock Enable                                                */
      __IOM uint32_t TIM3_CLK_EN : 1;           /*!< [2..2] Timer3 Clock Enable                                                */
      __IOM uint32_t TIM4_CLK_EN : 1;           /*!< [3..3] Timer4 Clock Enable                                                */
      __IOM uint32_t CAP1_CLK_EN : 1;           /*!< [4..4] Capture1 Clock Enable                                              */
      __IOM uint32_t CAP2_CLK_EN : 1;           /*!< [5..5] Capture2 Clock Enable                                              */
      __IOM uint32_t CAP3_CLK_EN : 1;           /*!< [6..6] Capture3 Clock Enable                                              */
      __IOM uint32_t CAP4_CLK_EN : 1;           /*!< [7..7] Capture4 Clock Enable                                              */
      __IOM uint32_t QEP1_CLK_EN : 1;           /*!< [8..8] Encoder1 Clock Enable                                              */
      __IOM uint32_t QEP2_CLK_EN : 1;           /*!< [9..9] Encoder2 Clock Enable                                              */
      __IOM uint32_t PWM1_CLK_EN : 1;           /*!< [10..10] PWM1 Clock Enable                                                */
      __IOM uint32_t PWM2_CLK_EN : 1;           /*!< [11..11] PWM2 Clock Enable                                                */
      __IOM uint32_t PWM3_CLK_EN : 1;           /*!< [12..12] PWM3 Clock Enable                                                */
      __IOM uint32_t PWM4_CLK_EN : 1;           /*!< [13..13] PWM4 Clock Enable                                                */
      __IOM uint32_t PWM5_CLK_EN : 1;           /*!< [14..14] PWM5 Clock Enable                                                */
      __IOM uint32_t PWM6_CLK_EN : 1;           /*!< [15..15] PWM6 Clock Enable                                                */
      __IOM uint32_t PWM7_CLK_EN : 1;           /*!< [16..16] PWM7 Clock Enable                                                */
      __IOM uint32_t PWM8_CLK_EN : 1;           /*!< [17..17] PWM8 Clock Enable                                                */
      __IOM uint32_t PWM9_CLK_EN : 1;           /*!< [18..18] PWM9 Clock Enable                                                */
      __IOM uint32_t ADC1_CLK_EN : 1;           /*!< [19..19] ADC1 Clock Enable                                                */
      __IOM uint32_t ADC2_CLK_EN : 1;           /*!< [20..20] ADC2 Clock Enable                                                */
      __IOM uint32_t ADC3_CLK_EN : 1;           /*!< [21..21] ADC3 Clock Enable                                                */
      __IOM uint32_t DAC1_CLK_EN : 1;           /*!< [22..22] DAC1 Clock Enable                                                */
      __IOM uint32_t DAC2_CLK_EN : 1;           /*!< [23..23] DAC2 Clock Enable                                                */
      __IOM uint32_t DAC3_CLK_EN : 1;           /*!< [24..24] DAC3 Clock Enable                                                */
      __IOM uint32_t DAC4_CLK_EN : 1;           /*!< [25..25] DAC4 Clock Enable                                                */
      __IOM uint32_t CMP1_CLK_EN : 1;           /*!< [26..26] Comparator1 Clock Enable                                         */
      __IOM uint32_t CMP2_CLK_EN : 1;           /*!< [27..27] Comparator2 Clock Enable                                         */
      __IOM uint32_t CMP3_CLK_EN : 1;           /*!< [28..28] Comparator3 Clock Enable                                         */
      __IOM uint32_t CMP4_CLK_EN : 1;           /*!< [29..29] Comparator4 Clock Enable                                         */
      __IOM uint32_t I2C_CLK_EN : 1;            /*!< [30..30] I2C Clock Enable                                                 */
      __IOM uint32_t CORDIC_CLK_EN : 1;         /*!< [31..31] CORDIC Clock Enable                                              */
    } PER1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK0;                    /*!< (@ 0x00000014) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } CPU_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK1;                    /*!< (@ 0x00000018) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } CPU_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK2;                    /*!< (@ 0x0000001C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } CPU_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t CPU_STAT;                    /*!< (@ 0x00000020) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
    } CPU_STAT_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CLK;                     /*!< (@ 0x00000024) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } LSI_CLK_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK0;                    /*!< (@ 0x00000028) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } LSI_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK1;                    /*!< (@ 0x0000002C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } LSI_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK2;                    /*!< (@ 0x00000030) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } LSI_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t LSI_STAT;                    /*!< (@ 0x00000034) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } LSI_STAT_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t LSE_CLK;                     /*!< (@ 0x0000003C) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } LSE_CLK_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK0;                    /*!< (@ 0x00000040) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } LSE_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK1;                    /*!< (@ 0x00000044) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } LSE_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK2;                    /*!< (@ 0x00000048) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } LSE_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t LSE_STAT;                    /*!< (@ 0x0000004C) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } LSE_STAT_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CLK;                    /*!< (@ 0x00000050) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t HSE_ON     : 1;            /*!< [27..27] Generator Enable                                                 */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [28..28] ByPass Mode                                                      */
      __IOM uint32_t FILTER_EN  : 1;            /*!< [29..29] Filter Enable                                                    */
    } HSE0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK0;                   /*!< (@ 0x00000054) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE0_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK1;                   /*!< (@ 0x00000058) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE0_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK2;                   /*!< (@ 0x0000005C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } HSE0_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_STAT;                   /*!< (@ 0x00000060) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } HSE0_STAT_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CLK;                    /*!< (@ 0x00000064) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t HSE_ON     : 1;            /*!< [27..27] Generator Enable                                                 */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [28..28] ByPass Mode                                                      */
      __IOM uint32_t FILTER_EN  : 1;            /*!< [29..29] Filter Enable                                                    */
    } HSE1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK0;                   /*!< (@ 0x00000068) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE1_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK1;                   /*!< (@ 0x0000006C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE1_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK2;                   /*!< (@ 0x00000070) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } HSE1_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_STAT;                   /*!< (@ 0x00000074) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } HSE1_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CLK;                    /*!< (@ 0x00000078) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 5;            /*!< [4..0] PLL Freq divider                                                   */
      __IOM uint32_t PLL_N      : 9;            /*!< [13..5] PLL Freq multiplier                                               */
      __IOM uint32_t DV         : 2;            /*!< [15..14] PLL Output Divider                                               */
      __IOM uint32_t PLL_ReadyMode : 1;         /*!< [16..16] Enable output after ready only                                   */
      __IOM uint32_t PLL_ON     : 1;            /*!< [17..17] PLL Enable                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [20..18] Select PLL Input                                                 */
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [21..21] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [22..22] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [23..23] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [24..24] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [25..25] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [26..26] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [27..27] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [28..28] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [29..29] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [30..30] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [31..31] Clear highest freq event                                         */
    } PLL0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK0;                   /*!< (@ 0x0000007C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL0_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK1;                   /*!< (@ 0x00000080) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL0_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK2;                   /*!< (@ 0x00000084) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL0_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_STAT;                   /*!< (@ 0x00000088) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL0_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CLK;                    /*!< (@ 0x0000008C) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 5;            /*!< [4..0] PLL Freq divider                                                   */
      __IOM uint32_t PLL_N      : 9;            /*!< [13..5] PLL Freq multiplier                                               */
      __IOM uint32_t DV         : 2;            /*!< [15..14] PLL Output Divider                                               */
      __IOM uint32_t PLL_ReadyMode : 1;         /*!< [16..16] Enable output after ready only                                   */
      __IOM uint32_t PLL_ON     : 1;            /*!< [17..17] PLL Enable                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [20..18] Select PLL Input                                                 */
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [21..21] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [22..22] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [23..23] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [24..24] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [25..25] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [26..26] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [27..27] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [28..28] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [29..29] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [30..30] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [31..31] Clear highest freq event                                         */
    } PLL1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK0;                   /*!< (@ 0x00000090) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL1_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK1;                   /*!< (@ 0x00000094) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL1_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK2;                   /*!< (@ 0x00000098) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL1_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_STAT;                   /*!< (@ 0x0000009C) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL1_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CLK;                    /*!< (@ 0x000000A0) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 5;            /*!< [4..0] PLL Freq divider                                                   */
      __IOM uint32_t PLL_N      : 9;            /*!< [13..5] PLL Freq multiplier                                               */
      __IOM uint32_t DV         : 2;            /*!< [15..14] PLL Output Divider                                               */
      __IOM uint32_t PLL_ReadyMode : 1;         /*!< [16..16] Enable output after ready only                                   */
      __IOM uint32_t PLL_ON     : 1;            /*!< [17..17] PLL Enable                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [20..18] Select PLL Input                                                 */
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [21..21] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [22..22] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [23..23] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [24..24] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [25..25] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [26..26] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [27..27] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [28..28] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [29..29] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [30..30] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [31..31] Clear highest freq event                                         */
    } PLL2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK0;                   /*!< (@ 0x000000A4) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL2_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK1;                   /*!< (@ 0x000000A8) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL2_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK2;                   /*!< (@ 0x000000AC) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL2_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_STAT;                   /*!< (@ 0x000000B0) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL2_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL3_CLK;                    /*!< (@ 0x000000B4) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 5;            /*!< [4..0] PLL Freq divider                                                   */
      __IOM uint32_t PLL_N      : 9;            /*!< [13..5] PLL Freq multiplier                                               */
      __IOM uint32_t DV         : 2;            /*!< [15..14] PLL Output Divider                                               */
      __IOM uint32_t PLL_ReadyMode : 1;         /*!< [16..16] Enable output after ready only                                   */
      __IOM uint32_t PLL_ON     : 1;            /*!< [17..17] PLL Enable                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [20..18] Select PLL Input                                                 */
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [21..21] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [22..22] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [23..23] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [24..24] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [25..25] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [26..26] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [27..27] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [28..28] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [29..29] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [30..30] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [31..31] Clear highest freq event                                         */
    } PLL3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL3_CHK0;                   /*!< (@ 0x000000B8) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL3_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL3_CHK1;                   /*!< (@ 0x000000BC) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL3_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL3_CHK2;                   /*!< (@ 0x000000C0) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL3_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL3_STAT;                   /*!< (@ 0x000000C4) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL3_STAT_b;
  } ;
  
  union {
    __IOM uint32_t ETH_CLK;                     /*!< (@ 0x000000C8) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } ETH_CLK_b;
  } ;
  
  union {
    __IOM uint32_t USB_CLK;                     /*!< (@ 0x000000CC) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } USB_CLK_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t RTC_CLK;                     /*!< (@ 0x000000D4) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } RTC_CLK_b;
  } ;
  
  union {
    __IOM uint32_t SSP1_CLK;                    /*!< (@ 0x000000D8) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t SSP2_CLK;                    /*!< (@ 0x000000DC) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CAN1_CLK;                    /*!< (@ 0x000000E0) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAN1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CAN2_CLK;                    /*!< (@ 0x000000E4) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAN2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t UART1_CLK;                   /*!< (@ 0x000000E8) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } UART1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t UART2_CLK;                   /*!< (@ 0x000000EC) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } UART2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t UART3_CLK;                   /*!< (@ 0x000000F0) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } UART3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t UART4_CLK;                   /*!< (@ 0x000000F4) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } UART4_CLK_b;
  } ;
  
  union {
    __IOM uint32_t MIL_CLK;                     /*!< (@ 0x000000F8) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } MIL_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM1_CLK;                    /*!< (@ 0x000000FC) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM2_CLK;                    /*!< (@ 0x00000100) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM3_CLK;                    /*!< (@ 0x00000104) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM3_CLK_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t TIM4_CLK;                    /*!< (@ 0x0000010C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM4_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CAP1_CLK;                    /*!< (@ 0x00000110) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAP1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CAP2_CLK;                    /*!< (@ 0x00000114) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAP2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CAP3_CLK;                    /*!< (@ 0x00000118) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAP3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CAP4_CLK;                    /*!< (@ 0x0000011C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAP4_CLK_b;
  } ;
  
  union {
    __IOM uint32_t QEP1_CLK;                    /*!< (@ 0x00000120) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } QEP1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t QEP2_CLK;                    /*!< (@ 0x00000124) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } QEP2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM1_CLK;                    /*!< (@ 0x00000128) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM2_CLK;                    /*!< (@ 0x0000012C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM3_CLK;                    /*!< (@ 0x00000130) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM4_CLK;                    /*!< (@ 0x00000134) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM4_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM5_CLK;                    /*!< (@ 0x00000138) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM5_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM6_CLK;                    /*!< (@ 0x0000013C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM6_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM7_CLK;                    /*!< (@ 0x00000140) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM7_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM8_CLK;                    /*!< (@ 0x00000144) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM8_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PWM9_CLK;                    /*!< (@ 0x00000148) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } PWM9_CLK_b;
  } ;
  
  union {
    __IOM uint32_t ADC1_CLK;                    /*!< (@ 0x0000014C) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } ADC1_CLK_b;
  } ;
  __IM  uint32_t  RESERVED3[32];
  
  union {
    __IOM uint32_t ADC2_CLK;                    /*!< (@ 0x000001D0) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } ADC2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t ADC3_CLK;                    /*!< (@ 0x000001D4) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } ADC3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CORDIC_CLK;                  /*!< (@ 0x000001D8) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } CORDIC_CLK_b;
  } ;
} MDR_RST_CLOCK_Type;                           /*!< Size = 476 (0x1dc)                                                        */



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup and RTC Control (MDR_BKP)
  */

typedef struct {                                /*!< (@ 0x40001000) MDR_BKP Structure                                          */
  __IOM uint32_t  REG[60];                      /*!< (@ 0x00000000) User backup registers                                      */
  __IOM uint32_t  KEY;                          /*!< (@ 0x000000F0) Unlock BKP and RTC Registers                               */
  
  union {
    __IOM uint32_t REG_64_TMR0;                 /*!< (@ 0x000000F4) REG64 Control register                                     */
    
    struct {
      __IOM uint32_t RTC_Sel    : 2;            /*!< [1..0] Select Clock for RTC                                               */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [9..2] RTC pass counts                                                    */
      __IOM uint32_t RTC_RST    : 1;            /*!< [10..10] RTC Reset                                                        */
      __IOM uint32_t RTC_En     : 1;            /*!< [11..11] RTC Enable                                                       */
      __IOM uint32_t CProt_Lim  : 10;           /*!< [21..12] Current protection limit                                         */
      __IOM uint32_t CProt_Count : 10;          /*!< [31..22] Counter of I_Lim events                                          */
    } REG_64_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_64_TMR1;                 /*!< (@ 0x000000F8) REG64 Control register                                     */
    
    struct {
      __IOM uint32_t RTC_Sel    : 2;            /*!< [1..0] Select Clock for RTC                                               */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [9..2] RTC pass counts                                                    */
      __IOM uint32_t RTC_RST    : 1;            /*!< [10..10] RTC Reset                                                        */
      __IOM uint32_t RTC_En     : 1;            /*!< [11..11] RTC Enable                                                       */
      __IOM uint32_t CProt_Lim  : 10;           /*!< [21..12] Current protection limit                                         */
      __IOM uint32_t CProt_Count : 10;          /*!< [31..22] Counter of I_Lim events                                          */
    } REG_64_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_64_TMR2;                 /*!< (@ 0x000000FC) REG64 Control register                                     */
    
    struct {
      __IOM uint32_t RTC_Sel    : 2;            /*!< [1..0] Select Clock for RTC                                               */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [9..2] RTC pass counts                                                    */
      __IOM uint32_t RTC_RST    : 1;            /*!< [10..10] RTC Reset                                                        */
      __IOM uint32_t RTC_En     : 1;            /*!< [11..11] RTC Enable                                                       */
      __IOM uint32_t CProt_Lim  : 10;           /*!< [21..12] Current protection limit                                         */
      __IOM uint32_t CProt_Count : 10;          /*!< [31..22] Counter of I_Lim events                                          */
    } REG_64_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_60_TMR0;                 /*!< (@ 0x00000100) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [8..8] Disable JTAG                                                       */
      __IOM uint32_t LockStep_On : 1;           /*!< [9..9] Enable LockStep CPUs Mode                                          */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [10..10] Reset by software                                                */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [11..11] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [12..12] Reset by RSTn0 signal                                            */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [13..13] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [14..14] Reset from WDT                                                   */
      __IM  uint32_t            : 10;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR0;                 /*!< (@ 0x00000104) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t POR3p3_Dis : 1;            /*!< [0..0] Reset by Ucc > Upor                                                */
      __IOM uint32_t ORV3p3_Dis : 1;            /*!< [1..1] Reset by Ucc > Uover                                               */
      __IOM uint32_t bg_trimVdd1p6 : 3;         /*!< [4..2] DUcc 1.6V trim                                                     */
      __IOM uint32_t bg_trimVdd1p2 : 3;         /*!< [7..5] DUcc 1.6V trim                                                     */
      __IOM uint32_t DCDC_En    : 1;            /*!< [8..8] Enable DCDC 1.6V                                                   */
      __IOM uint32_t DCDC_Trim  : 4;            /*!< [12..9] DCDC 1.6V trim                                                    */
      __IOM uint32_t HLDO_SRILow : 3;           /*!< [15..13] HLDO Power adjustment                                            */
      __IOM uint32_t HLDO_Dis   : 1;            /*!< [16..16] HLDO Disable                                                     */
      __IOM uint32_t LLDO_Dis   : 1;            /*!< [17..17] LLDO Disable                                                     */
      __IOM uint32_t Temp_En    : 1;            /*!< [18..18] Thermo protection EN                                             */
      __IOM uint32_t CProt_En   : 1;            /*!< [19..19] Current protection EN                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t P3p3_RDY   : 1;            /*!< [21..21] DUcc 3.3V ready                                                  */
      __IOM uint32_t S_nPOR3p3  : 1;            /*!< [22..22] Reset by DUcc_3.3V                                               */
      __IOM uint32_t S_nPOR1p6  : 1;            /*!< [23..23] Reset by DUcc_1.6V                                               */
      __IOM uint32_t S_nPOR1p2  : 1;            /*!< [24..24] Reset by DUcc_1.2V                                               */
      __IOM uint32_t S_nOVRST3p3 : 1;           /*!< [25..25] Reset by Ucc > Uover                                             */
      __IOM uint32_t LLDO_RDY   : 1;            /*!< [26..26] DUcc 1.2V ready                                                  */
      __IOM uint32_t DCDC_RDY   : 1;            /*!< [27..27] DCDC 1.6V ready                                                  */
      __IOM uint32_t HLDO_RDY   : 1;            /*!< [28..28] DUcc 1.6V ready                                                  */
      __IOM uint32_t CProt_Event : 1;           /*!< [29..29] CProt_cnt > CProt_lim                                            */
      __IOM uint32_t TProt_Event : 1;           /*!< [30..30] Thermo is over                                                   */
      __IOM uint32_t STANDBY    : 1;            /*!< [31..31] Go Standby mode                                                  */
    } REG_61_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR0;                 /*!< (@ 0x00000108) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t BLDO_Dis   : 1;            /*!< [0..0] Disable LDO_Bat                                                    */
      __IOM uint32_t BLDO_Trim  : 3;            /*!< [3..1] LDO_Bat Trim                                                       */
      __IOM uint32_t BLDO_SRILow : 3;           /*!< [6..4] LDO_Bat Power adjustment                                           */
      __IOM uint32_t BLDO_RDY   : 1;            /*!< [7..7] BLDO Ready                                                         */
      __IOM uint32_t PWRM_Vdd_lvl : 5;          /*!< [12..8] DCDC_3.3V level                                                   */
      __IOM uint32_t PWRM_Vdd_En : 1;           /*!< [13..13] DCDC_3.3V monitor enable                                         */
      __IOM uint32_t PWRM_VddB_lvl : 5;         /*!< [18..14] Vdd_BKP 3.3V level                                               */
      __IOM uint32_t PWRM_VddIO_lvl : 5;        /*!< [23..19] Vdd_BKP 3.3V level                                               */
      __IOM uint32_t PWRM_VddB_EN : 1;          /*!< [24..24] Vdd_BKP monitor enable                                           */
      __IOM uint32_t PWRM_VddIO_EN : 1;         /*!< [25..25] Vdd_IO monitor enable                                            */
      __IOM uint32_t PWRM_Vdd_Event : 1;        /*!< [26..26] Vdd Event                                                        */
      __IOM uint32_t PWRM_VddB_Event : 1;       /*!< [27..27] Vdd BKP Event                                                    */
      __IOM uint32_t PWRM_VddIO_Event : 1;      /*!< [28..28] Vdd IO Event                                                     */
      __IOM uint32_t Sel_NSW    : 1;            /*!< [29..29] Select NSW                                                       */
      __IOM uint32_t Sel_SW     : 1;            /*!< [30..30] Select SW                                                        */
      __IOM uint32_t PMU_BG_Dis : 1;            /*!< [31..31] Disable PMU                                                      */
    } REG_62_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR0;                 /*!< (@ 0x0000010C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_RDY    : 1;            /*!< [0..0] LSE REady                                                          */
      __IOM uint32_t LSE_FilterON : 1;          /*!< [1..1] LSE Input filter                                                   */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [2..2] LSE Bypass                                                         */
      __IOM uint32_t LSE_On     : 1;            /*!< [3..3] LSE Enable                                                         */
      __IOM uint32_t HSE0_RDY   : 1;            /*!< [4..4] HSE0 Ready                                                         */
      __IOM uint32_t HSE0_FilterEn : 1;         /*!< [5..5] HSE0 Filter enable                                                 */
      __IOM uint32_t HSE0_BYP   : 1;            /*!< [6..6] HSE0 Bypass                                                        */
      __IOM uint32_t HSE0_On    : 1;            /*!< [7..7] HSE0 Enable                                                        */
      __IOM uint32_t HSE1_RDY   : 1;            /*!< [8..8] HSE1 Ready                                                         */
      __IOM uint32_t HSE1_FilterEn : 1;         /*!< [9..9] HSE1 Filter enable                                                 */
      __IOM uint32_t HSE1_BYP   : 1;            /*!< [10..10] HSE1 Bypass                                                      */
      __IOM uint32_t HSE1_On    : 1;            /*!< [11..11] HSE1 Enable                                                      */
      __IOM uint32_t LSI_Ready  : 1;            /*!< [12..12] LSI ready                                                        */
      __IOM uint32_t LSI_Dis    : 1;            /*!< [13..13] LSI Disable                                                      */
      __IOM uint32_t LSI_Trim   : 7;            /*!< [20..14] LSI freq trim                                                    */
      __IOM uint32_t HSI_Ready  : 1;            /*!< [21..21] HSI ready                                                        */
      __IOM uint32_t HSI_Trim   : 7;            /*!< [28..22] HSI freq trim                                                    */
      __IOM uint32_t HSI_Dis    : 1;            /*!< [29..29] HSI Disable                                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSI_POR_Ready : 1;         /*!< [31..31] LSI POR ready                                                    */
    } REG_63_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_60_TMR1;                 /*!< (@ 0x00000110) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [8..8] Disable JTAG                                                       */
      __IOM uint32_t LockStep_On : 1;           /*!< [9..9] Enable LockStep CPUs Mode                                          */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [10..10] Reset by software                                                */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [11..11] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [12..12] Reset by RSTn0 signal                                            */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [13..13] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [14..14] Reset from WDT                                                   */
      __IM  uint32_t            : 10;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR1;                 /*!< (@ 0x00000114) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t POR3p3_Dis : 1;            /*!< [0..0] Reset by Ucc > Upor                                                */
      __IOM uint32_t ORV3p3_Dis : 1;            /*!< [1..1] Reset by Ucc > Uover                                               */
      __IOM uint32_t bg_trimVdd1p6 : 3;         /*!< [4..2] DUcc 1.6V trim                                                     */
      __IOM uint32_t bg_trimVdd1p2 : 3;         /*!< [7..5] DUcc 1.6V trim                                                     */
      __IOM uint32_t DCDC_En    : 1;            /*!< [8..8] Enable DCDC 1.6V                                                   */
      __IOM uint32_t DCDC_Trim  : 4;            /*!< [12..9] DCDC 1.6V trim                                                    */
      __IOM uint32_t HLDO_SRILow : 3;           /*!< [15..13] HLDO Power adjustment                                            */
      __IOM uint32_t HLDO_Dis   : 1;            /*!< [16..16] HLDO Disable                                                     */
      __IOM uint32_t LLDO_Dis   : 1;            /*!< [17..17] LLDO Disable                                                     */
      __IOM uint32_t Temp_En    : 1;            /*!< [18..18] Thermo protection EN                                             */
      __IOM uint32_t CProt_En   : 1;            /*!< [19..19] Current protection EN                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t P3p3_RDY   : 1;            /*!< [21..21] DUcc 3.3V ready                                                  */
      __IOM uint32_t S_nPOR3p3  : 1;            /*!< [22..22] Reset by DUcc_3.3V                                               */
      __IOM uint32_t S_nPOR1p6  : 1;            /*!< [23..23] Reset by DUcc_1.6V                                               */
      __IOM uint32_t S_nPOR1p2  : 1;            /*!< [24..24] Reset by DUcc_1.2V                                               */
      __IOM uint32_t S_nOVRST3p3 : 1;           /*!< [25..25] Reset by Ucc > Uover                                             */
      __IOM uint32_t LLDO_RDY   : 1;            /*!< [26..26] DUcc 1.2V ready                                                  */
      __IOM uint32_t DCDC_RDY   : 1;            /*!< [27..27] DCDC 1.6V ready                                                  */
      __IOM uint32_t HLDO_RDY   : 1;            /*!< [28..28] DUcc 1.6V ready                                                  */
      __IOM uint32_t CProt_Event : 1;           /*!< [29..29] CProt_cnt > CProt_lim                                            */
      __IOM uint32_t TProt_Event : 1;           /*!< [30..30] Thermo is over                                                   */
      __IOM uint32_t STANDBY    : 1;            /*!< [31..31] Go Standby mode                                                  */
    } REG_61_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR1;                 /*!< (@ 0x00000118) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t BLDO_Dis   : 1;            /*!< [0..0] Disable LDO_Bat                                                    */
      __IOM uint32_t BLDO_Trim  : 3;            /*!< [3..1] LDO_Bat Trim                                                       */
      __IOM uint32_t BLDO_SRILow : 3;           /*!< [6..4] LDO_Bat Power adjustment                                           */
      __IOM uint32_t BLDO_RDY   : 1;            /*!< [7..7] BLDO Ready                                                         */
      __IOM uint32_t PWRM_Vdd_lvl : 5;          /*!< [12..8] DCDC_3.3V level                                                   */
      __IOM uint32_t PWRM_Vdd_En : 1;           /*!< [13..13] DCDC_3.3V monitor enable                                         */
      __IOM uint32_t PWRM_VddB_lvl : 5;         /*!< [18..14] Vdd_BKP 3.3V level                                               */
      __IOM uint32_t PWRM_VddIO_lvl : 5;        /*!< [23..19] Vdd_BKP 3.3V level                                               */
      __IOM uint32_t PWRM_VddB_EN : 1;          /*!< [24..24] Vdd_BKP monitor enable                                           */
      __IOM uint32_t PWRM_VddIO_EN : 1;         /*!< [25..25] Vdd_IO monitor enable                                            */
      __IOM uint32_t PWRM_Vdd_Event : 1;        /*!< [26..26] Vdd Event                                                        */
      __IOM uint32_t PWRM_VddB_Event : 1;       /*!< [27..27] Vdd BKP Event                                                    */
      __IOM uint32_t PWRM_VddIO_Event : 1;      /*!< [28..28] Vdd IO Event                                                     */
      __IOM uint32_t Sel_NSW    : 1;            /*!< [29..29] Select NSW                                                       */
      __IOM uint32_t Sel_SW     : 1;            /*!< [30..30] Select SW                                                        */
      __IOM uint32_t PMU_BG_Dis : 1;            /*!< [31..31] Disable PMU                                                      */
    } REG_62_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR1;                 /*!< (@ 0x0000011C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_RDY    : 1;            /*!< [0..0] LSE REady                                                          */
      __IOM uint32_t LSE_FilterON : 1;          /*!< [1..1] LSE Input filter                                                   */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [2..2] LSE Bypass                                                         */
      __IOM uint32_t LSE_On     : 1;            /*!< [3..3] LSE Enable                                                         */
      __IOM uint32_t HSE0_RDY   : 1;            /*!< [4..4] HSE0 Ready                                                         */
      __IOM uint32_t HSE0_FilterEn : 1;         /*!< [5..5] HSE0 Filter enable                                                 */
      __IOM uint32_t HSE0_BYP   : 1;            /*!< [6..6] HSE0 Bypass                                                        */
      __IOM uint32_t HSE0_On    : 1;            /*!< [7..7] HSE0 Enable                                                        */
      __IOM uint32_t HSE1_RDY   : 1;            /*!< [8..8] HSE1 Ready                                                         */
      __IOM uint32_t HSE1_FilterEn : 1;         /*!< [9..9] HSE1 Filter enable                                                 */
      __IOM uint32_t HSE1_BYP   : 1;            /*!< [10..10] HSE1 Bypass                                                      */
      __IOM uint32_t HSE1_On    : 1;            /*!< [11..11] HSE1 Enable                                                      */
      __IOM uint32_t LSI_Ready  : 1;            /*!< [12..12] LSI ready                                                        */
      __IOM uint32_t LSI_Dis    : 1;            /*!< [13..13] LSI Disable                                                      */
      __IOM uint32_t LSI_Trim   : 7;            /*!< [20..14] LSI freq trim                                                    */
      __IOM uint32_t HSI_Ready  : 1;            /*!< [21..21] HSI ready                                                        */
      __IOM uint32_t HSI_Trim   : 7;            /*!< [28..22] HSI freq trim                                                    */
      __IOM uint32_t HSI_Dis    : 1;            /*!< [29..29] HSI Disable                                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSI_POR_Ready : 1;         /*!< [31..31] LSI POR ready                                                    */
    } REG_63_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_60_TMR2;                 /*!< (@ 0x00000120) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [8..8] Disable JTAG                                                       */
      __IOM uint32_t LockStep_On : 1;           /*!< [9..9] Enable LockStep CPUs Mode                                          */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [10..10] Reset by software                                                */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [11..11] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [12..12] Reset by RSTn0 signal                                            */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [13..13] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [14..14] Reset from WDT                                                   */
      __IM  uint32_t            : 10;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR2;                 /*!< (@ 0x00000124) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t POR3p3_Dis : 1;            /*!< [0..0] Reset by Ucc > Upor                                                */
      __IOM uint32_t ORV3p3_Dis : 1;            /*!< [1..1] Reset by Ucc > Uover                                               */
      __IOM uint32_t bg_trimVdd1p6 : 3;         /*!< [4..2] DUcc 1.6V trim                                                     */
      __IOM uint32_t bg_trimVdd1p2 : 3;         /*!< [7..5] DUcc 1.6V trim                                                     */
      __IOM uint32_t DCDC_En    : 1;            /*!< [8..8] Enable DCDC 1.6V                                                   */
      __IOM uint32_t DCDC_Trim  : 4;            /*!< [12..9] DCDC 1.6V trim                                                    */
      __IOM uint32_t HLDO_SRILow : 3;           /*!< [15..13] HLDO Power adjustment                                            */
      __IOM uint32_t HLDO_Dis   : 1;            /*!< [16..16] HLDO Disable                                                     */
      __IOM uint32_t LLDO_Dis   : 1;            /*!< [17..17] LLDO Disable                                                     */
      __IOM uint32_t Temp_En    : 1;            /*!< [18..18] Thermo protection EN                                             */
      __IOM uint32_t CProt_En   : 1;            /*!< [19..19] Current protection EN                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t P3p3_RDY   : 1;            /*!< [21..21] DUcc 3.3V ready                                                  */
      __IOM uint32_t S_nPOR3p3  : 1;            /*!< [22..22] Reset by DUcc_3.3V                                               */
      __IOM uint32_t S_nPOR1p6  : 1;            /*!< [23..23] Reset by DUcc_1.6V                                               */
      __IOM uint32_t S_nPOR1p2  : 1;            /*!< [24..24] Reset by DUcc_1.2V                                               */
      __IOM uint32_t S_nOVRST3p3 : 1;           /*!< [25..25] Reset by Ucc > Uover                                             */
      __IOM uint32_t LLDO_RDY   : 1;            /*!< [26..26] DUcc 1.2V ready                                                  */
      __IOM uint32_t DCDC_RDY   : 1;            /*!< [27..27] DCDC 1.6V ready                                                  */
      __IOM uint32_t HLDO_RDY   : 1;            /*!< [28..28] DUcc 1.6V ready                                                  */
      __IOM uint32_t CProt_Event : 1;           /*!< [29..29] CProt_cnt > CProt_lim                                            */
      __IOM uint32_t TProt_Event : 1;           /*!< [30..30] Thermo is over                                                   */
      __IOM uint32_t STANDBY    : 1;            /*!< [31..31] Go Standby mode                                                  */
    } REG_61_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR2;                 /*!< (@ 0x00000128) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t BLDO_Dis   : 1;            /*!< [0..0] Disable LDO_Bat                                                    */
      __IOM uint32_t BLDO_Trim  : 3;            /*!< [3..1] LDO_Bat Trim                                                       */
      __IOM uint32_t BLDO_SRILow : 3;           /*!< [6..4] LDO_Bat Power adjustment                                           */
      __IOM uint32_t BLDO_RDY   : 1;            /*!< [7..7] BLDO Ready                                                         */
      __IOM uint32_t PWRM_Vdd_lvl : 5;          /*!< [12..8] DCDC_3.3V level                                                   */
      __IOM uint32_t PWRM_Vdd_En : 1;           /*!< [13..13] DCDC_3.3V monitor enable                                         */
      __IOM uint32_t PWRM_VddB_lvl : 5;         /*!< [18..14] Vdd_BKP 3.3V level                                               */
      __IOM uint32_t PWRM_VddIO_lvl : 5;        /*!< [23..19] Vdd_BKP 3.3V level                                               */
      __IOM uint32_t PWRM_VddB_EN : 1;          /*!< [24..24] Vdd_BKP monitor enable                                           */
      __IOM uint32_t PWRM_VddIO_EN : 1;         /*!< [25..25] Vdd_IO monitor enable                                            */
      __IOM uint32_t PWRM_Vdd_Event : 1;        /*!< [26..26] Vdd Event                                                        */
      __IOM uint32_t PWRM_VddB_Event : 1;       /*!< [27..27] Vdd BKP Event                                                    */
      __IOM uint32_t PWRM_VddIO_Event : 1;      /*!< [28..28] Vdd IO Event                                                     */
      __IOM uint32_t Sel_NSW    : 1;            /*!< [29..29] Select NSW                                                       */
      __IOM uint32_t Sel_SW     : 1;            /*!< [30..30] Select SW                                                        */
      __IOM uint32_t PMU_BG_Dis : 1;            /*!< [31..31] Disable PMU                                                      */
    } REG_62_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR2;                 /*!< (@ 0x0000012C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_RDY    : 1;            /*!< [0..0] LSE REady                                                          */
      __IOM uint32_t LSE_FilterON : 1;          /*!< [1..1] LSE Input filter                                                   */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [2..2] LSE Bypass                                                         */
      __IOM uint32_t LSE_On     : 1;            /*!< [3..3] LSE Enable                                                         */
      __IOM uint32_t HSE0_RDY   : 1;            /*!< [4..4] HSE0 Ready                                                         */
      __IOM uint32_t HSE0_FilterEn : 1;         /*!< [5..5] HSE0 Filter enable                                                 */
      __IOM uint32_t HSE0_BYP   : 1;            /*!< [6..6] HSE0 Bypass                                                        */
      __IOM uint32_t HSE0_On    : 1;            /*!< [7..7] HSE0 Enable                                                        */
      __IOM uint32_t HSE1_RDY   : 1;            /*!< [8..8] HSE1 Ready                                                         */
      __IOM uint32_t HSE1_FilterEn : 1;         /*!< [9..9] HSE1 Filter enable                                                 */
      __IOM uint32_t HSE1_BYP   : 1;            /*!< [10..10] HSE1 Bypass                                                      */
      __IOM uint32_t HSE1_On    : 1;            /*!< [11..11] HSE1 Enable                                                      */
      __IOM uint32_t LSI_Ready  : 1;            /*!< [12..12] LSI ready                                                        */
      __IOM uint32_t LSI_Dis    : 1;            /*!< [13..13] LSI Disable                                                      */
      __IOM uint32_t LSI_Trim   : 7;            /*!< [20..14] LSI freq trim                                                    */
      __IOM uint32_t HSI_Ready  : 1;            /*!< [21..21] HSI ready                                                        */
      __IOM uint32_t HSI_Trim   : 7;            /*!< [28..22] HSI freq trim                                                    */
      __IOM uint32_t HSI_Dis    : 1;            /*!< [29..29] HSI Disable                                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSI_POR_Ready : 1;         /*!< [31..31] LSI POR ready                                                    */
    } REG_63_TMR2_b;
  } ;
  __IOM uint32_t  RTC_CNT_TMR0;                 /*!< (@ 0x00000130) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR0;                /*!< (@ 0x00000134) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR0;                /*!< (@ 0x00000138) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR0;               /*!< (@ 0x0000013C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR0;                 /*!< (@ 0x00000140) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR0_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  RTC_CNT_TMR1;                 /*!< (@ 0x00000150) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR1;                /*!< (@ 0x00000154) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR1;                /*!< (@ 0x00000158) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR1;               /*!< (@ 0x0000015C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR1;                 /*!< (@ 0x00000160) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR1_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  RTC_CNT_TMR2;                 /*!< (@ 0x00000170) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR2;                /*!< (@ 0x00000174) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR2;                /*!< (@ 0x00000178) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR2;               /*!< (@ 0x0000017C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR2;                 /*!< (@ 0x00000180) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR2_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t BLDO_CTRL0;                  /*!< (@ 0x00000190) Battery LDO Control                                        */
    
    struct {
      __IOM uint32_t BLDO_Dis   : 1;            /*!< [0..0] Disable Battery LDO                                                */
      __IOM uint32_t BLDO_Trim  : 3;            /*!< [3..1] LDO_Bat Trim                                                       */
      __IOM uint32_t BLDO_SRILow : 3;           /*!< [6..4] LDO_Bat Power adjustment                                           */
      __IOM uint32_t BLDO_RDY   : 1;            /*!< [7..7] BLDO Ready                                                         */
      __IOM uint32_t ECC_Dis    : 1;            /*!< [8..8] Disable ECC                                                        */
      __IM  uint32_t            : 22;
      __IOM uint32_t PMU_BG_Dis : 1;            /*!< [31..31] Disable PMU                                                      */
    } BLDO_CTRL0_b;
  } ;
  
  union {
    __IOM uint32_t BLDO_CTRL1;                  /*!< (@ 0x00000194) Battery LDO Control                                        */
    
    struct {
      __IOM uint32_t BLDO_Dis   : 1;            /*!< [0..0] Disable Battery LDO                                                */
      __IOM uint32_t BLDO_Trim  : 3;            /*!< [3..1] LDO_Bat Trim                                                       */
      __IOM uint32_t BLDO_SRILow : 3;           /*!< [6..4] LDO_Bat Power adjustment                                           */
      __IOM uint32_t BLDO_RDY   : 1;            /*!< [7..7] BLDO Ready                                                         */
      __IOM uint32_t ECC_Dis    : 1;            /*!< [8..8] Disable ECC                                                        */
      __IM  uint32_t            : 22;
      __IOM uint32_t PMU_BG_Dis : 1;            /*!< [31..31] Disable PMU                                                      */
    } BLDO_CTRL1_b;
  } ;
  
  union {
    __IOM uint32_t BLDO_CTRL2;                  /*!< (@ 0x00000198) Battery LDO Control                                        */
    
    struct {
      __IOM uint32_t BLDO_Dis   : 1;            /*!< [0..0] Disable Battery LDO                                                */
      __IOM uint32_t BLDO_Trim  : 3;            /*!< [3..1] LDO_Bat Trim                                                       */
      __IOM uint32_t BLDO_SRILow : 3;           /*!< [6..4] LDO_Bat Power adjustment                                           */
      __IOM uint32_t BLDO_RDY   : 1;            /*!< [7..7] BLDO Ready                                                         */
      __IOM uint32_t ECC_Dis    : 1;            /*!< [8..8] Disable ECC                                                        */
      __IM  uint32_t            : 22;
      __IOM uint32_t PMU_BG_Dis : 1;            /*!< [31..31] Disable PMU                                                      */
    } BLDO_CTRL2_b;
  } ;
} MDR_BKP_Type;                                 /*!< Size = 412 (0x19c)                                                        */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define MDR_RST_CLOCK_BASE          0x40000000UL
#define MDR_BKP_BASE                0x40001000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define MDR_RST_CLOCK               ((MDR_RST_CLOCK_Type*)     MDR_RST_CLOCK_BASE)
#define MDR_BKP                     ((MDR_BKP_Type*)           MDR_BKP_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
#define MDR_RST_CLOCK_KEY_Value_Pos       (0UL)                     /*!< MDR_RST_CLOCK KEY: Value (Bit 0)                      */
#define MDR_RST_CLOCK_KEY_Value_Msk       (0xffffffffUL)            /*!< MDR_RST_CLOCK KEY: Value (Bitfield-Mask: 0xffffffff)  */
/* ========================================================  MAX_CLK  ======================================================== */
#define MDR_RST_CLOCK_MAX_CLK_Select_Pos  (0UL)                     /*!< MDR_RST_CLOCK MAX_CLK: Select (Bit 0)                 */
#define MDR_RST_CLOCK_MAX_CLK_Select_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK MAX_CLK: Select (Bitfield-Mask: 0x0f)   */
/* ========================================================  CPU_CLK  ======================================================== */
#define MDR_RST_CLOCK_CPU_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK CPU_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_CPU_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK CPU_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  PER0_CLK  ======================================================== */
#define MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Pos (13UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortA_CLK_EN (Bit 13)         */
#define MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Msk (0x2000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Pos (14UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortB_CLK_EN (Bit 14)         */
#define MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Msk (0x4000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Pos (15UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortC_CLK_EN (Bit 15)         */
#define MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Msk (0x8000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Pos (16UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortD_CLK_EN (Bit 16)         */
#define MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Msk (0x10000UL)         /*!< MDR_RST_CLOCK PER0_CLK: PortD_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_SDIO_CLK_EN_Pos (21UL)               /*!< MDR_RST_CLOCK PER0_CLK: SDIO_CLK_EN (Bit 21)          */
#define MDR_RST_CLOCK_PER0_CLK_SDIO_CLK_EN_Msk (0x200000UL)         /*!< MDR_RST_CLOCK PER0_CLK: SDIO_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_SSP1_CLK_EN_Pos (22UL)               /*!< MDR_RST_CLOCK PER0_CLK: SSP1_CLK_EN (Bit 22)          */
#define MDR_RST_CLOCK_PER0_CLK_SSP1_CLK_EN_Msk (0x400000UL)         /*!< MDR_RST_CLOCK PER0_CLK: SSP1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_SSP2_CLK_EN_Pos (23UL)               /*!< MDR_RST_CLOCK PER0_CLK: SSP2_CLK_EN (Bit 23)          */
#define MDR_RST_CLOCK_PER0_CLK_SSP2_CLK_EN_Msk (0x800000UL)         /*!< MDR_RST_CLOCK PER0_CLK: SSP2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Pos (24UL)               /*!< MDR_RST_CLOCK PER0_CLK: CAN1_CLK_EN (Bit 24)          */
#define MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Msk (0x1000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: CAN1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_Pos (25UL)               /*!< MDR_RST_CLOCK PER0_CLK: CAN2_CLK_EN (Bit 25)          */
#define MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_Msk (0x2000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: CAN2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_UART1_CLK_EN_Pos (26UL)              /*!< MDR_RST_CLOCK PER0_CLK: UART1_CLK_EN (Bit 26)         */
#define MDR_RST_CLOCK_PER0_CLK_UART1_CLK_EN_Msk (0x4000000UL)       /*!< MDR_RST_CLOCK PER0_CLK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_UART2_CLK_EN_Pos (27UL)              /*!< MDR_RST_CLOCK PER0_CLK: UART2_CLK_EN (Bit 27)         */
#define MDR_RST_CLOCK_PER0_CLK_UART2_CLK_EN_Msk (0x8000000UL)       /*!< MDR_RST_CLOCK PER0_CLK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_UART3_CLK_EN_Pos (28UL)              /*!< MDR_RST_CLOCK PER0_CLK: UART3_CLK_EN (Bit 28)         */
#define MDR_RST_CLOCK_PER0_CLK_UART3_CLK_EN_Msk (0x10000000UL)      /*!< MDR_RST_CLOCK PER0_CLK: UART3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_UART4_CLK_EN_Pos (29UL)              /*!< MDR_RST_CLOCK PER0_CLK: UART4_CLK_EN (Bit 29)         */
#define MDR_RST_CLOCK_PER0_CLK_UART4_CLK_EN_Msk (0x20000000UL)      /*!< MDR_RST_CLOCK PER0_CLK: UART4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_MIL_CLK_EN_Pos (30UL)                /*!< MDR_RST_CLOCK PER0_CLK: MIL_CLK_EN (Bit 30)           */
#define MDR_RST_CLOCK_PER0_CLK_MIL_CLK_EN_Msk (0x40000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: MIL_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_USB_CLK_EN_Pos (31UL)                /*!< MDR_RST_CLOCK PER0_CLK: USB_CLK_EN (Bit 31)           */
#define MDR_RST_CLOCK_PER0_CLK_USB_CLK_EN_Msk (0x80000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: USB_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  PER1_CLK  ======================================================== */
#define MDR_RST_CLOCK_PER1_CLK_TIM1_CLK_EN_Pos (0UL)                /*!< MDR_RST_CLOCK PER1_CLK: TIM1_CLK_EN (Bit 0)           */
#define MDR_RST_CLOCK_PER1_CLK_TIM1_CLK_EN_Msk (0x1UL)              /*!< MDR_RST_CLOCK PER1_CLK: TIM1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_TIM2_CLK_EN_Pos (1UL)                /*!< MDR_RST_CLOCK PER1_CLK: TIM2_CLK_EN (Bit 1)           */
#define MDR_RST_CLOCK_PER1_CLK_TIM2_CLK_EN_Msk (0x2UL)              /*!< MDR_RST_CLOCK PER1_CLK: TIM2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_TIM3_CLK_EN_Pos (2UL)                /*!< MDR_RST_CLOCK PER1_CLK: TIM3_CLK_EN (Bit 2)           */
#define MDR_RST_CLOCK_PER1_CLK_TIM3_CLK_EN_Msk (0x4UL)              /*!< MDR_RST_CLOCK PER1_CLK: TIM3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_TIM4_CLK_EN_Pos (3UL)                /*!< MDR_RST_CLOCK PER1_CLK: TIM4_CLK_EN (Bit 3)           */
#define MDR_RST_CLOCK_PER1_CLK_TIM4_CLK_EN_Msk (0x8UL)              /*!< MDR_RST_CLOCK PER1_CLK: TIM4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CAP1_CLK_EN_Pos (4UL)                /*!< MDR_RST_CLOCK PER1_CLK: CAP1_CLK_EN (Bit 4)           */
#define MDR_RST_CLOCK_PER1_CLK_CAP1_CLK_EN_Msk (0x10UL)             /*!< MDR_RST_CLOCK PER1_CLK: CAP1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CAP2_CLK_EN_Pos (5UL)                /*!< MDR_RST_CLOCK PER1_CLK: CAP2_CLK_EN (Bit 5)           */
#define MDR_RST_CLOCK_PER1_CLK_CAP2_CLK_EN_Msk (0x20UL)             /*!< MDR_RST_CLOCK PER1_CLK: CAP2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CAP3_CLK_EN_Pos (6UL)                /*!< MDR_RST_CLOCK PER1_CLK: CAP3_CLK_EN (Bit 6)           */
#define MDR_RST_CLOCK_PER1_CLK_CAP3_CLK_EN_Msk (0x40UL)             /*!< MDR_RST_CLOCK PER1_CLK: CAP3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CAP4_CLK_EN_Pos (7UL)                /*!< MDR_RST_CLOCK PER1_CLK: CAP4_CLK_EN (Bit 7)           */
#define MDR_RST_CLOCK_PER1_CLK_CAP4_CLK_EN_Msk (0x80UL)             /*!< MDR_RST_CLOCK PER1_CLK: CAP4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_QEP1_CLK_EN_Pos (8UL)                /*!< MDR_RST_CLOCK PER1_CLK: QEP1_CLK_EN (Bit 8)           */
#define MDR_RST_CLOCK_PER1_CLK_QEP1_CLK_EN_Msk (0x100UL)            /*!< MDR_RST_CLOCK PER1_CLK: QEP1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_QEP2_CLK_EN_Pos (9UL)                /*!< MDR_RST_CLOCK PER1_CLK: QEP2_CLK_EN (Bit 9)           */
#define MDR_RST_CLOCK_PER1_CLK_QEP2_CLK_EN_Msk (0x200UL)            /*!< MDR_RST_CLOCK PER1_CLK: QEP2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM1_CLK_EN_Pos (10UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM1_CLK_EN (Bit 10)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM1_CLK_EN_Msk (0x400UL)            /*!< MDR_RST_CLOCK PER1_CLK: PWM1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM2_CLK_EN_Pos (11UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM2_CLK_EN (Bit 11)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM2_CLK_EN_Msk (0x800UL)            /*!< MDR_RST_CLOCK PER1_CLK: PWM2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM3_CLK_EN_Pos (12UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM3_CLK_EN (Bit 12)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM3_CLK_EN_Msk (0x1000UL)           /*!< MDR_RST_CLOCK PER1_CLK: PWM3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM4_CLK_EN_Pos (13UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM4_CLK_EN (Bit 13)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM4_CLK_EN_Msk (0x2000UL)           /*!< MDR_RST_CLOCK PER1_CLK: PWM4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM5_CLK_EN_Pos (14UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM5_CLK_EN (Bit 14)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM5_CLK_EN_Msk (0x4000UL)           /*!< MDR_RST_CLOCK PER1_CLK: PWM5_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM6_CLK_EN_Pos (15UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM6_CLK_EN (Bit 15)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM6_CLK_EN_Msk (0x8000UL)           /*!< MDR_RST_CLOCK PER1_CLK: PWM6_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM7_CLK_EN_Pos (16UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM7_CLK_EN (Bit 16)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM7_CLK_EN_Msk (0x10000UL)          /*!< MDR_RST_CLOCK PER1_CLK: PWM7_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM8_CLK_EN_Pos (17UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM8_CLK_EN (Bit 17)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM8_CLK_EN_Msk (0x20000UL)          /*!< MDR_RST_CLOCK PER1_CLK: PWM8_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_PWM9_CLK_EN_Pos (18UL)               /*!< MDR_RST_CLOCK PER1_CLK: PWM9_CLK_EN (Bit 18)          */
#define MDR_RST_CLOCK_PER1_CLK_PWM9_CLK_EN_Msk (0x40000UL)          /*!< MDR_RST_CLOCK PER1_CLK: PWM9_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_Pos (19UL)               /*!< MDR_RST_CLOCK PER1_CLK: ADC1_CLK_EN (Bit 19)          */
#define MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_Msk (0x80000UL)          /*!< MDR_RST_CLOCK PER1_CLK: ADC1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_Pos (20UL)               /*!< MDR_RST_CLOCK PER1_CLK: ADC2_CLK_EN (Bit 20)          */
#define MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_Msk (0x100000UL)         /*!< MDR_RST_CLOCK PER1_CLK: ADC2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_ADC3_CLK_EN_Pos (21UL)               /*!< MDR_RST_CLOCK PER1_CLK: ADC3_CLK_EN (Bit 21)          */
#define MDR_RST_CLOCK_PER1_CLK_ADC3_CLK_EN_Msk (0x200000UL)         /*!< MDR_RST_CLOCK PER1_CLK: ADC3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_Pos (22UL)               /*!< MDR_RST_CLOCK PER1_CLK: DAC1_CLK_EN (Bit 22)          */
#define MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_Msk (0x400000UL)         /*!< MDR_RST_CLOCK PER1_CLK: DAC1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_Pos (23UL)               /*!< MDR_RST_CLOCK PER1_CLK: DAC2_CLK_EN (Bit 23)          */
#define MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_Msk (0x800000UL)         /*!< MDR_RST_CLOCK PER1_CLK: DAC2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_DAC3_CLK_EN_Pos (24UL)               /*!< MDR_RST_CLOCK PER1_CLK: DAC3_CLK_EN (Bit 24)          */
#define MDR_RST_CLOCK_PER1_CLK_DAC3_CLK_EN_Msk (0x1000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: DAC3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_DAC4_CLK_EN_Pos (25UL)               /*!< MDR_RST_CLOCK PER1_CLK: DAC4_CLK_EN (Bit 25)          */
#define MDR_RST_CLOCK_PER1_CLK_DAC4_CLK_EN_Msk (0x2000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: DAC4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CMP1_CLK_EN_Pos (26UL)               /*!< MDR_RST_CLOCK PER1_CLK: CMP1_CLK_EN (Bit 26)          */
#define MDR_RST_CLOCK_PER1_CLK_CMP1_CLK_EN_Msk (0x4000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: CMP1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CMP2_CLK_EN_Pos (27UL)               /*!< MDR_RST_CLOCK PER1_CLK: CMP2_CLK_EN (Bit 27)          */
#define MDR_RST_CLOCK_PER1_CLK_CMP2_CLK_EN_Msk (0x8000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: CMP2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CMP3_CLK_EN_Pos (28UL)               /*!< MDR_RST_CLOCK PER1_CLK: CMP3_CLK_EN (Bit 28)          */
#define MDR_RST_CLOCK_PER1_CLK_CMP3_CLK_EN_Msk (0x10000000UL)       /*!< MDR_RST_CLOCK PER1_CLK: CMP3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CMP4_CLK_EN_Pos (29UL)               /*!< MDR_RST_CLOCK PER1_CLK: CMP4_CLK_EN (Bit 29)          */
#define MDR_RST_CLOCK_PER1_CLK_CMP4_CLK_EN_Msk (0x20000000UL)       /*!< MDR_RST_CLOCK PER1_CLK: CMP4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_I2C_CLK_EN_Pos (30UL)                /*!< MDR_RST_CLOCK PER1_CLK: I2C_CLK_EN (Bit 30)           */
#define MDR_RST_CLOCK_PER1_CLK_I2C_CLK_EN_Msk (0x40000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: I2C_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CORDIC_CLK_EN_Pos (31UL)             /*!< MDR_RST_CLOCK PER1_CLK: CORDIC_CLK_EN (Bit 31)        */
#define MDR_RST_CLOCK_PER1_CLK_CORDIC_CLK_EN_Msk (0x80000000UL)     /*!< MDR_RST_CLOCK PER1_CLK: CORDIC_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  CPU_CHK0  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG2_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG2 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG2_Msk (0xffffUL)             /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG0_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG0 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG0_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  CPU_CHK1  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG3_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG3 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG3_Msk (0xffffUL)             /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG1_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG1 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG1_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  CPU_CHK2  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  CPU_STAT  ======================================================== */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
/* ========================================================  LSI_CLK  ======================================================== */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  LSI_CHK0  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG2_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG2 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG2_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG0_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG0 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG0_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSI_CHK1  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG3_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG3 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG3_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG1_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG1 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG1_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSI_CHK2  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  LSI_STAT  ======================================================== */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_READY_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSI_STAT: READY (Bit 20)                */
#define MDR_RST_CLOCK_LSI_STAT_READY_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSI_STAT: READY (Bitfield-Mask: 0x01)   */
/* ========================================================  LSE_CLK  ======================================================== */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  LSE_CHK0  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG3_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG3 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG3_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG1_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG1 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG1_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSE_CHK1  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG3_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG3 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG3_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG1_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG1 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG1_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSE_CHK2  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  LSE_STAT  ======================================================== */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_READY_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSE_STAT: READY (Bit 20)                */
#define MDR_RST_CLOCK_LSE_STAT_READY_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSE_STAT: READY (Bitfield-Mask: 0x01)   */
/* =======================================================  HSE0_CLK  ======================================================== */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK HSE0_CLK: HSE_ON (Bit 27)               */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK HSE0_CLK: HSE_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Pos (28UL)                   /*!< MDR_RST_CLOCK HSE0_CLK: HSE_BYP (Bit 28)              */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK HSE0_CLK: HSE_BYP (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Pos (29UL)                 /*!< MDR_RST_CLOCK HSE0_CLK: FILTER_EN (Bit 29)            */
#define MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Msk (0x20000000UL)         /*!< MDR_RST_CLOCK HSE0_CLK: FILTER_EN (Bitfield-Mask: 0x01) */
/* =======================================================  HSE0_CHK0  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE0_CHK1  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE0_CHK2  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  HSE0_STAT  ======================================================= */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE0_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_HSE0_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  HSE1_CLK  ======================================================== */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK HSE1_CLK: HSE_ON (Bit 27)               */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK HSE1_CLK: HSE_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Pos (28UL)                   /*!< MDR_RST_CLOCK HSE1_CLK: HSE_BYP (Bit 28)              */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK HSE1_CLK: HSE_BYP (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Pos (29UL)                 /*!< MDR_RST_CLOCK HSE1_CLK: FILTER_EN (Bit 29)            */
#define MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Msk (0x20000000UL)         /*!< MDR_RST_CLOCK HSE1_CLK: FILTER_EN (Bitfield-Mask: 0x01) */
/* =======================================================  HSE1_CHK0  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE1_CHK1  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE1_CHK2  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  HSE1_STAT  ======================================================= */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE1_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_HSE1_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL0_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL0_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Msk  (0x1fUL)                  /*!< MDR_RST_CLOCK PLL0_CLK: PLL_Q (Bitfield-Mask: 0x1f)   */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_N_Pos  (5UL)                     /*!< MDR_RST_CLOCK PLL0_CLK: PLL_N (Bit 5)                 */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_N_Msk  (0x3fe0UL)                /*!< MDR_RST_CLOCK PLL0_CLK: PLL_N (Bitfield-Mask: 0x1ff)  */
#define MDR_RST_CLOCK_PLL0_CLK_DV_Pos     (14UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: DV (Bit 14)                   */
#define MDR_RST_CLOCK_PLL0_CLK_DV_Msk     (0xc000UL)                /*!< MDR_RST_CLOCK PLL0_CLK: DV (Bitfield-Mask: 0x03)      */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_ReadyMode_Pos (16UL)             /*!< MDR_RST_CLOCK PLL0_CLK: PLL_ReadyMode (Bit 16)        */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_ReadyMode_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: PLL_ReadyMode (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Pos (17UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: PLL_ON (Bit 17)               */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Msk (0x20000UL)               /*!< MDR_RST_CLOCK PLL0_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL0_CLK_SELECT_Pos (18UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: SELECT (Bit 18)               */
#define MDR_RST_CLOCK_PLL0_CLK_SELECT_Msk (0x1c0000UL)              /*!< MDR_RST_CLOCK PLL0_CLK: SELECT (Bitfield-Mask: 0x07)  */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Pos (21UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT0 (Bit 21)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Msk (0x200000UL)       /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Pos (22UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT1 (Bit 22)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Msk (0x400000UL)       /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Pos (23UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT2 (Bit 23)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Msk (0x800000UL)       /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Pos (24UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT3 (Bit 24)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Pos (25UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK (Bit 25)               */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Msk (0x2000000UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Pos (26UL)        /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG0 (Bit 26)   */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Msk (0x4000000UL) /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Pos (27UL)        /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG1 (Bit 27)   */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Msk (0x8000000UL) /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Pos (28UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT0 (Bit 28)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Msk (0x10000000UL)    /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Pos (29UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT1 (Bit 29)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Msk (0x20000000UL)    /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Pos (30UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT2 (Bit 30)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Msk (0x40000000UL)    /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Pos (31UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT3 (Bit 31)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Msk (0x80000000UL)    /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  PLL0_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL0_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL0_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL0_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL0_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL0_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL1_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL1_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Msk  (0x1fUL)                  /*!< MDR_RST_CLOCK PLL1_CLK: PLL_Q (Bitfield-Mask: 0x1f)   */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_N_Pos  (5UL)                     /*!< MDR_RST_CLOCK PLL1_CLK: PLL_N (Bit 5)                 */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_N_Msk  (0x3fe0UL)                /*!< MDR_RST_CLOCK PLL1_CLK: PLL_N (Bitfield-Mask: 0x1ff)  */
#define MDR_RST_CLOCK_PLL1_CLK_DV_Pos     (14UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: DV (Bit 14)                   */
#define MDR_RST_CLOCK_PLL1_CLK_DV_Msk     (0xc000UL)                /*!< MDR_RST_CLOCK PLL1_CLK: DV (Bitfield-Mask: 0x03)      */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_ReadyMode_Pos (16UL)             /*!< MDR_RST_CLOCK PLL1_CLK: PLL_ReadyMode (Bit 16)        */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_ReadyMode_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: PLL_ReadyMode (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Pos (17UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: PLL_ON (Bit 17)               */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Msk (0x20000UL)               /*!< MDR_RST_CLOCK PLL1_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL1_CLK_SELECT_Pos (18UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: SELECT (Bit 18)               */
#define MDR_RST_CLOCK_PLL1_CLK_SELECT_Msk (0x1c0000UL)              /*!< MDR_RST_CLOCK PLL1_CLK: SELECT (Bitfield-Mask: 0x07)  */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Pos (21UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT0 (Bit 21)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Msk (0x200000UL)       /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Pos (22UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT1 (Bit 22)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Msk (0x400000UL)       /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Pos (23UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT2 (Bit 23)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Msk (0x800000UL)       /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Pos (24UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT3 (Bit 24)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Pos (25UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK (Bit 25)               */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Msk (0x2000000UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Pos (26UL)        /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG0 (Bit 26)   */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Msk (0x4000000UL) /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Pos (27UL)        /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG1 (Bit 27)   */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Msk (0x8000000UL) /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Pos (28UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT0 (Bit 28)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Msk (0x10000000UL)    /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Pos (29UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT1 (Bit 29)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Msk (0x20000000UL)    /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Pos (30UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT2 (Bit 30)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Msk (0x40000000UL)    /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Pos (31UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT3 (Bit 31)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Msk (0x80000000UL)    /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  PLL1_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL1_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL1_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL1_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL1_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL1_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL2_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL2_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Msk  (0x1fUL)                  /*!< MDR_RST_CLOCK PLL2_CLK: PLL_Q (Bitfield-Mask: 0x1f)   */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_N_Pos  (5UL)                     /*!< MDR_RST_CLOCK PLL2_CLK: PLL_N (Bit 5)                 */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_N_Msk  (0x3fe0UL)                /*!< MDR_RST_CLOCK PLL2_CLK: PLL_N (Bitfield-Mask: 0x1ff)  */
#define MDR_RST_CLOCK_PLL2_CLK_DV_Pos     (14UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: DV (Bit 14)                   */
#define MDR_RST_CLOCK_PLL2_CLK_DV_Msk     (0xc000UL)                /*!< MDR_RST_CLOCK PLL2_CLK: DV (Bitfield-Mask: 0x03)      */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_ReadyMode_Pos (16UL)             /*!< MDR_RST_CLOCK PLL2_CLK: PLL_ReadyMode (Bit 16)        */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_ReadyMode_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: PLL_ReadyMode (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Pos (17UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: PLL_ON (Bit 17)               */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Msk (0x20000UL)               /*!< MDR_RST_CLOCK PLL2_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL2_CLK_SELECT_Pos (18UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: SELECT (Bit 18)               */
#define MDR_RST_CLOCK_PLL2_CLK_SELECT_Msk (0x1c0000UL)              /*!< MDR_RST_CLOCK PLL2_CLK: SELECT (Bitfield-Mask: 0x07)  */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Pos (21UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT0 (Bit 21)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Msk (0x200000UL)       /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Pos (22UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT1 (Bit 22)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Msk (0x400000UL)       /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Pos (23UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT2 (Bit 23)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Msk (0x800000UL)       /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Pos (24UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT3 (Bit 24)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Pos (25UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK (Bit 25)               */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Msk (0x2000000UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Pos (26UL)        /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG0 (Bit 26)   */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Msk (0x4000000UL) /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Pos (27UL)        /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG1 (Bit 27)   */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Msk (0x8000000UL) /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Pos (28UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT0 (Bit 28)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Msk (0x10000000UL)    /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Pos (29UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT1 (Bit 29)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Msk (0x20000000UL)    /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Pos (30UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT2 (Bit 30)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Msk (0x40000000UL)    /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Pos (31UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT3 (Bit 31)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Msk (0x80000000UL)    /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  PLL2_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL2_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL2_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL2_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL2_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL2_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL3_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL3_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL3_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL3_CLK_PLL_Q_Msk  (0x1fUL)                  /*!< MDR_RST_CLOCK PLL3_CLK: PLL_Q (Bitfield-Mask: 0x1f)   */
#define MDR_RST_CLOCK_PLL3_CLK_PLL_N_Pos  (5UL)                     /*!< MDR_RST_CLOCK PLL3_CLK: PLL_N (Bit 5)                 */
#define MDR_RST_CLOCK_PLL3_CLK_PLL_N_Msk  (0x3fe0UL)                /*!< MDR_RST_CLOCK PLL3_CLK: PLL_N (Bitfield-Mask: 0x1ff)  */
#define MDR_RST_CLOCK_PLL3_CLK_DV_Pos     (14UL)                    /*!< MDR_RST_CLOCK PLL3_CLK: DV (Bit 14)                   */
#define MDR_RST_CLOCK_PLL3_CLK_DV_Msk     (0xc000UL)                /*!< MDR_RST_CLOCK PLL3_CLK: DV (Bitfield-Mask: 0x03)      */
#define MDR_RST_CLOCK_PLL3_CLK_PLL_ReadyMode_Pos (16UL)             /*!< MDR_RST_CLOCK PLL3_CLK: PLL_ReadyMode (Bit 16)        */
#define MDR_RST_CLOCK_PLL3_CLK_PLL_ReadyMode_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL3_CLK: PLL_ReadyMode (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_PLL_ON_Pos (17UL)                    /*!< MDR_RST_CLOCK PLL3_CLK: PLL_ON (Bit 17)               */
#define MDR_RST_CLOCK_PLL3_CLK_PLL_ON_Msk (0x20000UL)               /*!< MDR_RST_CLOCK PLL3_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL3_CLK_SELECT_Pos (18UL)                    /*!< MDR_RST_CLOCK PLL3_CLK: SELECT (Bit 18)               */
#define MDR_RST_CLOCK_PLL3_CLK_SELECT_Msk (0x1c0000UL)              /*!< MDR_RST_CLOCK PLL3_CLK: SELECT (Bitfield-Mask: 0x07)  */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT0_Pos (21UL)             /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK_EVENT0 (Bit 21)        */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT0_Msk (0x200000UL)       /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT1_Pos (22UL)             /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK_EVENT1 (Bit 22)        */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT1_Msk (0x400000UL)       /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT2_Pos (23UL)             /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK_EVENT2 (Bit 23)        */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT2_Msk (0x800000UL)       /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT3_Pos (24UL)             /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK_EVENT3 (Bit 24)        */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT3_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_Pos (25UL)                    /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK (Bit 25)               */
#define MDR_RST_CLOCK_PLL3_CLK_EN_CHK_Msk (0x2000000UL)             /*!< MDR_RST_CLOCK PLL3_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG0_Pos (26UL)        /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_SHIFT_REG0 (Bit 26)   */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG0_Msk (0x4000000UL) /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG1_Pos (27UL)        /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_SHIFT_REG1 (Bit 27)   */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG1_Msk (0x8000000UL) /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT0_Pos (28UL)            /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_EVENT0 (Bit 28)       */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT0_Msk (0x10000000UL)    /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT1_Pos (29UL)            /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_EVENT1 (Bit 29)       */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT1_Msk (0x20000000UL)    /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT2_Pos (30UL)            /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_EVENT2 (Bit 30)       */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT2_Msk (0x40000000UL)    /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT3_Pos (31UL)            /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_EVENT3 (Bit 31)       */
#define MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT3_Msk (0x80000000UL)    /*!< MDR_RST_CLOCK PLL3_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  PLL3_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL3_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL3_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL3_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL3_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL3_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL3_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL3_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL3_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL3_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL3_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL3_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL3_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL3_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL3_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL3_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL3_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL3_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL3_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL3_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL3_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL3_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL3_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL3_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL3_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL3_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL3_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL3_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL3_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL3_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL3_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL3_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL3_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL3_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL3_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL3_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL3_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL3_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL3_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL3_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL3_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL3_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL3_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL3_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL3_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL3_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL3_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL3_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL3_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL3_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL3_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL3_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL3_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL3_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL3_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL3_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL3_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL3_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL3_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL3_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL3_STAT: READY (Bitfield-Mask: 0x01)  */
/* ========================================================  ETH_CLK  ======================================================== */
#define MDR_RST_CLOCK_ETH_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK ETH_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_ETH_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK ETH_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_ETH_CLK_CLK_EN_Pos  (16UL)                    /*!< MDR_RST_CLOCK ETH_CLK: CLK_EN (Bit 16)                */
#define MDR_RST_CLOCK_ETH_CLK_CLK_EN_Msk  (0x10000UL)               /*!< MDR_RST_CLOCK ETH_CLK: CLK_EN (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_ETH_CLK_SELECT_Pos  (28UL)                    /*!< MDR_RST_CLOCK ETH_CLK: SELECT (Bit 28)                */
#define MDR_RST_CLOCK_ETH_CLK_SELECT_Msk  (0xf0000000UL)            /*!< MDR_RST_CLOCK ETH_CLK: SELECT (Bitfield-Mask: 0x0f)   */
/* ========================================================  USB_CLK  ======================================================== */
#define MDR_RST_CLOCK_USB_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK USB_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_USB_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK USB_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_USB_CLK_CLK_EN_Pos  (16UL)                    /*!< MDR_RST_CLOCK USB_CLK: CLK_EN (Bit 16)                */
#define MDR_RST_CLOCK_USB_CLK_CLK_EN_Msk  (0x10000UL)               /*!< MDR_RST_CLOCK USB_CLK: CLK_EN (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_USB_CLK_SELECT_Pos  (28UL)                    /*!< MDR_RST_CLOCK USB_CLK: SELECT (Bit 28)                */
#define MDR_RST_CLOCK_USB_CLK_SELECT_Msk  (0xf0000000UL)            /*!< MDR_RST_CLOCK USB_CLK: SELECT (Bitfield-Mask: 0x0f)   */
/* ========================================================  RTC_CLK  ======================================================== */
#define MDR_RST_CLOCK_RTC_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK RTC_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_RTC_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK RTC_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_RTC_CLK_CLK_EN_Pos  (16UL)                    /*!< MDR_RST_CLOCK RTC_CLK: CLK_EN (Bit 16)                */
#define MDR_RST_CLOCK_RTC_CLK_CLK_EN_Msk  (0x10000UL)               /*!< MDR_RST_CLOCK RTC_CLK: CLK_EN (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_RTC_CLK_SELECT_Pos  (28UL)                    /*!< MDR_RST_CLOCK RTC_CLK: SELECT (Bit 28)                */
#define MDR_RST_CLOCK_RTC_CLK_SELECT_Msk  (0xf0000000UL)            /*!< MDR_RST_CLOCK RTC_CLK: SELECT (Bitfield-Mask: 0x0f)   */
/* =======================================================  SSP1_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP1_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP1_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP1_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP1_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  SSP2_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP2_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP2_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP2_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP2_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  CAN1_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAN1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAN1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAN1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAN1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAN1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAN1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  CAN2_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAN2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAN2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAN2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAN2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAN2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAN2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAN2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAN2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  UART1_CLK  ======================================================= */
#define MDR_RST_CLOCK_UART1_CLK_DIV_Pos   (0UL)                     /*!< MDR_RST_CLOCK UART1_CLK: DIV (Bit 0)                  */
#define MDR_RST_CLOCK_UART1_CLK_DIV_Msk   (0xffffUL)                /*!< MDR_RST_CLOCK UART1_CLK: DIV (Bitfield-Mask: 0xffff)  */
#define MDR_RST_CLOCK_UART1_CLK_CLK_EN_Pos (16UL)                   /*!< MDR_RST_CLOCK UART1_CLK: CLK_EN (Bit 16)              */
#define MDR_RST_CLOCK_UART1_CLK_CLK_EN_Msk (0x10000UL)              /*!< MDR_RST_CLOCK UART1_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART1_CLK_SELECT_Pos (28UL)                   /*!< MDR_RST_CLOCK UART1_CLK: SELECT (Bit 28)              */
#define MDR_RST_CLOCK_UART1_CLK_SELECT_Msk (0xf0000000UL)           /*!< MDR_RST_CLOCK UART1_CLK: SELECT (Bitfield-Mask: 0x0f) */
/* =======================================================  UART2_CLK  ======================================================= */
#define MDR_RST_CLOCK_UART2_CLK_DIV_Pos   (0UL)                     /*!< MDR_RST_CLOCK UART2_CLK: DIV (Bit 0)                  */
#define MDR_RST_CLOCK_UART2_CLK_DIV_Msk   (0xffffUL)                /*!< MDR_RST_CLOCK UART2_CLK: DIV (Bitfield-Mask: 0xffff)  */
#define MDR_RST_CLOCK_UART2_CLK_CLK_EN_Pos (16UL)                   /*!< MDR_RST_CLOCK UART2_CLK: CLK_EN (Bit 16)              */
#define MDR_RST_CLOCK_UART2_CLK_CLK_EN_Msk (0x10000UL)              /*!< MDR_RST_CLOCK UART2_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART2_CLK_SELECT_Pos (28UL)                   /*!< MDR_RST_CLOCK UART2_CLK: SELECT (Bit 28)              */
#define MDR_RST_CLOCK_UART2_CLK_SELECT_Msk (0xf0000000UL)           /*!< MDR_RST_CLOCK UART2_CLK: SELECT (Bitfield-Mask: 0x0f) */
/* =======================================================  UART3_CLK  ======================================================= */
#define MDR_RST_CLOCK_UART3_CLK_DIV_Pos   (0UL)                     /*!< MDR_RST_CLOCK UART3_CLK: DIV (Bit 0)                  */
#define MDR_RST_CLOCK_UART3_CLK_DIV_Msk   (0xffffUL)                /*!< MDR_RST_CLOCK UART3_CLK: DIV (Bitfield-Mask: 0xffff)  */
#define MDR_RST_CLOCK_UART3_CLK_CLK_EN_Pos (16UL)                   /*!< MDR_RST_CLOCK UART3_CLK: CLK_EN (Bit 16)              */
#define MDR_RST_CLOCK_UART3_CLK_CLK_EN_Msk (0x10000UL)              /*!< MDR_RST_CLOCK UART3_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART3_CLK_SELECT_Pos (28UL)                   /*!< MDR_RST_CLOCK UART3_CLK: SELECT (Bit 28)              */
#define MDR_RST_CLOCK_UART3_CLK_SELECT_Msk (0xf0000000UL)           /*!< MDR_RST_CLOCK UART3_CLK: SELECT (Bitfield-Mask: 0x0f) */
/* =======================================================  UART4_CLK  ======================================================= */
#define MDR_RST_CLOCK_UART4_CLK_DIV_Pos   (0UL)                     /*!< MDR_RST_CLOCK UART4_CLK: DIV (Bit 0)                  */
#define MDR_RST_CLOCK_UART4_CLK_DIV_Msk   (0xffffUL)                /*!< MDR_RST_CLOCK UART4_CLK: DIV (Bitfield-Mask: 0xffff)  */
#define MDR_RST_CLOCK_UART4_CLK_CLK_EN_Pos (16UL)                   /*!< MDR_RST_CLOCK UART4_CLK: CLK_EN (Bit 16)              */
#define MDR_RST_CLOCK_UART4_CLK_CLK_EN_Msk (0x10000UL)              /*!< MDR_RST_CLOCK UART4_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART4_CLK_SELECT_Pos (28UL)                   /*!< MDR_RST_CLOCK UART4_CLK: SELECT (Bit 28)              */
#define MDR_RST_CLOCK_UART4_CLK_SELECT_Msk (0xf0000000UL)           /*!< MDR_RST_CLOCK UART4_CLK: SELECT (Bitfield-Mask: 0x0f) */
/* ========================================================  MIL_CLK  ======================================================== */
#define MDR_RST_CLOCK_MIL_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK MIL_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_MIL_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK MIL_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_MIL_CLK_CLK_EN_Pos  (16UL)                    /*!< MDR_RST_CLOCK MIL_CLK: CLK_EN (Bit 16)                */
#define MDR_RST_CLOCK_MIL_CLK_CLK_EN_Msk  (0x10000UL)               /*!< MDR_RST_CLOCK MIL_CLK: CLK_EN (Bitfield-Mask: 0x01)   */
/* =======================================================  TIM1_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM2_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM3_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM3_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM3_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM3_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM3_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM3_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM3_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM4_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM4_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM4_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM4_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM4_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM4_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM4_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  CAP1_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAP1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAP1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAP1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAP1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAP1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAP1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAP1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAP1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  CAP2_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAP2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAP2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAP2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAP2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAP2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAP2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAP2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAP2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  CAP3_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAP3_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAP3_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAP3_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAP3_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAP3_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAP3_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAP3_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAP3_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  CAP4_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAP4_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAP4_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAP4_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAP4_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAP4_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAP4_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAP4_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAP4_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  QEP1_CLK  ======================================================== */
#define MDR_RST_CLOCK_QEP1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK QEP1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_QEP1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK QEP1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_QEP1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK QEP1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_QEP1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK QEP1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  QEP2_CLK  ======================================================== */
#define MDR_RST_CLOCK_QEP2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK QEP2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_QEP2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK QEP2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_QEP2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK QEP2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_QEP2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK QEP2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM1_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM2_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM3_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM3_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM3_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM3_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM3_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM3_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM3_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM3_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM3_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM4_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM4_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM4_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM4_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM4_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM4_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM4_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM4_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM4_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM5_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM5_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM5_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM5_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM5_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM5_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM5_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM5_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM5_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM6_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM6_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM6_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM6_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM6_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM6_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM6_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM6_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM6_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM7_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM7_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM7_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM7_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM7_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM7_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM7_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM7_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM7_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM8_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM8_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM8_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM8_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM8_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM8_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM8_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM8_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM8_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  PWM9_CLK  ======================================================== */
#define MDR_RST_CLOCK_PWM9_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK PWM9_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_PWM9_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK PWM9_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_PWM9_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK PWM9_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_PWM9_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK PWM9_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  ADC1_CLK  ======================================================== */
#define MDR_RST_CLOCK_ADC1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK ADC1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_ADC1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK ADC1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_ADC1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK ADC1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_ADC1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK ADC1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_ADC1_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK ADC1_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_ADC1_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK ADC1_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  ADC2_CLK  ======================================================== */
#define MDR_RST_CLOCK_ADC2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK ADC2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_ADC2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK ADC2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_ADC2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK ADC2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_ADC2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK ADC2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_ADC2_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK ADC2_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_ADC2_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK ADC2_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  ADC3_CLK  ======================================================== */
#define MDR_RST_CLOCK_ADC3_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK ADC3_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_ADC3_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK ADC3_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_ADC3_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK ADC3_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_ADC3_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK ADC3_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_ADC3_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK ADC3_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_ADC3_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK ADC3_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* ======================================================  CORDIC_CLK  ======================================================= */
#define MDR_RST_CLOCK_CORDIC_CLK_DIV_Pos  (0UL)                     /*!< MDR_RST_CLOCK CORDIC_CLK: DIV (Bit 0)                 */
#define MDR_RST_CLOCK_CORDIC_CLK_DIV_Msk  (0xffffUL)                /*!< MDR_RST_CLOCK CORDIC_CLK: DIV (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_CORDIC_CLK_CLK_EN_Pos (16UL)                  /*!< MDR_RST_CLOCK CORDIC_CLK: CLK_EN (Bit 16)             */
#define MDR_RST_CLOCK_CORDIC_CLK_CLK_EN_Msk (0x10000UL)             /*!< MDR_RST_CLOCK CORDIC_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CORDIC_CLK_SELECT_Pos (28UL)                  /*!< MDR_RST_CLOCK CORDIC_CLK: SELECT (Bit 28)             */
#define MDR_RST_CLOCK_CORDIC_CLK_SELECT_Msk (0xf0000000UL)          /*!< MDR_RST_CLOCK CORDIC_CLK: SELECT (Bitfield-Mask: 0x0f) */


/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  REG  ========================================================== */
/* ==========================================================  KEY  ========================================================== */
/* ======================================================  REG_64_TMR0  ====================================================== */
#define MDR_BKP_REG_64_TMR0_RTC_Sel_Pos   (0UL)                     /*!< MDR_BKP REG_64_TMR0: RTC_Sel (Bit 0)                  */
#define MDR_BKP_REG_64_TMR0_RTC_Sel_Msk   (0x3UL)                   /*!< MDR_BKP REG_64_TMR0: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_64_TMR0_RTC_Cal_Pos   (2UL)                     /*!< MDR_BKP REG_64_TMR0: RTC_Cal (Bit 2)                  */
#define MDR_BKP_REG_64_TMR0_RTC_Cal_Msk   (0x3fcUL)                 /*!< MDR_BKP REG_64_TMR0: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_64_TMR0_RTC_RST_Pos   (10UL)                    /*!< MDR_BKP REG_64_TMR0: RTC_RST (Bit 10)                 */
#define MDR_BKP_REG_64_TMR0_RTC_RST_Msk   (0x400UL)                 /*!< MDR_BKP REG_64_TMR0: RTC_RST (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_64_TMR0_RTC_En_Pos    (11UL)                    /*!< MDR_BKP REG_64_TMR0: RTC_En (Bit 11)                  */
#define MDR_BKP_REG_64_TMR0_RTC_En_Msk    (0x800UL)                 /*!< MDR_BKP REG_64_TMR0: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_64_TMR0_CProt_Lim_Pos (12UL)                    /*!< MDR_BKP REG_64_TMR0: CProt_Lim (Bit 12)               */
#define MDR_BKP_REG_64_TMR0_CProt_Lim_Msk (0x3ff000UL)              /*!< MDR_BKP REG_64_TMR0: CProt_Lim (Bitfield-Mask: 0x3ff) */
#define MDR_BKP_REG_64_TMR0_CProt_Count_Pos (22UL)                  /*!< MDR_BKP REG_64_TMR0: CProt_Count (Bit 22)             */
#define MDR_BKP_REG_64_TMR0_CProt_Count_Msk (0xffc00000UL)          /*!< MDR_BKP REG_64_TMR0: CProt_Count (Bitfield-Mask: 0x3ff) */
/* ======================================================  REG_64_TMR1  ====================================================== */
#define MDR_BKP_REG_64_TMR1_RTC_Sel_Pos   (0UL)                     /*!< MDR_BKP REG_64_TMR1: RTC_Sel (Bit 0)                  */
#define MDR_BKP_REG_64_TMR1_RTC_Sel_Msk   (0x3UL)                   /*!< MDR_BKP REG_64_TMR1: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_64_TMR1_RTC_Cal_Pos   (2UL)                     /*!< MDR_BKP REG_64_TMR1: RTC_Cal (Bit 2)                  */
#define MDR_BKP_REG_64_TMR1_RTC_Cal_Msk   (0x3fcUL)                 /*!< MDR_BKP REG_64_TMR1: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_64_TMR1_RTC_RST_Pos   (10UL)                    /*!< MDR_BKP REG_64_TMR1: RTC_RST (Bit 10)                 */
#define MDR_BKP_REG_64_TMR1_RTC_RST_Msk   (0x400UL)                 /*!< MDR_BKP REG_64_TMR1: RTC_RST (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_64_TMR1_RTC_En_Pos    (11UL)                    /*!< MDR_BKP REG_64_TMR1: RTC_En (Bit 11)                  */
#define MDR_BKP_REG_64_TMR1_RTC_En_Msk    (0x800UL)                 /*!< MDR_BKP REG_64_TMR1: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_64_TMR1_CProt_Lim_Pos (12UL)                    /*!< MDR_BKP REG_64_TMR1: CProt_Lim (Bit 12)               */
#define MDR_BKP_REG_64_TMR1_CProt_Lim_Msk (0x3ff000UL)              /*!< MDR_BKP REG_64_TMR1: CProt_Lim (Bitfield-Mask: 0x3ff) */
#define MDR_BKP_REG_64_TMR1_CProt_Count_Pos (22UL)                  /*!< MDR_BKP REG_64_TMR1: CProt_Count (Bit 22)             */
#define MDR_BKP_REG_64_TMR1_CProt_Count_Msk (0xffc00000UL)          /*!< MDR_BKP REG_64_TMR1: CProt_Count (Bitfield-Mask: 0x3ff) */
/* ======================================================  REG_64_TMR2  ====================================================== */
#define MDR_BKP_REG_64_TMR2_RTC_Sel_Pos   (0UL)                     /*!< MDR_BKP REG_64_TMR2: RTC_Sel (Bit 0)                  */
#define MDR_BKP_REG_64_TMR2_RTC_Sel_Msk   (0x3UL)                   /*!< MDR_BKP REG_64_TMR2: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_64_TMR2_RTC_Cal_Pos   (2UL)                     /*!< MDR_BKP REG_64_TMR2: RTC_Cal (Bit 2)                  */
#define MDR_BKP_REG_64_TMR2_RTC_Cal_Msk   (0x3fcUL)                 /*!< MDR_BKP REG_64_TMR2: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_64_TMR2_RTC_RST_Pos   (10UL)                    /*!< MDR_BKP REG_64_TMR2: RTC_RST (Bit 10)                 */
#define MDR_BKP_REG_64_TMR2_RTC_RST_Msk   (0x400UL)                 /*!< MDR_BKP REG_64_TMR2: RTC_RST (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_64_TMR2_RTC_En_Pos    (11UL)                    /*!< MDR_BKP REG_64_TMR2: RTC_En (Bit 11)                  */
#define MDR_BKP_REG_64_TMR2_RTC_En_Msk    (0x800UL)                 /*!< MDR_BKP REG_64_TMR2: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_64_TMR2_CProt_Lim_Pos (12UL)                    /*!< MDR_BKP REG_64_TMR2: CProt_Lim (Bit 12)               */
#define MDR_BKP_REG_64_TMR2_CProt_Lim_Msk (0x3ff000UL)              /*!< MDR_BKP REG_64_TMR2: CProt_Lim (Bitfield-Mask: 0x3ff) */
#define MDR_BKP_REG_64_TMR2_CProt_Count_Pos (22UL)                  /*!< MDR_BKP REG_64_TMR2: CProt_Count (Bit 22)             */
#define MDR_BKP_REG_64_TMR2_CProt_Count_Msk (0xffc00000UL)          /*!< MDR_BKP REG_64_TMR2: CProt_Count (Bitfield-Mask: 0x3ff) */
/* ======================================================  REG_60_TMR0  ====================================================== */
#define MDR_BKP_REG_60_TMR0_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR0: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR0_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR0: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR0_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR0: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR0_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR0: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR0_JTAG_Enable_Pos (8UL)                   /*!< MDR_BKP REG_60_TMR0: JTAG_Enable (Bit 8)              */
#define MDR_BKP_REG_60_TMR0_JTAG_Enable_Msk (0x100UL)               /*!< MDR_BKP REG_60_TMR0: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LockStep_On_Pos (9UL)                   /*!< MDR_BKP REG_60_TMR0: LockStep_On (Bit 9)              */
#define MDR_BKP_REG_60_TMR0_LockStep_On_Msk (0x200UL)               /*!< MDR_BKP REG_60_TMR0: LockStep_On (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_S_SYSRSTn_Pos (10UL)                    /*!< MDR_BKP REG_60_TMR0: S_SYSRSTn (Bit 10)               */
#define MDR_BKP_REG_60_TMR0_S_SYSRSTn_Msk (0x400UL)                 /*!< MDR_BKP REG_60_TMR0: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR0_S_RSTn1_Pos   (11UL)                    /*!< MDR_BKP REG_60_TMR0: S_RSTn1 (Bit 11)                 */
#define MDR_BKP_REG_60_TMR0_S_RSTn1_Msk   (0x800UL)                 /*!< MDR_BKP REG_60_TMR0: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_S_RSTn0_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR0: S_RSTn0 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR0_S_RSTn0_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR0: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_S_FT_Reset_Pos (13UL)                   /*!< MDR_BKP REG_60_TMR0: S_FT_Reset (Bit 13)              */
#define MDR_BKP_REG_60_TMR0_S_FT_Reset_Msk (0x2000UL)               /*!< MDR_BKP REG_60_TMR0: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_S_WDT_Reset_Pos (14UL)                  /*!< MDR_BKP REG_60_TMR0: S_WDT_Reset (Bit 14)             */
#define MDR_BKP_REG_60_TMR0_S_WDT_Reset_Msk (0x4000UL)              /*!< MDR_BKP REG_60_TMR0: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR0_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR0: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR0: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR0: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR0_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR0: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR0: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR0_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR0: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR0: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR0  ====================================================== */
#define MDR_BKP_REG_61_TMR0_POR3p3_Dis_Pos (0UL)                    /*!< MDR_BKP REG_61_TMR0: POR3p3_Dis (Bit 0)               */
#define MDR_BKP_REG_61_TMR0_POR3p3_Dis_Msk (0x1UL)                  /*!< MDR_BKP REG_61_TMR0: POR3p3_Dis (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR0_ORV3p3_Dis_Pos (1UL)                    /*!< MDR_BKP REG_61_TMR0: ORV3p3_Dis (Bit 1)               */
#define MDR_BKP_REG_61_TMR0_ORV3p3_Dis_Msk (0x2UL)                  /*!< MDR_BKP REG_61_TMR0: ORV3p3_Dis (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_Pos (2UL)                 /*!< MDR_BKP REG_61_TMR0: bg_trimVdd1p6 (Bit 2)            */
#define MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_Msk (0x1cUL)              /*!< MDR_BKP REG_61_TMR0: bg_trimVdd1p6 (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_Pos (5UL)                 /*!< MDR_BKP REG_61_TMR0: bg_trimVdd1p2 (Bit 5)            */
#define MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_Msk (0xe0UL)              /*!< MDR_BKP REG_61_TMR0: bg_trimVdd1p2 (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_DCDC_En_Pos   (8UL)                     /*!< MDR_BKP REG_61_TMR0: DCDC_En (Bit 8)                  */
#define MDR_BKP_REG_61_TMR0_DCDC_En_Msk   (0x100UL)                 /*!< MDR_BKP REG_61_TMR0: DCDC_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_DCDC_Trim_Pos (9UL)                     /*!< MDR_BKP REG_61_TMR0: DCDC_Trim (Bit 9)                */
#define MDR_BKP_REG_61_TMR0_DCDC_Trim_Msk (0x1e00UL)                /*!< MDR_BKP REG_61_TMR0: DCDC_Trim (Bitfield-Mask: 0x0f)  */
#define MDR_BKP_REG_61_TMR0_HLDO_SRILow_Pos (13UL)                  /*!< MDR_BKP REG_61_TMR0: HLDO_SRILow (Bit 13)             */
#define MDR_BKP_REG_61_TMR0_HLDO_SRILow_Msk (0xe000UL)              /*!< MDR_BKP REG_61_TMR0: HLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_HLDO_Dis_Pos  (16UL)                    /*!< MDR_BKP REG_61_TMR0: HLDO_Dis (Bit 16)                */
#define MDR_BKP_REG_61_TMR0_HLDO_Dis_Msk  (0x10000UL)               /*!< MDR_BKP REG_61_TMR0: HLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_LLDO_Dis_Pos  (17UL)                    /*!< MDR_BKP REG_61_TMR0: LLDO_Dis (Bit 17)                */
#define MDR_BKP_REG_61_TMR0_LLDO_Dis_Msk  (0x20000UL)               /*!< MDR_BKP REG_61_TMR0: LLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_Temp_En_Pos   (18UL)                    /*!< MDR_BKP REG_61_TMR0: Temp_En (Bit 18)                 */
#define MDR_BKP_REG_61_TMR0_Temp_En_Msk   (0x40000UL)               /*!< MDR_BKP REG_61_TMR0: Temp_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_CProt_En_Pos  (19UL)                    /*!< MDR_BKP REG_61_TMR0: CProt_En (Bit 19)                */
#define MDR_BKP_REG_61_TMR0_CProt_En_Msk  (0x80000UL)               /*!< MDR_BKP REG_61_TMR0: CProt_En (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_P3p3_RDY_Pos  (21UL)                    /*!< MDR_BKP REG_61_TMR0: P3p3_RDY (Bit 21)                */
#define MDR_BKP_REG_61_TMR0_P3p3_RDY_Msk  (0x200000UL)              /*!< MDR_BKP REG_61_TMR0: P3p3_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_S_nPOR3p3_Pos (22UL)                    /*!< MDR_BKP REG_61_TMR0: S_nPOR3p3 (Bit 22)               */
#define MDR_BKP_REG_61_TMR0_S_nPOR3p3_Msk (0x400000UL)              /*!< MDR_BKP REG_61_TMR0: S_nPOR3p3 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR0_S_nPOR1p6_Pos (23UL)                    /*!< MDR_BKP REG_61_TMR0: S_nPOR1p6 (Bit 23)               */
#define MDR_BKP_REG_61_TMR0_S_nPOR1p6_Msk (0x800000UL)              /*!< MDR_BKP REG_61_TMR0: S_nPOR1p6 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR0_S_nPOR1p2_Pos (24UL)                    /*!< MDR_BKP REG_61_TMR0: S_nPOR1p2 (Bit 24)               */
#define MDR_BKP_REG_61_TMR0_S_nPOR1p2_Msk (0x1000000UL)             /*!< MDR_BKP REG_61_TMR0: S_nPOR1p2 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR0_S_nOVRST3p3_Pos (25UL)                  /*!< MDR_BKP REG_61_TMR0: S_nOVRST3p3 (Bit 25)             */
#define MDR_BKP_REG_61_TMR0_S_nOVRST3p3_Msk (0x2000000UL)           /*!< MDR_BKP REG_61_TMR0: S_nOVRST3p3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR0_LLDO_RDY_Pos  (26UL)                    /*!< MDR_BKP REG_61_TMR0: LLDO_RDY (Bit 26)                */
#define MDR_BKP_REG_61_TMR0_LLDO_RDY_Msk  (0x4000000UL)             /*!< MDR_BKP REG_61_TMR0: LLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_DCDC_RDY_Pos  (27UL)                    /*!< MDR_BKP REG_61_TMR0: DCDC_RDY (Bit 27)                */
#define MDR_BKP_REG_61_TMR0_DCDC_RDY_Msk  (0x8000000UL)             /*!< MDR_BKP REG_61_TMR0: DCDC_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_HLDO_RDY_Pos  (28UL)                    /*!< MDR_BKP REG_61_TMR0: HLDO_RDY (Bit 28)                */
#define MDR_BKP_REG_61_TMR0_HLDO_RDY_Msk  (0x10000000UL)            /*!< MDR_BKP REG_61_TMR0: HLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_CProt_Event_Pos (29UL)                  /*!< MDR_BKP REG_61_TMR0: CProt_Event (Bit 29)             */
#define MDR_BKP_REG_61_TMR0_CProt_Event_Msk (0x20000000UL)          /*!< MDR_BKP REG_61_TMR0: CProt_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR0_TProt_Event_Pos (30UL)                  /*!< MDR_BKP REG_61_TMR0: TProt_Event (Bit 30)             */
#define MDR_BKP_REG_61_TMR0_TProt_Event_Msk (0x40000000UL)          /*!< MDR_BKP REG_61_TMR0: TProt_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR0_STANDBY_Pos   (31UL)                    /*!< MDR_BKP REG_61_TMR0: STANDBY (Bit 31)                 */
#define MDR_BKP_REG_61_TMR0_STANDBY_Msk   (0x80000000UL)            /*!< MDR_BKP REG_61_TMR0: STANDBY (Bitfield-Mask: 0x01)    */
/* ======================================================  REG_62_TMR0  ====================================================== */
#define MDR_BKP_REG_62_TMR0_BLDO_Dis_Pos  (0UL)                     /*!< MDR_BKP REG_62_TMR0: BLDO_Dis (Bit 0)                 */
#define MDR_BKP_REG_62_TMR0_BLDO_Dis_Msk  (0x1UL)                   /*!< MDR_BKP REG_62_TMR0: BLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_62_TMR0_BLDO_Trim_Pos (1UL)                     /*!< MDR_BKP REG_62_TMR0: BLDO_Trim (Bit 1)                */
#define MDR_BKP_REG_62_TMR0_BLDO_Trim_Msk (0xeUL)                   /*!< MDR_BKP REG_62_TMR0: BLDO_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_62_TMR0_BLDO_SRILow_Pos (4UL)                   /*!< MDR_BKP REG_62_TMR0: BLDO_SRILow (Bit 4)              */
#define MDR_BKP_REG_62_TMR0_BLDO_SRILow_Msk (0x70UL)                /*!< MDR_BKP REG_62_TMR0: BLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_BLDO_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_62_TMR0: BLDO_RDY (Bit 7)                 */
#define MDR_BKP_REG_62_TMR0_BLDO_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_62_TMR0: BLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_Pos (8UL)                  /*!< MDR_BKP REG_62_TMR0: PWRM_Vdd_lvl (Bit 8)             */
#define MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_Msk (0x1f00UL)             /*!< MDR_BKP REG_62_TMR0: PWRM_Vdd_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR0_PWRM_Vdd_En_Pos (13UL)                  /*!< MDR_BKP REG_62_TMR0: PWRM_Vdd_En (Bit 13)             */
#define MDR_BKP_REG_62_TMR0_PWRM_Vdd_En_Msk (0x2000UL)              /*!< MDR_BKP REG_62_TMR0: PWRM_Vdd_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_Pos (14UL)                /*!< MDR_BKP REG_62_TMR0: PWRM_VddB_lvl (Bit 14)           */
#define MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_Msk (0x7c000UL)           /*!< MDR_BKP REG_62_TMR0: PWRM_VddB_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_Pos (19UL)               /*!< MDR_BKP REG_62_TMR0: PWRM_VddIO_lvl (Bit 19)          */
#define MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_Msk (0xf80000UL)         /*!< MDR_BKP REG_62_TMR0: PWRM_VddIO_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR0_PWRM_VddB_EN_Pos (24UL)                 /*!< MDR_BKP REG_62_TMR0: PWRM_VddB_EN (Bit 24)            */
#define MDR_BKP_REG_62_TMR0_PWRM_VddB_EN_Msk (0x1000000UL)          /*!< MDR_BKP REG_62_TMR0: PWRM_VddB_EN (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_PWRM_VddIO_EN_Pos (25UL)                /*!< MDR_BKP REG_62_TMR0: PWRM_VddIO_EN (Bit 25)           */
#define MDR_BKP_REG_62_TMR0_PWRM_VddIO_EN_Msk (0x2000000UL)         /*!< MDR_BKP REG_62_TMR0: PWRM_VddIO_EN (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_PWRM_Vdd_Event_Pos (26UL)               /*!< MDR_BKP REG_62_TMR0: PWRM_Vdd_Event (Bit 26)          */
#define MDR_BKP_REG_62_TMR0_PWRM_Vdd_Event_Msk (0x4000000UL)        /*!< MDR_BKP REG_62_TMR0: PWRM_Vdd_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_PWRM_VddB_Event_Pos (27UL)              /*!< MDR_BKP REG_62_TMR0: PWRM_VddB_Event (Bit 27)         */
#define MDR_BKP_REG_62_TMR0_PWRM_VddB_Event_Msk (0x8000000UL)       /*!< MDR_BKP REG_62_TMR0: PWRM_VddB_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_PWRM_VddIO_Event_Pos (28UL)             /*!< MDR_BKP REG_62_TMR0: PWRM_VddIO_Event (Bit 28)        */
#define MDR_BKP_REG_62_TMR0_PWRM_VddIO_Event_Msk (0x10000000UL)     /*!< MDR_BKP REG_62_TMR0: PWRM_VddIO_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_Sel_NSW_Pos   (29UL)                    /*!< MDR_BKP REG_62_TMR0: Sel_NSW (Bit 29)                 */
#define MDR_BKP_REG_62_TMR0_Sel_NSW_Msk   (0x20000000UL)            /*!< MDR_BKP REG_62_TMR0: Sel_NSW (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_62_TMR0_Sel_SW_Pos    (30UL)                    /*!< MDR_BKP REG_62_TMR0: Sel_SW (Bit 30)                  */
#define MDR_BKP_REG_62_TMR0_Sel_SW_Msk    (0x40000000UL)            /*!< MDR_BKP REG_62_TMR0: Sel_SW (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_62_TMR0_PMU_BG_Dis_Pos (31UL)                   /*!< MDR_BKP REG_62_TMR0: PMU_BG_Dis (Bit 31)              */
#define MDR_BKP_REG_62_TMR0_PMU_BG_Dis_Msk (0x80000000UL)           /*!< MDR_BKP REG_62_TMR0: PMU_BG_Dis (Bitfield-Mask: 0x01) */
/* ======================================================  REG_63_TMR0  ====================================================== */
#define MDR_BKP_REG_63_TMR0_LSE_RDY_Pos   (0UL)                     /*!< MDR_BKP REG_63_TMR0: LSE_RDY (Bit 0)                  */
#define MDR_BKP_REG_63_TMR0_LSE_RDY_Msk   (0x1UL)                   /*!< MDR_BKP REG_63_TMR0: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_LSE_FilterON_Pos (1UL)                  /*!< MDR_BKP REG_63_TMR0: LSE_FilterON (Bit 1)             */
#define MDR_BKP_REG_63_TMR0_LSE_FilterON_Msk (0x2UL)                /*!< MDR_BKP REG_63_TMR0: LSE_FilterON (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR0_LSE_BYP_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR0: LSE_BYP (Bit 2)                  */
#define MDR_BKP_REG_63_TMR0_LSE_BYP_Msk   (0x4UL)                   /*!< MDR_BKP REG_63_TMR0: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_LSE_On_Pos    (3UL)                     /*!< MDR_BKP REG_63_TMR0: LSE_On (Bit 3)                   */
#define MDR_BKP_REG_63_TMR0_LSE_On_Msk    (0x8UL)                   /*!< MDR_BKP REG_63_TMR0: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_HSE0_RDY_Pos  (4UL)                     /*!< MDR_BKP REG_63_TMR0: HSE0_RDY (Bit 4)                 */
#define MDR_BKP_REG_63_TMR0_HSE0_RDY_Msk  (0x10UL)                  /*!< MDR_BKP REG_63_TMR0: HSE0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR0_HSE0_FilterEn_Pos (5UL)                 /*!< MDR_BKP REG_63_TMR0: HSE0_FilterEn (Bit 5)            */
#define MDR_BKP_REG_63_TMR0_HSE0_FilterEn_Msk (0x20UL)              /*!< MDR_BKP REG_63_TMR0: HSE0_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR0_HSE0_BYP_Pos  (6UL)                     /*!< MDR_BKP REG_63_TMR0: HSE0_BYP (Bit 6)                 */
#define MDR_BKP_REG_63_TMR0_HSE0_BYP_Msk  (0x40UL)                  /*!< MDR_BKP REG_63_TMR0: HSE0_BYP (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR0_HSE0_On_Pos   (7UL)                     /*!< MDR_BKP REG_63_TMR0: HSE0_On (Bit 7)                  */
#define MDR_BKP_REG_63_TMR0_HSE0_On_Msk   (0x80UL)                  /*!< MDR_BKP REG_63_TMR0: HSE0_On (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_HSE1_RDY_Pos  (8UL)                     /*!< MDR_BKP REG_63_TMR0: HSE1_RDY (Bit 8)                 */
#define MDR_BKP_REG_63_TMR0_HSE1_RDY_Msk  (0x100UL)                 /*!< MDR_BKP REG_63_TMR0: HSE1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR0_HSE1_FilterEn_Pos (9UL)                 /*!< MDR_BKP REG_63_TMR0: HSE1_FilterEn (Bit 9)            */
#define MDR_BKP_REG_63_TMR0_HSE1_FilterEn_Msk (0x200UL)             /*!< MDR_BKP REG_63_TMR0: HSE1_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR0_HSE1_BYP_Pos  (10UL)                    /*!< MDR_BKP REG_63_TMR0: HSE1_BYP (Bit 10)                */
#define MDR_BKP_REG_63_TMR0_HSE1_BYP_Msk  (0x400UL)                 /*!< MDR_BKP REG_63_TMR0: HSE1_BYP (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR0_HSE1_On_Pos   (11UL)                    /*!< MDR_BKP REG_63_TMR0: HSE1_On (Bit 11)                 */
#define MDR_BKP_REG_63_TMR0_HSE1_On_Msk   (0x800UL)                 /*!< MDR_BKP REG_63_TMR0: HSE1_On (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_LSI_Ready_Pos (12UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_Ready (Bit 12)               */
#define MDR_BKP_REG_63_TMR0_LSI_Ready_Msk (0x1000UL)                /*!< MDR_BKP REG_63_TMR0: LSI_Ready (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_63_TMR0_LSI_Dis_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_Dis (Bit 13)                 */
#define MDR_BKP_REG_63_TMR0_LSI_Dis_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR0: LSI_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_LSI_Trim_Pos  (14UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_Trim (Bit 14)                */
#define MDR_BKP_REG_63_TMR0_LSI_Trim_Msk  (0x1fc000UL)              /*!< MDR_BKP REG_63_TMR0: LSI_Trim (Bitfield-Mask: 0x7f)   */
#define MDR_BKP_REG_63_TMR0_HSI_Ready_Pos (21UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_Ready (Bit 21)               */
#define MDR_BKP_REG_63_TMR0_HSI_Ready_Msk (0x200000UL)              /*!< MDR_BKP REG_63_TMR0: HSI_Ready (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_63_TMR0_HSI_Trim_Pos  (22UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_Trim (Bit 22)                */
#define MDR_BKP_REG_63_TMR0_HSI_Trim_Msk  (0x1fc00000UL)            /*!< MDR_BKP REG_63_TMR0: HSI_Trim (Bitfield-Mask: 0x7f)   */
#define MDR_BKP_REG_63_TMR0_HSI_Dis_Pos   (29UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_Dis (Bit 29)                 */
#define MDR_BKP_REG_63_TMR0_HSI_Dis_Msk   (0x20000000UL)            /*!< MDR_BKP REG_63_TMR0: HSI_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_LSI_POR_Ready_Pos (31UL)                /*!< MDR_BKP REG_63_TMR0: LSI_POR_Ready (Bit 31)           */
#define MDR_BKP_REG_63_TMR0_LSI_POR_Ready_Msk (0x80000000UL)        /*!< MDR_BKP REG_63_TMR0: LSI_POR_Ready (Bitfield-Mask: 0x01) */
/* ======================================================  REG_60_TMR1  ====================================================== */
#define MDR_BKP_REG_60_TMR1_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR1: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR1_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR1: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR1_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR1: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR1_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR1: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR1_JTAG_Enable_Pos (8UL)                   /*!< MDR_BKP REG_60_TMR1: JTAG_Enable (Bit 8)              */
#define MDR_BKP_REG_60_TMR1_JTAG_Enable_Msk (0x100UL)               /*!< MDR_BKP REG_60_TMR1: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LockStep_On_Pos (9UL)                   /*!< MDR_BKP REG_60_TMR1: LockStep_On (Bit 9)              */
#define MDR_BKP_REG_60_TMR1_LockStep_On_Msk (0x200UL)               /*!< MDR_BKP REG_60_TMR1: LockStep_On (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_S_SYSRSTn_Pos (10UL)                    /*!< MDR_BKP REG_60_TMR1: S_SYSRSTn (Bit 10)               */
#define MDR_BKP_REG_60_TMR1_S_SYSRSTn_Msk (0x400UL)                 /*!< MDR_BKP REG_60_TMR1: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR1_S_RSTn1_Pos   (11UL)                    /*!< MDR_BKP REG_60_TMR1: S_RSTn1 (Bit 11)                 */
#define MDR_BKP_REG_60_TMR1_S_RSTn1_Msk   (0x800UL)                 /*!< MDR_BKP REG_60_TMR1: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_S_RSTn0_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR1: S_RSTn0 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR1_S_RSTn0_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR1: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_S_FT_Reset_Pos (13UL)                   /*!< MDR_BKP REG_60_TMR1: S_FT_Reset (Bit 13)              */
#define MDR_BKP_REG_60_TMR1_S_FT_Reset_Msk (0x2000UL)               /*!< MDR_BKP REG_60_TMR1: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_S_WDT_Reset_Pos (14UL)                  /*!< MDR_BKP REG_60_TMR1: S_WDT_Reset (Bit 14)             */
#define MDR_BKP_REG_60_TMR1_S_WDT_Reset_Msk (0x4000UL)              /*!< MDR_BKP REG_60_TMR1: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR1_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR1: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR1: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR1: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR1_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR1: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR1: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR1_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR1: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR1: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR1  ====================================================== */
#define MDR_BKP_REG_61_TMR1_POR3p3_Dis_Pos (0UL)                    /*!< MDR_BKP REG_61_TMR1: POR3p3_Dis (Bit 0)               */
#define MDR_BKP_REG_61_TMR1_POR3p3_Dis_Msk (0x1UL)                  /*!< MDR_BKP REG_61_TMR1: POR3p3_Dis (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR1_ORV3p3_Dis_Pos (1UL)                    /*!< MDR_BKP REG_61_TMR1: ORV3p3_Dis (Bit 1)               */
#define MDR_BKP_REG_61_TMR1_ORV3p3_Dis_Msk (0x2UL)                  /*!< MDR_BKP REG_61_TMR1: ORV3p3_Dis (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_Pos (2UL)                 /*!< MDR_BKP REG_61_TMR1: bg_trimVdd1p6 (Bit 2)            */
#define MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_Msk (0x1cUL)              /*!< MDR_BKP REG_61_TMR1: bg_trimVdd1p6 (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_Pos (5UL)                 /*!< MDR_BKP REG_61_TMR1: bg_trimVdd1p2 (Bit 5)            */
#define MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_Msk (0xe0UL)              /*!< MDR_BKP REG_61_TMR1: bg_trimVdd1p2 (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_DCDC_En_Pos   (8UL)                     /*!< MDR_BKP REG_61_TMR1: DCDC_En (Bit 8)                  */
#define MDR_BKP_REG_61_TMR1_DCDC_En_Msk   (0x100UL)                 /*!< MDR_BKP REG_61_TMR1: DCDC_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_DCDC_Trim_Pos (9UL)                     /*!< MDR_BKP REG_61_TMR1: DCDC_Trim (Bit 9)                */
#define MDR_BKP_REG_61_TMR1_DCDC_Trim_Msk (0x1e00UL)                /*!< MDR_BKP REG_61_TMR1: DCDC_Trim (Bitfield-Mask: 0x0f)  */
#define MDR_BKP_REG_61_TMR1_HLDO_SRILow_Pos (13UL)                  /*!< MDR_BKP REG_61_TMR1: HLDO_SRILow (Bit 13)             */
#define MDR_BKP_REG_61_TMR1_HLDO_SRILow_Msk (0xe000UL)              /*!< MDR_BKP REG_61_TMR1: HLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_HLDO_Dis_Pos  (16UL)                    /*!< MDR_BKP REG_61_TMR1: HLDO_Dis (Bit 16)                */
#define MDR_BKP_REG_61_TMR1_HLDO_Dis_Msk  (0x10000UL)               /*!< MDR_BKP REG_61_TMR1: HLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_LLDO_Dis_Pos  (17UL)                    /*!< MDR_BKP REG_61_TMR1: LLDO_Dis (Bit 17)                */
#define MDR_BKP_REG_61_TMR1_LLDO_Dis_Msk  (0x20000UL)               /*!< MDR_BKP REG_61_TMR1: LLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_Temp_En_Pos   (18UL)                    /*!< MDR_BKP REG_61_TMR1: Temp_En (Bit 18)                 */
#define MDR_BKP_REG_61_TMR1_Temp_En_Msk   (0x40000UL)               /*!< MDR_BKP REG_61_TMR1: Temp_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_CProt_En_Pos  (19UL)                    /*!< MDR_BKP REG_61_TMR1: CProt_En (Bit 19)                */
#define MDR_BKP_REG_61_TMR1_CProt_En_Msk  (0x80000UL)               /*!< MDR_BKP REG_61_TMR1: CProt_En (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_P3p3_RDY_Pos  (21UL)                    /*!< MDR_BKP REG_61_TMR1: P3p3_RDY (Bit 21)                */
#define MDR_BKP_REG_61_TMR1_P3p3_RDY_Msk  (0x200000UL)              /*!< MDR_BKP REG_61_TMR1: P3p3_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_S_nPOR3p3_Pos (22UL)                    /*!< MDR_BKP REG_61_TMR1: S_nPOR3p3 (Bit 22)               */
#define MDR_BKP_REG_61_TMR1_S_nPOR3p3_Msk (0x400000UL)              /*!< MDR_BKP REG_61_TMR1: S_nPOR3p3 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR1_S_nPOR1p6_Pos (23UL)                    /*!< MDR_BKP REG_61_TMR1: S_nPOR1p6 (Bit 23)               */
#define MDR_BKP_REG_61_TMR1_S_nPOR1p6_Msk (0x800000UL)              /*!< MDR_BKP REG_61_TMR1: S_nPOR1p6 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR1_S_nPOR1p2_Pos (24UL)                    /*!< MDR_BKP REG_61_TMR1: S_nPOR1p2 (Bit 24)               */
#define MDR_BKP_REG_61_TMR1_S_nPOR1p2_Msk (0x1000000UL)             /*!< MDR_BKP REG_61_TMR1: S_nPOR1p2 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR1_S_nOVRST3p3_Pos (25UL)                  /*!< MDR_BKP REG_61_TMR1: S_nOVRST3p3 (Bit 25)             */
#define MDR_BKP_REG_61_TMR1_S_nOVRST3p3_Msk (0x2000000UL)           /*!< MDR_BKP REG_61_TMR1: S_nOVRST3p3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR1_LLDO_RDY_Pos  (26UL)                    /*!< MDR_BKP REG_61_TMR1: LLDO_RDY (Bit 26)                */
#define MDR_BKP_REG_61_TMR1_LLDO_RDY_Msk  (0x4000000UL)             /*!< MDR_BKP REG_61_TMR1: LLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_DCDC_RDY_Pos  (27UL)                    /*!< MDR_BKP REG_61_TMR1: DCDC_RDY (Bit 27)                */
#define MDR_BKP_REG_61_TMR1_DCDC_RDY_Msk  (0x8000000UL)             /*!< MDR_BKP REG_61_TMR1: DCDC_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_HLDO_RDY_Pos  (28UL)                    /*!< MDR_BKP REG_61_TMR1: HLDO_RDY (Bit 28)                */
#define MDR_BKP_REG_61_TMR1_HLDO_RDY_Msk  (0x10000000UL)            /*!< MDR_BKP REG_61_TMR1: HLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_CProt_Event_Pos (29UL)                  /*!< MDR_BKP REG_61_TMR1: CProt_Event (Bit 29)             */
#define MDR_BKP_REG_61_TMR1_CProt_Event_Msk (0x20000000UL)          /*!< MDR_BKP REG_61_TMR1: CProt_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR1_TProt_Event_Pos (30UL)                  /*!< MDR_BKP REG_61_TMR1: TProt_Event (Bit 30)             */
#define MDR_BKP_REG_61_TMR1_TProt_Event_Msk (0x40000000UL)          /*!< MDR_BKP REG_61_TMR1: TProt_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR1_STANDBY_Pos   (31UL)                    /*!< MDR_BKP REG_61_TMR1: STANDBY (Bit 31)                 */
#define MDR_BKP_REG_61_TMR1_STANDBY_Msk   (0x80000000UL)            /*!< MDR_BKP REG_61_TMR1: STANDBY (Bitfield-Mask: 0x01)    */
/* ======================================================  REG_62_TMR1  ====================================================== */
#define MDR_BKP_REG_62_TMR1_BLDO_Dis_Pos  (0UL)                     /*!< MDR_BKP REG_62_TMR1: BLDO_Dis (Bit 0)                 */
#define MDR_BKP_REG_62_TMR1_BLDO_Dis_Msk  (0x1UL)                   /*!< MDR_BKP REG_62_TMR1: BLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_62_TMR1_BLDO_Trim_Pos (1UL)                     /*!< MDR_BKP REG_62_TMR1: BLDO_Trim (Bit 1)                */
#define MDR_BKP_REG_62_TMR1_BLDO_Trim_Msk (0xeUL)                   /*!< MDR_BKP REG_62_TMR1: BLDO_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_62_TMR1_BLDO_SRILow_Pos (4UL)                   /*!< MDR_BKP REG_62_TMR1: BLDO_SRILow (Bit 4)              */
#define MDR_BKP_REG_62_TMR1_BLDO_SRILow_Msk (0x70UL)                /*!< MDR_BKP REG_62_TMR1: BLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_BLDO_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_62_TMR1: BLDO_RDY (Bit 7)                 */
#define MDR_BKP_REG_62_TMR1_BLDO_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_62_TMR1: BLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_Pos (8UL)                  /*!< MDR_BKP REG_62_TMR1: PWRM_Vdd_lvl (Bit 8)             */
#define MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_Msk (0x1f00UL)             /*!< MDR_BKP REG_62_TMR1: PWRM_Vdd_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR1_PWRM_Vdd_En_Pos (13UL)                  /*!< MDR_BKP REG_62_TMR1: PWRM_Vdd_En (Bit 13)             */
#define MDR_BKP_REG_62_TMR1_PWRM_Vdd_En_Msk (0x2000UL)              /*!< MDR_BKP REG_62_TMR1: PWRM_Vdd_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_Pos (14UL)                /*!< MDR_BKP REG_62_TMR1: PWRM_VddB_lvl (Bit 14)           */
#define MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_Msk (0x7c000UL)           /*!< MDR_BKP REG_62_TMR1: PWRM_VddB_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_Pos (19UL)               /*!< MDR_BKP REG_62_TMR1: PWRM_VddIO_lvl (Bit 19)          */
#define MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_Msk (0xf80000UL)         /*!< MDR_BKP REG_62_TMR1: PWRM_VddIO_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR1_PWRM_VddB_EN_Pos (24UL)                 /*!< MDR_BKP REG_62_TMR1: PWRM_VddB_EN (Bit 24)            */
#define MDR_BKP_REG_62_TMR1_PWRM_VddB_EN_Msk (0x1000000UL)          /*!< MDR_BKP REG_62_TMR1: PWRM_VddB_EN (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_PWRM_VddIO_EN_Pos (25UL)                /*!< MDR_BKP REG_62_TMR1: PWRM_VddIO_EN (Bit 25)           */
#define MDR_BKP_REG_62_TMR1_PWRM_VddIO_EN_Msk (0x2000000UL)         /*!< MDR_BKP REG_62_TMR1: PWRM_VddIO_EN (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_PWRM_Vdd_Event_Pos (26UL)               /*!< MDR_BKP REG_62_TMR1: PWRM_Vdd_Event (Bit 26)          */
#define MDR_BKP_REG_62_TMR1_PWRM_Vdd_Event_Msk (0x4000000UL)        /*!< MDR_BKP REG_62_TMR1: PWRM_Vdd_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_PWRM_VddB_Event_Pos (27UL)              /*!< MDR_BKP REG_62_TMR1: PWRM_VddB_Event (Bit 27)         */
#define MDR_BKP_REG_62_TMR1_PWRM_VddB_Event_Msk (0x8000000UL)       /*!< MDR_BKP REG_62_TMR1: PWRM_VddB_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_PWRM_VddIO_Event_Pos (28UL)             /*!< MDR_BKP REG_62_TMR1: PWRM_VddIO_Event (Bit 28)        */
#define MDR_BKP_REG_62_TMR1_PWRM_VddIO_Event_Msk (0x10000000UL)     /*!< MDR_BKP REG_62_TMR1: PWRM_VddIO_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_Sel_NSW_Pos   (29UL)                    /*!< MDR_BKP REG_62_TMR1: Sel_NSW (Bit 29)                 */
#define MDR_BKP_REG_62_TMR1_Sel_NSW_Msk   (0x20000000UL)            /*!< MDR_BKP REG_62_TMR1: Sel_NSW (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_62_TMR1_Sel_SW_Pos    (30UL)                    /*!< MDR_BKP REG_62_TMR1: Sel_SW (Bit 30)                  */
#define MDR_BKP_REG_62_TMR1_Sel_SW_Msk    (0x40000000UL)            /*!< MDR_BKP REG_62_TMR1: Sel_SW (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_62_TMR1_PMU_BG_Dis_Pos (31UL)                   /*!< MDR_BKP REG_62_TMR1: PMU_BG_Dis (Bit 31)              */
#define MDR_BKP_REG_62_TMR1_PMU_BG_Dis_Msk (0x80000000UL)           /*!< MDR_BKP REG_62_TMR1: PMU_BG_Dis (Bitfield-Mask: 0x01) */
/* ======================================================  REG_63_TMR1  ====================================================== */
#define MDR_BKP_REG_63_TMR1_LSE_RDY_Pos   (0UL)                     /*!< MDR_BKP REG_63_TMR1: LSE_RDY (Bit 0)                  */
#define MDR_BKP_REG_63_TMR1_LSE_RDY_Msk   (0x1UL)                   /*!< MDR_BKP REG_63_TMR1: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_LSE_FilterON_Pos (1UL)                  /*!< MDR_BKP REG_63_TMR1: LSE_FilterON (Bit 1)             */
#define MDR_BKP_REG_63_TMR1_LSE_FilterON_Msk (0x2UL)                /*!< MDR_BKP REG_63_TMR1: LSE_FilterON (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR1_LSE_BYP_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR1: LSE_BYP (Bit 2)                  */
#define MDR_BKP_REG_63_TMR1_LSE_BYP_Msk   (0x4UL)                   /*!< MDR_BKP REG_63_TMR1: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_LSE_On_Pos    (3UL)                     /*!< MDR_BKP REG_63_TMR1: LSE_On (Bit 3)                   */
#define MDR_BKP_REG_63_TMR1_LSE_On_Msk    (0x8UL)                   /*!< MDR_BKP REG_63_TMR1: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_HSE0_RDY_Pos  (4UL)                     /*!< MDR_BKP REG_63_TMR1: HSE0_RDY (Bit 4)                 */
#define MDR_BKP_REG_63_TMR1_HSE0_RDY_Msk  (0x10UL)                  /*!< MDR_BKP REG_63_TMR1: HSE0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR1_HSE0_FilterEn_Pos (5UL)                 /*!< MDR_BKP REG_63_TMR1: HSE0_FilterEn (Bit 5)            */
#define MDR_BKP_REG_63_TMR1_HSE0_FilterEn_Msk (0x20UL)              /*!< MDR_BKP REG_63_TMR1: HSE0_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR1_HSE0_BYP_Pos  (6UL)                     /*!< MDR_BKP REG_63_TMR1: HSE0_BYP (Bit 6)                 */
#define MDR_BKP_REG_63_TMR1_HSE0_BYP_Msk  (0x40UL)                  /*!< MDR_BKP REG_63_TMR1: HSE0_BYP (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR1_HSE0_On_Pos   (7UL)                     /*!< MDR_BKP REG_63_TMR1: HSE0_On (Bit 7)                  */
#define MDR_BKP_REG_63_TMR1_HSE0_On_Msk   (0x80UL)                  /*!< MDR_BKP REG_63_TMR1: HSE0_On (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_HSE1_RDY_Pos  (8UL)                     /*!< MDR_BKP REG_63_TMR1: HSE1_RDY (Bit 8)                 */
#define MDR_BKP_REG_63_TMR1_HSE1_RDY_Msk  (0x100UL)                 /*!< MDR_BKP REG_63_TMR1: HSE1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR1_HSE1_FilterEn_Pos (9UL)                 /*!< MDR_BKP REG_63_TMR1: HSE1_FilterEn (Bit 9)            */
#define MDR_BKP_REG_63_TMR1_HSE1_FilterEn_Msk (0x200UL)             /*!< MDR_BKP REG_63_TMR1: HSE1_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR1_HSE1_BYP_Pos  (10UL)                    /*!< MDR_BKP REG_63_TMR1: HSE1_BYP (Bit 10)                */
#define MDR_BKP_REG_63_TMR1_HSE1_BYP_Msk  (0x400UL)                 /*!< MDR_BKP REG_63_TMR1: HSE1_BYP (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR1_HSE1_On_Pos   (11UL)                    /*!< MDR_BKP REG_63_TMR1: HSE1_On (Bit 11)                 */
#define MDR_BKP_REG_63_TMR1_HSE1_On_Msk   (0x800UL)                 /*!< MDR_BKP REG_63_TMR1: HSE1_On (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_LSI_Ready_Pos (12UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_Ready (Bit 12)               */
#define MDR_BKP_REG_63_TMR1_LSI_Ready_Msk (0x1000UL)                /*!< MDR_BKP REG_63_TMR1: LSI_Ready (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_63_TMR1_LSI_Dis_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_Dis (Bit 13)                 */
#define MDR_BKP_REG_63_TMR1_LSI_Dis_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR1: LSI_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_LSI_Trim_Pos  (14UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_Trim (Bit 14)                */
#define MDR_BKP_REG_63_TMR1_LSI_Trim_Msk  (0x1fc000UL)              /*!< MDR_BKP REG_63_TMR1: LSI_Trim (Bitfield-Mask: 0x7f)   */
#define MDR_BKP_REG_63_TMR1_HSI_Ready_Pos (21UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_Ready (Bit 21)               */
#define MDR_BKP_REG_63_TMR1_HSI_Ready_Msk (0x200000UL)              /*!< MDR_BKP REG_63_TMR1: HSI_Ready (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_63_TMR1_HSI_Trim_Pos  (22UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_Trim (Bit 22)                */
#define MDR_BKP_REG_63_TMR1_HSI_Trim_Msk  (0x1fc00000UL)            /*!< MDR_BKP REG_63_TMR1: HSI_Trim (Bitfield-Mask: 0x7f)   */
#define MDR_BKP_REG_63_TMR1_HSI_Dis_Pos   (29UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_Dis (Bit 29)                 */
#define MDR_BKP_REG_63_TMR1_HSI_Dis_Msk   (0x20000000UL)            /*!< MDR_BKP REG_63_TMR1: HSI_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_LSI_POR_Ready_Pos (31UL)                /*!< MDR_BKP REG_63_TMR1: LSI_POR_Ready (Bit 31)           */
#define MDR_BKP_REG_63_TMR1_LSI_POR_Ready_Msk (0x80000000UL)        /*!< MDR_BKP REG_63_TMR1: LSI_POR_Ready (Bitfield-Mask: 0x01) */
/* ======================================================  REG_60_TMR2  ====================================================== */
#define MDR_BKP_REG_60_TMR2_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR2: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR2_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR2: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR2_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR2: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR2_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR2: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR2_JTAG_Enable_Pos (8UL)                   /*!< MDR_BKP REG_60_TMR2: JTAG_Enable (Bit 8)              */
#define MDR_BKP_REG_60_TMR2_JTAG_Enable_Msk (0x100UL)               /*!< MDR_BKP REG_60_TMR2: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LockStep_On_Pos (9UL)                   /*!< MDR_BKP REG_60_TMR2: LockStep_On (Bit 9)              */
#define MDR_BKP_REG_60_TMR2_LockStep_On_Msk (0x200UL)               /*!< MDR_BKP REG_60_TMR2: LockStep_On (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_S_SYSRSTn_Pos (10UL)                    /*!< MDR_BKP REG_60_TMR2: S_SYSRSTn (Bit 10)               */
#define MDR_BKP_REG_60_TMR2_S_SYSRSTn_Msk (0x400UL)                 /*!< MDR_BKP REG_60_TMR2: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR2_S_RSTn1_Pos   (11UL)                    /*!< MDR_BKP REG_60_TMR2: S_RSTn1 (Bit 11)                 */
#define MDR_BKP_REG_60_TMR2_S_RSTn1_Msk   (0x800UL)                 /*!< MDR_BKP REG_60_TMR2: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_S_RSTn0_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR2: S_RSTn0 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR2_S_RSTn0_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR2: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_S_FT_Reset_Pos (13UL)                   /*!< MDR_BKP REG_60_TMR2: S_FT_Reset (Bit 13)              */
#define MDR_BKP_REG_60_TMR2_S_FT_Reset_Msk (0x2000UL)               /*!< MDR_BKP REG_60_TMR2: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_S_WDT_Reset_Pos (14UL)                  /*!< MDR_BKP REG_60_TMR2: S_WDT_Reset (Bit 14)             */
#define MDR_BKP_REG_60_TMR2_S_WDT_Reset_Msk (0x4000UL)              /*!< MDR_BKP REG_60_TMR2: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR2_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR2: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR2: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR2: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR2_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR2: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR2: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR2_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR2: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR2: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR2  ====================================================== */
#define MDR_BKP_REG_61_TMR2_POR3p3_Dis_Pos (0UL)                    /*!< MDR_BKP REG_61_TMR2: POR3p3_Dis (Bit 0)               */
#define MDR_BKP_REG_61_TMR2_POR3p3_Dis_Msk (0x1UL)                  /*!< MDR_BKP REG_61_TMR2: POR3p3_Dis (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR2_ORV3p3_Dis_Pos (1UL)                    /*!< MDR_BKP REG_61_TMR2: ORV3p3_Dis (Bit 1)               */
#define MDR_BKP_REG_61_TMR2_ORV3p3_Dis_Msk (0x2UL)                  /*!< MDR_BKP REG_61_TMR2: ORV3p3_Dis (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_Pos (2UL)                 /*!< MDR_BKP REG_61_TMR2: bg_trimVdd1p6 (Bit 2)            */
#define MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_Msk (0x1cUL)              /*!< MDR_BKP REG_61_TMR2: bg_trimVdd1p6 (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_Pos (5UL)                 /*!< MDR_BKP REG_61_TMR2: bg_trimVdd1p2 (Bit 5)            */
#define MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_Msk (0xe0UL)              /*!< MDR_BKP REG_61_TMR2: bg_trimVdd1p2 (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_DCDC_En_Pos   (8UL)                     /*!< MDR_BKP REG_61_TMR2: DCDC_En (Bit 8)                  */
#define MDR_BKP_REG_61_TMR2_DCDC_En_Msk   (0x100UL)                 /*!< MDR_BKP REG_61_TMR2: DCDC_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_DCDC_Trim_Pos (9UL)                     /*!< MDR_BKP REG_61_TMR2: DCDC_Trim (Bit 9)                */
#define MDR_BKP_REG_61_TMR2_DCDC_Trim_Msk (0x1e00UL)                /*!< MDR_BKP REG_61_TMR2: DCDC_Trim (Bitfield-Mask: 0x0f)  */
#define MDR_BKP_REG_61_TMR2_HLDO_SRILow_Pos (13UL)                  /*!< MDR_BKP REG_61_TMR2: HLDO_SRILow (Bit 13)             */
#define MDR_BKP_REG_61_TMR2_HLDO_SRILow_Msk (0xe000UL)              /*!< MDR_BKP REG_61_TMR2: HLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_HLDO_Dis_Pos  (16UL)                    /*!< MDR_BKP REG_61_TMR2: HLDO_Dis (Bit 16)                */
#define MDR_BKP_REG_61_TMR2_HLDO_Dis_Msk  (0x10000UL)               /*!< MDR_BKP REG_61_TMR2: HLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_LLDO_Dis_Pos  (17UL)                    /*!< MDR_BKP REG_61_TMR2: LLDO_Dis (Bit 17)                */
#define MDR_BKP_REG_61_TMR2_LLDO_Dis_Msk  (0x20000UL)               /*!< MDR_BKP REG_61_TMR2: LLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_Temp_En_Pos   (18UL)                    /*!< MDR_BKP REG_61_TMR2: Temp_En (Bit 18)                 */
#define MDR_BKP_REG_61_TMR2_Temp_En_Msk   (0x40000UL)               /*!< MDR_BKP REG_61_TMR2: Temp_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_CProt_En_Pos  (19UL)                    /*!< MDR_BKP REG_61_TMR2: CProt_En (Bit 19)                */
#define MDR_BKP_REG_61_TMR2_CProt_En_Msk  (0x80000UL)               /*!< MDR_BKP REG_61_TMR2: CProt_En (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_P3p3_RDY_Pos  (21UL)                    /*!< MDR_BKP REG_61_TMR2: P3p3_RDY (Bit 21)                */
#define MDR_BKP_REG_61_TMR2_P3p3_RDY_Msk  (0x200000UL)              /*!< MDR_BKP REG_61_TMR2: P3p3_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_S_nPOR3p3_Pos (22UL)                    /*!< MDR_BKP REG_61_TMR2: S_nPOR3p3 (Bit 22)               */
#define MDR_BKP_REG_61_TMR2_S_nPOR3p3_Msk (0x400000UL)              /*!< MDR_BKP REG_61_TMR2: S_nPOR3p3 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR2_S_nPOR1p6_Pos (23UL)                    /*!< MDR_BKP REG_61_TMR2: S_nPOR1p6 (Bit 23)               */
#define MDR_BKP_REG_61_TMR2_S_nPOR1p6_Msk (0x800000UL)              /*!< MDR_BKP REG_61_TMR2: S_nPOR1p6 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR2_S_nPOR1p2_Pos (24UL)                    /*!< MDR_BKP REG_61_TMR2: S_nPOR1p2 (Bit 24)               */
#define MDR_BKP_REG_61_TMR2_S_nPOR1p2_Msk (0x1000000UL)             /*!< MDR_BKP REG_61_TMR2: S_nPOR1p2 (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_61_TMR2_S_nOVRST3p3_Pos (25UL)                  /*!< MDR_BKP REG_61_TMR2: S_nOVRST3p3 (Bit 25)             */
#define MDR_BKP_REG_61_TMR2_S_nOVRST3p3_Msk (0x2000000UL)           /*!< MDR_BKP REG_61_TMR2: S_nOVRST3p3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR2_LLDO_RDY_Pos  (26UL)                    /*!< MDR_BKP REG_61_TMR2: LLDO_RDY (Bit 26)                */
#define MDR_BKP_REG_61_TMR2_LLDO_RDY_Msk  (0x4000000UL)             /*!< MDR_BKP REG_61_TMR2: LLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_DCDC_RDY_Pos  (27UL)                    /*!< MDR_BKP REG_61_TMR2: DCDC_RDY (Bit 27)                */
#define MDR_BKP_REG_61_TMR2_DCDC_RDY_Msk  (0x8000000UL)             /*!< MDR_BKP REG_61_TMR2: DCDC_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_HLDO_RDY_Pos  (28UL)                    /*!< MDR_BKP REG_61_TMR2: HLDO_RDY (Bit 28)                */
#define MDR_BKP_REG_61_TMR2_HLDO_RDY_Msk  (0x10000000UL)            /*!< MDR_BKP REG_61_TMR2: HLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_CProt_Event_Pos (29UL)                  /*!< MDR_BKP REG_61_TMR2: CProt_Event (Bit 29)             */
#define MDR_BKP_REG_61_TMR2_CProt_Event_Msk (0x20000000UL)          /*!< MDR_BKP REG_61_TMR2: CProt_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR2_TProt_Event_Pos (30UL)                  /*!< MDR_BKP REG_61_TMR2: TProt_Event (Bit 30)             */
#define MDR_BKP_REG_61_TMR2_TProt_Event_Msk (0x40000000UL)          /*!< MDR_BKP REG_61_TMR2: TProt_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_61_TMR2_STANDBY_Pos   (31UL)                    /*!< MDR_BKP REG_61_TMR2: STANDBY (Bit 31)                 */
#define MDR_BKP_REG_61_TMR2_STANDBY_Msk   (0x80000000UL)            /*!< MDR_BKP REG_61_TMR2: STANDBY (Bitfield-Mask: 0x01)    */
/* ======================================================  REG_62_TMR2  ====================================================== */
#define MDR_BKP_REG_62_TMR2_BLDO_Dis_Pos  (0UL)                     /*!< MDR_BKP REG_62_TMR2: BLDO_Dis (Bit 0)                 */
#define MDR_BKP_REG_62_TMR2_BLDO_Dis_Msk  (0x1UL)                   /*!< MDR_BKP REG_62_TMR2: BLDO_Dis (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_62_TMR2_BLDO_Trim_Pos (1UL)                     /*!< MDR_BKP REG_62_TMR2: BLDO_Trim (Bit 1)                */
#define MDR_BKP_REG_62_TMR2_BLDO_Trim_Msk (0xeUL)                   /*!< MDR_BKP REG_62_TMR2: BLDO_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_62_TMR2_BLDO_SRILow_Pos (4UL)                   /*!< MDR_BKP REG_62_TMR2: BLDO_SRILow (Bit 4)              */
#define MDR_BKP_REG_62_TMR2_BLDO_SRILow_Msk (0x70UL)                /*!< MDR_BKP REG_62_TMR2: BLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_BLDO_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_62_TMR2: BLDO_RDY (Bit 7)                 */
#define MDR_BKP_REG_62_TMR2_BLDO_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_62_TMR2: BLDO_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_Pos (8UL)                  /*!< MDR_BKP REG_62_TMR2: PWRM_Vdd_lvl (Bit 8)             */
#define MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_Msk (0x1f00UL)             /*!< MDR_BKP REG_62_TMR2: PWRM_Vdd_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR2_PWRM_Vdd_En_Pos (13UL)                  /*!< MDR_BKP REG_62_TMR2: PWRM_Vdd_En (Bit 13)             */
#define MDR_BKP_REG_62_TMR2_PWRM_Vdd_En_Msk (0x2000UL)              /*!< MDR_BKP REG_62_TMR2: PWRM_Vdd_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_Pos (14UL)                /*!< MDR_BKP REG_62_TMR2: PWRM_VddB_lvl (Bit 14)           */
#define MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_Msk (0x7c000UL)           /*!< MDR_BKP REG_62_TMR2: PWRM_VddB_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_Pos (19UL)               /*!< MDR_BKP REG_62_TMR2: PWRM_VddIO_lvl (Bit 19)          */
#define MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_Msk (0xf80000UL)         /*!< MDR_BKP REG_62_TMR2: PWRM_VddIO_lvl (Bitfield-Mask: 0x1f) */
#define MDR_BKP_REG_62_TMR2_PWRM_VddB_EN_Pos (24UL)                 /*!< MDR_BKP REG_62_TMR2: PWRM_VddB_EN (Bit 24)            */
#define MDR_BKP_REG_62_TMR2_PWRM_VddB_EN_Msk (0x1000000UL)          /*!< MDR_BKP REG_62_TMR2: PWRM_VddB_EN (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_PWRM_VddIO_EN_Pos (25UL)                /*!< MDR_BKP REG_62_TMR2: PWRM_VddIO_EN (Bit 25)           */
#define MDR_BKP_REG_62_TMR2_PWRM_VddIO_EN_Msk (0x2000000UL)         /*!< MDR_BKP REG_62_TMR2: PWRM_VddIO_EN (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_PWRM_Vdd_Event_Pos (26UL)               /*!< MDR_BKP REG_62_TMR2: PWRM_Vdd_Event (Bit 26)          */
#define MDR_BKP_REG_62_TMR2_PWRM_Vdd_Event_Msk (0x4000000UL)        /*!< MDR_BKP REG_62_TMR2: PWRM_Vdd_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_PWRM_VddB_Event_Pos (27UL)              /*!< MDR_BKP REG_62_TMR2: PWRM_VddB_Event (Bit 27)         */
#define MDR_BKP_REG_62_TMR2_PWRM_VddB_Event_Msk (0x8000000UL)       /*!< MDR_BKP REG_62_TMR2: PWRM_VddB_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_PWRM_VddIO_Event_Pos (28UL)             /*!< MDR_BKP REG_62_TMR2: PWRM_VddIO_Event (Bit 28)        */
#define MDR_BKP_REG_62_TMR2_PWRM_VddIO_Event_Msk (0x10000000UL)     /*!< MDR_BKP REG_62_TMR2: PWRM_VddIO_Event (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_Sel_NSW_Pos   (29UL)                    /*!< MDR_BKP REG_62_TMR2: Sel_NSW (Bit 29)                 */
#define MDR_BKP_REG_62_TMR2_Sel_NSW_Msk   (0x20000000UL)            /*!< MDR_BKP REG_62_TMR2: Sel_NSW (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_62_TMR2_Sel_SW_Pos    (30UL)                    /*!< MDR_BKP REG_62_TMR2: Sel_SW (Bit 30)                  */
#define MDR_BKP_REG_62_TMR2_Sel_SW_Msk    (0x40000000UL)            /*!< MDR_BKP REG_62_TMR2: Sel_SW (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_62_TMR2_PMU_BG_Dis_Pos (31UL)                   /*!< MDR_BKP REG_62_TMR2: PMU_BG_Dis (Bit 31)              */
#define MDR_BKP_REG_62_TMR2_PMU_BG_Dis_Msk (0x80000000UL)           /*!< MDR_BKP REG_62_TMR2: PMU_BG_Dis (Bitfield-Mask: 0x01) */
/* ======================================================  REG_63_TMR2  ====================================================== */
#define MDR_BKP_REG_63_TMR2_LSE_RDY_Pos   (0UL)                     /*!< MDR_BKP REG_63_TMR2: LSE_RDY (Bit 0)                  */
#define MDR_BKP_REG_63_TMR2_LSE_RDY_Msk   (0x1UL)                   /*!< MDR_BKP REG_63_TMR2: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_LSE_FilterON_Pos (1UL)                  /*!< MDR_BKP REG_63_TMR2: LSE_FilterON (Bit 1)             */
#define MDR_BKP_REG_63_TMR2_LSE_FilterON_Msk (0x2UL)                /*!< MDR_BKP REG_63_TMR2: LSE_FilterON (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR2_LSE_BYP_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR2: LSE_BYP (Bit 2)                  */
#define MDR_BKP_REG_63_TMR2_LSE_BYP_Msk   (0x4UL)                   /*!< MDR_BKP REG_63_TMR2: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_LSE_On_Pos    (3UL)                     /*!< MDR_BKP REG_63_TMR2: LSE_On (Bit 3)                   */
#define MDR_BKP_REG_63_TMR2_LSE_On_Msk    (0x8UL)                   /*!< MDR_BKP REG_63_TMR2: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_HSE0_RDY_Pos  (4UL)                     /*!< MDR_BKP REG_63_TMR2: HSE0_RDY (Bit 4)                 */
#define MDR_BKP_REG_63_TMR2_HSE0_RDY_Msk  (0x10UL)                  /*!< MDR_BKP REG_63_TMR2: HSE0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR2_HSE0_FilterEn_Pos (5UL)                 /*!< MDR_BKP REG_63_TMR2: HSE0_FilterEn (Bit 5)            */
#define MDR_BKP_REG_63_TMR2_HSE0_FilterEn_Msk (0x20UL)              /*!< MDR_BKP REG_63_TMR2: HSE0_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR2_HSE0_BYP_Pos  (6UL)                     /*!< MDR_BKP REG_63_TMR2: HSE0_BYP (Bit 6)                 */
#define MDR_BKP_REG_63_TMR2_HSE0_BYP_Msk  (0x40UL)                  /*!< MDR_BKP REG_63_TMR2: HSE0_BYP (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR2_HSE0_On_Pos   (7UL)                     /*!< MDR_BKP REG_63_TMR2: HSE0_On (Bit 7)                  */
#define MDR_BKP_REG_63_TMR2_HSE0_On_Msk   (0x80UL)                  /*!< MDR_BKP REG_63_TMR2: HSE0_On (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_HSE1_RDY_Pos  (8UL)                     /*!< MDR_BKP REG_63_TMR2: HSE1_RDY (Bit 8)                 */
#define MDR_BKP_REG_63_TMR2_HSE1_RDY_Msk  (0x100UL)                 /*!< MDR_BKP REG_63_TMR2: HSE1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR2_HSE1_FilterEn_Pos (9UL)                 /*!< MDR_BKP REG_63_TMR2: HSE1_FilterEn (Bit 9)            */
#define MDR_BKP_REG_63_TMR2_HSE1_FilterEn_Msk (0x200UL)             /*!< MDR_BKP REG_63_TMR2: HSE1_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR2_HSE1_BYP_Pos  (10UL)                    /*!< MDR_BKP REG_63_TMR2: HSE1_BYP (Bit 10)                */
#define MDR_BKP_REG_63_TMR2_HSE1_BYP_Msk  (0x400UL)                 /*!< MDR_BKP REG_63_TMR2: HSE1_BYP (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_63_TMR2_HSE1_On_Pos   (11UL)                    /*!< MDR_BKP REG_63_TMR2: HSE1_On (Bit 11)                 */
#define MDR_BKP_REG_63_TMR2_HSE1_On_Msk   (0x800UL)                 /*!< MDR_BKP REG_63_TMR2: HSE1_On (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_LSI_Ready_Pos (12UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_Ready (Bit 12)               */
#define MDR_BKP_REG_63_TMR2_LSI_Ready_Msk (0x1000UL)                /*!< MDR_BKP REG_63_TMR2: LSI_Ready (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_63_TMR2_LSI_Dis_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_Dis (Bit 13)                 */
#define MDR_BKP_REG_63_TMR2_LSI_Dis_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR2: LSI_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_LSI_Trim_Pos  (14UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_Trim (Bit 14)                */
#define MDR_BKP_REG_63_TMR2_LSI_Trim_Msk  (0x1fc000UL)              /*!< MDR_BKP REG_63_TMR2: LSI_Trim (Bitfield-Mask: 0x7f)   */
#define MDR_BKP_REG_63_TMR2_HSI_Ready_Pos (21UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_Ready (Bit 21)               */
#define MDR_BKP_REG_63_TMR2_HSI_Ready_Msk (0x200000UL)              /*!< MDR_BKP REG_63_TMR2: HSI_Ready (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_63_TMR2_HSI_Trim_Pos  (22UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_Trim (Bit 22)                */
#define MDR_BKP_REG_63_TMR2_HSI_Trim_Msk  (0x1fc00000UL)            /*!< MDR_BKP REG_63_TMR2: HSI_Trim (Bitfield-Mask: 0x7f)   */
#define MDR_BKP_REG_63_TMR2_HSI_Dis_Pos   (29UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_Dis (Bit 29)                 */
#define MDR_BKP_REG_63_TMR2_HSI_Dis_Msk   (0x20000000UL)            /*!< MDR_BKP REG_63_TMR2: HSI_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_LSI_POR_Ready_Pos (31UL)                /*!< MDR_BKP REG_63_TMR2: LSI_POR_Ready (Bit 31)           */
#define MDR_BKP_REG_63_TMR2_LSI_POR_Ready_Msk (0x80000000UL)        /*!< MDR_BKP REG_63_TMR2: LSI_POR_Ready (Bitfield-Mask: 0x01) */
/* =====================================================  RTC_CNT_TMR0  ====================================================== */
/* =====================================================  RTC_DIV_TMR0  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR0_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR0: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR0_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR0: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR0  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR0_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR0: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR0_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR0: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR0  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR0_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR0: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR0_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR0: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR0  ====================================================== */
#define MDR_BKP_RTC_CS_TMR0_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR0: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR0_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR0: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR0_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR0: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR0_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR0: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR0_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR0: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR0_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR0: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR0_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR0: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR0_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR0: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR0: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR0_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR0: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR0: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR0_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR0: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR0: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR0_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR0: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR0: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR0: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR0: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR0: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR0_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_IE (Bitfield-Mask: 0x01)     */
/* =====================================================  RTC_CNT_TMR1  ====================================================== */
/* =====================================================  RTC_DIV_TMR1  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR1_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR1: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR1_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR1: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR1  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR1_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR1: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR1_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR1: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR1  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR1_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR1: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR1_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR1: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR1  ====================================================== */
#define MDR_BKP_RTC_CS_TMR1_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR1: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR1_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR1: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR1_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR1: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR1_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR1: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR1_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR1: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR1_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR1: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR1_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR1: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR1_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR1: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR1: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR1_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR1: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR1: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR1_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR1: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR1: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR1_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR1: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR1: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR1: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR1: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR1: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR1_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_IE (Bitfield-Mask: 0x01)     */
/* =====================================================  RTC_CNT_TMR2  ====================================================== */
/* =====================================================  RTC_DIV_TMR2  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR2_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR2: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR2_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR2: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR2  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR2_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR2: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR2_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR2: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR2  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR2_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR2: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR2_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR2: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR2  ====================================================== */
#define MDR_BKP_RTC_CS_TMR2_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR2: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR2_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR2: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR2_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR2: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR2_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR2: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR2_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR2: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR2_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR2: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR2_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR2: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR2_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR2: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR2: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR2_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR2: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR2: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR2_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR2: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR2: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR2_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR2: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR2: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR2: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR2: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR2: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR2_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_IE (Bitfield-Mask: 0x01)     */
/* ======================================================  BLDO_CTRL0  ======================================================= */
#define MDR_BKP_BLDO_CTRL0_BLDO_Dis_Pos   (0UL)                     /*!< MDR_BKP BLDO_CTRL0: BLDO_Dis (Bit 0)                  */
#define MDR_BKP_BLDO_CTRL0_BLDO_Dis_Msk   (0x1UL)                   /*!< MDR_BKP BLDO_CTRL0: BLDO_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_BLDO_CTRL0_BLDO_Trim_Pos  (1UL)                     /*!< MDR_BKP BLDO_CTRL0: BLDO_Trim (Bit 1)                 */
#define MDR_BKP_BLDO_CTRL0_BLDO_Trim_Msk  (0xeUL)                   /*!< MDR_BKP BLDO_CTRL0: BLDO_Trim (Bitfield-Mask: 0x07)   */
#define MDR_BKP_BLDO_CTRL0_BLDO_SRILow_Pos (4UL)                    /*!< MDR_BKP BLDO_CTRL0: BLDO_SRILow (Bit 4)               */
#define MDR_BKP_BLDO_CTRL0_BLDO_SRILow_Msk (0x70UL)                 /*!< MDR_BKP BLDO_CTRL0: BLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_BLDO_CTRL0_BLDO_RDY_Pos   (7UL)                     /*!< MDR_BKP BLDO_CTRL0: BLDO_RDY (Bit 7)                  */
#define MDR_BKP_BLDO_CTRL0_BLDO_RDY_Msk   (0x80UL)                  /*!< MDR_BKP BLDO_CTRL0: BLDO_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_BLDO_CTRL0_ECC_Dis_Pos    (8UL)                     /*!< MDR_BKP BLDO_CTRL0: ECC_Dis (Bit 8)                   */
#define MDR_BKP_BLDO_CTRL0_ECC_Dis_Msk    (0x100UL)                 /*!< MDR_BKP BLDO_CTRL0: ECC_Dis (Bitfield-Mask: 0x01)     */
#define MDR_BKP_BLDO_CTRL0_PMU_BG_Dis_Pos (31UL)                    /*!< MDR_BKP BLDO_CTRL0: PMU_BG_Dis (Bit 31)               */
#define MDR_BKP_BLDO_CTRL0_PMU_BG_Dis_Msk (0x80000000UL)            /*!< MDR_BKP BLDO_CTRL0: PMU_BG_Dis (Bitfield-Mask: 0x01)  */
/* ======================================================  BLDO_CTRL1  ======================================================= */
#define MDR_BKP_BLDO_CTRL1_BLDO_Dis_Pos   (0UL)                     /*!< MDR_BKP BLDO_CTRL1: BLDO_Dis (Bit 0)                  */
#define MDR_BKP_BLDO_CTRL1_BLDO_Dis_Msk   (0x1UL)                   /*!< MDR_BKP BLDO_CTRL1: BLDO_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_BLDO_CTRL1_BLDO_Trim_Pos  (1UL)                     /*!< MDR_BKP BLDO_CTRL1: BLDO_Trim (Bit 1)                 */
#define MDR_BKP_BLDO_CTRL1_BLDO_Trim_Msk  (0xeUL)                   /*!< MDR_BKP BLDO_CTRL1: BLDO_Trim (Bitfield-Mask: 0x07)   */
#define MDR_BKP_BLDO_CTRL1_BLDO_SRILow_Pos (4UL)                    /*!< MDR_BKP BLDO_CTRL1: BLDO_SRILow (Bit 4)               */
#define MDR_BKP_BLDO_CTRL1_BLDO_SRILow_Msk (0x70UL)                 /*!< MDR_BKP BLDO_CTRL1: BLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_BLDO_CTRL1_BLDO_RDY_Pos   (7UL)                     /*!< MDR_BKP BLDO_CTRL1: BLDO_RDY (Bit 7)                  */
#define MDR_BKP_BLDO_CTRL1_BLDO_RDY_Msk   (0x80UL)                  /*!< MDR_BKP BLDO_CTRL1: BLDO_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_BLDO_CTRL1_ECC_Dis_Pos    (8UL)                     /*!< MDR_BKP BLDO_CTRL1: ECC_Dis (Bit 8)                   */
#define MDR_BKP_BLDO_CTRL1_ECC_Dis_Msk    (0x100UL)                 /*!< MDR_BKP BLDO_CTRL1: ECC_Dis (Bitfield-Mask: 0x01)     */
#define MDR_BKP_BLDO_CTRL1_PMU_BG_Dis_Pos (31UL)                    /*!< MDR_BKP BLDO_CTRL1: PMU_BG_Dis (Bit 31)               */
#define MDR_BKP_BLDO_CTRL1_PMU_BG_Dis_Msk (0x80000000UL)            /*!< MDR_BKP BLDO_CTRL1: PMU_BG_Dis (Bitfield-Mask: 0x01)  */
/* ======================================================  BLDO_CTRL2  ======================================================= */
#define MDR_BKP_BLDO_CTRL2_BLDO_Dis_Pos   (0UL)                     /*!< MDR_BKP BLDO_CTRL2: BLDO_Dis (Bit 0)                  */
#define MDR_BKP_BLDO_CTRL2_BLDO_Dis_Msk   (0x1UL)                   /*!< MDR_BKP BLDO_CTRL2: BLDO_Dis (Bitfield-Mask: 0x01)    */
#define MDR_BKP_BLDO_CTRL2_BLDO_Trim_Pos  (1UL)                     /*!< MDR_BKP BLDO_CTRL2: BLDO_Trim (Bit 1)                 */
#define MDR_BKP_BLDO_CTRL2_BLDO_Trim_Msk  (0xeUL)                   /*!< MDR_BKP BLDO_CTRL2: BLDO_Trim (Bitfield-Mask: 0x07)   */
#define MDR_BKP_BLDO_CTRL2_BLDO_SRILow_Pos (4UL)                    /*!< MDR_BKP BLDO_CTRL2: BLDO_SRILow (Bit 4)               */
#define MDR_BKP_BLDO_CTRL2_BLDO_SRILow_Msk (0x70UL)                 /*!< MDR_BKP BLDO_CTRL2: BLDO_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_BLDO_CTRL2_BLDO_RDY_Pos   (7UL)                     /*!< MDR_BKP BLDO_CTRL2: BLDO_RDY (Bit 7)                  */
#define MDR_BKP_BLDO_CTRL2_BLDO_RDY_Msk   (0x80UL)                  /*!< MDR_BKP BLDO_CTRL2: BLDO_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_BLDO_CTRL2_ECC_Dis_Pos    (8UL)                     /*!< MDR_BKP BLDO_CTRL2: ECC_Dis (Bit 8)                   */
#define MDR_BKP_BLDO_CTRL2_ECC_Dis_Msk    (0x100UL)                 /*!< MDR_BKP BLDO_CTRL2: ECC_Dis (Bitfield-Mask: 0x01)     */
#define MDR_BKP_BLDO_CTRL2_PMU_BG_Dis_Pos (31UL)                    /*!< MDR_BKP BLDO_CTRL2: PMU_BG_Dis (Bit 31)               */
#define MDR_BKP_BLDO_CTRL2_PMU_BG_Dis_Msk (0x80000000UL)            /*!< MDR_BKP BLDO_CTRL2: PMU_BG_Dis (Bitfield-Mask: 0x01)  */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* ========================================================  MAX_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK MAX_CLK Select [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_MAX_CLK_Select                                              */
  MDR_RST_CLOCK_MAX_CLK_Select_HSI     = 0,     /*!< HSI : MAX_CLOCK is HSI                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_HSI_div2 = 1,    /*!< HSI_div2 : MAX_CLOCK is HSI/2                                             */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE0    = 2,     /*!< HSE0 : MAX_CLOCK is HSE0                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE0_div2 = 3,   /*!< HSE0_div2 : MAX_CLOCK is HSE0/2                                           */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE1    = 4,     /*!< HSE1 : MAX_CLOCK is HSE1                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE1_div2 = 5,   /*!< HSE1_div2 : MAX_CLOCK is HSE1/2                                           */
  MDR_RST_CLOCK_MAX_CLK_Select_LSI     = 6,     /*!< LSI : MAX_CLOCK is LSI                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_LSE     = 7,     /*!< LSE : MAX_CLOCK is LSE                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL0    = 8,     /*!< PLL0 : MAX_CLOCK is PLL0                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL1    = 9,     /*!< PLL1 : MAX_CLOCK is PLL1                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL2    = 10,    /*!< PLL2 : MAX_CLOCK is PLL2                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL3    = 11,    /*!< PLL3 : MAX_CLOCK is PLL3                                                  */
} MDR_RST_CLOCK_MAX_CLK_Select_Enum;

/* ========================================================  CPU_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK CPU_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  PER0_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK PER0_CLK PortA_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortB_CLK_EN [14..14]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortC_CLK_EN [15..15]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortD_CLK_EN [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK SDIO_CLK_EN [21..21]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_SDIO_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_SDIO_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_SDIO_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_SDIO_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK SSP1_CLK_EN [22..22]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_SSP1_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_SSP1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_SSP1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_SSP1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK SSP2_CLK_EN [23..23]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_SSP2_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_SSP2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_SSP2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_SSP2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK CAN1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK CAN2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK UART1_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_UART1_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_UART1_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_UART1_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_UART1_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK UART2_CLK_EN [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_UART2_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_UART2_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_UART2_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_UART2_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK UART3_CLK_EN [28..28]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_UART3_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_UART3_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_UART3_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_UART3_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK UART4_CLK_EN [29..29]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_UART4_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_UART4_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_UART4_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_UART4_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK MIL_CLK_EN [30..30]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_MIL_CLK_EN                                         */
  MDR_RST_CLOCK_PER0_CLK_MIL_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_MIL_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_MIL_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK USB_CLK_EN [31..31]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_USB_CLK_EN                                         */
  MDR_RST_CLOCK_PER0_CLK_USB_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_USB_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_USB_CLK_EN_Enum;

/* =======================================================  PER1_CLK  ======================================================== */
/* =======================================  MDR_RST_CLOCK PER1_CLK TIM1_CLK_EN [0..0]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_TIM1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_TIM1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_TIM1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_TIM1_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK TIM2_CLK_EN [1..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_TIM2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_TIM2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_TIM2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_TIM2_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK TIM3_CLK_EN [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_TIM3_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_TIM3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_TIM3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_TIM3_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK TIM4_CLK_EN [3..3]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_TIM4_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_TIM4_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_TIM4_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_TIM4_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK CAP1_CLK_EN [4..4]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CAP1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_CAP1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CAP1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CAP1_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK CAP2_CLK_EN [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CAP2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_CAP2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CAP2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CAP2_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK CAP3_CLK_EN [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CAP3_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_CAP3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CAP3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CAP3_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK CAP4_CLK_EN [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CAP4_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_CAP4_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CAP4_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CAP4_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK QEP1_CLK_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_QEP1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_QEP1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_QEP1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_QEP1_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK QEP2_CLK_EN [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_QEP2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_QEP2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_QEP2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_QEP2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM1_CLK_EN [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM2_CLK_EN [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM3_CLK_EN [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM3_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM4_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM4_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM4_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM4_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM4_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM5_CLK_EN [14..14]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM5_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM5_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM5_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM5_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM6_CLK_EN [15..15]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM6_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM6_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM6_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM6_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM7_CLK_EN [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM7_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM7_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM7_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM7_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM8_CLK_EN [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM8_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM8_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM8_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM8_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK PWM9_CLK_EN [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_PWM9_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_PWM9_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_PWM9_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_PWM9_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK ADC1_CLK_EN [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK ADC2_CLK_EN [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK ADC3_CLK_EN [21..21]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_ADC3_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_ADC3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_ADC3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_ADC3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK DAC1_CLK_EN [22..22]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK DAC2_CLK_EN [23..23]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK DAC3_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_DAC3_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_DAC3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_DAC3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_DAC3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK DAC4_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_DAC4_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_DAC4_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_DAC4_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_DAC4_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK CMP1_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CMP1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_CMP1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CMP1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CMP1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK CMP2_CLK_EN [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CMP2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_CMP2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CMP2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CMP2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK CMP3_CLK_EN [28..28]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CMP3_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_CMP3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CMP3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CMP3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK CMP4_CLK_EN [29..29]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CMP4_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_CMP4_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CMP4_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CMP4_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK I2C_CLK_EN [30..30]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_I2C_CLK_EN                                         */
  MDR_RST_CLOCK_PER1_CLK_I2C_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_I2C_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_I2C_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER1_CLK CORDIC_CLK_EN [31..31]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CORDIC_CLK_EN                                      */
  MDR_RST_CLOCK_PER1_CLK_CORDIC_CLK_EN_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CORDIC_CLK_EN_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CORDIC_CLK_EN_Enum;

/* =======================================================  CPU_CHK0  ======================================================== */
/* =======================================================  CPU_CHK1  ======================================================== */
/* =======================================================  CPU_CHK2  ======================================================== */
/* =======================================================  CPU_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT0                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT1                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT2                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT3                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT3_Enum;

/* ========================================================  LSI_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSI_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  LSI_CHK0  ======================================================== */
/* =======================================================  LSI_CHK1  ======================================================== */
/* =======================================================  LSI_CHK2  ======================================================== */
/* =======================================================  LSI_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT0                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT1                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT2                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT3                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSI_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_READY                                              */
  MDR_RST_CLOCK_LSI_STAT_READY_Off     = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_LSI_STAT_READY_On      = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_LSI_STAT_READY_Enum;

/* ========================================================  LSE_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSE_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  LSE_CHK0  ======================================================== */
/* =======================================================  LSE_CHK1  ======================================================== */
/* =======================================================  LSE_CHK2  ======================================================== */
/* =======================================================  LSE_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT0                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT1                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT2                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT3                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSE_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_READY                                              */
  MDR_RST_CLOCK_LSE_STAT_READY_Off     = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_LSE_STAT_READY_On      = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_LSE_STAT_READY_Enum;

/* =======================================================  HSE0_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK HSE_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_HSE_ON                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK HSE_BYP [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_HSE_BYP                                            */
  MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_On    = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Enum;

/* =======================================  MDR_RST_CLOCK HSE0_CLK FILTER_EN [29..29]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_FILTER_EN                                          */
  MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Enum;

/* =======================================================  HSE0_CHK0  ======================================================= */
/* =======================================================  HSE0_CHK1  ======================================================= */
/* =======================================================  HSE0_CHK2  ======================================================= */
/* =======================================================  HSE0_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT0                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT1                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT2                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT3                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_READY                                             */
  MDR_RST_CLOCK_HSE0_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_HSE0_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_HSE0_STAT_READY_Enum;

/* =======================================================  HSE1_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK HSE_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_HSE_ON                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK HSE_BYP [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_HSE_BYP                                            */
  MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_On    = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Enum;

/* =======================================  MDR_RST_CLOCK HSE1_CLK FILTER_EN [29..29]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_FILTER_EN                                          */
  MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Enum;

/* =======================================================  HSE1_CHK0  ======================================================= */
/* =======================================================  HSE1_CHK1  ======================================================= */
/* =======================================================  HSE1_CHK2  ======================================================= */
/* =======================================================  HSE1_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT0                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT1                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT2                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT3                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_READY                                             */
  MDR_RST_CLOCK_HSE1_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_HSE1_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_HSE1_STAT_READY_Enum;

/* =======================================================  PLL0_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL0_CLK PLL_Q [0..4]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div17   = 16,    /*!< div17 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div18   = 17,    /*!< div18 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div19   = 18,    /*!< div19 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div20   = 19,    /*!< div20 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div21   = 20,    /*!< div21 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div22   = 21,    /*!< div22 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div23   = 22,    /*!< div23 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div24   = 23,    /*!< div24 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div25   = 24,    /*!< div25 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div26   = 25,    /*!< div26 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div27   = 26,    /*!< div27 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div28   = 27,    /*!< div28 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div29   = 28,    /*!< div29 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div30   = 29,    /*!< div30 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div31   = 30,    /*!< div31 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div32   = 31,    /*!< div32 : Divider                                                           */
} MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Enum;

/* ==========================================  MDR_RST_CLOCK PLL0_CLK DV [14..15]  =========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL0_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_DV_div4       = 2,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_DV_div8       = 3,     /*!< div8 : Divider                                                            */
} MDR_RST_CLOCK_PLL0_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK PLL_ReadyMode [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_ReadyMode                                      */
  MDR_RST_CLOCK_PLL0_CLK_PLL_ReadyMode_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_PLL_ReadyMode_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_PLL_ReadyMode_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK PLL_ON [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK SELECT [18..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL0_CLK_SELECT_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT0 [21..21]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT1 [22..22]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT2 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT3 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK EN_CHK [25..25]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_SHIFT_REG0 [26..26]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_SHIFT_REG1 [27..27]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT0 [28..28]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT1 [29..29]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT2 [30..30]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT3 [31..31]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  PLL0_CHK0  ======================================================= */
/* =======================================================  PLL0_CHK1  ======================================================= */
/* =======================================================  PLL0_CHK2  ======================================================= */
/* =======================================================  PLL0_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_READY                                             */
  MDR_RST_CLOCK_PLL0_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL0_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL0_STAT_READY_Enum;

/* =======================================================  PLL1_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL1_CLK PLL_Q [0..4]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div17   = 16,    /*!< div17 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div18   = 17,    /*!< div18 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div19   = 18,    /*!< div19 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div20   = 19,    /*!< div20 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div21   = 20,    /*!< div21 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div22   = 21,    /*!< div22 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div23   = 22,    /*!< div23 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div24   = 23,    /*!< div24 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div25   = 24,    /*!< div25 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div26   = 25,    /*!< div26 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div27   = 26,    /*!< div27 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div28   = 27,    /*!< div28 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div29   = 28,    /*!< div29 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div30   = 29,    /*!< div30 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div31   = 30,    /*!< div31 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div32   = 31,    /*!< div32 : Divider                                                           */
} MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Enum;

/* ==========================================  MDR_RST_CLOCK PLL1_CLK DV [14..15]  =========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL1_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_DV_div4       = 2,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_DV_div8       = 3,     /*!< div8 : Divider                                                            */
} MDR_RST_CLOCK_PLL1_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK PLL_ReadyMode [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_ReadyMode                                      */
  MDR_RST_CLOCK_PLL1_CLK_PLL_ReadyMode_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_PLL_ReadyMode_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_PLL_ReadyMode_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK PLL_ON [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK SELECT [18..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL1_CLK_SELECT_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT0 [21..21]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT1 [22..22]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT2 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT3 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK EN_CHK [25..25]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_SHIFT_REG0 [26..26]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_SHIFT_REG1 [27..27]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT0 [28..28]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT1 [29..29]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT2 [30..30]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT3 [31..31]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  PLL1_CHK0  ======================================================= */
/* =======================================================  PLL1_CHK1  ======================================================= */
/* =======================================================  PLL1_CHK2  ======================================================= */
/* =======================================================  PLL1_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_READY                                             */
  MDR_RST_CLOCK_PLL1_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL1_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL1_STAT_READY_Enum;

/* =======================================================  PLL2_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL2_CLK PLL_Q [0..4]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div17   = 16,    /*!< div17 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div18   = 17,    /*!< div18 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div19   = 18,    /*!< div19 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div20   = 19,    /*!< div20 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div21   = 20,    /*!< div21 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div22   = 21,    /*!< div22 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div23   = 22,    /*!< div23 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div24   = 23,    /*!< div24 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div25   = 24,    /*!< div25 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div26   = 25,    /*!< div26 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div27   = 26,    /*!< div27 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div28   = 27,    /*!< div28 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div29   = 28,    /*!< div29 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div30   = 29,    /*!< div30 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div31   = 30,    /*!< div31 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div32   = 31,    /*!< div32 : Divider                                                           */
} MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Enum;

/* ==========================================  MDR_RST_CLOCK PLL2_CLK DV [14..15]  =========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL2_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_DV_div4       = 2,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_DV_div8       = 3,     /*!< div8 : Divider                                                            */
} MDR_RST_CLOCK_PLL2_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK PLL_ReadyMode [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_ReadyMode                                      */
  MDR_RST_CLOCK_PLL2_CLK_PLL_ReadyMode_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_PLL_ReadyMode_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_PLL_ReadyMode_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK PLL_ON [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK SELECT [18..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL2_CLK_SELECT_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT0 [21..21]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT1 [22..22]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT2 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT3 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK EN_CHK [25..25]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_SHIFT_REG0 [26..26]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_SHIFT_REG1 [27..27]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT0 [28..28]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT1 [29..29]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT2 [30..30]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT3 [31..31]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  PLL2_CHK0  ======================================================= */
/* =======================================================  PLL2_CHK1  ======================================================= */
/* =======================================================  PLL2_CHK2  ======================================================= */
/* =======================================================  PLL2_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_READY                                             */
  MDR_RST_CLOCK_PLL2_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL2_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL2_STAT_READY_Enum;

/* =======================================================  PLL3_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL3_CLK PLL_Q [0..4]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div17   = 16,    /*!< div17 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div18   = 17,    /*!< div18 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div19   = 18,    /*!< div19 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div20   = 19,    /*!< div20 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div21   = 20,    /*!< div21 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div22   = 21,    /*!< div22 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div23   = 22,    /*!< div23 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div24   = 23,    /*!< div24 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div25   = 24,    /*!< div25 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div26   = 25,    /*!< div26 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div27   = 26,    /*!< div27 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div28   = 27,    /*!< div28 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div29   = 28,    /*!< div29 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div30   = 29,    /*!< div30 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div31   = 30,    /*!< div31 : Divider                                                           */
  MDR_RST_CLOCK_PLL3_CLK_PLL_Q_div32   = 31,    /*!< div32 : Divider                                                           */
} MDR_RST_CLOCK_PLL3_CLK_PLL_Q_Enum;

/* ==========================================  MDR_RST_CLOCK PLL3_CLK DV [14..15]  =========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL3_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_DV_div4       = 2,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL3_CLK_DV_div8       = 3,     /*!< div8 : Divider                                                            */
} MDR_RST_CLOCK_PLL3_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL3_CLK PLL_ReadyMode [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_PLL_ReadyMode                                      */
  MDR_RST_CLOCK_PLL3_CLK_PLL_ReadyMode_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL3_CLK_PLL_ReadyMode_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL3_CLK_PLL_ReadyMode_Enum;

/* ========================================  MDR_RST_CLOCK PLL3_CLK PLL_ON [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL3_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL3_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL3_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL3_CLK SELECT [18..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL3_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL3_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL3_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL3_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL3_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL3_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL3_CLK_SELECT_Enum;

/* =====================================  MDR_RST_CLOCK PLL3_CLK EN_CHK_EVENT0 [21..21]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL3_CLK EN_CHK_EVENT1 [22..22]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL3_CLK EN_CHK_EVENT2 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL3_CLK EN_CHK_EVENT3 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL3_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL3_CLK EN_CHK [25..25]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL3_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL3_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL3_CLK CLR_CHK_SHIFT_REG0 [26..26]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL3_CLK CLR_CHK_SHIFT_REG1 [27..27]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL3_CLK CLR_CHK_EVENT0 [28..28]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL3_CLK CLR_CHK_EVENT1 [29..29]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL3_CLK CLR_CHK_EVENT2 [30..30]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL3_CLK CLR_CHK_EVENT3 [31..31]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL3_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  PLL3_CHK0  ======================================================= */
/* =======================================================  PLL3_CHK1  ======================================================= */
/* =======================================================  PLL3_CHK2  ======================================================= */
/* =======================================================  PLL3_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL3_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL3_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL3_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL3_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL3_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL3_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL3_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL3_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL3_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL3_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL3_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL3_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL3_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL3_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL3_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL3_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL3_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL3_STAT_READY                                             */
  MDR_RST_CLOCK_PLL3_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL3_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL3_STAT_READY_Enum;

/* ========================================================  ETH_CLK  ======================================================== */
/* =========================================  MDR_RST_CLOCK ETH_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLK_CLK_EN                                              */
  MDR_RST_CLOCK_ETH_CLK_CLK_EN_Off     = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_ETH_CLK_CLK_EN_On      = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_ETH_CLK_CLK_EN_Enum;

/* =========================================  MDR_RST_CLOCK ETH_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLK_SELECT                                              */
  MDR_RST_CLOCK_ETH_CLK_SELECT_HSI     = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_ETH_CLK_SELECT_HSE0    = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_HSE1    = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_LSI     = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_ETH_CLK_SELECT_LSE     = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_ETH_CLK_SELECT_PLL0    = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_PLL1    = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_PLL2    = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_MAX_CLK = 13,    /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_ETH_CLK_SELECT_Enum;

/* ========================================================  USB_CLK  ======================================================== */
/* =========================================  MDR_RST_CLOCK USB_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLK_CLK_EN                                              */
  MDR_RST_CLOCK_USB_CLK_CLK_EN_Off     = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_USB_CLK_CLK_EN_On      = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_USB_CLK_CLK_EN_Enum;

/* =========================================  MDR_RST_CLOCK USB_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLK_SELECT                                              */
  MDR_RST_CLOCK_USB_CLK_SELECT_HSI     = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_USB_CLK_SELECT_HSE0    = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_USB_CLK_SELECT_HSE1    = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_USB_CLK_SELECT_LSI     = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_USB_CLK_SELECT_LSE     = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_USB_CLK_SELECT_PLL0    = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_USB_CLK_SELECT_PLL1    = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_USB_CLK_SELECT_PLL2    = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_USB_CLK_SELECT_MAX_CLK = 13,    /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_USB_CLK_SELECT_Enum;

/* ========================================================  RTC_CLK  ======================================================== */
/* =========================================  MDR_RST_CLOCK RTC_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLK_CLK_EN                                              */
  MDR_RST_CLOCK_RTC_CLK_CLK_EN_Off     = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_RTC_CLK_CLK_EN_On      = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_RTC_CLK_CLK_EN_Enum;

/* =========================================  MDR_RST_CLOCK RTC_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLK_SELECT                                              */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSI     = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSE0    = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSE1    = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_LSI     = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_LSE     = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL0    = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL1    = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL2    = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_MAX_CLK = 13,    /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_RTC_CLK_SELECT_Enum;

/* =======================================================  SSP1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP1_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP1_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP1_CLK_SELECT_Enum;

/* =======================================================  SSP2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP2_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP2_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP2_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP2_CLK_SELECT_Enum;

/* =======================================================  CAN1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAN1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAN1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Enum;

/* =======================================================  CAN2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAN2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAN2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAN2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAN2_CLK_CLK_EN_Enum;

/* =======================================================  UART1_CLK  ======================================================= */
/* ========================================  MDR_RST_CLOCK UART1_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART1_CLK_CLK_EN                                            */
  MDR_RST_CLOCK_UART1_CLK_CLK_EN_Off   = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_UART1_CLK_CLK_EN_On    = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_UART1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK UART1_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART1_CLK_SELECT                                            */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSI   = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSE0  = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSE1  = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_LSI   = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_LSE   = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL0  = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL1  = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL2  = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_MAX_CLK = 13,  /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_UART1_CLK_SELECT_Enum;

/* =======================================================  UART2_CLK  ======================================================= */
/* ========================================  MDR_RST_CLOCK UART2_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART2_CLK_CLK_EN                                            */
  MDR_RST_CLOCK_UART2_CLK_CLK_EN_Off   = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_UART2_CLK_CLK_EN_On    = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_UART2_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK UART2_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART2_CLK_SELECT                                            */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSI   = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSE0  = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSE1  = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_LSI   = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_LSE   = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL0  = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL1  = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL2  = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_MAX_CLK = 13,  /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_UART2_CLK_SELECT_Enum;

/* =======================================================  UART3_CLK  ======================================================= */
/* ========================================  MDR_RST_CLOCK UART3_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART3_CLK_CLK_EN                                            */
  MDR_RST_CLOCK_UART3_CLK_CLK_EN_Off   = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_UART3_CLK_CLK_EN_On    = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_UART3_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK UART3_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART3_CLK_SELECT                                            */
  MDR_RST_CLOCK_UART3_CLK_SELECT_HSI   = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART3_CLK_SELECT_HSE0  = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART3_CLK_SELECT_HSE1  = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART3_CLK_SELECT_LSI   = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART3_CLK_SELECT_LSE   = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_UART3_CLK_SELECT_PLL0  = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART3_CLK_SELECT_PLL1  = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART3_CLK_SELECT_PLL2  = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_UART3_CLK_SELECT_MAX_CLK = 13,  /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_UART3_CLK_SELECT_Enum;

/* =======================================================  UART4_CLK  ======================================================= */
/* ========================================  MDR_RST_CLOCK UART4_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART4_CLK_CLK_EN                                            */
  MDR_RST_CLOCK_UART4_CLK_CLK_EN_Off   = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_UART4_CLK_CLK_EN_On    = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_UART4_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK UART4_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART4_CLK_SELECT                                            */
  MDR_RST_CLOCK_UART4_CLK_SELECT_HSI   = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART4_CLK_SELECT_HSE0  = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART4_CLK_SELECT_HSE1  = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART4_CLK_SELECT_LSI   = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART4_CLK_SELECT_LSE   = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_UART4_CLK_SELECT_PLL0  = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART4_CLK_SELECT_PLL1  = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART4_CLK_SELECT_PLL2  = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_UART4_CLK_SELECT_MAX_CLK = 13,  /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_UART4_CLK_SELECT_Enum;

/* ========================================================  MIL_CLK  ======================================================== */
/* =========================================  MDR_RST_CLOCK MIL_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_MIL_CLK_CLK_EN                                              */
  MDR_RST_CLOCK_MIL_CLK_CLK_EN_Off     = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_MIL_CLK_CLK_EN_On      = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_MIL_CLK_CLK_EN_Enum;

/* =======================================================  TIM1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Enum;

/* =======================================================  TIM2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Enum;

/* =======================================================  TIM3_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM3_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM3_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM3_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Enum;

/* =======================================================  TIM4_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM4_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM4_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM4_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Enum;

/* =======================================================  CAP1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAP1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAP1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAP1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAP1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAP1_CLK_CLK_EN_Enum;

/* =======================================================  CAP2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAP2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAP2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAP2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAP2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAP2_CLK_CLK_EN_Enum;

/* =======================================================  CAP3_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAP3_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAP3_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAP3_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAP3_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAP3_CLK_CLK_EN_Enum;

/* =======================================================  CAP4_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAP4_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAP4_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAP4_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAP4_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAP4_CLK_CLK_EN_Enum;

/* =======================================================  QEP1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK QEP1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_QEP1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_QEP1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_QEP1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_QEP1_CLK_CLK_EN_Enum;

/* =======================================================  QEP2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK QEP2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_QEP2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_QEP2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_QEP2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_QEP2_CLK_CLK_EN_Enum;

/* =======================================================  PWM1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM1_CLK_CLK_EN_Enum;

/* =======================================================  PWM2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM2_CLK_CLK_EN_Enum;

/* =======================================================  PWM3_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM3_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM3_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM3_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM3_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM3_CLK_CLK_EN_Enum;

/* =======================================================  PWM4_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM4_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM4_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM4_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM4_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM4_CLK_CLK_EN_Enum;

/* =======================================================  PWM5_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM5_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM5_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM5_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM5_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM5_CLK_CLK_EN_Enum;

/* =======================================================  PWM6_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM6_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM6_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM6_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM6_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM6_CLK_CLK_EN_Enum;

/* =======================================================  PWM7_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM7_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM7_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM7_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM7_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM7_CLK_CLK_EN_Enum;

/* =======================================================  PWM8_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM8_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM8_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM8_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM8_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM8_CLK_CLK_EN_Enum;

/* =======================================================  PWM9_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK PWM9_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PWM9_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_PWM9_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_PWM9_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_PWM9_CLK_CLK_EN_Enum;

/* =======================================================  ADC1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK ADC1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_ADC1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_ADC1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_ADC1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK ADC1_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC1_CLK_SELECT                                             */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_ADC1_CLK_SELECT_Enum;

/* =======================================================  ADC2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK ADC2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_ADC2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_ADC2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_ADC2_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK ADC2_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC2_CLK_SELECT                                             */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_ADC2_CLK_SELECT_Enum;

/* =======================================================  ADC3_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK ADC3_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC3_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_ADC3_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_ADC3_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_ADC3_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK ADC3_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC3_CLK_SELECT                                             */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC3_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_ADC3_CLK_SELECT_Enum;

/* ======================================================  CORDIC_CLK  ======================================================= */
/* =======================================  MDR_RST_CLOCK CORDIC_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CORDIC_CLK_CLK_EN                                           */
  MDR_RST_CLOCK_CORDIC_CLK_CLK_EN_Off  = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CORDIC_CLK_CLK_EN_On   = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CORDIC_CLK_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK CORDIC_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CORDIC_CLK_SELECT                                           */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_HSI  = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_HSE0 = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_HSE1 = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_LSI  = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_LSE  = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_PLL0 = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_PLL1 = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_PLL2 = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_CORDIC_CLK_SELECT_MAX_CLK = 13, /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_CORDIC_CLK_SELECT_Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  REG  ========================================================== */
/* ==========================================================  KEY  ========================================================== */
/* ======================================================  REG_64_TMR0  ====================================================== */
/* ==========================================  MDR_BKP REG_64_TMR0 RTC_Sel [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR0_RTC_Sel                                               */
  MDR_BKP_REG_64_TMR0_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_64_TMR0_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_64_TMR0_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_64_TMR0_RTC_Sel_Enum;

/* =========================================  MDR_BKP REG_64_TMR0 RTC_RST [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR0_RTC_RST                                               */
  MDR_BKP_REG_64_TMR0_RTC_RST_Active   = 0,     /*!< Active : Enabled                                                          */
  MDR_BKP_REG_64_TMR0_RTC_RST_Reset    = 1,     /*!< Reset : In Reset                                                          */
} MDR_BKP_REG_64_TMR0_RTC_RST_Enum;

/* ==========================================  MDR_BKP REG_64_TMR0 RTC_En [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR0_RTC_En                                                */
  MDR_BKP_REG_64_TMR0_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_64_TMR0_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_64_TMR0_RTC_En_Enum;

/* ======================================================  REG_64_TMR1  ====================================================== */
/* ==========================================  MDR_BKP REG_64_TMR1 RTC_Sel [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR1_RTC_Sel                                               */
  MDR_BKP_REG_64_TMR1_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_64_TMR1_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_64_TMR1_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_64_TMR1_RTC_Sel_Enum;

/* =========================================  MDR_BKP REG_64_TMR1 RTC_RST [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR1_RTC_RST                                               */
  MDR_BKP_REG_64_TMR1_RTC_RST_Active   = 0,     /*!< Active : Enabled                                                          */
  MDR_BKP_REG_64_TMR1_RTC_RST_Reset    = 1,     /*!< Reset : In Reset                                                          */
} MDR_BKP_REG_64_TMR1_RTC_RST_Enum;

/* ==========================================  MDR_BKP REG_64_TMR1 RTC_En [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR1_RTC_En                                                */
  MDR_BKP_REG_64_TMR1_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_64_TMR1_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_64_TMR1_RTC_En_Enum;

/* ======================================================  REG_64_TMR2  ====================================================== */
/* ==========================================  MDR_BKP REG_64_TMR2 RTC_Sel [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR2_RTC_Sel                                               */
  MDR_BKP_REG_64_TMR2_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_64_TMR2_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_64_TMR2_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_64_TMR2_RTC_Sel_Enum;

/* =========================================  MDR_BKP REG_64_TMR2 RTC_RST [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR2_RTC_RST                                               */
  MDR_BKP_REG_64_TMR2_RTC_RST_Active   = 0,     /*!< Active : Enabled                                                          */
  MDR_BKP_REG_64_TMR2_RTC_RST_Reset    = 1,     /*!< Reset : In Reset                                                          */
} MDR_BKP_REG_64_TMR2_RTC_RST_Enum;

/* ==========================================  MDR_BKP REG_64_TMR2 RTC_En [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_64_TMR2_RTC_En                                                */
  MDR_BKP_REG_64_TMR2_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_64_TMR2_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_64_TMR2_RTC_En_Enum;

/* ======================================================  REG_60_TMR0  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR0 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_FPOR                                                  */
  MDR_BKP_REG_60_TMR0_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR0_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR0_FPOR_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 JTAG_Enable [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR0_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR0_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR0_JTAG_Enable_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 LockStep_On [9..9]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LockStep_On                                           */
  MDR_BKP_REG_60_TMR0_LockStep_On_Disable = 0,  /*!< Disable : Two independant CPUs                                            */
  MDR_BKP_REG_60_TMR0_LockStep_On_Enable = 1,   /*!< Enable : LockStep CPUs                                                    */
} MDR_BKP_REG_60_TMR0_LockStep_On_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 S_SYSRSTn [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR0_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_SYSRSTn_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 S_RSTn1 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR0_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 S_RSTn0 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR0_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 S_FT_Reset [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR0_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR0 S_WDT_Reset [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR0_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_WDT_Reset_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR0_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR0 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR0_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG63x_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR0_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR0_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR0_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR0  ====================================================== */
/* =========================================  MDR_BKP REG_61_TMR0 POR3p3_Dis [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_POR3p3_Dis                                            */
  MDR_BKP_REG_61_TMR0_POR3p3_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR0_POR3p3_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR0_POR3p3_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 ORV3p3_Dis [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_ORV3p3_Dis                                            */
  MDR_BKP_REG_61_TMR0_ORV3p3_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR0_ORV3p3_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR0_ORV3p3_Dis_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 bg_trimVdd1p6 [2..4]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_bg_trimVdd1p6                                         */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR0_bg_trimVdd1p6_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 bg_trimVdd1p2 [5..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_bg_trimVdd1p2                                         */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR0_bg_trimVdd1p2_Enum;

/* ==========================================  MDR_BKP REG_61_TMR0 DCDC_En [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_DCDC_En                                               */
  MDR_BKP_REG_61_TMR0_DCDC_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR0_DCDC_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR0_DCDC_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 DCDC_Trim [9..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_DCDC_Trim                                             */
  MDR_BKP_REG_61_TMR0_DCDC_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_DCDC_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR0_DCDC_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR0_DCDC_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_DCDC_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_DCDC_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR0_DCDC_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR0_DCDC_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR0_DCDC_Trim_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 HLDO_SRILow [13..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_HLDO_SRILow                                           */
  MDR_BKP_REG_61_TMR0_HLDO_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR0_HLDO_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR0_HLDO_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR0_HLDO_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR0_HLDO_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR0_HLDO_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR0_HLDO_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR0_HLDO_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR0_HLDO_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 HLDO_Dis [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_HLDO_Dis                                              */
  MDR_BKP_REG_61_TMR0_HLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR0_HLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR0_HLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LLDO_Dis [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LLDO_Dis                                              */
  MDR_BKP_REG_61_TMR0_LLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR0_LLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR0_LLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 Temp_En [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_Temp_En                                               */
  MDR_BKP_REG_61_TMR0_Temp_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR0_Temp_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR0_Temp_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 CProt_En [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_CProt_En                                              */
  MDR_BKP_REG_61_TMR0_CProt_En_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR0_CProt_En_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR0_CProt_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 P3p3_RDY [21..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_P3p3_RDY                                              */
  MDR_BKP_REG_61_TMR0_P3p3_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR0_P3p3_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR0_P3p3_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 S_nPOR3p3 [22..22]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_S_nPOR3p3                                             */
  MDR_BKP_REG_61_TMR0_S_nPOR3p3_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR0_S_nPOR3p3_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR0_S_nPOR3p3_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 S_nPOR1p6 [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_S_nPOR1p6                                             */
  MDR_BKP_REG_61_TMR0_S_nPOR1p6_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR0_S_nPOR1p6_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR0_S_nPOR1p6_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 S_nPOR1p2 [24..24]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_S_nPOR1p2                                             */
  MDR_BKP_REG_61_TMR0_S_nPOR1p2_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR0_S_nPOR1p2_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR0_S_nPOR1p2_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 S_nOVRST3p3 [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_S_nOVRST3p3                                           */
  MDR_BKP_REG_61_TMR0_S_nOVRST3p3_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR0_S_nOVRST3p3_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR0_S_nOVRST3p3_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LLDO_RDY [26..26]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LLDO_RDY                                              */
  MDR_BKP_REG_61_TMR0_LLDO_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR0_LLDO_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR0_LLDO_RDY_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 DCDC_RDY [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_DCDC_RDY                                              */
  MDR_BKP_REG_61_TMR0_DCDC_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR0_DCDC_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR0_DCDC_RDY_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 HLDO_RDY [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_HLDO_RDY                                              */
  MDR_BKP_REG_61_TMR0_HLDO_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR0_HLDO_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR0_HLDO_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 CProt_Event [29..29]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_CProt_Event                                           */
  MDR_BKP_REG_61_TMR0_CProt_Event_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR0_CProt_Event_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR0_CProt_Event_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 TProt_Event [30..30]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_TProt_Event                                           */
  MDR_BKP_REG_61_TMR0_TProt_Event_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR0_TProt_Event_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR0_TProt_Event_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 STANDBY [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_STANDBY                                               */
  MDR_BKP_REG_61_TMR0_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_61_TMR0_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_61_TMR0_STANDBY_Enum;

/* ======================================================  REG_62_TMR0  ====================================================== */
/* ==========================================  MDR_BKP REG_62_TMR0 BLDO_Dis [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_BLDO_Dis                                              */
  MDR_BKP_REG_62_TMR0_BLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_62_TMR0_BLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_62_TMR0_BLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_62_TMR0 BLDO_Trim [1..3]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_BLDO_Trim                                             */
  MDR_BKP_REG_62_TMR0_BLDO_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR0_BLDO_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_62_TMR0_BLDO_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_62_TMR0_BLDO_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR0_BLDO_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR0_BLDO_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_62_TMR0_BLDO_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_62_TMR0_BLDO_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR0_BLDO_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR0 BLDO_SRILow [4..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_BLDO_SRILow                                           */
  MDR_BKP_REG_62_TMR0_BLDO_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_62_TMR0_BLDO_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_62_TMR0_BLDO_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_62_TMR0_BLDO_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_62_TMR0_BLDO_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_62_TMR0_BLDO_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_62_TMR0_BLDO_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_62_TMR0_BLDO_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_62_TMR0_BLDO_SRILow_Enum;

/* ==========================================  MDR_BKP REG_62_TMR0 BLDO_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_BLDO_RDY                                              */
  MDR_BKP_REG_62_TMR0_BLDO_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR0_BLDO_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR0_BLDO_RDY_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 PWRM_Vdd_lvl [8..12]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl                                          */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl0 = 0,    /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl1 = 1,    /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl2 = 2,    /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl3 = 3,    /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl4 = 4,    /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl5 = 5,    /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl6 = 6,    /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl7 = 7,    /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl8 = 8,    /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl9 = 9,    /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl10 = 10,  /*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl11 = 11,  /*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl12 = 12,  /*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl13 = 13,  /*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl14 = 14,  /*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl15 = 15,  /*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl16 = 16,  /*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl17 = 17,  /*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl18 = 18,  /*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl19 = 19,  /*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl20 = 20,  /*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl21 = 21,  /*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl22 = 22,  /*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl23 = 23,  /*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl24 = 24,  /*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl25 = 25,  /*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl26 = 26,  /*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl27 = 27,  /*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl28 = 28,  /*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl29 = 29,  /*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl30 = 30,  /*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_lvl31 = 31,  /*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR0_PWRM_Vdd_lvl_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 PWRM_Vdd_En [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_Vdd_En                                           */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_En_Off  = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_En_On   = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR0_PWRM_Vdd_En_Enum;

/* ======================================  MDR_BKP REG_62_TMR0 PWRM_VddB_lvl [14..18]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl                                         */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl0 = 0,   /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl1 = 1,   /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl2 = 2,   /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl3 = 3,   /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl4 = 4,   /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl5 = 5,   /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl6 = 6,   /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl7 = 7,   /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl8 = 8,   /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl9 = 9,   /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl10 = 10, /*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl11 = 11, /*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl12 = 12, /*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl13 = 13, /*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl14 = 14, /*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl15 = 15, /*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl16 = 16, /*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl17 = 17, /*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl18 = 18, /*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl19 = 19, /*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl20 = 20, /*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl21 = 21, /*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl22 = 22, /*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl23 = 23, /*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl24 = 24, /*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl25 = 25, /*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl26 = 26, /*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl27 = 27, /*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl28 = 28, /*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl29 = 29, /*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl30 = 30, /*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_lvl31 = 31, /*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR0_PWRM_VddB_lvl_Enum;

/* ======================================  MDR_BKP REG_62_TMR0 PWRM_VddIO_lvl [19..23]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl                                        */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl0 = 0,  /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl1 = 1,  /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl2 = 2,  /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl3 = 3,  /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl4 = 4,  /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl5 = 5,  /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl6 = 6,  /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl7 = 7,  /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl8 = 8,  /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl9 = 9,  /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl10 = 10,/*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl11 = 11,/*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl12 = 12,/*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl13 = 13,/*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl14 = 14,/*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl15 = 15,/*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl16 = 16,/*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl17 = 17,/*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl18 = 18,/*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl19 = 19,/*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl20 = 20,/*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl21 = 21,/*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl22 = 22,/*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl23 = 23,/*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl24 = 24,/*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl25 = 25,/*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl26 = 26,/*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl27 = 27,/*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl28 = 28,/*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl29 = 29,/*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl30 = 30,/*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_lvl31 = 31,/*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR0_PWRM_VddIO_lvl_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 PWRM_VddB_EN [24..24]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_VddB_EN                                          */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR0_PWRM_VddB_EN_Enum;

/* ======================================  MDR_BKP REG_62_TMR0 PWRM_VddIO_EN [25..25]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_VddIO_EN                                         */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR0_PWRM_VddIO_EN_Enum;

/* ======================================  MDR_BKP REG_62_TMR0 PWRM_Vdd_Event [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_Vdd_Event                                        */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_Event_Off = 0,   /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR0_PWRM_Vdd_Event_On = 1,    /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR0_PWRM_Vdd_Event_Enum;

/* =====================================  MDR_BKP REG_62_TMR0 PWRM_VddB_Event [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_VddB_Event                                       */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_Event_Off = 0,  /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR0_PWRM_VddB_Event_On = 1,   /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR0_PWRM_VddB_Event_Enum;

/* =====================================  MDR_BKP REG_62_TMR0 PWRM_VddIO_Event [28..28]  ===================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PWRM_VddIO_Event                                      */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_Event_Off = 0, /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR0_PWRM_VddIO_Event_On = 1,  /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR0_PWRM_VddIO_Event_Enum;

/* =========================================  MDR_BKP REG_62_TMR0 Sel_NSW [29..29]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_Sel_NSW                                               */
  MDR_BKP_REG_62_TMR0_Sel_NSW_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR0_Sel_NSW_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR0_Sel_NSW_Enum;

/* ==========================================  MDR_BKP REG_62_TMR0 Sel_SW [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_Sel_SW                                                */
  MDR_BKP_REG_62_TMR0_Sel_SW_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR0_Sel_SW_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR0_Sel_SW_Enum;

/* ========================================  MDR_BKP REG_62_TMR0 PMU_BG_Dis [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_PMU_BG_Dis                                            */
  MDR_BKP_REG_62_TMR0_PMU_BG_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_62_TMR0_PMU_BG_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_62_TMR0_PMU_BG_Dis_Enum;

/* ======================================================  REG_63_TMR0  ====================================================== */
/* ==========================================  MDR_BKP REG_63_TMR0 LSE_RDY [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR0_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_RDY_Enum;

/* ========================================  MDR_BKP REG_63_TMR0 LSE_FilterON [1..1]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_FilterON                                          */
  MDR_BKP_REG_63_TMR0_LSE_FilterON_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_FilterON_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_FilterON_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 LSE_BYP [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR0_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_BYP_Enum;

/* ===========================================  MDR_BKP REG_63_TMR0 LSE_On [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_On                                                */
  MDR_BKP_REG_63_TMR0_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 HSE0_RDY [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSE0_RDY                                              */
  MDR_BKP_REG_63_TMR0_HSE0_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSE0_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSE0_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR0 HSE0_FilterEn [5..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSE0_FilterEn                                         */
  MDR_BKP_REG_63_TMR0_HSE0_FilterEn_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSE0_FilterEn_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSE0_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 HSE0_BYP [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSE0_BYP                                              */
  MDR_BKP_REG_63_TMR0_HSE0_BYP_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSE0_BYP_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSE0_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 HSE0_On [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSE0_On                                               */
  MDR_BKP_REG_63_TMR0_HSE0_On_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSE0_On_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSE0_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 HSE1_RDY [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSE1_RDY                                              */
  MDR_BKP_REG_63_TMR0_HSE1_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSE1_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSE1_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR0 HSE1_FilterEn [9..9]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSE1_FilterEn                                         */
  MDR_BKP_REG_63_TMR0_HSE1_FilterEn_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSE1_FilterEn_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSE1_FilterEn_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 HSE1_BYP [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSE1_BYP                                              */
  MDR_BKP_REG_63_TMR0_HSE1_BYP_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSE1_BYP_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSE1_BYP_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 HSE1_On [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSE1_On                                               */
  MDR_BKP_REG_63_TMR0_HSE1_On_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSE1_On_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSE1_On_Enum;

/* ========================================  MDR_BKP REG_63_TMR0 LSI_Ready [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_Ready                                             */
  MDR_BKP_REG_63_TMR0_LSI_Ready_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSI_Ready_On     = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSI_Ready_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 LSI_Dis [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_Dis                                               */
  MDR_BKP_REG_63_TMR0_LSI_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_63_TMR0_LSI_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_63_TMR0_LSI_Dis_Enum;

/* ========================================  MDR_BKP REG_63_TMR0 HSI_Ready [21..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSI_Ready                                             */
  MDR_BKP_REG_63_TMR0_HSI_Ready_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSI_Ready_On     = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSI_Ready_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 HSI_Dis [29..29]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSI_Dis                                               */
  MDR_BKP_REG_63_TMR0_HSI_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_63_TMR0_HSI_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_63_TMR0_HSI_Dis_Enum;

/* ======================================  MDR_BKP REG_63_TMR0 LSI_POR_Ready [31..31]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_POR_Ready                                         */
  MDR_BKP_REG_63_TMR0_LSI_POR_Ready_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSI_POR_Ready_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSI_POR_Ready_Enum;

/* ======================================================  REG_60_TMR1  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR1 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_FPOR                                                  */
  MDR_BKP_REG_60_TMR1_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR1_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR1_FPOR_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 JTAG_Enable [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR1_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR1_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR1_JTAG_Enable_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 LockStep_On [9..9]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LockStep_On                                           */
  MDR_BKP_REG_60_TMR1_LockStep_On_Disable = 0,  /*!< Disable : Two independant CPUs                                            */
  MDR_BKP_REG_60_TMR1_LockStep_On_Enable = 1,   /*!< Enable : LockStep CPUs                                                    */
} MDR_BKP_REG_60_TMR1_LockStep_On_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 S_SYSRSTn [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR1_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_SYSRSTn_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 S_RSTn1 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR1_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 S_RSTn0 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR1_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 S_FT_Reset [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR1_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR1 S_WDT_Reset [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR1_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_WDT_Reset_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR1_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR1 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR1_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG63x_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR1_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR1_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR1_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR1  ====================================================== */
/* =========================================  MDR_BKP REG_61_TMR1 POR3p3_Dis [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_POR3p3_Dis                                            */
  MDR_BKP_REG_61_TMR1_POR3p3_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR1_POR3p3_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR1_POR3p3_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 ORV3p3_Dis [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_ORV3p3_Dis                                            */
  MDR_BKP_REG_61_TMR1_ORV3p3_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR1_ORV3p3_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR1_ORV3p3_Dis_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 bg_trimVdd1p6 [2..4]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_bg_trimVdd1p6                                         */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR1_bg_trimVdd1p6_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 bg_trimVdd1p2 [5..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_bg_trimVdd1p2                                         */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR1_bg_trimVdd1p2_Enum;

/* ==========================================  MDR_BKP REG_61_TMR1 DCDC_En [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_DCDC_En                                               */
  MDR_BKP_REG_61_TMR1_DCDC_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR1_DCDC_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR1_DCDC_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 DCDC_Trim [9..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_DCDC_Trim                                             */
  MDR_BKP_REG_61_TMR1_DCDC_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_DCDC_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR1_DCDC_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR1_DCDC_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_DCDC_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_DCDC_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR1_DCDC_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR1_DCDC_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR1_DCDC_Trim_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 HLDO_SRILow [13..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_HLDO_SRILow                                           */
  MDR_BKP_REG_61_TMR1_HLDO_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR1_HLDO_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR1_HLDO_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR1_HLDO_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR1_HLDO_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR1_HLDO_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR1_HLDO_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR1_HLDO_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR1_HLDO_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 HLDO_Dis [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_HLDO_Dis                                              */
  MDR_BKP_REG_61_TMR1_HLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR1_HLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR1_HLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LLDO_Dis [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LLDO_Dis                                              */
  MDR_BKP_REG_61_TMR1_LLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR1_LLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR1_LLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 Temp_En [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_Temp_En                                               */
  MDR_BKP_REG_61_TMR1_Temp_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR1_Temp_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR1_Temp_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 CProt_En [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_CProt_En                                              */
  MDR_BKP_REG_61_TMR1_CProt_En_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR1_CProt_En_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR1_CProt_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 P3p3_RDY [21..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_P3p3_RDY                                              */
  MDR_BKP_REG_61_TMR1_P3p3_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR1_P3p3_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR1_P3p3_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 S_nPOR3p3 [22..22]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_S_nPOR3p3                                             */
  MDR_BKP_REG_61_TMR1_S_nPOR3p3_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR1_S_nPOR3p3_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR1_S_nPOR3p3_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 S_nPOR1p6 [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_S_nPOR1p6                                             */
  MDR_BKP_REG_61_TMR1_S_nPOR1p6_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR1_S_nPOR1p6_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR1_S_nPOR1p6_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 S_nPOR1p2 [24..24]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_S_nPOR1p2                                             */
  MDR_BKP_REG_61_TMR1_S_nPOR1p2_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR1_S_nPOR1p2_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR1_S_nPOR1p2_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 S_nOVRST3p3 [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_S_nOVRST3p3                                           */
  MDR_BKP_REG_61_TMR1_S_nOVRST3p3_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR1_S_nOVRST3p3_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR1_S_nOVRST3p3_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LLDO_RDY [26..26]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LLDO_RDY                                              */
  MDR_BKP_REG_61_TMR1_LLDO_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR1_LLDO_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR1_LLDO_RDY_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 DCDC_RDY [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_DCDC_RDY                                              */
  MDR_BKP_REG_61_TMR1_DCDC_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR1_DCDC_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR1_DCDC_RDY_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 HLDO_RDY [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_HLDO_RDY                                              */
  MDR_BKP_REG_61_TMR1_HLDO_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR1_HLDO_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR1_HLDO_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 CProt_Event [29..29]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_CProt_Event                                           */
  MDR_BKP_REG_61_TMR1_CProt_Event_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR1_CProt_Event_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR1_CProt_Event_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 TProt_Event [30..30]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_TProt_Event                                           */
  MDR_BKP_REG_61_TMR1_TProt_Event_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR1_TProt_Event_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR1_TProt_Event_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 STANDBY [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_STANDBY                                               */
  MDR_BKP_REG_61_TMR1_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_61_TMR1_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_61_TMR1_STANDBY_Enum;

/* ======================================================  REG_62_TMR1  ====================================================== */
/* ==========================================  MDR_BKP REG_62_TMR1 BLDO_Dis [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_BLDO_Dis                                              */
  MDR_BKP_REG_62_TMR1_BLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_62_TMR1_BLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_62_TMR1_BLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_62_TMR1 BLDO_Trim [1..3]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_BLDO_Trim                                             */
  MDR_BKP_REG_62_TMR1_BLDO_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR1_BLDO_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_62_TMR1_BLDO_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_62_TMR1_BLDO_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR1_BLDO_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR1_BLDO_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_62_TMR1_BLDO_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_62_TMR1_BLDO_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR1_BLDO_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR1 BLDO_SRILow [4..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_BLDO_SRILow                                           */
  MDR_BKP_REG_62_TMR1_BLDO_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_62_TMR1_BLDO_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_62_TMR1_BLDO_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_62_TMR1_BLDO_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_62_TMR1_BLDO_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_62_TMR1_BLDO_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_62_TMR1_BLDO_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_62_TMR1_BLDO_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_62_TMR1_BLDO_SRILow_Enum;

/* ==========================================  MDR_BKP REG_62_TMR1 BLDO_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_BLDO_RDY                                              */
  MDR_BKP_REG_62_TMR1_BLDO_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR1_BLDO_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR1_BLDO_RDY_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 PWRM_Vdd_lvl [8..12]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl                                          */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl0 = 0,    /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl1 = 1,    /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl2 = 2,    /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl3 = 3,    /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl4 = 4,    /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl5 = 5,    /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl6 = 6,    /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl7 = 7,    /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl8 = 8,    /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl9 = 9,    /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl10 = 10,  /*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl11 = 11,  /*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl12 = 12,  /*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl13 = 13,  /*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl14 = 14,  /*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl15 = 15,  /*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl16 = 16,  /*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl17 = 17,  /*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl18 = 18,  /*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl19 = 19,  /*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl20 = 20,  /*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl21 = 21,  /*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl22 = 22,  /*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl23 = 23,  /*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl24 = 24,  /*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl25 = 25,  /*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl26 = 26,  /*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl27 = 27,  /*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl28 = 28,  /*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl29 = 29,  /*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl30 = 30,  /*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_lvl31 = 31,  /*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR1_PWRM_Vdd_lvl_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 PWRM_Vdd_En [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_Vdd_En                                           */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_En_Off  = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_En_On   = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR1_PWRM_Vdd_En_Enum;

/* ======================================  MDR_BKP REG_62_TMR1 PWRM_VddB_lvl [14..18]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl                                         */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl0 = 0,   /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl1 = 1,   /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl2 = 2,   /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl3 = 3,   /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl4 = 4,   /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl5 = 5,   /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl6 = 6,   /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl7 = 7,   /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl8 = 8,   /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl9 = 9,   /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl10 = 10, /*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl11 = 11, /*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl12 = 12, /*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl13 = 13, /*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl14 = 14, /*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl15 = 15, /*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl16 = 16, /*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl17 = 17, /*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl18 = 18, /*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl19 = 19, /*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl20 = 20, /*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl21 = 21, /*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl22 = 22, /*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl23 = 23, /*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl24 = 24, /*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl25 = 25, /*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl26 = 26, /*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl27 = 27, /*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl28 = 28, /*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl29 = 29, /*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl30 = 30, /*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_lvl31 = 31, /*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR1_PWRM_VddB_lvl_Enum;

/* ======================================  MDR_BKP REG_62_TMR1 PWRM_VddIO_lvl [19..23]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl                                        */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl0 = 0,  /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl1 = 1,  /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl2 = 2,  /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl3 = 3,  /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl4 = 4,  /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl5 = 5,  /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl6 = 6,  /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl7 = 7,  /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl8 = 8,  /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl9 = 9,  /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl10 = 10,/*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl11 = 11,/*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl12 = 12,/*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl13 = 13,/*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl14 = 14,/*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl15 = 15,/*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl16 = 16,/*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl17 = 17,/*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl18 = 18,/*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl19 = 19,/*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl20 = 20,/*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl21 = 21,/*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl22 = 22,/*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl23 = 23,/*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl24 = 24,/*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl25 = 25,/*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl26 = 26,/*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl27 = 27,/*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl28 = 28,/*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl29 = 29,/*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl30 = 30,/*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_lvl31 = 31,/*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR1_PWRM_VddIO_lvl_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 PWRM_VddB_EN [24..24]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_VddB_EN                                          */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR1_PWRM_VddB_EN_Enum;

/* ======================================  MDR_BKP REG_62_TMR1 PWRM_VddIO_EN [25..25]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_VddIO_EN                                         */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR1_PWRM_VddIO_EN_Enum;

/* ======================================  MDR_BKP REG_62_TMR1 PWRM_Vdd_Event [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_Vdd_Event                                        */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_Event_Off = 0,   /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR1_PWRM_Vdd_Event_On = 1,    /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR1_PWRM_Vdd_Event_Enum;

/* =====================================  MDR_BKP REG_62_TMR1 PWRM_VddB_Event [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_VddB_Event                                       */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_Event_Off = 0,  /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR1_PWRM_VddB_Event_On = 1,   /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR1_PWRM_VddB_Event_Enum;

/* =====================================  MDR_BKP REG_62_TMR1 PWRM_VddIO_Event [28..28]  ===================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PWRM_VddIO_Event                                      */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_Event_Off = 0, /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR1_PWRM_VddIO_Event_On = 1,  /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR1_PWRM_VddIO_Event_Enum;

/* =========================================  MDR_BKP REG_62_TMR1 Sel_NSW [29..29]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_Sel_NSW                                               */
  MDR_BKP_REG_62_TMR1_Sel_NSW_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR1_Sel_NSW_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR1_Sel_NSW_Enum;

/* ==========================================  MDR_BKP REG_62_TMR1 Sel_SW [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_Sel_SW                                                */
  MDR_BKP_REG_62_TMR1_Sel_SW_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR1_Sel_SW_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR1_Sel_SW_Enum;

/* ========================================  MDR_BKP REG_62_TMR1 PMU_BG_Dis [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_PMU_BG_Dis                                            */
  MDR_BKP_REG_62_TMR1_PMU_BG_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_62_TMR1_PMU_BG_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_62_TMR1_PMU_BG_Dis_Enum;

/* ======================================================  REG_63_TMR1  ====================================================== */
/* ==========================================  MDR_BKP REG_63_TMR1 LSE_RDY [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR1_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_RDY_Enum;

/* ========================================  MDR_BKP REG_63_TMR1 LSE_FilterON [1..1]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_FilterON                                          */
  MDR_BKP_REG_63_TMR1_LSE_FilterON_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_FilterON_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_FilterON_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 LSE_BYP [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR1_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_BYP_Enum;

/* ===========================================  MDR_BKP REG_63_TMR1 LSE_On [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_On                                                */
  MDR_BKP_REG_63_TMR1_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 HSE0_RDY [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSE0_RDY                                              */
  MDR_BKP_REG_63_TMR1_HSE0_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSE0_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSE0_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR1 HSE0_FilterEn [5..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSE0_FilterEn                                         */
  MDR_BKP_REG_63_TMR1_HSE0_FilterEn_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSE0_FilterEn_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSE0_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 HSE0_BYP [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSE0_BYP                                              */
  MDR_BKP_REG_63_TMR1_HSE0_BYP_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSE0_BYP_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSE0_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 HSE0_On [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSE0_On                                               */
  MDR_BKP_REG_63_TMR1_HSE0_On_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSE0_On_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSE0_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 HSE1_RDY [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSE1_RDY                                              */
  MDR_BKP_REG_63_TMR1_HSE1_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSE1_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSE1_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR1 HSE1_FilterEn [9..9]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSE1_FilterEn                                         */
  MDR_BKP_REG_63_TMR1_HSE1_FilterEn_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSE1_FilterEn_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSE1_FilterEn_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 HSE1_BYP [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSE1_BYP                                              */
  MDR_BKP_REG_63_TMR1_HSE1_BYP_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSE1_BYP_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSE1_BYP_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 HSE1_On [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSE1_On                                               */
  MDR_BKP_REG_63_TMR1_HSE1_On_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSE1_On_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSE1_On_Enum;

/* ========================================  MDR_BKP REG_63_TMR1 LSI_Ready [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_Ready                                             */
  MDR_BKP_REG_63_TMR1_LSI_Ready_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSI_Ready_On     = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSI_Ready_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 LSI_Dis [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_Dis                                               */
  MDR_BKP_REG_63_TMR1_LSI_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_63_TMR1_LSI_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_63_TMR1_LSI_Dis_Enum;

/* ========================================  MDR_BKP REG_63_TMR1 HSI_Ready [21..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSI_Ready                                             */
  MDR_BKP_REG_63_TMR1_HSI_Ready_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSI_Ready_On     = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSI_Ready_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 HSI_Dis [29..29]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSI_Dis                                               */
  MDR_BKP_REG_63_TMR1_HSI_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_63_TMR1_HSI_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_63_TMR1_HSI_Dis_Enum;

/* ======================================  MDR_BKP REG_63_TMR1 LSI_POR_Ready [31..31]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_POR_Ready                                         */
  MDR_BKP_REG_63_TMR1_LSI_POR_Ready_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSI_POR_Ready_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSI_POR_Ready_Enum;

/* ======================================================  REG_60_TMR2  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR2 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_FPOR                                                  */
  MDR_BKP_REG_60_TMR2_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR2_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR2_FPOR_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 JTAG_Enable [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR2_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR2_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR2_JTAG_Enable_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 LockStep_On [9..9]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LockStep_On                                           */
  MDR_BKP_REG_60_TMR2_LockStep_On_Disable = 0,  /*!< Disable : Two independant CPUs                                            */
  MDR_BKP_REG_60_TMR2_LockStep_On_Enable = 1,   /*!< Enable : LockStep CPUs                                                    */
} MDR_BKP_REG_60_TMR2_LockStep_On_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 S_SYSRSTn [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR2_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_SYSRSTn_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 S_RSTn1 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR2_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 S_RSTn0 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR2_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 S_FT_Reset [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR2_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR2 S_WDT_Reset [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR2_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_WDT_Reset_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR2_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR2 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR2_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG63x_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR2_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR2_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR2_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR2  ====================================================== */
/* =========================================  MDR_BKP REG_61_TMR2 POR3p3_Dis [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_POR3p3_Dis                                            */
  MDR_BKP_REG_61_TMR2_POR3p3_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR2_POR3p3_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR2_POR3p3_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 ORV3p3_Dis [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_ORV3p3_Dis                                            */
  MDR_BKP_REG_61_TMR2_ORV3p3_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR2_ORV3p3_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR2_ORV3p3_Dis_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 bg_trimVdd1p6 [2..4]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_bg_trimVdd1p6                                         */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR2_bg_trimVdd1p6_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 bg_trimVdd1p2 [5..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_bg_trimVdd1p2                                         */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR2_bg_trimVdd1p2_Enum;

/* ==========================================  MDR_BKP REG_61_TMR2 DCDC_En [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_DCDC_En                                               */
  MDR_BKP_REG_61_TMR2_DCDC_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR2_DCDC_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR2_DCDC_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 DCDC_Trim [9..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_DCDC_Trim                                             */
  MDR_BKP_REG_61_TMR2_DCDC_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_DCDC_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR2_DCDC_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR2_DCDC_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_DCDC_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_DCDC_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR2_DCDC_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR2_DCDC_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR2_DCDC_Trim_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 HLDO_SRILow [13..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_HLDO_SRILow                                           */
  MDR_BKP_REG_61_TMR2_HLDO_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR2_HLDO_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR2_HLDO_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR2_HLDO_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR2_HLDO_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR2_HLDO_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR2_HLDO_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR2_HLDO_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR2_HLDO_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 HLDO_Dis [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_HLDO_Dis                                              */
  MDR_BKP_REG_61_TMR2_HLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR2_HLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR2_HLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LLDO_Dis [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LLDO_Dis                                              */
  MDR_BKP_REG_61_TMR2_LLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_61_TMR2_LLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_61_TMR2_LLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 Temp_En [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_Temp_En                                               */
  MDR_BKP_REG_61_TMR2_Temp_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR2_Temp_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR2_Temp_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 CProt_En [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_CProt_En                                              */
  MDR_BKP_REG_61_TMR2_CProt_En_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR2_CProt_En_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR2_CProt_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 P3p3_RDY [21..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_P3p3_RDY                                              */
  MDR_BKP_REG_61_TMR2_P3p3_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR2_P3p3_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR2_P3p3_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 S_nPOR3p3 [22..22]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_S_nPOR3p3                                             */
  MDR_BKP_REG_61_TMR2_S_nPOR3p3_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR2_S_nPOR3p3_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR2_S_nPOR3p3_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 S_nPOR1p6 [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_S_nPOR1p6                                             */
  MDR_BKP_REG_61_TMR2_S_nPOR1p6_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR2_S_nPOR1p6_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR2_S_nPOR1p6_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 S_nPOR1p2 [24..24]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_S_nPOR1p2                                             */
  MDR_BKP_REG_61_TMR2_S_nPOR1p2_Off    = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR2_S_nPOR1p2_On     = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR2_S_nPOR1p2_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 S_nOVRST3p3 [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_S_nOVRST3p3                                           */
  MDR_BKP_REG_61_TMR2_S_nOVRST3p3_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR2_S_nOVRST3p3_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR2_S_nOVRST3p3_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LLDO_RDY [26..26]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LLDO_RDY                                              */
  MDR_BKP_REG_61_TMR2_LLDO_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR2_LLDO_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR2_LLDO_RDY_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 DCDC_RDY [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_DCDC_RDY                                              */
  MDR_BKP_REG_61_TMR2_DCDC_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR2_DCDC_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR2_DCDC_RDY_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 HLDO_RDY [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_HLDO_RDY                                              */
  MDR_BKP_REG_61_TMR2_HLDO_RDY_Off     = 0,     /*!< Off : Not Ready                                                           */
  MDR_BKP_REG_61_TMR2_HLDO_RDY_On      = 1,     /*!< On : Ready                                                                */
} MDR_BKP_REG_61_TMR2_HLDO_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 CProt_Event [29..29]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_CProt_Event                                           */
  MDR_BKP_REG_61_TMR2_CProt_Event_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR2_CProt_Event_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR2_CProt_Event_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 TProt_Event [30..30]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_TProt_Event                                           */
  MDR_BKP_REG_61_TMR2_TProt_Event_Off  = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_REG_61_TMR2_TProt_Event_On   = 1,     /*!< On : Event active                                                         */
} MDR_BKP_REG_61_TMR2_TProt_Event_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 STANDBY [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_STANDBY                                               */
  MDR_BKP_REG_61_TMR2_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_61_TMR2_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_61_TMR2_STANDBY_Enum;

/* ======================================================  REG_62_TMR2  ====================================================== */
/* ==========================================  MDR_BKP REG_62_TMR2 BLDO_Dis [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_BLDO_Dis                                              */
  MDR_BKP_REG_62_TMR2_BLDO_Dis_Enable  = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_62_TMR2_BLDO_Dis_Disable = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_62_TMR2_BLDO_Dis_Enum;

/* =========================================  MDR_BKP REG_62_TMR2 BLDO_Trim [1..3]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_BLDO_Trim                                             */
  MDR_BKP_REG_62_TMR2_BLDO_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR2_BLDO_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_62_TMR2_BLDO_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_62_TMR2_BLDO_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR2_BLDO_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR2_BLDO_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_62_TMR2_BLDO_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_62_TMR2_BLDO_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR2_BLDO_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR2 BLDO_SRILow [4..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_BLDO_SRILow                                           */
  MDR_BKP_REG_62_TMR2_BLDO_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_62_TMR2_BLDO_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_62_TMR2_BLDO_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_62_TMR2_BLDO_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_62_TMR2_BLDO_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_62_TMR2_BLDO_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_62_TMR2_BLDO_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_62_TMR2_BLDO_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_62_TMR2_BLDO_SRILow_Enum;

/* ==========================================  MDR_BKP REG_62_TMR2 BLDO_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_BLDO_RDY                                              */
  MDR_BKP_REG_62_TMR2_BLDO_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR2_BLDO_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR2_BLDO_RDY_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 PWRM_Vdd_lvl [8..12]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl                                          */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl0 = 0,    /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl1 = 1,    /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl2 = 2,    /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl3 = 3,    /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl4 = 4,    /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl5 = 5,    /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl6 = 6,    /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl7 = 7,    /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl8 = 8,    /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl9 = 9,    /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl10 = 10,  /*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl11 = 11,  /*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl12 = 12,  /*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl13 = 13,  /*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl14 = 14,  /*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl15 = 15,  /*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl16 = 16,  /*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl17 = 17,  /*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl18 = 18,  /*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl19 = 19,  /*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl20 = 20,  /*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl21 = 21,  /*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl22 = 22,  /*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl23 = 23,  /*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl24 = 24,  /*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl25 = 25,  /*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl26 = 26,  /*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl27 = 27,  /*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl28 = 28,  /*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl29 = 29,  /*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl30 = 30,  /*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_lvl31 = 31,  /*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR2_PWRM_Vdd_lvl_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 PWRM_Vdd_En [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_Vdd_En                                           */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_En_Off  = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_En_On   = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR2_PWRM_Vdd_En_Enum;

/* ======================================  MDR_BKP REG_62_TMR2 PWRM_VddB_lvl [14..18]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl                                         */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl0 = 0,   /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl1 = 1,   /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl2 = 2,   /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl3 = 3,   /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl4 = 4,   /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl5 = 5,   /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl6 = 6,   /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl7 = 7,   /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl8 = 8,   /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl9 = 9,   /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl10 = 10, /*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl11 = 11, /*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl12 = 12, /*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl13 = 13, /*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl14 = 14, /*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl15 = 15, /*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl16 = 16, /*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl17 = 17, /*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl18 = 18, /*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl19 = 19, /*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl20 = 20, /*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl21 = 21, /*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl22 = 22, /*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl23 = 23, /*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl24 = 24, /*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl25 = 25, /*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl26 = 26, /*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl27 = 27, /*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl28 = 28, /*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl29 = 29, /*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl30 = 30, /*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_lvl31 = 31, /*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR2_PWRM_VddB_lvl_Enum;

/* ======================================  MDR_BKP REG_62_TMR2 PWRM_VddIO_lvl [19..23]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl                                        */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl0 = 0,  /*!< lvl0 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl1 = 1,  /*!< lvl1 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl2 = 2,  /*!< lvl2 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl3 = 3,  /*!< lvl3 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl4 = 4,  /*!< lvl4 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl5 = 5,  /*!< lvl5 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl6 = 6,  /*!< lvl6 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl7 = 7,  /*!< lvl7 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl8 = 8,  /*!< lvl8 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl9 = 9,  /*!< lvl9 : unknown level yet                                                  */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl10 = 10,/*!< lvl10 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl11 = 11,/*!< lvl11 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl12 = 12,/*!< lvl12 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl13 = 13,/*!< lvl13 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl14 = 14,/*!< lvl14 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl15 = 15,/*!< lvl15 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl16 = 16,/*!< lvl16 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl17 = 17,/*!< lvl17 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl18 = 18,/*!< lvl18 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl19 = 19,/*!< lvl19 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl20 = 20,/*!< lvl20 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl21 = 21,/*!< lvl21 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl22 = 22,/*!< lvl22 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl23 = 23,/*!< lvl23 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl24 = 24,/*!< lvl24 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl25 = 25,/*!< lvl25 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl26 = 26,/*!< lvl26 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl27 = 27,/*!< lvl27 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl28 = 28,/*!< lvl28 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl29 = 29,/*!< lvl29 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl30 = 30,/*!< lvl30 : unknown level yet                                                 */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_lvl31 = 31,/*!< lvl31 : unknown level yet                                                 */
} MDR_BKP_REG_62_TMR2_PWRM_VddIO_lvl_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 PWRM_VddB_EN [24..24]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_VddB_EN                                          */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR2_PWRM_VddB_EN_Enum;

/* ======================================  MDR_BKP REG_62_TMR2 PWRM_VddIO_EN [25..25]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_VddIO_EN                                         */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR2_PWRM_VddIO_EN_Enum;

/* ======================================  MDR_BKP REG_62_TMR2 PWRM_Vdd_Event [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_Vdd_Event                                        */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_Event_Off = 0,   /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR2_PWRM_Vdd_Event_On = 1,    /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR2_PWRM_Vdd_Event_Enum;

/* =====================================  MDR_BKP REG_62_TMR2 PWRM_VddB_Event [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_VddB_Event                                       */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_Event_Off = 0,  /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR2_PWRM_VddB_Event_On = 1,   /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR2_PWRM_VddB_Event_Enum;

/* =====================================  MDR_BKP REG_62_TMR2 PWRM_VddIO_Event [28..28]  ===================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PWRM_VddIO_Event                                      */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_Event_Off = 0, /*!< Off : No Event                                                            */
  MDR_BKP_REG_62_TMR2_PWRM_VddIO_Event_On = 1,  /*!< On : Event active                                                         */
} MDR_BKP_REG_62_TMR2_PWRM_VddIO_Event_Enum;

/* =========================================  MDR_BKP REG_62_TMR2 Sel_NSW [29..29]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_Sel_NSW                                               */
  MDR_BKP_REG_62_TMR2_Sel_NSW_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR2_Sel_NSW_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR2_Sel_NSW_Enum;

/* ==========================================  MDR_BKP REG_62_TMR2 Sel_SW [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_Sel_SW                                                */
  MDR_BKP_REG_62_TMR2_Sel_SW_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR2_Sel_SW_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR2_Sel_SW_Enum;

/* ========================================  MDR_BKP REG_62_TMR2 PMU_BG_Dis [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_PMU_BG_Dis                                            */
  MDR_BKP_REG_62_TMR2_PMU_BG_Dis_Enable = 0,    /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_62_TMR2_PMU_BG_Dis_Disable = 1,   /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_62_TMR2_PMU_BG_Dis_Enum;

/* ======================================================  REG_63_TMR2  ====================================================== */
/* ==========================================  MDR_BKP REG_63_TMR2 LSE_RDY [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR2_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_RDY_Enum;

/* ========================================  MDR_BKP REG_63_TMR2 LSE_FilterON [1..1]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_FilterON                                          */
  MDR_BKP_REG_63_TMR2_LSE_FilterON_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_FilterON_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_FilterON_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 LSE_BYP [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR2_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_BYP_Enum;

/* ===========================================  MDR_BKP REG_63_TMR2 LSE_On [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_On                                                */
  MDR_BKP_REG_63_TMR2_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 HSE0_RDY [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSE0_RDY                                              */
  MDR_BKP_REG_63_TMR2_HSE0_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSE0_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSE0_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR2 HSE0_FilterEn [5..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSE0_FilterEn                                         */
  MDR_BKP_REG_63_TMR2_HSE0_FilterEn_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSE0_FilterEn_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSE0_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 HSE0_BYP [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSE0_BYP                                              */
  MDR_BKP_REG_63_TMR2_HSE0_BYP_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSE0_BYP_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSE0_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 HSE0_On [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSE0_On                                               */
  MDR_BKP_REG_63_TMR2_HSE0_On_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSE0_On_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSE0_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 HSE1_RDY [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSE1_RDY                                              */
  MDR_BKP_REG_63_TMR2_HSE1_RDY_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSE1_RDY_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSE1_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR2 HSE1_FilterEn [9..9]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSE1_FilterEn                                         */
  MDR_BKP_REG_63_TMR2_HSE1_FilterEn_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSE1_FilterEn_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSE1_FilterEn_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 HSE1_BYP [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSE1_BYP                                              */
  MDR_BKP_REG_63_TMR2_HSE1_BYP_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSE1_BYP_On      = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSE1_BYP_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 HSE1_On [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSE1_On                                               */
  MDR_BKP_REG_63_TMR2_HSE1_On_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSE1_On_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSE1_On_Enum;

/* ========================================  MDR_BKP REG_63_TMR2 LSI_Ready [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_Ready                                             */
  MDR_BKP_REG_63_TMR2_LSI_Ready_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSI_Ready_On     = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSI_Ready_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 LSI_Dis [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_Dis                                               */
  MDR_BKP_REG_63_TMR2_LSI_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_63_TMR2_LSI_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_63_TMR2_LSI_Dis_Enum;

/* ========================================  MDR_BKP REG_63_TMR2 HSI_Ready [21..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSI_Ready                                             */
  MDR_BKP_REG_63_TMR2_HSI_Ready_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSI_Ready_On     = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSI_Ready_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 HSI_Dis [29..29]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSI_Dis                                               */
  MDR_BKP_REG_63_TMR2_HSI_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_REG_63_TMR2_HSI_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_REG_63_TMR2_HSI_Dis_Enum;

/* ======================================  MDR_BKP REG_63_TMR2 LSI_POR_Ready [31..31]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_POR_Ready                                         */
  MDR_BKP_REG_63_TMR2_LSI_POR_Ready_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSI_POR_Ready_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSI_POR_Ready_Enum;

/* =====================================================  RTC_CNT_TMR0  ====================================================== */
/* =====================================================  RTC_DIV_TMR0  ====================================================== */
/* =====================================================  RTC_PRL_TMR0  ====================================================== */
/* =====================================================  RTC_ALRM_TMR0  ===================================================== */
/* ======================================================  RTC_CS_TMR0  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR0 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_OWF                                                   */
  MDR_BKP_RTC_CS_TMR0_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_SECF                                                  */
  MDR_BKP_RTC_CS_TMR0_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR0_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR0 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR0_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR0_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR0_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_WEC                                                   */
  MDR_BKP_RTC_CS_TMR0_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR0_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR0_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR0_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR0_ERR_IE_Enum;

/* =====================================================  RTC_CNT_TMR1  ====================================================== */
/* =====================================================  RTC_DIV_TMR1  ====================================================== */
/* =====================================================  RTC_PRL_TMR1  ====================================================== */
/* =====================================================  RTC_ALRM_TMR1  ===================================================== */
/* ======================================================  RTC_CS_TMR1  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR1 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_OWF                                                   */
  MDR_BKP_RTC_CS_TMR1_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_SECF                                                  */
  MDR_BKP_RTC_CS_TMR1_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR1_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR1 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR1_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR1_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR1_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_WEC                                                   */
  MDR_BKP_RTC_CS_TMR1_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR1_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR1_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR1_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR1_ERR_IE_Enum;

/* =====================================================  RTC_CNT_TMR2  ====================================================== */
/* =====================================================  RTC_DIV_TMR2  ====================================================== */
/* =====================================================  RTC_PRL_TMR2  ====================================================== */
/* =====================================================  RTC_ALRM_TMR2  ===================================================== */
/* ======================================================  RTC_CS_TMR2  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR2 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_OWF                                                   */
  MDR_BKP_RTC_CS_TMR2_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_SECF                                                  */
  MDR_BKP_RTC_CS_TMR2_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR2_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR2 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR2_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR2_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR2_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_WEC                                                   */
  MDR_BKP_RTC_CS_TMR2_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR2_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR2_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR2_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR2_ERR_IE_Enum;

/* ======================================================  BLDO_CTRL0  ======================================================= */
/* ==========================================  MDR_BKP BLDO_CTRL0 BLDO_Dis [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL0_BLDO_Dis                                               */
  MDR_BKP_BLDO_CTRL0_BLDO_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL0_BLDO_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL0_BLDO_Dis_Enum;

/* ==========================================  MDR_BKP BLDO_CTRL0 BLDO_Trim [1..3]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL0_BLDO_Trim                                              */
  MDR_BKP_BLDO_CTRL0_BLDO_Trim_add_0v1 = 0,     /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_BLDO_CTRL0_BLDO_Trim_add_0v06 = 1,    /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_BLDO_CTRL0_BLDO_Trim_add_0v04 = 2,    /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_BLDO_CTRL0_BLDO_Trim_add_0v01 = 3,    /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_BLDO_CTRL0_BLDO_Trim_sub_0v01 = 4,    /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_BLDO_CTRL0_BLDO_Trim_sub_0v04 = 5,    /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_BLDO_CTRL0_BLDO_Trim_sub_0v06 = 6,    /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_BLDO_CTRL0_BLDO_Trim_sub_0v1 = 7,     /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_BLDO_CTRL0_BLDO_Trim_Enum;

/* =========================================  MDR_BKP BLDO_CTRL0 BLDO_SRILow [4..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL0_BLDO_SRILow                                            */
  MDR_BKP_BLDO_CTRL0_BLDO_SRILow_ge10MHz = 0,   /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_BLDO_CTRL0_BLDO_SRILow_ge200KHz = 1,  /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_BLDO_CTRL0_BLDO_SRILow_ge500KHz = 2,  /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_BLDO_CTRL0_BLDO_SRILow_ge1MHz = 3,    /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_BLDO_CTRL0_BLDO_SRILow_GensOff = 4,   /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_BLDO_CTRL0_BLDO_SRILow_ge40MHz = 5,   /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_BLDO_CTRL0_BLDO_SRILow_ge80MHz = 6,   /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_BLDO_CTRL0_BLDO_SRILow_gt80MHz = 7,   /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_BLDO_CTRL0_BLDO_SRILow_Enum;

/* ==========================================  MDR_BKP BLDO_CTRL0 BLDO_RDY [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL0_BLDO_RDY                                               */
  MDR_BKP_BLDO_CTRL0_BLDO_RDY_Off      = 0,     /*!< Off : Enable                                                              */
  MDR_BKP_BLDO_CTRL0_BLDO_RDY_On       = 1,     /*!< On : Disable                                                              */
} MDR_BKP_BLDO_CTRL0_BLDO_RDY_Enum;

/* ===========================================  MDR_BKP BLDO_CTRL0 ECC_Dis [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL0_ECC_Dis                                                */
  MDR_BKP_BLDO_CTRL0_ECC_Dis_Enable    = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL0_ECC_Dis_Disable   = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL0_ECC_Dis_Enum;

/* ========================================  MDR_BKP BLDO_CTRL0 PMU_BG_Dis [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL0_PMU_BG_Dis                                             */
  MDR_BKP_BLDO_CTRL0_PMU_BG_Dis_Enable = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL0_PMU_BG_Dis_Disable = 1,    /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL0_PMU_BG_Dis_Enum;

/* ======================================================  BLDO_CTRL1  ======================================================= */
/* ==========================================  MDR_BKP BLDO_CTRL1 BLDO_Dis [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL1_BLDO_Dis                                               */
  MDR_BKP_BLDO_CTRL1_BLDO_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL1_BLDO_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL1_BLDO_Dis_Enum;

/* ==========================================  MDR_BKP BLDO_CTRL1 BLDO_Trim [1..3]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL1_BLDO_Trim                                              */
  MDR_BKP_BLDO_CTRL1_BLDO_Trim_add_0v1 = 0,     /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_BLDO_CTRL1_BLDO_Trim_add_0v06 = 1,    /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_BLDO_CTRL1_BLDO_Trim_add_0v04 = 2,    /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_BLDO_CTRL1_BLDO_Trim_add_0v01 = 3,    /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_BLDO_CTRL1_BLDO_Trim_sub_0v01 = 4,    /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_BLDO_CTRL1_BLDO_Trim_sub_0v04 = 5,    /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_BLDO_CTRL1_BLDO_Trim_sub_0v06 = 6,    /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_BLDO_CTRL1_BLDO_Trim_sub_0v1 = 7,     /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_BLDO_CTRL1_BLDO_Trim_Enum;

/* =========================================  MDR_BKP BLDO_CTRL1 BLDO_SRILow [4..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL1_BLDO_SRILow                                            */
  MDR_BKP_BLDO_CTRL1_BLDO_SRILow_ge10MHz = 0,   /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_BLDO_CTRL1_BLDO_SRILow_ge200KHz = 1,  /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_BLDO_CTRL1_BLDO_SRILow_ge500KHz = 2,  /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_BLDO_CTRL1_BLDO_SRILow_ge1MHz = 3,    /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_BLDO_CTRL1_BLDO_SRILow_GensOff = 4,   /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_BLDO_CTRL1_BLDO_SRILow_ge40MHz = 5,   /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_BLDO_CTRL1_BLDO_SRILow_ge80MHz = 6,   /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_BLDO_CTRL1_BLDO_SRILow_gt80MHz = 7,   /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_BLDO_CTRL1_BLDO_SRILow_Enum;

/* ==========================================  MDR_BKP BLDO_CTRL1 BLDO_RDY [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL1_BLDO_RDY                                               */
  MDR_BKP_BLDO_CTRL1_BLDO_RDY_Off      = 0,     /*!< Off : Enable                                                              */
  MDR_BKP_BLDO_CTRL1_BLDO_RDY_On       = 1,     /*!< On : Disable                                                              */
} MDR_BKP_BLDO_CTRL1_BLDO_RDY_Enum;

/* ===========================================  MDR_BKP BLDO_CTRL1 ECC_Dis [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL1_ECC_Dis                                                */
  MDR_BKP_BLDO_CTRL1_ECC_Dis_Enable    = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL1_ECC_Dis_Disable   = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL1_ECC_Dis_Enum;

/* ========================================  MDR_BKP BLDO_CTRL1 PMU_BG_Dis [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL1_PMU_BG_Dis                                             */
  MDR_BKP_BLDO_CTRL1_PMU_BG_Dis_Enable = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL1_PMU_BG_Dis_Disable = 1,    /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL1_PMU_BG_Dis_Enum;

/* ======================================================  BLDO_CTRL2  ======================================================= */
/* ==========================================  MDR_BKP BLDO_CTRL2 BLDO_Dis [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL2_BLDO_Dis                                               */
  MDR_BKP_BLDO_CTRL2_BLDO_Dis_Enable   = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL2_BLDO_Dis_Disable  = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL2_BLDO_Dis_Enum;

/* ==========================================  MDR_BKP BLDO_CTRL2 BLDO_Trim [1..3]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL2_BLDO_Trim                                              */
  MDR_BKP_BLDO_CTRL2_BLDO_Trim_add_0v1 = 0,     /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_BLDO_CTRL2_BLDO_Trim_add_0v06 = 1,    /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_BLDO_CTRL2_BLDO_Trim_add_0v04 = 2,    /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_BLDO_CTRL2_BLDO_Trim_add_0v01 = 3,    /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_BLDO_CTRL2_BLDO_Trim_sub_0v01 = 4,    /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_BLDO_CTRL2_BLDO_Trim_sub_0v04 = 5,    /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_BLDO_CTRL2_BLDO_Trim_sub_0v06 = 6,    /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_BLDO_CTRL2_BLDO_Trim_sub_0v1 = 7,     /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_BLDO_CTRL2_BLDO_Trim_Enum;

/* =========================================  MDR_BKP BLDO_CTRL2 BLDO_SRILow [4..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL2_BLDO_SRILow                                            */
  MDR_BKP_BLDO_CTRL2_BLDO_SRILow_ge10MHz = 0,   /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_BLDO_CTRL2_BLDO_SRILow_ge200KHz = 1,  /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_BLDO_CTRL2_BLDO_SRILow_ge500KHz = 2,  /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_BLDO_CTRL2_BLDO_SRILow_ge1MHz = 3,    /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_BLDO_CTRL2_BLDO_SRILow_GensOff = 4,   /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_BLDO_CTRL2_BLDO_SRILow_ge40MHz = 5,   /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_BLDO_CTRL2_BLDO_SRILow_ge80MHz = 6,   /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_BLDO_CTRL2_BLDO_SRILow_gt80MHz = 7,   /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_BLDO_CTRL2_BLDO_SRILow_Enum;

/* ==========================================  MDR_BKP BLDO_CTRL2 BLDO_RDY [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL2_BLDO_RDY                                               */
  MDR_BKP_BLDO_CTRL2_BLDO_RDY_Off      = 0,     /*!< Off : Enable                                                              */
  MDR_BKP_BLDO_CTRL2_BLDO_RDY_On       = 1,     /*!< On : Disable                                                              */
} MDR_BKP_BLDO_CTRL2_BLDO_RDY_Enum;

/* ===========================================  MDR_BKP BLDO_CTRL2 ECC_Dis [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL2_ECC_Dis                                                */
  MDR_BKP_BLDO_CTRL2_ECC_Dis_Enable    = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL2_ECC_Dis_Disable   = 1,     /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL2_ECC_Dis_Enum;

/* ========================================  MDR_BKP BLDO_CTRL2 PMU_BG_Dis [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_BLDO_CTRL2_PMU_BG_Dis                                             */
  MDR_BKP_BLDO_CTRL2_PMU_BG_Dis_Enable = 0,     /*!< Enable : Enable state                                                     */
  MDR_BKP_BLDO_CTRL2_PMU_BG_Dis_Disable = 1,    /*!< Disable : Disable state                                                   */
} MDR_BKP_BLDO_CTRL2_PMU_BG_Dis_Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* MDR_ESILA_H */


/** @} */ /* End of group MDR_ESila */

/** @} */ /* End of group Milandr */
