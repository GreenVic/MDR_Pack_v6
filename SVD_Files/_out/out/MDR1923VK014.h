/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     MDR1923VK014.h
 * @brief    CMSIS HeaderFile
 * @version  2.0
 * @date     23. May 2019
 * @note     Generated by SVDConv V3.3.18 on Thursday, 23.05.2019 16:40:45
 *           from File '../_src/MDR1923VK014.svd',
 *           last modified on Thursday, 23.05.2019 13:40:40
 */



/** @addtogroup Milandr
  * @{
  */


/** @addtogroup MDR1923VK014
  * @{
  */


#ifndef MDR1923VK014_H
#define MDR1923VK014_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ========================================  MDR1923VK014 Specific Interrupt Numbers  ======================================== */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M0 Processor and Core Peripherals  =========================== */
#define __CM0_REV                 0x0000U       /*!< CM0 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0.h"                           /*!< ARM Cortex-M0 processor and core peripherals                              */
#include "system_MDR1923VK014.h"                /*!< MDR1923VK014 System                                                       */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLock Control (MDR_RST_CLOCK)
  */

typedef struct {                                /*!< (@ 0x40000000) MDR_RST_CLOCK Structure                                    */
  
  union {
    __IOM uint32_t KEY;                         /*!< (@ 0x00000000) Clock Unlock Register                                      */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Reg value                                                         */
    } KEY_b;
  } ;
  
  union {
    __IOM uint32_t MAX_CLK;                     /*!< (@ 0x00000004) MAX_CLK Select Register                                    */
    
    struct {
      __IOM uint32_t Select     : 4;            /*!< [3..0] Select MAX_CLOCK source                                            */
    } MAX_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CLK;                     /*!< (@ 0x00000008) CPU_CLK Register                                           */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] CPU_CLock div from MAX_CLOCK                                      */
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } CPU_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PER0_CLK;                    /*!< (@ 0x0000000C) Periph0 Clock Enable Register                              */
    
    struct {
      __IOM uint32_t RST_CLK_EN : 1;            /*!< [0..0] RST Clock Enable                                                   */
      __IOM uint32_t BKP_CLK_EN : 1;            /*!< [1..1] BKP Clock Enable                                                   */
      __IOM uint32_t PWR_CLK_EN : 1;            /*!< [2..2] Power Clock Enable                                                 */
      __IOM uint32_t FTCNTR_CLK_EN : 1;         /*!< [3..3] FT_CNTR Clock Enable                                               */
      __IOM uint32_t WDT_CLK_EN : 1;            /*!< [4..4] WDT Clock Enable                                                   */
      __IM  uint32_t            : 6;
      __IOM uint32_t DMA_CLK_EN : 1;            /*!< [11..11] DMA Clock Enable                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t PortA_CLK_EN : 1;          /*!< [13..13] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortB_CLK_EN : 1;          /*!< [14..14] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortC_CLK_EN : 1;          /*!< [15..15] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortD_CLK_EN : 1;          /*!< [16..16] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortE_CLK_EN : 1;          /*!< [17..17] GPIO Port Clock Enable                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t SPW1_CLK_EN : 1;           /*!< [21..21] SPW1 Clock Enable                                                */
      __IOM uint32_t SPW2_CLK_EN : 1;           /*!< [22..22] SPW2 Clock Enable                                                */
      __IOM uint32_t TIM1_CLK_EN : 1;           /*!< [23..23] TIM1 Clock Enable                                                */
      __IOM uint32_t TIM2_CLK_EN : 1;           /*!< [24..24] TIM2 Clock Enable                                                */
      __IOM uint32_t TIM3_CLK_EN : 1;           /*!< [25..25] TIM3 Clock Enable                                                */
      __IOM uint32_t TIM4_CLK_EN : 1;           /*!< [26..26] TIM4 Clock Enable                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t CAN1_CLK_EN : 1;           /*!< [29..29] CAN1 Clock Enable                                                */
      __IOM uint32_t CAN2_CLK_EN : 1;           /*!< [30..30] CAN2 Clock Enable                                                */
    } PER0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PER1_CLK;                    /*!< (@ 0x00000010) Periph1 Clock Enable Register                              */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t SSP1_CLK_EN : 1;           /*!< [2..2] SSP1 Clock Enable                                                  */
      __IOM uint32_t SSP2_CLK_EN : 1;           /*!< [3..3] SSP2 Clock Enable                                                  */
      __IOM uint32_t SSP3_CLK_EN : 1;           /*!< [4..4] SSP3 Clock Enable                                                  */
      __IOM uint32_t SSP4_CLK_EN : 1;           /*!< [5..5] SSP4 Clock Enable                                                  */
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [6..6] UART1 Clock Enable                                                 */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [7..7] UART2 Clock Enable                                                 */
      __IM  uint32_t            : 11;
      __IOM uint32_t MIL1_CLK_EN : 1;           /*!< [19..19] MIL1 Clock Enable                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t MIL2_CLK_EN : 1;           /*!< [21..21] MIL2 Clock Enable                                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t MIL3_CLK_EN : 1;           /*!< [25..25] MIL3 Clock Enable                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t CRC_CLK_EN : 1;            /*!< [28..28] CRC Clock Enable                                                 */
      __IOM uint32_t ECC_CLK_EN : 1;            /*!< [29..29] ECC Clock Enable                                                 */
      __IOM uint32_t SSP5_CLK_EN : 1;           /*!< [30..30] SSP5 Clock Enable                                                */
      __IOM uint32_t SSP6_CLK_EN : 1;           /*!< [31..31] SSP6 Clock Enable                                                */
    } PER1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK0;                    /*!< (@ 0x00000014) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } CPU_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK1;                    /*!< (@ 0x00000018) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } CPU_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK2;                    /*!< (@ 0x0000001C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } CPU_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t CPU_STAT;                    /*!< (@ 0x00000020) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
    } CPU_STAT_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CLK;                     /*!< (@ 0x00000024) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } LSI_CLK_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK0;                    /*!< (@ 0x00000028) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } LSI_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK1;                    /*!< (@ 0x0000002C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } LSI_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK2;                    /*!< (@ 0x00000030) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } LSI_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t LSI_STAT;                    /*!< (@ 0x00000034) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
      __IOM uint32_t Error      : 1;            /*!< [21..21] Clock Ready Error                                                */
    } LSI_STAT_b;
  } ;
  
  union {
    __IOM uint32_t HSE_STAT;                    /*!< (@ 0x00000038) Clock Status Register                                      */
    
    struct {
      __IM  uint32_t            : 20;
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
      __IOM uint32_t Error      : 1;            /*!< [21..21] Clock Ready Error                                                */
    } HSE_STAT_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CLK;                     /*!< (@ 0x0000003C) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } LSE_CLK_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK0;                    /*!< (@ 0x00000040) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } LSE_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK1;                    /*!< (@ 0x00000044) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } LSE_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK2;                    /*!< (@ 0x00000048) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } LSE_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t LSE_STAT;                    /*!< (@ 0x0000004C) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } LSE_STAT_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CLK;                    /*!< (@ 0x00000050) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t HSE_ON     : 1;            /*!< [27..27] Generator Enable                                                 */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [28..28] ByPass Mode                                                      */
      __IOM uint32_t FILTER_EN  : 1;            /*!< [29..29] Filter Enable                                                    */
    } HSE0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK0;                   /*!< (@ 0x00000054) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE0_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK1;                   /*!< (@ 0x00000058) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE0_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK2;                   /*!< (@ 0x0000005C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } HSE0_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_STAT;                   /*!< (@ 0x00000060) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } HSE0_STAT_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CLK;                    /*!< (@ 0x00000064) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t HSE_ON     : 1;            /*!< [27..27] Generator Enable                                                 */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [28..28] ByPass Mode                                                      */
      __IOM uint32_t FILTER_EN  : 1;            /*!< [29..29] Filter Enable                                                    */
    } HSE1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK0;                   /*!< (@ 0x00000068) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE1_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK1;                   /*!< (@ 0x0000006C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE1_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK2;                   /*!< (@ 0x00000070) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } HSE1_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_STAT;                   /*!< (@ 0x00000074) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } HSE1_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CLK;                    /*!< (@ 0x00000078) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 4;            /*!< [3..0] PLL Freq divider                                                   */
      __IOM uint32_t DV         : 1;            /*!< [4..4] PLL Output Divider                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t PLL_N      : 7;            /*!< [14..8] PLL Freq multiplier                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t PLL_ON     : 1;            /*!< [27..27] PLL Enable                                                       */
      __IOM uint32_t PLL_RLD    : 1;            /*!< [28..28] PLL Reload                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [31..29] Select PLL Input                                                 */
    } PLL0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK0;                   /*!< (@ 0x0000007C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL0_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK1;                   /*!< (@ 0x00000080) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL0_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK2;                   /*!< (@ 0x00000084) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL0_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_STAT;                   /*!< (@ 0x00000088) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL0_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CLK;                    /*!< (@ 0x0000008C) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 4;            /*!< [3..0] PLL Freq divider                                                   */
      __IOM uint32_t DV         : 1;            /*!< [4..4] PLL Output Divider                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t PLL_N      : 7;            /*!< [14..8] PLL Freq multiplier                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t PLL_ON     : 1;            /*!< [27..27] PLL Enable                                                       */
      __IOM uint32_t PLL_RLD    : 1;            /*!< [28..28] PLL Reload                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [31..29] Select PLL Input                                                 */
    } PLL1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK0;                   /*!< (@ 0x00000090) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL1_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK1;                   /*!< (@ 0x00000094) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL1_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK2;                   /*!< (@ 0x00000098) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL1_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_STAT;                   /*!< (@ 0x0000009C) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL1_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CLK;                    /*!< (@ 0x000000A0) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 4;            /*!< [3..0] PLL Freq divider                                                   */
      __IOM uint32_t DV         : 1;            /*!< [4..4] PLL Output Divider                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t PLL_N      : 7;            /*!< [14..8] PLL Freq multiplier                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t PLL_ON     : 1;            /*!< [27..27] PLL Enable                                                       */
      __IOM uint32_t PLL_RLD    : 1;            /*!< [28..28] PLL Reload                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [31..29] Select PLL Input                                                 */
    } PLL2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK0;                   /*!< (@ 0x000000A4) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL2_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK1;                   /*!< (@ 0x000000A8) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG3  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG1  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL2_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK2;                   /*!< (@ 0x000000AC) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL2_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_STAT;                   /*!< (@ 0x000000B0) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL2_STAT_b;
  } ;
  __IM  uint32_t  RESERVED[25];
  
  union {
    __IOM uint32_t CAN1_CLK;                    /*!< (@ 0x00000118) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAN1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CAN2_CLK;                    /*!< (@ 0x0000011C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAN2_CLK_b;
  } ;
  __IM  uint32_t  RESERVED1[4];
  
  union {
    __IOM uint32_t TIM1_CLK;                    /*!< (@ 0x00000130) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM2_CLK;                    /*!< (@ 0x00000134) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM3_CLK;                    /*!< (@ 0x00000138) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM4_CLK;                    /*!< (@ 0x0000013C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM4_CLK_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
  
  union {
    __IOM uint32_t MIL1_CLK;                    /*!< (@ 0x00000148) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } MIL1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t MIL2_CLK;                    /*!< (@ 0x0000014C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } MIL2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t MIL3_CLK;                    /*!< (@ 0x00000150) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } MIL3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t MIL4_CLK;                    /*!< (@ 0x00000154) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } MIL4_CLK_b;
  } ;
  __IM  uint32_t  RESERVED3[8];
  
  union {
    __IOM uint32_t SPW1_CLK;                    /*!< (@ 0x00000178) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } SPW1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t SPW2_CLK;                    /*!< (@ 0x0000017C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } SPW2_CLK_b;
  } ;
  __IM  uint32_t  RESERVED4[2];
  
  union {
    __IOM uint32_t UART1_CLK;                   /*!< (@ 0x00000188) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } UART1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t UART2_CLK;                   /*!< (@ 0x0000018C) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } UART2_CLK_b;
  } ;
  __IM  uint32_t  RESERVED5[4];
  
  union {
    __IOM uint32_t SSP1_CLK;                    /*!< (@ 0x000001A0) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t SSP2_CLK;                    /*!< (@ 0x000001A4) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t SSP3_CLK;                    /*!< (@ 0x000001A8) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t SSP4_CLK;                    /*!< (@ 0x000001AC) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP4_CLK_b;
  } ;
  
  union {
    __IOM uint32_t SSP5_CLK;                    /*!< (@ 0x000001B0) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP5_CLK_b;
  } ;
  
  union {
    __IOM uint32_t SSP6_CLK;                    /*!< (@ 0x000001B4) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP6_CLK_b;
  } ;
  __IM  uint32_t  RESERVED6[5];
  
  union {
    __IOM uint32_t RTC_CLK;                     /*!< (@ 0x000001CC) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } RTC_CLK_b;
  } ;
} MDR_RST_CLOCK_Type;                           /*!< Size = 464 (0x1d0)                                                        */



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup and RTC Control (MDR_BKP)
  */

typedef struct {                                /*!< (@ 0x40001000) MDR_BKP Structure                                          */
  __IOM uint32_t  REG[60];                      /*!< (@ 0x00000000) User backup registers                                      */
  __IOM uint32_t  KEY;                          /*!< (@ 0x000000F0) Unlock BKP and RTC Registers                               */
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t REG_60_TMR0;                 /*!< (@ 0x00000100) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t S_UccReset : 1;            /*!< [8..8] Reset by Ucc                                                       */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [9..9] Reset by RSTn0 signal                                              */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [10..10] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [11..11] Reset from WDT                                                   */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [12..12] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_OVRSTn   : 1;            /*!< [13..13] Reset by Ucc > U_over (5.75V)                                    */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [14..14] Reset by software                                                */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [15..15] Disable JTAG                                                     */
      __IOM uint32_t LimEn_LDO_DUcc0 : 1;       /*!< [16..16] Enable limit for DUcc0 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc1 : 1;       /*!< [17..17] Enable limit for DUcc1 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc2 : 1;       /*!< [18..18] Enable limit for DUcc2 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc3 : 1;       /*!< [19..19] Enable limit for DUcc3 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_BUcc : 1;        /*!< [20..20] Enable limit for DUcc_Bat (~50mA)                                */
      __IOM uint32_t LimEn_LDO_PLL : 1;         /*!< [21..21] Enable limit for DUcc_PLL (~50mA)                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IOM uint32_t PORSTn_En  : 1;            /*!< [28..28] Enable reset by Ucc > U_POR (2.5V)                               */
      __IOM uint32_t OVRSTn_En  : 1;            /*!< [29..29] Enable reset by Ucc > U_over (5.75V)                             */
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR0;                 /*!< (@ 0x00000104) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t LDO0_SRILow : 3;           /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO0_Trim  : 3;            /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO0_En    : 1;            /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO0_RDY   : 1;            /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO1_SRILow : 3;           /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO1_Trim  : 3;            /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO1_En    : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO1_RDY   : 1;            /*!< [15..15] LDO Ready                                                        */
      __IOM uint32_t LDO2_SRILow : 3;           /*!< [18..16] LDO Power adjustment                                             */
      __IOM uint32_t LDO2_Trim  : 3;            /*!< [21..19] LDO voltage tuning                                               */
      __IOM uint32_t LDO2_En    : 1;            /*!< [22..22] LDO Enable                                                       */
      __IOM uint32_t LDO2_RDY   : 1;            /*!< [23..23] LDO Ready                                                        */
      __IOM uint32_t LDO3_SRILow : 3;           /*!< [26..24] LDO Power adjustment                                             */
      __IOM uint32_t LDO3_Trim  : 3;            /*!< [29..27] LDO voltage tuning                                               */
      __IOM uint32_t LDO3_En    : 1;            /*!< [30..30] LDO Enable                                                       */
      __IOM uint32_t LDO3_RDY   : 1;            /*!< [31..31] LDO Ready                                                        */
    } REG_61_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR0;                 /*!< (@ 0x00000108) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t LDO_BUcc_SRILow : 3;       /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO_BUcc_Trim : 3;         /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO_BUcc_En : 1;           /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO_BUcc_RDY : 1;          /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO_PLL_SRILow : 3;        /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO_PLL_Trim : 3;          /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO_PLL_En : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO_PLL_RDY : 1;           /*!< [15..15] LDO Ready                                                        */
      __IM  uint32_t TrimR      : 9;            /*!< [24..16] Do not change                                                    */
      __IM  uint32_t            : 3;
      __IM  uint32_t Trim_Ref   : 3;            /*!< [30..28] Do not change                                                    */
    } REG_62_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR0;                 /*!< (@ 0x0000010C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_On     : 1;            /*!< [0..0] LSE Enable                                                         */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE Bypass                                                         */
      __IOM uint32_t RTC_Sel    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_En     : 1;            /*!< [4..4] RTC Enable                                                         */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [12..5] RTC pass counts                                                   */
      __IOM uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE Ready                                                        */
      __IOM uint32_t LSE_FilterEn : 1;          /*!< [14..14] LSE Filter Enable                                                */
      __IOM uint32_t LSI_On     : 1;            /*!< [15..15] LSI Enable                                                       */
      __IOM uint32_t LSI_Trim   : 5;            /*!< [20..16] LSI Trim freq                                                    */
      __IOM uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI Ready                                                        */
      __IOM uint32_t HSI_On     : 1;            /*!< [22..22] HSI Enable                                                       */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI Ready                                                        */
      __IOM uint32_t HSI_Trim   : 6;            /*!< [29..24] HSI trim freq                                                    */
      __IOM uint32_t STANDBY    : 1;            /*!< [30..30] Go Standby mode                                                  */
      __IOM uint32_t RTC_RST    : 1;            /*!< [31..31] RTC Reset                                                        */
    } REG_63_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_60_TMR1;                 /*!< (@ 0x00000110) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t S_UccReset : 1;            /*!< [8..8] Reset by Ucc                                                       */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [9..9] Reset by RSTn0 signal                                              */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [10..10] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [11..11] Reset from WDT                                                   */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [12..12] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_OVRSTn   : 1;            /*!< [13..13] Reset by Ucc > U_over (5.75V)                                    */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [14..14] Reset by software                                                */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [15..15] Disable JTAG                                                     */
      __IOM uint32_t LimEn_LDO_DUcc0 : 1;       /*!< [16..16] Enable limit for DUcc0 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc1 : 1;       /*!< [17..17] Enable limit for DUcc1 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc2 : 1;       /*!< [18..18] Enable limit for DUcc2 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc3 : 1;       /*!< [19..19] Enable limit for DUcc3 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_BUcc : 1;        /*!< [20..20] Enable limit for DUcc_Bat (~50mA)                                */
      __IOM uint32_t LimEn_LDO_PLL : 1;         /*!< [21..21] Enable limit for DUcc_PLL (~50mA)                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IOM uint32_t PORSTn_En  : 1;            /*!< [28..28] Enable reset by Ucc > U_POR (2.5V)                               */
      __IOM uint32_t OVRSTn_En  : 1;            /*!< [29..29] Enable reset by Ucc > U_over (5.75V)                             */
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR1;                 /*!< (@ 0x00000114) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t LDO0_SRILow : 3;           /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO0_Trim  : 3;            /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO0_En    : 1;            /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO0_RDY   : 1;            /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO1_SRILow : 3;           /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO1_Trim  : 3;            /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO1_En    : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO1_RDY   : 1;            /*!< [15..15] LDO Ready                                                        */
      __IOM uint32_t LDO2_SRILow : 3;           /*!< [18..16] LDO Power adjustment                                             */
      __IOM uint32_t LDO2_Trim  : 3;            /*!< [21..19] LDO voltage tuning                                               */
      __IOM uint32_t LDO2_En    : 1;            /*!< [22..22] LDO Enable                                                       */
      __IOM uint32_t LDO2_RDY   : 1;            /*!< [23..23] LDO Ready                                                        */
      __IOM uint32_t LDO3_SRILow : 3;           /*!< [26..24] LDO Power adjustment                                             */
      __IOM uint32_t LDO3_Trim  : 3;            /*!< [29..27] LDO voltage tuning                                               */
      __IOM uint32_t LDO3_En    : 1;            /*!< [30..30] LDO Enable                                                       */
      __IOM uint32_t LDO3_RDY   : 1;            /*!< [31..31] LDO Ready                                                        */
    } REG_61_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR1;                 /*!< (@ 0x00000118) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t LDO_BUcc_SRILow : 3;       /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO_BUcc_Trim : 3;         /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO_BUcc_En : 1;           /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO_BUcc_RDY : 1;          /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO_PLL_SRILow : 3;        /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO_PLL_Trim : 3;          /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO_PLL_En : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO_PLL_RDY : 1;           /*!< [15..15] LDO Ready                                                        */
      __IM  uint32_t TrimR      : 9;            /*!< [24..16] Do not change                                                    */
      __IM  uint32_t            : 3;
      __IM  uint32_t Trim_Ref   : 3;            /*!< [30..28] Do not change                                                    */
    } REG_62_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR1;                 /*!< (@ 0x0000011C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_On     : 1;            /*!< [0..0] LSE Enable                                                         */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE Bypass                                                         */
      __IOM uint32_t RTC_Sel    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_En     : 1;            /*!< [4..4] RTC Enable                                                         */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [12..5] RTC pass counts                                                   */
      __IOM uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE Ready                                                        */
      __IOM uint32_t LSE_FilterEn : 1;          /*!< [14..14] LSE Filter Enable                                                */
      __IOM uint32_t LSI_On     : 1;            /*!< [15..15] LSI Enable                                                       */
      __IOM uint32_t LSI_Trim   : 5;            /*!< [20..16] LSI Trim freq                                                    */
      __IOM uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI Ready                                                        */
      __IOM uint32_t HSI_On     : 1;            /*!< [22..22] HSI Enable                                                       */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI Ready                                                        */
      __IOM uint32_t HSI_Trim   : 6;            /*!< [29..24] HSI trim freq                                                    */
      __IOM uint32_t STANDBY    : 1;            /*!< [30..30] Go Standby mode                                                  */
      __IOM uint32_t RTC_RST    : 1;            /*!< [31..31] RTC Reset                                                        */
    } REG_63_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_60_TMR2;                 /*!< (@ 0x00000120) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t S_UccReset : 1;            /*!< [8..8] Reset by Ucc                                                       */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [9..9] Reset by RSTn0 signal                                              */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [10..10] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [11..11] Reset from WDT                                                   */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [12..12] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_OVRSTn   : 1;            /*!< [13..13] Reset by Ucc > U_over (5.75V)                                    */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [14..14] Reset by software                                                */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [15..15] Disable JTAG                                                     */
      __IOM uint32_t LimEn_LDO_DUcc0 : 1;       /*!< [16..16] Enable limit for DUcc0 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc1 : 1;       /*!< [17..17] Enable limit for DUcc1 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc2 : 1;       /*!< [18..18] Enable limit for DUcc2 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc3 : 1;       /*!< [19..19] Enable limit for DUcc3 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_BUcc : 1;        /*!< [20..20] Enable limit for DUcc_Bat (~50mA)                                */
      __IOM uint32_t LimEn_LDO_PLL : 1;         /*!< [21..21] Enable limit for DUcc_PLL (~50mA)                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IOM uint32_t PORSTn_En  : 1;            /*!< [28..28] Enable reset by Ucc > U_POR (2.5V)                               */
      __IOM uint32_t OVRSTn_En  : 1;            /*!< [29..29] Enable reset by Ucc > U_over (5.75V)                             */
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR2;                 /*!< (@ 0x00000124) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t LDO0_SRILow : 3;           /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO0_Trim  : 3;            /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO0_En    : 1;            /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO0_RDY   : 1;            /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO1_SRILow : 3;           /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO1_Trim  : 3;            /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO1_En    : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO1_RDY   : 1;            /*!< [15..15] LDO Ready                                                        */
      __IOM uint32_t LDO2_SRILow : 3;           /*!< [18..16] LDO Power adjustment                                             */
      __IOM uint32_t LDO2_Trim  : 3;            /*!< [21..19] LDO voltage tuning                                               */
      __IOM uint32_t LDO2_En    : 1;            /*!< [22..22] LDO Enable                                                       */
      __IOM uint32_t LDO2_RDY   : 1;            /*!< [23..23] LDO Ready                                                        */
      __IOM uint32_t LDO3_SRILow : 3;           /*!< [26..24] LDO Power adjustment                                             */
      __IOM uint32_t LDO3_Trim  : 3;            /*!< [29..27] LDO voltage tuning                                               */
      __IOM uint32_t LDO3_En    : 1;            /*!< [30..30] LDO Enable                                                       */
      __IOM uint32_t LDO3_RDY   : 1;            /*!< [31..31] LDO Ready                                                        */
    } REG_61_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR2;                 /*!< (@ 0x00000128) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t LDO_BUcc_SRILow : 3;       /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO_BUcc_Trim : 3;         /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO_BUcc_En : 1;           /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO_BUcc_RDY : 1;          /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO_PLL_SRILow : 3;        /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO_PLL_Trim : 3;          /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO_PLL_En : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO_PLL_RDY : 1;           /*!< [15..15] LDO Ready                                                        */
      __IM  uint32_t TrimR      : 9;            /*!< [24..16] Do not change                                                    */
      __IM  uint32_t            : 3;
      __IM  uint32_t Trim_Ref   : 3;            /*!< [30..28] Do not change                                                    */
    } REG_62_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR2;                 /*!< (@ 0x0000012C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_On     : 1;            /*!< [0..0] LSE Enable                                                         */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE Bypass                                                         */
      __IOM uint32_t RTC_Sel    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_En     : 1;            /*!< [4..4] RTC Enable                                                         */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [12..5] RTC pass counts                                                   */
      __IOM uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE Ready                                                        */
      __IOM uint32_t LSE_FilterEn : 1;          /*!< [14..14] LSE Filter Enable                                                */
      __IOM uint32_t LSI_On     : 1;            /*!< [15..15] LSI Enable                                                       */
      __IOM uint32_t LSI_Trim   : 5;            /*!< [20..16] LSI Trim freq                                                    */
      __IOM uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI Ready                                                        */
      __IOM uint32_t HSI_On     : 1;            /*!< [22..22] HSI Enable                                                       */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI Ready                                                        */
      __IOM uint32_t HSI_Trim   : 6;            /*!< [29..24] HSI trim freq                                                    */
      __IOM uint32_t STANDBY    : 1;            /*!< [30..30] Go Standby mode                                                  */
      __IOM uint32_t RTC_RST    : 1;            /*!< [31..31] RTC Reset                                                        */
    } REG_63_TMR2_b;
  } ;
  __IOM uint32_t  RTC_CNT_TMR0;                 /*!< (@ 0x00000130) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR0;                /*!< (@ 0x00000134) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR0;                /*!< (@ 0x00000138) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR0;               /*!< (@ 0x0000013C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR0;                 /*!< (@ 0x00000140) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR0_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  RTC_CNT_TMR1;                 /*!< (@ 0x00000150) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR1;                /*!< (@ 0x00000154) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR1;                /*!< (@ 0x00000158) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR1;               /*!< (@ 0x0000015C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR1;                 /*!< (@ 0x00000160) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR1_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  RTC_CNT_TMR2;                 /*!< (@ 0x00000170) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR2;                /*!< (@ 0x00000174) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR2;                /*!< (@ 0x00000178) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR2;               /*!< (@ 0x0000017C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR2;                 /*!< (@ 0x00000180) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR2_b;
  } ;
} MDR_BKP_Type;                                 /*!< Size = 388 (0x184)                                                        */



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief PORTA (MDR_PORTA)
  */

typedef struct {                                /*!< (@ 0x40080000) MDR_PORTA Structure                                        */
  __IOM uint32_t  KEY;                          /*!< (@ 0x00000000) Key lock Register                                          */
  
  union {
    __IOM uint32_t RXTX;                        /*!< (@ 0x00000004) GPIO Pin Data Register                                     */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Pin data value                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Pin data value                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Pin data value                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Pin data value                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Pin data value                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Pin data value                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Pin data value                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Pin data value                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Pin data value                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Pin data value                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Pin data value                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Pin data value                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Pin data value                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Pin data value                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Pin data value                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Pin data value                                                   */
      __IOM uint32_t Pin_16     : 1;            /*!< [16..16] Pin data value                                                   */
      __IOM uint32_t Pin_17     : 1;            /*!< [17..17] Pin data value                                                   */
      __IOM uint32_t Pin_18     : 1;            /*!< [18..18] Pin data value                                                   */
      __IOM uint32_t Pin_19     : 1;            /*!< [19..19] Pin data value                                                   */
      __IOM uint32_t Pin_20     : 1;            /*!< [20..20] Pin data value                                                   */
      __IOM uint32_t Pin_21     : 1;            /*!< [21..21] Pin data value                                                   */
      __IOM uint32_t Pin_22     : 1;            /*!< [22..22] Pin data value                                                   */
      __IOM uint32_t Pin_23     : 1;            /*!< [23..23] Pin data value                                                   */
      __IOM uint32_t Pin_24     : 1;            /*!< [24..24] Pin data value                                                   */
      __IOM uint32_t Pin_25     : 1;            /*!< [25..25] Pin data value                                                   */
      __IOM uint32_t Pin_26     : 1;            /*!< [26..26] Pin data value                                                   */
      __IOM uint32_t Pin_27     : 1;            /*!< [27..27] Pin data value                                                   */
      __IOM uint32_t Pin_28     : 1;            /*!< [28..28] Pin data value                                                   */
      __IOM uint32_t Pin_29     : 1;            /*!< [29..29] Pin data value                                                   */
      __IOM uint32_t Pin_30     : 1;            /*!< [30..30] Pin data value                                                   */
      __IOM uint32_t Pin_31     : 1;            /*!< [31..31] Pin data value                                                   */
    } RXTX_b;
  } ;
  
  union {
    __OM  uint32_t RXTX_Set;                    /*!< (@ 0x00000008) Set RXTX Bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 1 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 1 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 1 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 1 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 1 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 1 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 1 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 1 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 1 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 1 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 1 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 1 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 1 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 1 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 1 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 1 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 1 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 1 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 1 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 1 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 1 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 1 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 1 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 1 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 1 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 1 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 1 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 1 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 1 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 1 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 1 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 1 to pin                                                     */
    } RXTX_Set_b;
  } ;
  
  union {
    __OM  uint32_t RXTX_Clear;                  /*!< (@ 0x0000000C) Clear RXTX Bits                                            */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } RXTX_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t OE;                        /*!< (@ 0x00000010) Pins Output Enable (Port function)                         */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pin Output Enable                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pin Output Enable                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pin Output Enable                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pin Output Enable                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pin Output Enable                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pin Output Enable                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pin Output Enable                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pin Output Enable                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pin Output Enable                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pin Output Enable                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pin Output Enable                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pin Output Enable                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pin Output Enable                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pin Output Enable                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pin Output Enable                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pin Output Enable                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pin Output Enable                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pin Output Enable                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pin Output Enable                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pin Output Enable                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pin Output Enable                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pin Output Enable                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pin Output Enable                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pin Output Enable                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pin Output Enable                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pin Output Enable                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pin Output Enable                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pin Output Enable                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pin Output Enable                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pin Output Enable                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pin Output Enable                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pin Output Enable                                                */
      } OE_b;
    } ;
    
    union {
      __OM  uint32_t OE_Set;                    /*!< (@ 0x00000010) Set OE Pins                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } OE_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t OE_Clear;                    /*!< (@ 0x00000014) Clear OE Pins                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } OE_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t FUNC0;                     /*!< (@ 0x00000018) Pin0 - Pin7 Functions                                      */
      
      struct {
        __IM  uint32_t Func_Pin_0 : 4;          /*!< [3..0] Read SFUNC0 Register                                               */
        __IM  uint32_t Func_Pin_1 : 4;          /*!< [7..4] Read SFUNC0 Register                                               */
        __IM  uint32_t Func_Pin_2 : 4;          /*!< [11..8] Read SFUNC0 Register                                              */
        __IM  uint32_t Func_Pin_3 : 4;          /*!< [15..12] Read SFUNC0 Register                                             */
        __IM  uint32_t Func_Pin_4 : 4;          /*!< [19..16] Read SFUNC0 Register                                             */
        __IM  uint32_t Func_Pin_5 : 4;          /*!< [23..20] Read SFUNC0 Register                                             */
        __IM  uint32_t Func_Pin_6 : 4;          /*!< [27..24] Read SFUNC0 Register                                             */
        __IM  uint32_t Func_Pin_7 : 4;          /*!< [31..28] Read SFUNC0 Register                                             */
      } FUNC0_b;
    } ;
    
    union {
      __OM  uint32_t FUNC0_Set;                 /*!< (@ 0x00000018) Set FUNC0 bits                                             */
      
      struct {
        __OM  uint32_t Func_Pin_0 : 4;          /*!< [3..0] Read SFUNC0 Register                                               */
        __OM  uint32_t Func_Pin_1 : 4;          /*!< [7..4] Read SFUNC0 Register                                               */
        __OM  uint32_t Func_Pin_2 : 4;          /*!< [11..8] Read SFUNC0 Register                                              */
        __OM  uint32_t Func_Pin_3 : 4;          /*!< [15..12] Read SFUNC0 Register                                             */
        __OM  uint32_t Func_Pin_4 : 4;          /*!< [19..16] Read SFUNC0 Register                                             */
        __OM  uint32_t Func_Pin_5 : 4;          /*!< [23..20] Read SFUNC0 Register                                             */
        __OM  uint32_t Func_Pin_6 : 4;          /*!< [27..24] Read SFUNC0 Register                                             */
        __OM  uint32_t Func_Pin_7 : 4;          /*!< [31..28] Read SFUNC0 Register                                             */
      } FUNC0_Set_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t FUNC1;                     /*!< (@ 0x0000001C) Pin8 - Pin15 Functions                                     */
      
      struct {
        __IM  uint32_t Func_Pin_8 : 4;          /*!< [3..0] Read SFUNC1 Register                                               */
        __IM  uint32_t Func_Pin_9 : 4;          /*!< [7..4] Read SFUNC1 Register                                               */
        __IM  uint32_t Func_Pin_10 : 4;         /*!< [11..8] Read SFUNC1 Register                                              */
        __IM  uint32_t Func_Pin_11 : 4;         /*!< [15..12] Read SFUNC1 Register                                             */
        __IM  uint32_t Func_Pin_12 : 4;         /*!< [19..16] Read SFUNC1 Register                                             */
        __IM  uint32_t Func_Pin_13 : 4;         /*!< [23..20] Read SFUNC1 Register                                             */
        __IM  uint32_t Func_Pin_14 : 4;         /*!< [27..24] Read SFUNC1 Register                                             */
        __IM  uint32_t Func_Pin_15 : 4;         /*!< [31..28] Read SFUNC1 Register                                             */
      } FUNC1_b;
    } ;
    
    union {
      __OM  uint32_t FUNC1_Set;                 /*!< (@ 0x0000001C) Set FUNC1 bits                                             */
      
      struct {
        __OM  uint32_t Func_Pin_8 : 4;          /*!< [3..0] Read SFUNC1 Register                                               */
        __OM  uint32_t Func_Pin_9 : 4;          /*!< [7..4] Read SFUNC1 Register                                               */
        __OM  uint32_t Func_Pin_10 : 4;         /*!< [11..8] Read SFUNC1 Register                                              */
        __OM  uint32_t Func_Pin_11 : 4;         /*!< [15..12] Read SFUNC1 Register                                             */
        __OM  uint32_t Func_Pin_12 : 4;         /*!< [19..16] Read SFUNC1 Register                                             */
        __OM  uint32_t Func_Pin_13 : 4;         /*!< [23..20] Read SFUNC1 Register                                             */
        __OM  uint32_t Func_Pin_14 : 4;         /*!< [27..24] Read SFUNC1 Register                                             */
        __OM  uint32_t Func_Pin_15 : 4;         /*!< [31..28] Read SFUNC1 Register                                             */
      } FUNC1_Set_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t FUNC2;                     /*!< (@ 0x00000020) Pin16 - Pin23 Functions                                    */
      
      struct {
        __IM  uint32_t Func_Pin_16 : 4;         /*!< [3..0] Read SFUNC2 Register                                               */
        __IM  uint32_t Func_Pin_17 : 4;         /*!< [7..4] Read SFUNC2 Register                                               */
        __IM  uint32_t Func_Pin_18 : 4;         /*!< [11..8] Read SFUNC2 Register                                              */
        __IM  uint32_t Func_Pin_19 : 4;         /*!< [15..12] Read SFUNC2 Register                                             */
        __IM  uint32_t Func_Pin_20 : 4;         /*!< [19..16] Read SFUNC2 Register                                             */
        __IM  uint32_t Func_Pin_21 : 4;         /*!< [23..20] Read SFUNC2 Register                                             */
        __IM  uint32_t Func_Pin_22 : 4;         /*!< [27..24] Read SFUNC2 Register                                             */
        __IM  uint32_t Func_Pin_23 : 4;         /*!< [31..28] Read SFUNC2 Register                                             */
      } FUNC2_b;
    } ;
    
    union {
      __OM  uint32_t FUNC2_Set;                 /*!< (@ 0x00000020) Set FUNC2 bits                                             */
      
      struct {
        __OM  uint32_t Func_Pin_16 : 4;         /*!< [3..0] Read SFUNC2 Register                                               */
        __OM  uint32_t Func_Pin_17 : 4;         /*!< [7..4] Read SFUNC2 Register                                               */
        __OM  uint32_t Func_Pin_18 : 4;         /*!< [11..8] Read SFUNC2 Register                                              */
        __OM  uint32_t Func_Pin_19 : 4;         /*!< [15..12] Read SFUNC2 Register                                             */
        __OM  uint32_t Func_Pin_20 : 4;         /*!< [19..16] Read SFUNC2 Register                                             */
        __OM  uint32_t Func_Pin_21 : 4;         /*!< [23..20] Read SFUNC2 Register                                             */
        __OM  uint32_t Func_Pin_22 : 4;         /*!< [27..24] Read SFUNC2 Register                                             */
        __OM  uint32_t Func_Pin_23 : 4;         /*!< [31..28] Read SFUNC2 Register                                             */
      } FUNC2_Set_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t FUNC3;                     /*!< (@ 0x00000024) Pin24 - Pin31 Functions                                    */
      
      struct {
        __IM  uint32_t Func_Pin_24 : 4;         /*!< [3..0] Read SFUNC3 Register                                               */
        __IM  uint32_t Func_Pin_25 : 4;         /*!< [7..4] Read SFUNC3 Register                                               */
        __IM  uint32_t Func_Pin_26 : 4;         /*!< [11..8] Read SFUNC3 Register                                              */
        __IM  uint32_t Func_Pin_27 : 4;         /*!< [15..12] Read SFUNC3 Register                                             */
        __IM  uint32_t Func_Pin_28 : 4;         /*!< [19..16] Read SFUNC3 Register                                             */
        __IM  uint32_t Func_Pin_29 : 4;         /*!< [23..20] Read SFUNC3 Register                                             */
        __IM  uint32_t Func_Pin_30 : 4;         /*!< [27..24] Read SFUNC3 Register                                             */
        __IM  uint32_t Func_Pin_31 : 4;         /*!< [31..28] Read SFUNC3 Register                                             */
      } FUNC3_b;
    } ;
    
    union {
      __OM  uint32_t FUNC3_Set;                 /*!< (@ 0x00000024) Set FUNC3 bits                                             */
      
      struct {
        __OM  uint32_t Func_Pin_24 : 4;         /*!< [3..0] Read SFUNC3 Register                                               */
        __OM  uint32_t Func_Pin_25 : 4;         /*!< [7..4] Read SFUNC3 Register                                               */
        __OM  uint32_t Func_Pin_26 : 4;         /*!< [11..8] Read SFUNC3 Register                                              */
        __OM  uint32_t Func_Pin_27 : 4;         /*!< [15..12] Read SFUNC3 Register                                             */
        __OM  uint32_t Func_Pin_28 : 4;         /*!< [19..16] Read SFUNC3 Register                                             */
        __OM  uint32_t Func_Pin_29 : 4;         /*!< [23..20] Read SFUNC3 Register                                             */
        __OM  uint32_t Func_Pin_30 : 4;         /*!< [27..24] Read SFUNC3 Register                                             */
        __OM  uint32_t Func_Pin_31 : 4;         /*!< [31..28] Read SFUNC3 Register                                             */
      } FUNC3_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t FUNC0_Clear;                 /*!< (@ 0x00000028) Clear FUNC0 bits                                           */
    
    struct {
      __OM  uint32_t Func_Pin_0 : 4;            /*!< [3..0] Clear FUNC0 bits                                                   */
      __OM  uint32_t Func_Pin_1 : 4;            /*!< [7..4] Clear FUNC0 bits                                                   */
      __OM  uint32_t Func_Pin_2 : 4;            /*!< [11..8] Clear FUNC0 bits                                                  */
      __OM  uint32_t Func_Pin_3 : 4;            /*!< [15..12] Clear FUNC0 bits                                                 */
      __OM  uint32_t Func_Pin_4 : 4;            /*!< [19..16] Clear FUNC0 bits                                                 */
      __OM  uint32_t Func_Pin_5 : 4;            /*!< [23..20] Clear FUNC0 bits                                                 */
      __OM  uint32_t Func_Pin_6 : 4;            /*!< [27..24] Clear FUNC0 bits                                                 */
      __OM  uint32_t Func_Pin_7 : 4;            /*!< [31..28] Clear FUNC0 bits                                                 */
    } FUNC0_Clear_b;
  } ;
  
  union {
    __OM  uint32_t FUNC1_Clear;                 /*!< (@ 0x0000002C) Clear FUNC1 bits                                           */
    
    struct {
      __OM  uint32_t Func_Pin_8 : 4;            /*!< [3..0] Clear FUNC1 bits                                                   */
      __OM  uint32_t Func_Pin_9 : 4;            /*!< [7..4] Clear FUNC1 bits                                                   */
      __OM  uint32_t Func_Pin_10 : 4;           /*!< [11..8] Clear FUNC1 bits                                                  */
      __OM  uint32_t Func_Pin_11 : 4;           /*!< [15..12] Clear FUNC1 bits                                                 */
      __OM  uint32_t Func_Pin_12 : 4;           /*!< [19..16] Clear FUNC1 bits                                                 */
      __OM  uint32_t Func_Pin_13 : 4;           /*!< [23..20] Clear FUNC1 bits                                                 */
      __OM  uint32_t Func_Pin_14 : 4;           /*!< [27..24] Clear FUNC1 bits                                                 */
      __OM  uint32_t Func_Pin_15 : 4;           /*!< [31..28] Clear FUNC1 bits                                                 */
    } FUNC1_Clear_b;
  } ;
  
  union {
    __OM  uint32_t FUNC2_Clear;                 /*!< (@ 0x00000030) Clear FUNC2 bits                                           */
    
    struct {
      __OM  uint32_t Func_Pin_16 : 4;           /*!< [3..0] Clear FUNC2 bits                                                   */
      __OM  uint32_t Func_Pin_17 : 4;           /*!< [7..4] Clear FUNC2 bits                                                   */
      __OM  uint32_t Func_Pin_18 : 4;           /*!< [11..8] Clear FUNC2 bits                                                  */
      __OM  uint32_t Func_Pin_19 : 4;           /*!< [15..12] Clear FUNC2 bits                                                 */
      __OM  uint32_t Func_Pin_20 : 4;           /*!< [19..16] Clear FUNC2 bits                                                 */
      __OM  uint32_t Func_Pin_21 : 4;           /*!< [23..20] Clear FUNC2 bits                                                 */
      __OM  uint32_t Func_Pin_22 : 4;           /*!< [27..24] Clear FUNC2 bits                                                 */
      __OM  uint32_t Func_Pin_23 : 4;           /*!< [31..28] Clear FUNC2 bits                                                 */
    } FUNC2_Clear_b;
  } ;
  
  union {
    __OM  uint32_t FUNC3_Clear;                 /*!< (@ 0x00000034) Clear FUNC3 bits                                           */
    
    struct {
      __OM  uint32_t Func_Pin_24 : 4;           /*!< [3..0] Clear FUNC3 bits                                                   */
      __OM  uint32_t Func_Pin_25 : 4;           /*!< [7..4] Clear FUNC3 bits                                                   */
      __OM  uint32_t Func_Pin_26 : 4;           /*!< [11..8] Clear FUNC3 bits                                                  */
      __OM  uint32_t Func_Pin_27 : 4;           /*!< [15..12] Clear FUNC3 bits                                                 */
      __OM  uint32_t Func_Pin_28 : 4;           /*!< [19..16] Clear FUNC3 bits                                                 */
      __OM  uint32_t Func_Pin_29 : 4;           /*!< [23..20] Clear FUNC3 bits                                                 */
      __OM  uint32_t Func_Pin_30 : 4;           /*!< [27..24] Clear FUNC3 bits                                                 */
      __OM  uint32_t Func_Pin_31 : 4;           /*!< [31..28] Clear FUNC3 bits                                                 */
    } FUNC3_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t ANALOG;                    /*!< (@ 0x00000038) Pins Digital Mode                                          */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pins Digital Mode                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pins Digital Mode                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pins Digital Mode                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pins Digital Mode                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pins Digital Mode                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pins Digital Mode                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pins Digital Mode                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pins Digital Mode                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pins Digital Mode                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pins Digital Mode                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pins Digital Mode                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pins Digital Mode                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pins Digital Mode                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pins Digital Mode                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pins Digital Mode                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pins Digital Mode                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pins Digital Mode                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pins Digital Mode                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pins Digital Mode                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pins Digital Mode                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pins Digital Mode                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pins Digital Mode                                                */
      } ANALOG_b;
    } ;
    
    union {
      __OM  uint32_t ANALOG_Set;                /*!< (@ 0x00000038) Set ANALOG bits                                            */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } ANALOG_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t ANALOG_Clear;                /*!< (@ 0x0000003C) Clear ANALOG bits                                          */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } ANALOG_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t PULLUP;                    /*!< (@ 0x00000040) Pins PullUP State                                          */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pins PullUp State                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pins PullUp State                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pins PullUp State                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pins PullUp State                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pins PullUp State                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pins PullUp State                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pins PullUp State                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pins PullUp State                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pins PullUp State                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pins PullUp State                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pins PullUp State                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pins PullUp State                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pins PullUp State                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pins PullUp State                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pins PullUp State                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pins PullUp State                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pins PullUp State                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pins PullUp State                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pins PullUp State                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pins PullUp State                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pins PullUp State                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pins PullUp State                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pins PullUp State                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pins PullUp State                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pins PullUp State                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pins PullUp State                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pins PullUp State                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pins PullUp State                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pins PullUp State                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pins PullUp State                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pins PullUp State                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pins PullUp State                                                */
      } PULLUP_b;
    } ;
    
    union {
      __OM  uint32_t PULLUP_Set;                /*!< (@ 0x00000040) Set PULLUP bits                                            */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } PULLUP_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t PULLUP_Clear;                /*!< (@ 0x00000044) Clear PULLUP bits                                          */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } PULLUP_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t PULLDOWN;                  /*!< (@ 0x00000048) Pins PullDOWN State                                        */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pins PullUp State                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pins PullUp State                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pins PullUp State                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pins PullUp State                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pins PullUp State                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pins PullUp State                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pins PullUp State                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pins PullUp State                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pins PullUp State                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pins PullUp State                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pins PullUp State                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pins PullUp State                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pins PullUp State                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pins PullUp State                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pins PullUp State                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pins PullUp State                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pins PullUp State                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pins PullUp State                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pins PullUp State                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pins PullUp State                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pins PullUp State                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pins PullUp State                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pins PullUp State                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pins PullUp State                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pins PullUp State                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pins PullUp State                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pins PullUp State                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pins PullUp State                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pins PullUp State                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pins PullUp State                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pins PullUp State                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pins PullUp State                                                */
      } PULLDOWN_b;
    } ;
    
    union {
      __OM  uint32_t PULLDOWN_Set;              /*!< (@ 0x00000048) Set PULLDOWN bits                                          */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } PULLDOWN_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t PULLDOWN_Clear;              /*!< (@ 0x0000004C) Clear PULLDOWN bits                                        */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } PULLDOWN_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t PD;                        /*!< (@ 0x00000050) Pins Driver Mode                                           */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pins Driver Mode                                                 */
      } PD_b;
    } ;
    
    union {
      __OM  uint32_t PD_Set;                    /*!< (@ 0x00000050) Set PD bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } PD_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t PD_Clear;                    /*!< (@ 0x00000054) Clear PD bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } PD_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t PWR0;                      /*!< (@ 0x00000058) Power of Pins 0 - 15                                       */
      
      struct {
        __IM  uint32_t Pin_0    : 2;            /*!< [1..0] Read SPWR Register                                                 */
        __IM  uint32_t Pin_1    : 2;            /*!< [3..2] Read SPWR Register                                                 */
        __IM  uint32_t Pin_2    : 2;            /*!< [5..4] Read SPWR Register                                                 */
        __IM  uint32_t Pin_3    : 2;            /*!< [7..6] Read SPWR Register                                                 */
        __IM  uint32_t Pin_4    : 2;            /*!< [9..8] Read SPWR Register                                                 */
        __IM  uint32_t Pin_5    : 2;            /*!< [11..10] Read SPWR Register                                               */
        __IM  uint32_t Pin_6    : 2;            /*!< [13..12] Read SPWR Register                                               */
        __IM  uint32_t Pin_7    : 2;            /*!< [15..14] Read SPWR Register                                               */
        __IM  uint32_t Pin_8    : 2;            /*!< [17..16] Read SPWR Register                                               */
        __IM  uint32_t Pin_9    : 2;            /*!< [19..18] Read SPWR Register                                               */
        __IM  uint32_t Pin_10   : 2;            /*!< [21..20] Read SPWR Register                                               */
        __IM  uint32_t Pin_11   : 2;            /*!< [23..22] Read SPWR Register                                               */
        __IM  uint32_t Pin_12   : 2;            /*!< [25..24] Read SPWR Register                                               */
        __IM  uint32_t Pin_13   : 2;            /*!< [27..26] Read SPWR Register                                               */
        __IM  uint32_t Pin_14   : 2;            /*!< [29..28] Read SPWR Register                                               */
        __IM  uint32_t Pin_15   : 2;            /*!< [31..30] Read SPWR Register                                               */
      } PWR0_b;
    } ;
    
    union {
      __OM  uint32_t PWR0_Set;                  /*!< (@ 0x00000058) Set PWR0 bits                                              */
      
      struct {
        __OM  uint32_t Pin_0    : 2;            /*!< [1..0] Read SPWR Register                                                 */
        __OM  uint32_t Pin_1    : 2;            /*!< [3..2] Read SPWR Register                                                 */
        __OM  uint32_t Pin_2    : 2;            /*!< [5..4] Read SPWR Register                                                 */
        __OM  uint32_t Pin_3    : 2;            /*!< [7..6] Read SPWR Register                                                 */
        __OM  uint32_t Pin_4    : 2;            /*!< [9..8] Read SPWR Register                                                 */
        __OM  uint32_t Pin_5    : 2;            /*!< [11..10] Read SPWR Register                                               */
        __OM  uint32_t Pin_6    : 2;            /*!< [13..12] Read SPWR Register                                               */
        __OM  uint32_t Pin_7    : 2;            /*!< [15..14] Read SPWR Register                                               */
        __OM  uint32_t Pin_8    : 2;            /*!< [17..16] Read SPWR Register                                               */
        __OM  uint32_t Pin_9    : 2;            /*!< [19..18] Read SPWR Register                                               */
        __OM  uint32_t Pin_10   : 2;            /*!< [21..20] Read SPWR Register                                               */
        __OM  uint32_t Pin_11   : 2;            /*!< [23..22] Read SPWR Register                                               */
        __OM  uint32_t Pin_12   : 2;            /*!< [25..24] Read SPWR Register                                               */
        __OM  uint32_t Pin_13   : 2;            /*!< [27..26] Read SPWR Register                                               */
        __OM  uint32_t Pin_14   : 2;            /*!< [29..28] Read SPWR Register                                               */
        __OM  uint32_t Pin_15   : 2;            /*!< [31..30] Read SPWR Register                                               */
      } PWR0_Set_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t PWR1;                      /*!< (@ 0x0000005C) Power of Pins 0 - 15                                       */
      
      struct {
        __IM  uint32_t Pin_16   : 2;            /*!< [1..0] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_17   : 2;            /*!< [3..2] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_18   : 2;            /*!< [5..4] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_19   : 2;            /*!< [7..6] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_20   : 2;            /*!< [9..8] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_21   : 2;            /*!< [11..10] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_22   : 2;            /*!< [13..12] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_23   : 2;            /*!< [15..14] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_24   : 2;            /*!< [17..16] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_25   : 2;            /*!< [19..18] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_26   : 2;            /*!< [21..20] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_27   : 2;            /*!< [23..22] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_28   : 2;            /*!< [25..24] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_29   : 2;            /*!< [27..26] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_30   : 2;            /*!< [29..28] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_31   : 2;            /*!< [31..30] Read SPWR1 Register                                              */
      } PWR1_b;
    } ;
    
    union {
      __OM  uint32_t PWR1_Set;                  /*!< (@ 0x0000005C) Set PWR1 bits                                              */
      
      struct {
        __OM  uint32_t Pin_16   : 2;            /*!< [1..0] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_17   : 2;            /*!< [3..2] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_18   : 2;            /*!< [5..4] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_19   : 2;            /*!< [7..6] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_20   : 2;            /*!< [9..8] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_21   : 2;            /*!< [11..10] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_22   : 2;            /*!< [13..12] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_23   : 2;            /*!< [15..14] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_24   : 2;            /*!< [17..16] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_25   : 2;            /*!< [19..18] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_26   : 2;            /*!< [21..20] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_27   : 2;            /*!< [23..22] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_28   : 2;            /*!< [25..24] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_29   : 2;            /*!< [27..26] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_30   : 2;            /*!< [29..28] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_31   : 2;            /*!< [31..30] Read SPWR1 Register                                              */
      } PWR1_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t PWR0_Clear;                  /*!< (@ 0x00000060) Clear PWR0 bits                                            */
    
    struct {
      __OM  uint32_t Pin_0      : 2;            /*!< [1..0] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_1      : 2;            /*!< [3..2] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_2      : 2;            /*!< [5..4] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_3      : 2;            /*!< [7..6] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_4      : 2;            /*!< [9..8] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_5      : 2;            /*!< [11..10] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_6      : 2;            /*!< [13..12] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_7      : 2;            /*!< [15..14] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_8      : 2;            /*!< [17..16] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_9      : 2;            /*!< [19..18] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_10     : 2;            /*!< [21..20] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_11     : 2;            /*!< [23..22] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_12     : 2;            /*!< [25..24] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_13     : 2;            /*!< [27..26] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_14     : 2;            /*!< [29..28] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_15     : 2;            /*!< [31..30] Clear PWR0 bits                                                  */
    } PWR0_Clear_b;
  } ;
  
  union {
    __OM  uint32_t PWR1_Clear;                  /*!< (@ 0x00000064) Clear PWR1 bits                                            */
    
    struct {
      __OM  uint32_t Pin_16     : 2;            /*!< [1..0] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_17     : 2;            /*!< [3..2] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_18     : 2;            /*!< [5..4] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_19     : 2;            /*!< [7..6] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_20     : 2;            /*!< [9..8] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_21     : 2;            /*!< [11..10] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_22     : 2;            /*!< [13..12] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_23     : 2;            /*!< [15..14] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_24     : 2;            /*!< [17..16] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_25     : 2;            /*!< [19..18] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_26     : 2;            /*!< [21..20] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_27     : 2;            /*!< [23..22] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_28     : 2;            /*!< [25..24] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_29     : 2;            /*!< [27..26] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_30     : 2;            /*!< [29..28] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_31     : 2;            /*!< [31..30] Clear PWR1 bits                                                  */
    } PWR1_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t CL;                        /*!< (@ 0x00000068) Pins Current Control enabled                               */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Read register SCL                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Read register SCL                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Read register SCL                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Read register SCL                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Read register SCL                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Read register SCL                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Read register SCL                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Read register SCL                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Read register SCL                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Read register SCL                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Read register SCL                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Read register SCL                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Read register SCL                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Read register SCL                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Read register SCL                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Read register SCL                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Read register SCL                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Read register SCL                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Read register SCL                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Read register SCL                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Read register SCL                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Read register SCL                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Read register SCL                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Read register SCL                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Read register SCL                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Read register SCL                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Read register SCL                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Read register SCL                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Read register SCL                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Read register SCL                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Read register SCL                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Read register SCL                                                */
      } CL_b;
    } ;
    
    union {
      __OM  uint32_t CL_Set;                    /*!< (@ 0x00000068) Set CL bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } CL_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t CL_Clear;                    /*!< (@ 0x0000006C) Clear CL bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } CL_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t IE;                        /*!< (@ 0x00000070) Pin Level IRQ Enable                                       */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Read register SIE                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Read register SIE                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Read register SIE                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Read register SIE                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Read register SIE                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Read register SIE                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Read register SIE                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Read register SIE                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Read register SIE                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Read register SIE                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Read register SIE                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Read register SIE                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Read register SIE                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Read register SIE                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Read register SIE                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Read register SIE                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Read register SIE                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Read register SIE                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Read register SIE                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Read register SIE                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Read register SIE                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Read register SIE                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Read register SIE                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Read register SIE                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Read register SIE                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Read register SIE                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Read register SIE                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Read register SIE                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Read register SIE                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Read register SIE                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Read register SIE                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Read register SIE                                                */
      } IE_b;
    } ;
    
    union {
      __OM  uint32_t IE_Set;                    /*!< (@ 0x00000070) Set IE bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } IE_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t IE_Clear;                    /*!< (@ 0x00000074) Clear IE bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } IE_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t IT;                        /*!< (@ 0x00000078) IRQ Level Select                                           */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Read register SIT                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Read register SIT                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Read register SIT                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Read register SIT                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Read register SIT                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Read register SIT                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Read register SIT                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Read register SIT                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Read register SIT                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Read register SIT                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Read register SIT                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Read register SIT                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Read register SIT                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Read register SIT                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Read register SIT                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Read register SIT                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Read register SIT                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Read register SIT                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Read register SIT                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Read register SIT                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Read register SIT                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Read register SIT                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Read register SIT                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Read register SIT                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Read register SIT                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Read register SIT                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Read register SIT                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Read register SIT                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Read register SIT                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Read register SIT                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Read register SIT                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Read register SIT                                                */
      } IT_b;
    } ;
    
    union {
      __OM  uint32_t IT_Set;                    /*!< (@ 0x00000078) Set IT bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } IT_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t IT_Clear;                    /*!< (@ 0x0000007C) Clear IT bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } IT_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t IR;                        /*!< (@ 0x00000080) Read SIR Register                                          */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Read register SIR                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Read register SIR                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Read register SIR                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Read register SIR                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Read register SIR                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Read register SIR                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Read register SIR                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Read register SIR                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Read register SIR                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Read register SIR                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Read register SIR                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Read register SIR                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Read register SIR                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Read register SIR                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Read register SIR                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Read register SIR                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Read register SIR                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Read register SIR                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Read register SIR                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Read register SIR                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Read register SIR                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Read register SIR                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Read register SIR                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Read register SIR                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Read register SIR                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Read register SIR                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Read register SIR                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Read register SIR                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Read register SIR                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Read register SIR                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Read register SIR                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Read register SIR                                                */
      } IR_b;
    } ;
    
    union {
      __OM  uint32_t IR_Set;                    /*!< (@ 0x00000080) Set IR bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } IR_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t IR_Clear;                    /*!< (@ 0x00000084) Clear IR bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } IR_Clear_b;
  } ;
  
  union {
    __IOM uint32_t HCUR;                        /*!< (@ 0x00000088) Pins' Overcurrent Status                                   */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Register HCUR                                                      */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Register HCUR                                                      */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Register HCUR                                                      */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Register HCUR                                                      */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Register HCUR                                                      */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Register HCUR                                                      */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Register HCUR                                                      */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Register HCUR                                                      */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Register HCUR                                                      */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Register HCUR                                                      */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Register HCUR                                                    */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Register HCUR                                                    */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Register HCUR                                                    */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Register HCUR                                                    */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Register HCUR                                                    */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Register HCUR                                                    */
      __IOM uint32_t Pin_16     : 1;            /*!< [16..16] Register HCUR                                                    */
      __IOM uint32_t Pin_17     : 1;            /*!< [17..17] Register HCUR                                                    */
      __IOM uint32_t Pin_18     : 1;            /*!< [18..18] Register HCUR                                                    */
      __IOM uint32_t Pin_19     : 1;            /*!< [19..19] Register HCUR                                                    */
      __IOM uint32_t Pin_20     : 1;            /*!< [20..20] Register HCUR                                                    */
      __IOM uint32_t Pin_21     : 1;            /*!< [21..21] Register HCUR                                                    */
      __IOM uint32_t Pin_22     : 1;            /*!< [22..22] Register HCUR                                                    */
      __IOM uint32_t Pin_23     : 1;            /*!< [23..23] Register HCUR                                                    */
      __IOM uint32_t Pin_24     : 1;            /*!< [24..24] Register HCUR                                                    */
      __IOM uint32_t Pin_25     : 1;            /*!< [25..25] Register HCUR                                                    */
      __IOM uint32_t Pin_26     : 1;            /*!< [26..26] Register HCUR                                                    */
      __IOM uint32_t Pin_27     : 1;            /*!< [27..27] Register HCUR                                                    */
      __IOM uint32_t Pin_28     : 1;            /*!< [28..28] Register HCUR                                                    */
      __IOM uint32_t Pin_29     : 1;            /*!< [29..29] Register HCUR                                                    */
      __IOM uint32_t Pin_30     : 1;            /*!< [30..30] Register HCUR                                                    */
      __IOM uint32_t Pin_31     : 1;            /*!< [31..31] Register HCUR                                                    */
    } HCUR_b;
  } ;
} MDR_PORTA_Type;                               /*!< Size = 140 (0x8c)                                                         */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define MDR_RST_CLOCK_BASE          0x40000000UL
#define MDR_BKP_BASE                0x40001000UL
#define MDR_PORTA_BASE              0x40080000UL
#define MDR_PORTB_BASE              0x40081000UL
#define MDR_PORTC_BASE              0x40082000UL
#define MDR_PORTD_BASE              0x40083000UL
#define MDR_PORTE_BASE              0x40084000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define MDR_RST_CLOCK               ((MDR_RST_CLOCK_Type*)     MDR_RST_CLOCK_BASE)
#define MDR_BKP                     ((MDR_BKP_Type*)           MDR_BKP_BASE)
#define MDR_PORTA                   ((MDR_PORTA_Type*)         MDR_PORTA_BASE)
#define MDR_PORTB                   ((MDR_PORTA_Type*)         MDR_PORTB_BASE)
#define MDR_PORTC                   ((MDR_PORTA_Type*)         MDR_PORTC_BASE)
#define MDR_PORTD                   ((MDR_PORTA_Type*)         MDR_PORTD_BASE)
#define MDR_PORTE                   ((MDR_PORTA_Type*)         MDR_PORTE_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
#define MDR_RST_CLOCK_KEY_Value_Pos       (0UL)                     /*!< MDR_RST_CLOCK KEY: Value (Bit 0)                      */
#define MDR_RST_CLOCK_KEY_Value_Msk       (0xffffffffUL)            /*!< MDR_RST_CLOCK KEY: Value (Bitfield-Mask: 0xffffffff)  */
/* ========================================================  MAX_CLK  ======================================================== */
#define MDR_RST_CLOCK_MAX_CLK_Select_Pos  (0UL)                     /*!< MDR_RST_CLOCK MAX_CLK: Select (Bit 0)                 */
#define MDR_RST_CLOCK_MAX_CLK_Select_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK MAX_CLK: Select (Bitfield-Mask: 0x0f)   */
/* ========================================================  CPU_CLK  ======================================================== */
#define MDR_RST_CLOCK_CPU_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK CPU_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_CPU_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK CPU_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  PER0_CLK  ======================================================== */
#define MDR_RST_CLOCK_PER0_CLK_RST_CLK_EN_Pos (0UL)                 /*!< MDR_RST_CLOCK PER0_CLK: RST_CLK_EN (Bit 0)            */
#define MDR_RST_CLOCK_PER0_CLK_RST_CLK_EN_Msk (0x1UL)               /*!< MDR_RST_CLOCK PER0_CLK: RST_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_BKP_CLK_EN_Pos (1UL)                 /*!< MDR_RST_CLOCK PER0_CLK: BKP_CLK_EN (Bit 1)            */
#define MDR_RST_CLOCK_PER0_CLK_BKP_CLK_EN_Msk (0x2UL)               /*!< MDR_RST_CLOCK PER0_CLK: BKP_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PWR_CLK_EN_Pos (2UL)                 /*!< MDR_RST_CLOCK PER0_CLK: PWR_CLK_EN (Bit 2)            */
#define MDR_RST_CLOCK_PER0_CLK_PWR_CLK_EN_Msk (0x4UL)               /*!< MDR_RST_CLOCK PER0_CLK: PWR_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_FTCNTR_CLK_EN_Pos (3UL)              /*!< MDR_RST_CLOCK PER0_CLK: FTCNTR_CLK_EN (Bit 3)         */
#define MDR_RST_CLOCK_PER0_CLK_FTCNTR_CLK_EN_Msk (0x8UL)            /*!< MDR_RST_CLOCK PER0_CLK: FTCNTR_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_WDT_CLK_EN_Pos (4UL)                 /*!< MDR_RST_CLOCK PER0_CLK: WDT_CLK_EN (Bit 4)            */
#define MDR_RST_CLOCK_PER0_CLK_WDT_CLK_EN_Msk (0x10UL)              /*!< MDR_RST_CLOCK PER0_CLK: WDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_DMA_CLK_EN_Pos (11UL)                /*!< MDR_RST_CLOCK PER0_CLK: DMA_CLK_EN (Bit 11)           */
#define MDR_RST_CLOCK_PER0_CLK_DMA_CLK_EN_Msk (0x800UL)             /*!< MDR_RST_CLOCK PER0_CLK: DMA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Pos (13UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortA_CLK_EN (Bit 13)         */
#define MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Msk (0x2000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Pos (14UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortB_CLK_EN (Bit 14)         */
#define MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Msk (0x4000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Pos (15UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortC_CLK_EN (Bit 15)         */
#define MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Msk (0x8000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Pos (16UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortD_CLK_EN (Bit 16)         */
#define MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Msk (0x10000UL)         /*!< MDR_RST_CLOCK PER0_CLK: PortD_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_Pos (17UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortE_CLK_EN (Bit 17)         */
#define MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_Msk (0x20000UL)         /*!< MDR_RST_CLOCK PER0_CLK: PortE_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_Pos (21UL)               /*!< MDR_RST_CLOCK PER0_CLK: SPW1_CLK_EN (Bit 21)          */
#define MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_Msk (0x200000UL)         /*!< MDR_RST_CLOCK PER0_CLK: SPW1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_SPW2_CLK_EN_Pos (22UL)               /*!< MDR_RST_CLOCK PER0_CLK: SPW2_CLK_EN (Bit 22)          */
#define MDR_RST_CLOCK_PER0_CLK_SPW2_CLK_EN_Msk (0x400000UL)         /*!< MDR_RST_CLOCK PER0_CLK: SPW2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_Pos (23UL)               /*!< MDR_RST_CLOCK PER0_CLK: TIM1_CLK_EN (Bit 23)          */
#define MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_Msk (0x800000UL)         /*!< MDR_RST_CLOCK PER0_CLK: TIM1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_Pos (24UL)               /*!< MDR_RST_CLOCK PER0_CLK: TIM2_CLK_EN (Bit 24)          */
#define MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_Msk (0x1000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: TIM2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_Pos (25UL)               /*!< MDR_RST_CLOCK PER0_CLK: TIM3_CLK_EN (Bit 25)          */
#define MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_Msk (0x2000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: TIM3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_Pos (26UL)               /*!< MDR_RST_CLOCK PER0_CLK: TIM4_CLK_EN (Bit 26)          */
#define MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_Msk (0x4000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: TIM4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Pos (29UL)               /*!< MDR_RST_CLOCK PER0_CLK: CAN1_CLK_EN (Bit 29)          */
#define MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Msk (0x20000000UL)       /*!< MDR_RST_CLOCK PER0_CLK: CAN1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_Pos (30UL)               /*!< MDR_RST_CLOCK PER0_CLK: CAN2_CLK_EN (Bit 30)          */
#define MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_Msk (0x40000000UL)       /*!< MDR_RST_CLOCK PER0_CLK: CAN2_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  PER1_CLK  ======================================================== */
#define MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_Pos (2UL)                /*!< MDR_RST_CLOCK PER1_CLK: SSP1_CLK_EN (Bit 2)           */
#define MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_Msk (0x4UL)              /*!< MDR_RST_CLOCK PER1_CLK: SSP1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_SSP2_CLK_EN_Pos (3UL)                /*!< MDR_RST_CLOCK PER1_CLK: SSP2_CLK_EN (Bit 3)           */
#define MDR_RST_CLOCK_PER1_CLK_SSP2_CLK_EN_Msk (0x8UL)              /*!< MDR_RST_CLOCK PER1_CLK: SSP2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_SSP3_CLK_EN_Pos (4UL)                /*!< MDR_RST_CLOCK PER1_CLK: SSP3_CLK_EN (Bit 4)           */
#define MDR_RST_CLOCK_PER1_CLK_SSP3_CLK_EN_Msk (0x10UL)             /*!< MDR_RST_CLOCK PER1_CLK: SSP3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_SSP4_CLK_EN_Pos (5UL)                /*!< MDR_RST_CLOCK PER1_CLK: SSP4_CLK_EN (Bit 5)           */
#define MDR_RST_CLOCK_PER1_CLK_SSP4_CLK_EN_Msk (0x20UL)             /*!< MDR_RST_CLOCK PER1_CLK: SSP4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_Pos (6UL)               /*!< MDR_RST_CLOCK PER1_CLK: UART1_CLK_EN (Bit 6)          */
#define MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_Msk (0x40UL)            /*!< MDR_RST_CLOCK PER1_CLK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_Pos (7UL)               /*!< MDR_RST_CLOCK PER1_CLK: UART2_CLK_EN (Bit 7)          */
#define MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_Msk (0x80UL)            /*!< MDR_RST_CLOCK PER1_CLK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_Pos (19UL)               /*!< MDR_RST_CLOCK PER1_CLK: MIL1_CLK_EN (Bit 19)          */
#define MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_Msk (0x80000UL)          /*!< MDR_RST_CLOCK PER1_CLK: MIL1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_Pos (21UL)               /*!< MDR_RST_CLOCK PER1_CLK: MIL2_CLK_EN (Bit 21)          */
#define MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_Msk (0x200000UL)         /*!< MDR_RST_CLOCK PER1_CLK: MIL2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_MIL3_CLK_EN_Pos (25UL)               /*!< MDR_RST_CLOCK PER1_CLK: MIL3_CLK_EN (Bit 25)          */
#define MDR_RST_CLOCK_PER1_CLK_MIL3_CLK_EN_Msk (0x2000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: MIL3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_CRC_CLK_EN_Pos (28UL)                /*!< MDR_RST_CLOCK PER1_CLK: CRC_CLK_EN (Bit 28)           */
#define MDR_RST_CLOCK_PER1_CLK_CRC_CLK_EN_Msk (0x10000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: CRC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_ECC_CLK_EN_Pos (29UL)                /*!< MDR_RST_CLOCK PER1_CLK: ECC_CLK_EN (Bit 29)           */
#define MDR_RST_CLOCK_PER1_CLK_ECC_CLK_EN_Msk (0x20000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: ECC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_SSP5_CLK_EN_Pos (30UL)               /*!< MDR_RST_CLOCK PER1_CLK: SSP5_CLK_EN (Bit 30)          */
#define MDR_RST_CLOCK_PER1_CLK_SSP5_CLK_EN_Msk (0x40000000UL)       /*!< MDR_RST_CLOCK PER1_CLK: SSP5_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_SSP6_CLK_EN_Pos (31UL)               /*!< MDR_RST_CLOCK PER1_CLK: SSP6_CLK_EN (Bit 31)          */
#define MDR_RST_CLOCK_PER1_CLK_SSP6_CLK_EN_Msk (0x80000000UL)       /*!< MDR_RST_CLOCK PER1_CLK: SSP6_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  CPU_CHK0  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG2_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG2 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG2_Msk (0xffffUL)             /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG0_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG0 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG0_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  CPU_CHK1  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG3_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG3 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG3_Msk (0xffffUL)             /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG1_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG1 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG1_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  CPU_CHK2  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  CPU_STAT  ======================================================== */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
/* ========================================================  LSI_CLK  ======================================================== */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  LSI_CHK0  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG2_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG2 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG2_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG0_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG0 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG0_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSI_CHK1  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG3_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG3 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG3_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG1_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG1 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG1_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSI_CHK2  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  LSI_STAT  ======================================================== */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_READY_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSI_STAT: READY (Bit 20)                */
#define MDR_RST_CLOCK_LSI_STAT_READY_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSI_STAT: READY (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_LSI_STAT_Error_Pos  (21UL)                    /*!< MDR_RST_CLOCK LSI_STAT: Error (Bit 21)                */
#define MDR_RST_CLOCK_LSI_STAT_Error_Msk  (0x200000UL)              /*!< MDR_RST_CLOCK LSI_STAT: Error (Bitfield-Mask: 0x01)   */
/* =======================================================  HSE_STAT  ======================================================== */
#define MDR_RST_CLOCK_HSE_STAT_READY_Pos  (20UL)                    /*!< MDR_RST_CLOCK HSE_STAT: READY (Bit 20)                */
#define MDR_RST_CLOCK_HSE_STAT_READY_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK HSE_STAT: READY (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_HSE_STAT_Error_Pos  (21UL)                    /*!< MDR_RST_CLOCK HSE_STAT: Error (Bit 21)                */
#define MDR_RST_CLOCK_HSE_STAT_Error_Msk  (0x200000UL)              /*!< MDR_RST_CLOCK HSE_STAT: Error (Bitfield-Mask: 0x01)   */
/* ========================================================  LSE_CLK  ======================================================== */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  LSE_CHK0  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG3_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG3 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG3_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG1_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG1 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG1_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSE_CHK1  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG3_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG3 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG3_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG1_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG1 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG1_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSE_CHK2  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  LSE_STAT  ======================================================== */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_READY_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSE_STAT: READY (Bit 20)                */
#define MDR_RST_CLOCK_LSE_STAT_READY_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSE_STAT: READY (Bitfield-Mask: 0x01)   */
/* =======================================================  HSE0_CLK  ======================================================== */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK HSE0_CLK: HSE_ON (Bit 27)               */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK HSE0_CLK: HSE_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Pos (28UL)                   /*!< MDR_RST_CLOCK HSE0_CLK: HSE_BYP (Bit 28)              */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK HSE0_CLK: HSE_BYP (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Pos (29UL)                 /*!< MDR_RST_CLOCK HSE0_CLK: FILTER_EN (Bit 29)            */
#define MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Msk (0x20000000UL)         /*!< MDR_RST_CLOCK HSE0_CLK: FILTER_EN (Bitfield-Mask: 0x01) */
/* =======================================================  HSE0_CHK0  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE0_CHK1  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE0_CHK2  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  HSE0_STAT  ======================================================= */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE0_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_HSE0_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  HSE1_CLK  ======================================================== */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK HSE1_CLK: HSE_ON (Bit 27)               */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK HSE1_CLK: HSE_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Pos (28UL)                   /*!< MDR_RST_CLOCK HSE1_CLK: HSE_BYP (Bit 28)              */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK HSE1_CLK: HSE_BYP (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Pos (29UL)                 /*!< MDR_RST_CLOCK HSE1_CLK: FILTER_EN (Bit 29)            */
#define MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Msk (0x20000000UL)         /*!< MDR_RST_CLOCK HSE1_CLK: FILTER_EN (Bitfield-Mask: 0x01) */
/* =======================================================  HSE1_CHK0  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE1_CHK1  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE1_CHK2  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  HSE1_STAT  ======================================================= */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE1_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_HSE1_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL0_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL0_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK PLL0_CLK: PLL_Q (Bitfield-Mask: 0x0f)   */
#define MDR_RST_CLOCK_PLL0_CLK_DV_Pos     (4UL)                     /*!< MDR_RST_CLOCK PLL0_CLK: DV (Bit 4)                    */
#define MDR_RST_CLOCK_PLL0_CLK_DV_Msk     (0x10UL)                  /*!< MDR_RST_CLOCK PLL0_CLK: DV (Bitfield-Mask: 0x01)      */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_N_Pos  (8UL)                     /*!< MDR_RST_CLOCK PLL0_CLK: PLL_N (Bit 8)                 */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_N_Msk  (0x7f00UL)                /*!< MDR_RST_CLOCK PLL0_CLK: PLL_N (Bitfield-Mask: 0x7f)   */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: PLL_ON (Bit 27)               */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK PLL0_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Pos (28UL)                   /*!< MDR_RST_CLOCK PLL0_CLK: PLL_RLD (Bit 28)              */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK PLL0_CLK: PLL_RLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_SELECT_Pos (29UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: SELECT (Bit 29)               */
#define MDR_RST_CLOCK_PLL0_CLK_SELECT_Msk (0xe0000000UL)            /*!< MDR_RST_CLOCK PLL0_CLK: SELECT (Bitfield-Mask: 0x07)  */
/* =======================================================  PLL0_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL0_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL0_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL0_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL0_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL0_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL1_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL1_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK PLL1_CLK: PLL_Q (Bitfield-Mask: 0x0f)   */
#define MDR_RST_CLOCK_PLL1_CLK_DV_Pos     (4UL)                     /*!< MDR_RST_CLOCK PLL1_CLK: DV (Bit 4)                    */
#define MDR_RST_CLOCK_PLL1_CLK_DV_Msk     (0x10UL)                  /*!< MDR_RST_CLOCK PLL1_CLK: DV (Bitfield-Mask: 0x01)      */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_N_Pos  (8UL)                     /*!< MDR_RST_CLOCK PLL1_CLK: PLL_N (Bit 8)                 */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_N_Msk  (0x7f00UL)                /*!< MDR_RST_CLOCK PLL1_CLK: PLL_N (Bitfield-Mask: 0x7f)   */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: PLL_ON (Bit 27)               */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK PLL1_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Pos (28UL)                   /*!< MDR_RST_CLOCK PLL1_CLK: PLL_RLD (Bit 28)              */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK PLL1_CLK: PLL_RLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_SELECT_Pos (29UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: SELECT (Bit 29)               */
#define MDR_RST_CLOCK_PLL1_CLK_SELECT_Msk (0xe0000000UL)            /*!< MDR_RST_CLOCK PLL1_CLK: SELECT (Bitfield-Mask: 0x07)  */
/* =======================================================  PLL1_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL1_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL1_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL1_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL1_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL1_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL2_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL2_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK PLL2_CLK: PLL_Q (Bitfield-Mask: 0x0f)   */
#define MDR_RST_CLOCK_PLL2_CLK_DV_Pos     (4UL)                     /*!< MDR_RST_CLOCK PLL2_CLK: DV (Bit 4)                    */
#define MDR_RST_CLOCK_PLL2_CLK_DV_Msk     (0x10UL)                  /*!< MDR_RST_CLOCK PLL2_CLK: DV (Bitfield-Mask: 0x01)      */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_N_Pos  (8UL)                     /*!< MDR_RST_CLOCK PLL2_CLK: PLL_N (Bit 8)                 */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_N_Msk  (0x7f00UL)                /*!< MDR_RST_CLOCK PLL2_CLK: PLL_N (Bitfield-Mask: 0x7f)   */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: PLL_ON (Bit 27)               */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK PLL2_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Pos (28UL)                   /*!< MDR_RST_CLOCK PLL2_CLK: PLL_RLD (Bit 28)              */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK PLL2_CLK: PLL_RLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_SELECT_Pos (29UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: SELECT (Bit 29)               */
#define MDR_RST_CLOCK_PLL2_CLK_SELECT_Msk (0xe0000000UL)            /*!< MDR_RST_CLOCK PLL2_CLK: SELECT (Bitfield-Mask: 0x07)  */
/* =======================================================  PLL2_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL2_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG3_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG3 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG3_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG1_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG1 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG1_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL2_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL2_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL2_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL2_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  CAN1_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAN1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAN1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAN1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAN1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAN1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAN1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  CAN2_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAN2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAN2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAN2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAN2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAN2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAN2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAN2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAN2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM1_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM2_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM3_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM3_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM3_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM3_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM3_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM3_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM3_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM4_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM4_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM4_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM4_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM4_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM4_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM4_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  MIL1_CLK  ======================================================== */
#define MDR_RST_CLOCK_MIL1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK MIL1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_MIL1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK MIL1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_MIL1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK MIL1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_MIL1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK MIL1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  MIL2_CLK  ======================================================== */
#define MDR_RST_CLOCK_MIL2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK MIL2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_MIL2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK MIL2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_MIL2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK MIL2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_MIL2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK MIL2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  MIL3_CLK  ======================================================== */
#define MDR_RST_CLOCK_MIL3_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK MIL3_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_MIL3_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK MIL3_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_MIL3_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK MIL3_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_MIL3_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK MIL3_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  MIL4_CLK  ======================================================== */
#define MDR_RST_CLOCK_MIL4_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK MIL4_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_MIL4_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK MIL4_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_MIL4_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK MIL4_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_MIL4_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK MIL4_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  SPW1_CLK  ======================================================== */
#define MDR_RST_CLOCK_SPW1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SPW1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SPW1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SPW1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SPW1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SPW1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SPW1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SPW1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  SPW2_CLK  ======================================================== */
#define MDR_RST_CLOCK_SPW2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SPW2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SPW2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SPW2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SPW2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SPW2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SPW2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SPW2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  UART1_CLK  ======================================================= */
#define MDR_RST_CLOCK_UART1_CLK_DIV_Pos   (0UL)                     /*!< MDR_RST_CLOCK UART1_CLK: DIV (Bit 0)                  */
#define MDR_RST_CLOCK_UART1_CLK_DIV_Msk   (0xffffUL)                /*!< MDR_RST_CLOCK UART1_CLK: DIV (Bitfield-Mask: 0xffff)  */
#define MDR_RST_CLOCK_UART1_CLK_CLK_EN_Pos (16UL)                   /*!< MDR_RST_CLOCK UART1_CLK: CLK_EN (Bit 16)              */
#define MDR_RST_CLOCK_UART1_CLK_CLK_EN_Msk (0x10000UL)              /*!< MDR_RST_CLOCK UART1_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART1_CLK_SELECT_Pos (28UL)                   /*!< MDR_RST_CLOCK UART1_CLK: SELECT (Bit 28)              */
#define MDR_RST_CLOCK_UART1_CLK_SELECT_Msk (0xf0000000UL)           /*!< MDR_RST_CLOCK UART1_CLK: SELECT (Bitfield-Mask: 0x0f) */
/* =======================================================  UART2_CLK  ======================================================= */
#define MDR_RST_CLOCK_UART2_CLK_DIV_Pos   (0UL)                     /*!< MDR_RST_CLOCK UART2_CLK: DIV (Bit 0)                  */
#define MDR_RST_CLOCK_UART2_CLK_DIV_Msk   (0xffffUL)                /*!< MDR_RST_CLOCK UART2_CLK: DIV (Bitfield-Mask: 0xffff)  */
#define MDR_RST_CLOCK_UART2_CLK_CLK_EN_Pos (16UL)                   /*!< MDR_RST_CLOCK UART2_CLK: CLK_EN (Bit 16)              */
#define MDR_RST_CLOCK_UART2_CLK_CLK_EN_Msk (0x10000UL)              /*!< MDR_RST_CLOCK UART2_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART2_CLK_SELECT_Pos (28UL)                   /*!< MDR_RST_CLOCK UART2_CLK: SELECT (Bit 28)              */
#define MDR_RST_CLOCK_UART2_CLK_SELECT_Msk (0xf0000000UL)           /*!< MDR_RST_CLOCK UART2_CLK: SELECT (Bitfield-Mask: 0x0f) */
/* =======================================================  SSP1_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP1_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP1_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP1_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP1_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  SSP2_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP2_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP2_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP2_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP2_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  SSP3_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP3_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP3_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP3_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP3_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP3_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP3_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP3_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP3_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP3_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP3_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP3_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP3_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  SSP4_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP4_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP4_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP4_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP4_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP4_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP4_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP4_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP4_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP4_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP4_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP4_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP4_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  SSP5_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP5_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP5_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP5_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP5_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP5_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP5_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP5_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP5_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP5_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP5_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP5_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP5_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  SSP6_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP6_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP6_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP6_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP6_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP6_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP6_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP6_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP6_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP6_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP6_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP6_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP6_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* ========================================================  RTC_CLK  ======================================================== */
#define MDR_RST_CLOCK_RTC_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK RTC_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_RTC_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK RTC_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_RTC_CLK_CLK_EN_Pos  (16UL)                    /*!< MDR_RST_CLOCK RTC_CLK: CLK_EN (Bit 16)                */
#define MDR_RST_CLOCK_RTC_CLK_CLK_EN_Msk  (0x10000UL)               /*!< MDR_RST_CLOCK RTC_CLK: CLK_EN (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_RTC_CLK_SELECT_Pos  (28UL)                    /*!< MDR_RST_CLOCK RTC_CLK: SELECT (Bit 28)                */
#define MDR_RST_CLOCK_RTC_CLK_SELECT_Msk  (0xf0000000UL)            /*!< MDR_RST_CLOCK RTC_CLK: SELECT (Bitfield-Mask: 0x0f)   */


/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  REG  ========================================================== */
/* ==========================================================  KEY  ========================================================== */
/* ======================================================  REG_60_TMR0  ====================================================== */
#define MDR_BKP_REG_60_TMR0_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR0: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR0_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR0: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR0_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR0: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR0_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR0: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR0_S_UccReset_Pos (8UL)                    /*!< MDR_BKP REG_60_TMR0: S_UccReset (Bit 8)               */
#define MDR_BKP_REG_60_TMR0_S_UccReset_Msk (0x100UL)                /*!< MDR_BKP REG_60_TMR0: S_UccReset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_S_RSTn0_Pos   (9UL)                     /*!< MDR_BKP REG_60_TMR0: S_RSTn0 (Bit 9)                  */
#define MDR_BKP_REG_60_TMR0_S_RSTn0_Msk   (0x200UL)                 /*!< MDR_BKP REG_60_TMR0: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_S_FT_Reset_Pos (10UL)                   /*!< MDR_BKP REG_60_TMR0: S_FT_Reset (Bit 10)              */
#define MDR_BKP_REG_60_TMR0_S_FT_Reset_Msk (0x400UL)                /*!< MDR_BKP REG_60_TMR0: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_S_WDT_Reset_Pos (11UL)                  /*!< MDR_BKP REG_60_TMR0: S_WDT_Reset (Bit 11)             */
#define MDR_BKP_REG_60_TMR0_S_WDT_Reset_Msk (0x800UL)               /*!< MDR_BKP REG_60_TMR0: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_S_RSTn1_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR0: S_RSTn1 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR0_S_RSTn1_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR0: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_S_OVRSTn_Pos  (13UL)                    /*!< MDR_BKP REG_60_TMR0: S_OVRSTn (Bit 13)                */
#define MDR_BKP_REG_60_TMR0_S_OVRSTn_Msk  (0x2000UL)                /*!< MDR_BKP REG_60_TMR0: S_OVRSTn (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_60_TMR0_S_SYSRSTn_Pos (14UL)                    /*!< MDR_BKP REG_60_TMR0: S_SYSRSTn (Bit 14)               */
#define MDR_BKP_REG_60_TMR0_S_SYSRSTn_Msk (0x4000UL)                /*!< MDR_BKP REG_60_TMR0: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR0_JTAG_Enable_Pos (15UL)                  /*!< MDR_BKP REG_60_TMR0: JTAG_Enable (Bit 15)             */
#define MDR_BKP_REG_60_TMR0_JTAG_Enable_Msk (0x8000UL)              /*!< MDR_BKP REG_60_TMR0: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_Pos (16UL)              /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc0 (Bit 16)         */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_Msk (0x10000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc0 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_Pos (17UL)              /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc1 (Bit 17)         */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_Msk (0x20000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc1 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_Pos (18UL)              /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc2 (Bit 18)         */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_Msk (0x40000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc2 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_Pos (19UL)              /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc3 (Bit 19)         */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_Msk (0x80000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_Pos (20UL)               /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_BUcc (Bit 20)          */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_Msk (0x100000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_BUcc (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_Pos (21UL)                /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_PLL (Bit 21)           */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_Msk (0x200000UL)          /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_PLL (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR0_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR0: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR0: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR0: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR0_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR0: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_PORSTn_En_Pos (28UL)                    /*!< MDR_BKP REG_60_TMR0: PORSTn_En (Bit 28)               */
#define MDR_BKP_REG_60_TMR0_PORSTn_En_Msk (0x10000000UL)            /*!< MDR_BKP REG_60_TMR0: PORSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR0_OVRSTn_En_Pos (29UL)                    /*!< MDR_BKP REG_60_TMR0: OVRSTn_En (Bit 29)               */
#define MDR_BKP_REG_60_TMR0_OVRSTn_En_Msk (0x20000000UL)            /*!< MDR_BKP REG_60_TMR0: OVRSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR0_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR0: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR0_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR0: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR0: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR0  ====================================================== */
#define MDR_BKP_REG_61_TMR0_LDO0_SRILow_Pos (0UL)                   /*!< MDR_BKP REG_61_TMR0: LDO0_SRILow (Bit 0)              */
#define MDR_BKP_REG_61_TMR0_LDO0_SRILow_Msk (0x7UL)                 /*!< MDR_BKP REG_61_TMR0: LDO0_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_LDO0_Trim_Pos (3UL)                     /*!< MDR_BKP REG_61_TMR0: LDO0_Trim (Bit 3)                */
#define MDR_BKP_REG_61_TMR0_LDO0_Trim_Msk (0x38UL)                  /*!< MDR_BKP REG_61_TMR0: LDO0_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR0_LDO0_En_Pos   (6UL)                     /*!< MDR_BKP REG_61_TMR0: LDO0_En (Bit 6)                  */
#define MDR_BKP_REG_61_TMR0_LDO0_En_Msk   (0x40UL)                  /*!< MDR_BKP REG_61_TMR0: LDO0_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_LDO0_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_61_TMR0: LDO0_RDY (Bit 7)                 */
#define MDR_BKP_REG_61_TMR0_LDO0_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_61_TMR0: LDO0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_LDO1_SRILow_Pos (8UL)                   /*!< MDR_BKP REG_61_TMR0: LDO1_SRILow (Bit 8)              */
#define MDR_BKP_REG_61_TMR0_LDO1_SRILow_Msk (0x700UL)               /*!< MDR_BKP REG_61_TMR0: LDO1_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_LDO1_Trim_Pos (11UL)                    /*!< MDR_BKP REG_61_TMR0: LDO1_Trim (Bit 11)               */
#define MDR_BKP_REG_61_TMR0_LDO1_Trim_Msk (0x3800UL)                /*!< MDR_BKP REG_61_TMR0: LDO1_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR0_LDO1_En_Pos   (14UL)                    /*!< MDR_BKP REG_61_TMR0: LDO1_En (Bit 14)                 */
#define MDR_BKP_REG_61_TMR0_LDO1_En_Msk   (0x4000UL)                /*!< MDR_BKP REG_61_TMR0: LDO1_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_LDO1_RDY_Pos  (15UL)                    /*!< MDR_BKP REG_61_TMR0: LDO1_RDY (Bit 15)                */
#define MDR_BKP_REG_61_TMR0_LDO1_RDY_Msk  (0x8000UL)                /*!< MDR_BKP REG_61_TMR0: LDO1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_LDO2_SRILow_Pos (16UL)                  /*!< MDR_BKP REG_61_TMR0: LDO2_SRILow (Bit 16)             */
#define MDR_BKP_REG_61_TMR0_LDO2_SRILow_Msk (0x70000UL)             /*!< MDR_BKP REG_61_TMR0: LDO2_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_LDO2_Trim_Pos (19UL)                    /*!< MDR_BKP REG_61_TMR0: LDO2_Trim (Bit 19)               */
#define MDR_BKP_REG_61_TMR0_LDO2_Trim_Msk (0x380000UL)              /*!< MDR_BKP REG_61_TMR0: LDO2_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR0_LDO2_En_Pos   (22UL)                    /*!< MDR_BKP REG_61_TMR0: LDO2_En (Bit 22)                 */
#define MDR_BKP_REG_61_TMR0_LDO2_En_Msk   (0x400000UL)              /*!< MDR_BKP REG_61_TMR0: LDO2_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_LDO2_RDY_Pos  (23UL)                    /*!< MDR_BKP REG_61_TMR0: LDO2_RDY (Bit 23)                */
#define MDR_BKP_REG_61_TMR0_LDO2_RDY_Msk  (0x800000UL)              /*!< MDR_BKP REG_61_TMR0: LDO2_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_LDO3_SRILow_Pos (24UL)                  /*!< MDR_BKP REG_61_TMR0: LDO3_SRILow (Bit 24)             */
#define MDR_BKP_REG_61_TMR0_LDO3_SRILow_Msk (0x7000000UL)           /*!< MDR_BKP REG_61_TMR0: LDO3_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_LDO3_Trim_Pos (27UL)                    /*!< MDR_BKP REG_61_TMR0: LDO3_Trim (Bit 27)               */
#define MDR_BKP_REG_61_TMR0_LDO3_Trim_Msk (0x38000000UL)            /*!< MDR_BKP REG_61_TMR0: LDO3_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR0_LDO3_En_Pos   (30UL)                    /*!< MDR_BKP REG_61_TMR0: LDO3_En (Bit 30)                 */
#define MDR_BKP_REG_61_TMR0_LDO3_En_Msk   (0x40000000UL)            /*!< MDR_BKP REG_61_TMR0: LDO3_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_LDO3_RDY_Pos  (31UL)                    /*!< MDR_BKP REG_61_TMR0: LDO3_RDY (Bit 31)                */
#define MDR_BKP_REG_61_TMR0_LDO3_RDY_Msk  (0x80000000UL)            /*!< MDR_BKP REG_61_TMR0: LDO3_RDY (Bitfield-Mask: 0x01)   */
/* ======================================================  REG_62_TMR0  ====================================================== */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_Pos (0UL)               /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_SRILow (Bit 0)          */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_Msk (0x7UL)             /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_Pos (3UL)                 /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_Trim (Bit 3)            */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_Msk (0x38UL)              /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_En_Pos (6UL)                   /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_En (Bit 6)              */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_En_Msk (0x40UL)                /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_Pos (7UL)                  /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_RDY (Bit 7)             */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_Msk (0x80UL)               /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_Pos (8UL)                /*!< MDR_BKP REG_62_TMR0: LDO_PLL_SRILow (Bit 8)           */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_Msk (0x700UL)            /*!< MDR_BKP REG_62_TMR0: LDO_PLL_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_Pos (11UL)                 /*!< MDR_BKP REG_62_TMR0: LDO_PLL_Trim (Bit 11)            */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_Msk (0x3800UL)             /*!< MDR_BKP REG_62_TMR0: LDO_PLL_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_En_Pos (14UL)                   /*!< MDR_BKP REG_62_TMR0: LDO_PLL_En (Bit 14)              */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_En_Msk (0x4000UL)               /*!< MDR_BKP REG_62_TMR0: LDO_PLL_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_Pos (15UL)                  /*!< MDR_BKP REG_62_TMR0: LDO_PLL_RDY (Bit 15)             */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_Msk (0x8000UL)              /*!< MDR_BKP REG_62_TMR0: LDO_PLL_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_TrimR_Pos     (16UL)                    /*!< MDR_BKP REG_62_TMR0: TrimR (Bit 16)                   */
#define MDR_BKP_REG_62_TMR0_TrimR_Msk     (0x1ff0000UL)             /*!< MDR_BKP REG_62_TMR0: TrimR (Bitfield-Mask: 0x1ff)     */
#define MDR_BKP_REG_62_TMR0_Trim_Ref_Pos  (28UL)                    /*!< MDR_BKP REG_62_TMR0: Trim_Ref (Bit 28)                */
#define MDR_BKP_REG_62_TMR0_Trim_Ref_Msk  (0x70000000UL)            /*!< MDR_BKP REG_62_TMR0: Trim_Ref (Bitfield-Mask: 0x07)   */
/* ======================================================  REG_63_TMR0  ====================================================== */
#define MDR_BKP_REG_63_TMR0_LSE_On_Pos    (0UL)                     /*!< MDR_BKP REG_63_TMR0: LSE_On (Bit 0)                   */
#define MDR_BKP_REG_63_TMR0_LSE_On_Msk    (0x1UL)                   /*!< MDR_BKP REG_63_TMR0: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_LSE_BYP_Pos   (1UL)                     /*!< MDR_BKP REG_63_TMR0: LSE_BYP (Bit 1)                  */
#define MDR_BKP_REG_63_TMR0_LSE_BYP_Msk   (0x2UL)                   /*!< MDR_BKP REG_63_TMR0: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_RTC_Sel_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR0: RTC_Sel (Bit 2)                  */
#define MDR_BKP_REG_63_TMR0_RTC_Sel_Msk   (0xcUL)                   /*!< MDR_BKP REG_63_TMR0: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_63_TMR0_RTC_En_Pos    (4UL)                     /*!< MDR_BKP REG_63_TMR0: RTC_En (Bit 4)                   */
#define MDR_BKP_REG_63_TMR0_RTC_En_Msk    (0x10UL)                  /*!< MDR_BKP REG_63_TMR0: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_RTC_Cal_Pos   (5UL)                     /*!< MDR_BKP REG_63_TMR0: RTC_Cal (Bit 5)                  */
#define MDR_BKP_REG_63_TMR0_RTC_Cal_Msk   (0x1fe0UL)                /*!< MDR_BKP REG_63_TMR0: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_63_TMR0_LSE_RDY_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR0: LSE_RDY (Bit 13)                 */
#define MDR_BKP_REG_63_TMR0_LSE_RDY_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR0: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_LSE_FilterEn_Pos (14UL)                 /*!< MDR_BKP REG_63_TMR0: LSE_FilterEn (Bit 14)            */
#define MDR_BKP_REG_63_TMR0_LSE_FilterEn_Msk (0x4000UL)             /*!< MDR_BKP REG_63_TMR0: LSE_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR0_LSI_On_Pos    (15UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_On (Bit 15)                  */
#define MDR_BKP_REG_63_TMR0_LSI_On_Msk    (0x8000UL)                /*!< MDR_BKP REG_63_TMR0: LSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_LSI_Trim_Pos  (16UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_Trim (Bit 16)                */
#define MDR_BKP_REG_63_TMR0_LSI_Trim_Msk  (0x1f0000UL)              /*!< MDR_BKP REG_63_TMR0: LSI_Trim (Bitfield-Mask: 0x1f)   */
#define MDR_BKP_REG_63_TMR0_LSI_RDY_Pos   (21UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_RDY (Bit 21)                 */
#define MDR_BKP_REG_63_TMR0_LSI_RDY_Msk   (0x200000UL)              /*!< MDR_BKP REG_63_TMR0: LSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_HSI_On_Pos    (22UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_On (Bit 22)                  */
#define MDR_BKP_REG_63_TMR0_HSI_On_Msk    (0x400000UL)              /*!< MDR_BKP REG_63_TMR0: HSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_HSI_RDY_Pos   (23UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_RDY (Bit 23)                 */
#define MDR_BKP_REG_63_TMR0_HSI_RDY_Msk   (0x800000UL)              /*!< MDR_BKP REG_63_TMR0: HSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_HSI_Trim_Pos  (24UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_Trim (Bit 24)                */
#define MDR_BKP_REG_63_TMR0_HSI_Trim_Msk  (0x3f000000UL)            /*!< MDR_BKP REG_63_TMR0: HSI_Trim (Bitfield-Mask: 0x3f)   */
#define MDR_BKP_REG_63_TMR0_STANDBY_Pos   (30UL)                    /*!< MDR_BKP REG_63_TMR0: STANDBY (Bit 30)                 */
#define MDR_BKP_REG_63_TMR0_STANDBY_Msk   (0x40000000UL)            /*!< MDR_BKP REG_63_TMR0: STANDBY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_RTC_RST_Pos   (31UL)                    /*!< MDR_BKP REG_63_TMR0: RTC_RST (Bit 31)                 */
#define MDR_BKP_REG_63_TMR0_RTC_RST_Msk   (0x80000000UL)            /*!< MDR_BKP REG_63_TMR0: RTC_RST (Bitfield-Mask: 0x01)    */
/* ======================================================  REG_60_TMR1  ====================================================== */
#define MDR_BKP_REG_60_TMR1_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR1: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR1_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR1: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR1_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR1: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR1_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR1: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR1_S_UccReset_Pos (8UL)                    /*!< MDR_BKP REG_60_TMR1: S_UccReset (Bit 8)               */
#define MDR_BKP_REG_60_TMR1_S_UccReset_Msk (0x100UL)                /*!< MDR_BKP REG_60_TMR1: S_UccReset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_S_RSTn0_Pos   (9UL)                     /*!< MDR_BKP REG_60_TMR1: S_RSTn0 (Bit 9)                  */
#define MDR_BKP_REG_60_TMR1_S_RSTn0_Msk   (0x200UL)                 /*!< MDR_BKP REG_60_TMR1: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_S_FT_Reset_Pos (10UL)                   /*!< MDR_BKP REG_60_TMR1: S_FT_Reset (Bit 10)              */
#define MDR_BKP_REG_60_TMR1_S_FT_Reset_Msk (0x400UL)                /*!< MDR_BKP REG_60_TMR1: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_S_WDT_Reset_Pos (11UL)                  /*!< MDR_BKP REG_60_TMR1: S_WDT_Reset (Bit 11)             */
#define MDR_BKP_REG_60_TMR1_S_WDT_Reset_Msk (0x800UL)               /*!< MDR_BKP REG_60_TMR1: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_S_RSTn1_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR1: S_RSTn1 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR1_S_RSTn1_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR1: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_S_OVRSTn_Pos  (13UL)                    /*!< MDR_BKP REG_60_TMR1: S_OVRSTn (Bit 13)                */
#define MDR_BKP_REG_60_TMR1_S_OVRSTn_Msk  (0x2000UL)                /*!< MDR_BKP REG_60_TMR1: S_OVRSTn (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_60_TMR1_S_SYSRSTn_Pos (14UL)                    /*!< MDR_BKP REG_60_TMR1: S_SYSRSTn (Bit 14)               */
#define MDR_BKP_REG_60_TMR1_S_SYSRSTn_Msk (0x4000UL)                /*!< MDR_BKP REG_60_TMR1: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR1_JTAG_Enable_Pos (15UL)                  /*!< MDR_BKP REG_60_TMR1: JTAG_Enable (Bit 15)             */
#define MDR_BKP_REG_60_TMR1_JTAG_Enable_Msk (0x8000UL)              /*!< MDR_BKP REG_60_TMR1: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_Pos (16UL)              /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc0 (Bit 16)         */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_Msk (0x10000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc0 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_Pos (17UL)              /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc1 (Bit 17)         */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_Msk (0x20000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc1 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_Pos (18UL)              /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc2 (Bit 18)         */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_Msk (0x40000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc2 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_Pos (19UL)              /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc3 (Bit 19)         */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_Msk (0x80000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_Pos (20UL)               /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_BUcc (Bit 20)          */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_Msk (0x100000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_BUcc (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_Pos (21UL)                /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_PLL (Bit 21)           */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_Msk (0x200000UL)          /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_PLL (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR1_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR1: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR1: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR1: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR1_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR1: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_PORSTn_En_Pos (28UL)                    /*!< MDR_BKP REG_60_TMR1: PORSTn_En (Bit 28)               */
#define MDR_BKP_REG_60_TMR1_PORSTn_En_Msk (0x10000000UL)            /*!< MDR_BKP REG_60_TMR1: PORSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR1_OVRSTn_En_Pos (29UL)                    /*!< MDR_BKP REG_60_TMR1: OVRSTn_En (Bit 29)               */
#define MDR_BKP_REG_60_TMR1_OVRSTn_En_Msk (0x20000000UL)            /*!< MDR_BKP REG_60_TMR1: OVRSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR1_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR1: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR1_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR1: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR1: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR1  ====================================================== */
#define MDR_BKP_REG_61_TMR1_LDO0_SRILow_Pos (0UL)                   /*!< MDR_BKP REG_61_TMR1: LDO0_SRILow (Bit 0)              */
#define MDR_BKP_REG_61_TMR1_LDO0_SRILow_Msk (0x7UL)                 /*!< MDR_BKP REG_61_TMR1: LDO0_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_LDO0_Trim_Pos (3UL)                     /*!< MDR_BKP REG_61_TMR1: LDO0_Trim (Bit 3)                */
#define MDR_BKP_REG_61_TMR1_LDO0_Trim_Msk (0x38UL)                  /*!< MDR_BKP REG_61_TMR1: LDO0_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR1_LDO0_En_Pos   (6UL)                     /*!< MDR_BKP REG_61_TMR1: LDO0_En (Bit 6)                  */
#define MDR_BKP_REG_61_TMR1_LDO0_En_Msk   (0x40UL)                  /*!< MDR_BKP REG_61_TMR1: LDO0_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_LDO0_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_61_TMR1: LDO0_RDY (Bit 7)                 */
#define MDR_BKP_REG_61_TMR1_LDO0_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_61_TMR1: LDO0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_LDO1_SRILow_Pos (8UL)                   /*!< MDR_BKP REG_61_TMR1: LDO1_SRILow (Bit 8)              */
#define MDR_BKP_REG_61_TMR1_LDO1_SRILow_Msk (0x700UL)               /*!< MDR_BKP REG_61_TMR1: LDO1_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_LDO1_Trim_Pos (11UL)                    /*!< MDR_BKP REG_61_TMR1: LDO1_Trim (Bit 11)               */
#define MDR_BKP_REG_61_TMR1_LDO1_Trim_Msk (0x3800UL)                /*!< MDR_BKP REG_61_TMR1: LDO1_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR1_LDO1_En_Pos   (14UL)                    /*!< MDR_BKP REG_61_TMR1: LDO1_En (Bit 14)                 */
#define MDR_BKP_REG_61_TMR1_LDO1_En_Msk   (0x4000UL)                /*!< MDR_BKP REG_61_TMR1: LDO1_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_LDO1_RDY_Pos  (15UL)                    /*!< MDR_BKP REG_61_TMR1: LDO1_RDY (Bit 15)                */
#define MDR_BKP_REG_61_TMR1_LDO1_RDY_Msk  (0x8000UL)                /*!< MDR_BKP REG_61_TMR1: LDO1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_LDO2_SRILow_Pos (16UL)                  /*!< MDR_BKP REG_61_TMR1: LDO2_SRILow (Bit 16)             */
#define MDR_BKP_REG_61_TMR1_LDO2_SRILow_Msk (0x70000UL)             /*!< MDR_BKP REG_61_TMR1: LDO2_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_LDO2_Trim_Pos (19UL)                    /*!< MDR_BKP REG_61_TMR1: LDO2_Trim (Bit 19)               */
#define MDR_BKP_REG_61_TMR1_LDO2_Trim_Msk (0x380000UL)              /*!< MDR_BKP REG_61_TMR1: LDO2_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR1_LDO2_En_Pos   (22UL)                    /*!< MDR_BKP REG_61_TMR1: LDO2_En (Bit 22)                 */
#define MDR_BKP_REG_61_TMR1_LDO2_En_Msk   (0x400000UL)              /*!< MDR_BKP REG_61_TMR1: LDO2_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_LDO2_RDY_Pos  (23UL)                    /*!< MDR_BKP REG_61_TMR1: LDO2_RDY (Bit 23)                */
#define MDR_BKP_REG_61_TMR1_LDO2_RDY_Msk  (0x800000UL)              /*!< MDR_BKP REG_61_TMR1: LDO2_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_LDO3_SRILow_Pos (24UL)                  /*!< MDR_BKP REG_61_TMR1: LDO3_SRILow (Bit 24)             */
#define MDR_BKP_REG_61_TMR1_LDO3_SRILow_Msk (0x7000000UL)           /*!< MDR_BKP REG_61_TMR1: LDO3_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_LDO3_Trim_Pos (27UL)                    /*!< MDR_BKP REG_61_TMR1: LDO3_Trim (Bit 27)               */
#define MDR_BKP_REG_61_TMR1_LDO3_Trim_Msk (0x38000000UL)            /*!< MDR_BKP REG_61_TMR1: LDO3_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR1_LDO3_En_Pos   (30UL)                    /*!< MDR_BKP REG_61_TMR1: LDO3_En (Bit 30)                 */
#define MDR_BKP_REG_61_TMR1_LDO3_En_Msk   (0x40000000UL)            /*!< MDR_BKP REG_61_TMR1: LDO3_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_LDO3_RDY_Pos  (31UL)                    /*!< MDR_BKP REG_61_TMR1: LDO3_RDY (Bit 31)                */
#define MDR_BKP_REG_61_TMR1_LDO3_RDY_Msk  (0x80000000UL)            /*!< MDR_BKP REG_61_TMR1: LDO3_RDY (Bitfield-Mask: 0x01)   */
/* ======================================================  REG_62_TMR1  ====================================================== */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_Pos (0UL)               /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_SRILow (Bit 0)          */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_Msk (0x7UL)             /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_Pos (3UL)                 /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_Trim (Bit 3)            */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_Msk (0x38UL)              /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_En_Pos (6UL)                   /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_En (Bit 6)              */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_En_Msk (0x40UL)                /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_Pos (7UL)                  /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_RDY (Bit 7)             */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_Msk (0x80UL)               /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_Pos (8UL)                /*!< MDR_BKP REG_62_TMR1: LDO_PLL_SRILow (Bit 8)           */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_Msk (0x700UL)            /*!< MDR_BKP REG_62_TMR1: LDO_PLL_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_Pos (11UL)                 /*!< MDR_BKP REG_62_TMR1: LDO_PLL_Trim (Bit 11)            */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_Msk (0x3800UL)             /*!< MDR_BKP REG_62_TMR1: LDO_PLL_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_En_Pos (14UL)                   /*!< MDR_BKP REG_62_TMR1: LDO_PLL_En (Bit 14)              */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_En_Msk (0x4000UL)               /*!< MDR_BKP REG_62_TMR1: LDO_PLL_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_Pos (15UL)                  /*!< MDR_BKP REG_62_TMR1: LDO_PLL_RDY (Bit 15)             */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_Msk (0x8000UL)              /*!< MDR_BKP REG_62_TMR1: LDO_PLL_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_TrimR_Pos     (16UL)                    /*!< MDR_BKP REG_62_TMR1: TrimR (Bit 16)                   */
#define MDR_BKP_REG_62_TMR1_TrimR_Msk     (0x1ff0000UL)             /*!< MDR_BKP REG_62_TMR1: TrimR (Bitfield-Mask: 0x1ff)     */
#define MDR_BKP_REG_62_TMR1_Trim_Ref_Pos  (28UL)                    /*!< MDR_BKP REG_62_TMR1: Trim_Ref (Bit 28)                */
#define MDR_BKP_REG_62_TMR1_Trim_Ref_Msk  (0x70000000UL)            /*!< MDR_BKP REG_62_TMR1: Trim_Ref (Bitfield-Mask: 0x07)   */
/* ======================================================  REG_63_TMR1  ====================================================== */
#define MDR_BKP_REG_63_TMR1_LSE_On_Pos    (0UL)                     /*!< MDR_BKP REG_63_TMR1: LSE_On (Bit 0)                   */
#define MDR_BKP_REG_63_TMR1_LSE_On_Msk    (0x1UL)                   /*!< MDR_BKP REG_63_TMR1: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_LSE_BYP_Pos   (1UL)                     /*!< MDR_BKP REG_63_TMR1: LSE_BYP (Bit 1)                  */
#define MDR_BKP_REG_63_TMR1_LSE_BYP_Msk   (0x2UL)                   /*!< MDR_BKP REG_63_TMR1: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_RTC_Sel_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR1: RTC_Sel (Bit 2)                  */
#define MDR_BKP_REG_63_TMR1_RTC_Sel_Msk   (0xcUL)                   /*!< MDR_BKP REG_63_TMR1: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_63_TMR1_RTC_En_Pos    (4UL)                     /*!< MDR_BKP REG_63_TMR1: RTC_En (Bit 4)                   */
#define MDR_BKP_REG_63_TMR1_RTC_En_Msk    (0x10UL)                  /*!< MDR_BKP REG_63_TMR1: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_RTC_Cal_Pos   (5UL)                     /*!< MDR_BKP REG_63_TMR1: RTC_Cal (Bit 5)                  */
#define MDR_BKP_REG_63_TMR1_RTC_Cal_Msk   (0x1fe0UL)                /*!< MDR_BKP REG_63_TMR1: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_63_TMR1_LSE_RDY_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR1: LSE_RDY (Bit 13)                 */
#define MDR_BKP_REG_63_TMR1_LSE_RDY_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR1: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_LSE_FilterEn_Pos (14UL)                 /*!< MDR_BKP REG_63_TMR1: LSE_FilterEn (Bit 14)            */
#define MDR_BKP_REG_63_TMR1_LSE_FilterEn_Msk (0x4000UL)             /*!< MDR_BKP REG_63_TMR1: LSE_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR1_LSI_On_Pos    (15UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_On (Bit 15)                  */
#define MDR_BKP_REG_63_TMR1_LSI_On_Msk    (0x8000UL)                /*!< MDR_BKP REG_63_TMR1: LSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_LSI_Trim_Pos  (16UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_Trim (Bit 16)                */
#define MDR_BKP_REG_63_TMR1_LSI_Trim_Msk  (0x1f0000UL)              /*!< MDR_BKP REG_63_TMR1: LSI_Trim (Bitfield-Mask: 0x1f)   */
#define MDR_BKP_REG_63_TMR1_LSI_RDY_Pos   (21UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_RDY (Bit 21)                 */
#define MDR_BKP_REG_63_TMR1_LSI_RDY_Msk   (0x200000UL)              /*!< MDR_BKP REG_63_TMR1: LSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_HSI_On_Pos    (22UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_On (Bit 22)                  */
#define MDR_BKP_REG_63_TMR1_HSI_On_Msk    (0x400000UL)              /*!< MDR_BKP REG_63_TMR1: HSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_HSI_RDY_Pos   (23UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_RDY (Bit 23)                 */
#define MDR_BKP_REG_63_TMR1_HSI_RDY_Msk   (0x800000UL)              /*!< MDR_BKP REG_63_TMR1: HSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_HSI_Trim_Pos  (24UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_Trim (Bit 24)                */
#define MDR_BKP_REG_63_TMR1_HSI_Trim_Msk  (0x3f000000UL)            /*!< MDR_BKP REG_63_TMR1: HSI_Trim (Bitfield-Mask: 0x3f)   */
#define MDR_BKP_REG_63_TMR1_STANDBY_Pos   (30UL)                    /*!< MDR_BKP REG_63_TMR1: STANDBY (Bit 30)                 */
#define MDR_BKP_REG_63_TMR1_STANDBY_Msk   (0x40000000UL)            /*!< MDR_BKP REG_63_TMR1: STANDBY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_RTC_RST_Pos   (31UL)                    /*!< MDR_BKP REG_63_TMR1: RTC_RST (Bit 31)                 */
#define MDR_BKP_REG_63_TMR1_RTC_RST_Msk   (0x80000000UL)            /*!< MDR_BKP REG_63_TMR1: RTC_RST (Bitfield-Mask: 0x01)    */
/* ======================================================  REG_60_TMR2  ====================================================== */
#define MDR_BKP_REG_60_TMR2_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR2: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR2_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR2: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR2_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR2: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR2_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR2: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR2_S_UccReset_Pos (8UL)                    /*!< MDR_BKP REG_60_TMR2: S_UccReset (Bit 8)               */
#define MDR_BKP_REG_60_TMR2_S_UccReset_Msk (0x100UL)                /*!< MDR_BKP REG_60_TMR2: S_UccReset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_S_RSTn0_Pos   (9UL)                     /*!< MDR_BKP REG_60_TMR2: S_RSTn0 (Bit 9)                  */
#define MDR_BKP_REG_60_TMR2_S_RSTn0_Msk   (0x200UL)                 /*!< MDR_BKP REG_60_TMR2: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_S_FT_Reset_Pos (10UL)                   /*!< MDR_BKP REG_60_TMR2: S_FT_Reset (Bit 10)              */
#define MDR_BKP_REG_60_TMR2_S_FT_Reset_Msk (0x400UL)                /*!< MDR_BKP REG_60_TMR2: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_S_WDT_Reset_Pos (11UL)                  /*!< MDR_BKP REG_60_TMR2: S_WDT_Reset (Bit 11)             */
#define MDR_BKP_REG_60_TMR2_S_WDT_Reset_Msk (0x800UL)               /*!< MDR_BKP REG_60_TMR2: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_S_RSTn1_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR2: S_RSTn1 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR2_S_RSTn1_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR2: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_S_OVRSTn_Pos  (13UL)                    /*!< MDR_BKP REG_60_TMR2: S_OVRSTn (Bit 13)                */
#define MDR_BKP_REG_60_TMR2_S_OVRSTn_Msk  (0x2000UL)                /*!< MDR_BKP REG_60_TMR2: S_OVRSTn (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_60_TMR2_S_SYSRSTn_Pos (14UL)                    /*!< MDR_BKP REG_60_TMR2: S_SYSRSTn (Bit 14)               */
#define MDR_BKP_REG_60_TMR2_S_SYSRSTn_Msk (0x4000UL)                /*!< MDR_BKP REG_60_TMR2: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR2_JTAG_Enable_Pos (15UL)                  /*!< MDR_BKP REG_60_TMR2: JTAG_Enable (Bit 15)             */
#define MDR_BKP_REG_60_TMR2_JTAG_Enable_Msk (0x8000UL)              /*!< MDR_BKP REG_60_TMR2: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_Pos (16UL)              /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc0 (Bit 16)         */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_Msk (0x10000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc0 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_Pos (17UL)              /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc1 (Bit 17)         */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_Msk (0x20000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc1 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_Pos (18UL)              /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc2 (Bit 18)         */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_Msk (0x40000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc2 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_Pos (19UL)              /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc3 (Bit 19)         */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_Msk (0x80000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_Pos (20UL)               /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_BUcc (Bit 20)          */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_Msk (0x100000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_BUcc (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_Pos (21UL)                /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_PLL (Bit 21)           */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_Msk (0x200000UL)          /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_PLL (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR2_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR2: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR2: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR2: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR2_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR2: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_PORSTn_En_Pos (28UL)                    /*!< MDR_BKP REG_60_TMR2: PORSTn_En (Bit 28)               */
#define MDR_BKP_REG_60_TMR2_PORSTn_En_Msk (0x10000000UL)            /*!< MDR_BKP REG_60_TMR2: PORSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR2_OVRSTn_En_Pos (29UL)                    /*!< MDR_BKP REG_60_TMR2: OVRSTn_En (Bit 29)               */
#define MDR_BKP_REG_60_TMR2_OVRSTn_En_Msk (0x20000000UL)            /*!< MDR_BKP REG_60_TMR2: OVRSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR2_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR2: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR2_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR2: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR2: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR2  ====================================================== */
#define MDR_BKP_REG_61_TMR2_LDO0_SRILow_Pos (0UL)                   /*!< MDR_BKP REG_61_TMR2: LDO0_SRILow (Bit 0)              */
#define MDR_BKP_REG_61_TMR2_LDO0_SRILow_Msk (0x7UL)                 /*!< MDR_BKP REG_61_TMR2: LDO0_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_LDO0_Trim_Pos (3UL)                     /*!< MDR_BKP REG_61_TMR2: LDO0_Trim (Bit 3)                */
#define MDR_BKP_REG_61_TMR2_LDO0_Trim_Msk (0x38UL)                  /*!< MDR_BKP REG_61_TMR2: LDO0_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR2_LDO0_En_Pos   (6UL)                     /*!< MDR_BKP REG_61_TMR2: LDO0_En (Bit 6)                  */
#define MDR_BKP_REG_61_TMR2_LDO0_En_Msk   (0x40UL)                  /*!< MDR_BKP REG_61_TMR2: LDO0_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_LDO0_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_61_TMR2: LDO0_RDY (Bit 7)                 */
#define MDR_BKP_REG_61_TMR2_LDO0_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_61_TMR2: LDO0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_LDO1_SRILow_Pos (8UL)                   /*!< MDR_BKP REG_61_TMR2: LDO1_SRILow (Bit 8)              */
#define MDR_BKP_REG_61_TMR2_LDO1_SRILow_Msk (0x700UL)               /*!< MDR_BKP REG_61_TMR2: LDO1_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_LDO1_Trim_Pos (11UL)                    /*!< MDR_BKP REG_61_TMR2: LDO1_Trim (Bit 11)               */
#define MDR_BKP_REG_61_TMR2_LDO1_Trim_Msk (0x3800UL)                /*!< MDR_BKP REG_61_TMR2: LDO1_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR2_LDO1_En_Pos   (14UL)                    /*!< MDR_BKP REG_61_TMR2: LDO1_En (Bit 14)                 */
#define MDR_BKP_REG_61_TMR2_LDO1_En_Msk   (0x4000UL)                /*!< MDR_BKP REG_61_TMR2: LDO1_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_LDO1_RDY_Pos  (15UL)                    /*!< MDR_BKP REG_61_TMR2: LDO1_RDY (Bit 15)                */
#define MDR_BKP_REG_61_TMR2_LDO1_RDY_Msk  (0x8000UL)                /*!< MDR_BKP REG_61_TMR2: LDO1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_LDO2_SRILow_Pos (16UL)                  /*!< MDR_BKP REG_61_TMR2: LDO2_SRILow (Bit 16)             */
#define MDR_BKP_REG_61_TMR2_LDO2_SRILow_Msk (0x70000UL)             /*!< MDR_BKP REG_61_TMR2: LDO2_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_LDO2_Trim_Pos (19UL)                    /*!< MDR_BKP REG_61_TMR2: LDO2_Trim (Bit 19)               */
#define MDR_BKP_REG_61_TMR2_LDO2_Trim_Msk (0x380000UL)              /*!< MDR_BKP REG_61_TMR2: LDO2_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR2_LDO2_En_Pos   (22UL)                    /*!< MDR_BKP REG_61_TMR2: LDO2_En (Bit 22)                 */
#define MDR_BKP_REG_61_TMR2_LDO2_En_Msk   (0x400000UL)              /*!< MDR_BKP REG_61_TMR2: LDO2_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_LDO2_RDY_Pos  (23UL)                    /*!< MDR_BKP REG_61_TMR2: LDO2_RDY (Bit 23)                */
#define MDR_BKP_REG_61_TMR2_LDO2_RDY_Msk  (0x800000UL)              /*!< MDR_BKP REG_61_TMR2: LDO2_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_LDO3_SRILow_Pos (24UL)                  /*!< MDR_BKP REG_61_TMR2: LDO3_SRILow (Bit 24)             */
#define MDR_BKP_REG_61_TMR2_LDO3_SRILow_Msk (0x7000000UL)           /*!< MDR_BKP REG_61_TMR2: LDO3_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_LDO3_Trim_Pos (27UL)                    /*!< MDR_BKP REG_61_TMR2: LDO3_Trim (Bit 27)               */
#define MDR_BKP_REG_61_TMR2_LDO3_Trim_Msk (0x38000000UL)            /*!< MDR_BKP REG_61_TMR2: LDO3_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR2_LDO3_En_Pos   (30UL)                    /*!< MDR_BKP REG_61_TMR2: LDO3_En (Bit 30)                 */
#define MDR_BKP_REG_61_TMR2_LDO3_En_Msk   (0x40000000UL)            /*!< MDR_BKP REG_61_TMR2: LDO3_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_LDO3_RDY_Pos  (31UL)                    /*!< MDR_BKP REG_61_TMR2: LDO3_RDY (Bit 31)                */
#define MDR_BKP_REG_61_TMR2_LDO3_RDY_Msk  (0x80000000UL)            /*!< MDR_BKP REG_61_TMR2: LDO3_RDY (Bitfield-Mask: 0x01)   */
/* ======================================================  REG_62_TMR2  ====================================================== */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_Pos (0UL)               /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_SRILow (Bit 0)          */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_Msk (0x7UL)             /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_Pos (3UL)                 /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_Trim (Bit 3)            */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_Msk (0x38UL)              /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_En_Pos (6UL)                   /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_En (Bit 6)              */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_En_Msk (0x40UL)                /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_Pos (7UL)                  /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_RDY (Bit 7)             */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_Msk (0x80UL)               /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_Pos (8UL)                /*!< MDR_BKP REG_62_TMR2: LDO_PLL_SRILow (Bit 8)           */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_Msk (0x700UL)            /*!< MDR_BKP REG_62_TMR2: LDO_PLL_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_Pos (11UL)                 /*!< MDR_BKP REG_62_TMR2: LDO_PLL_Trim (Bit 11)            */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_Msk (0x3800UL)             /*!< MDR_BKP REG_62_TMR2: LDO_PLL_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_En_Pos (14UL)                   /*!< MDR_BKP REG_62_TMR2: LDO_PLL_En (Bit 14)              */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_En_Msk (0x4000UL)               /*!< MDR_BKP REG_62_TMR2: LDO_PLL_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_Pos (15UL)                  /*!< MDR_BKP REG_62_TMR2: LDO_PLL_RDY (Bit 15)             */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_Msk (0x8000UL)              /*!< MDR_BKP REG_62_TMR2: LDO_PLL_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_TrimR_Pos     (16UL)                    /*!< MDR_BKP REG_62_TMR2: TrimR (Bit 16)                   */
#define MDR_BKP_REG_62_TMR2_TrimR_Msk     (0x1ff0000UL)             /*!< MDR_BKP REG_62_TMR2: TrimR (Bitfield-Mask: 0x1ff)     */
#define MDR_BKP_REG_62_TMR2_Trim_Ref_Pos  (28UL)                    /*!< MDR_BKP REG_62_TMR2: Trim_Ref (Bit 28)                */
#define MDR_BKP_REG_62_TMR2_Trim_Ref_Msk  (0x70000000UL)            /*!< MDR_BKP REG_62_TMR2: Trim_Ref (Bitfield-Mask: 0x07)   */
/* ======================================================  REG_63_TMR2  ====================================================== */
#define MDR_BKP_REG_63_TMR2_LSE_On_Pos    (0UL)                     /*!< MDR_BKP REG_63_TMR2: LSE_On (Bit 0)                   */
#define MDR_BKP_REG_63_TMR2_LSE_On_Msk    (0x1UL)                   /*!< MDR_BKP REG_63_TMR2: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_LSE_BYP_Pos   (1UL)                     /*!< MDR_BKP REG_63_TMR2: LSE_BYP (Bit 1)                  */
#define MDR_BKP_REG_63_TMR2_LSE_BYP_Msk   (0x2UL)                   /*!< MDR_BKP REG_63_TMR2: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_RTC_Sel_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR2: RTC_Sel (Bit 2)                  */
#define MDR_BKP_REG_63_TMR2_RTC_Sel_Msk   (0xcUL)                   /*!< MDR_BKP REG_63_TMR2: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_63_TMR2_RTC_En_Pos    (4UL)                     /*!< MDR_BKP REG_63_TMR2: RTC_En (Bit 4)                   */
#define MDR_BKP_REG_63_TMR2_RTC_En_Msk    (0x10UL)                  /*!< MDR_BKP REG_63_TMR2: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_RTC_Cal_Pos   (5UL)                     /*!< MDR_BKP REG_63_TMR2: RTC_Cal (Bit 5)                  */
#define MDR_BKP_REG_63_TMR2_RTC_Cal_Msk   (0x1fe0UL)                /*!< MDR_BKP REG_63_TMR2: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_63_TMR2_LSE_RDY_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR2: LSE_RDY (Bit 13)                 */
#define MDR_BKP_REG_63_TMR2_LSE_RDY_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR2: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_LSE_FilterEn_Pos (14UL)                 /*!< MDR_BKP REG_63_TMR2: LSE_FilterEn (Bit 14)            */
#define MDR_BKP_REG_63_TMR2_LSE_FilterEn_Msk (0x4000UL)             /*!< MDR_BKP REG_63_TMR2: LSE_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR2_LSI_On_Pos    (15UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_On (Bit 15)                  */
#define MDR_BKP_REG_63_TMR2_LSI_On_Msk    (0x8000UL)                /*!< MDR_BKP REG_63_TMR2: LSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_LSI_Trim_Pos  (16UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_Trim (Bit 16)                */
#define MDR_BKP_REG_63_TMR2_LSI_Trim_Msk  (0x1f0000UL)              /*!< MDR_BKP REG_63_TMR2: LSI_Trim (Bitfield-Mask: 0x1f)   */
#define MDR_BKP_REG_63_TMR2_LSI_RDY_Pos   (21UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_RDY (Bit 21)                 */
#define MDR_BKP_REG_63_TMR2_LSI_RDY_Msk   (0x200000UL)              /*!< MDR_BKP REG_63_TMR2: LSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_HSI_On_Pos    (22UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_On (Bit 22)                  */
#define MDR_BKP_REG_63_TMR2_HSI_On_Msk    (0x400000UL)              /*!< MDR_BKP REG_63_TMR2: HSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_HSI_RDY_Pos   (23UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_RDY (Bit 23)                 */
#define MDR_BKP_REG_63_TMR2_HSI_RDY_Msk   (0x800000UL)              /*!< MDR_BKP REG_63_TMR2: HSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_HSI_Trim_Pos  (24UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_Trim (Bit 24)                */
#define MDR_BKP_REG_63_TMR2_HSI_Trim_Msk  (0x3f000000UL)            /*!< MDR_BKP REG_63_TMR2: HSI_Trim (Bitfield-Mask: 0x3f)   */
#define MDR_BKP_REG_63_TMR2_STANDBY_Pos   (30UL)                    /*!< MDR_BKP REG_63_TMR2: STANDBY (Bit 30)                 */
#define MDR_BKP_REG_63_TMR2_STANDBY_Msk   (0x40000000UL)            /*!< MDR_BKP REG_63_TMR2: STANDBY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_RTC_RST_Pos   (31UL)                    /*!< MDR_BKP REG_63_TMR2: RTC_RST (Bit 31)                 */
#define MDR_BKP_REG_63_TMR2_RTC_RST_Msk   (0x80000000UL)            /*!< MDR_BKP REG_63_TMR2: RTC_RST (Bitfield-Mask: 0x01)    */
/* =====================================================  RTC_CNT_TMR0  ====================================================== */
/* =====================================================  RTC_DIV_TMR0  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR0_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR0: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR0_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR0: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR0  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR0_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR0: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR0_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR0: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR0  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR0_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR0: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR0_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR0: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR0  ====================================================== */
#define MDR_BKP_RTC_CS_TMR0_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR0: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR0_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR0: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR0_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR0: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR0_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR0: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR0_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR0: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR0_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR0: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR0_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR0: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR0_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR0: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR0: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR0_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR0: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR0: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR0_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR0: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR0: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR0_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR0: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR0: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR0: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR0: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR0: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR0_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_IE (Bitfield-Mask: 0x01)     */
/* =====================================================  RTC_CNT_TMR1  ====================================================== */
/* =====================================================  RTC_DIV_TMR1  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR1_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR1: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR1_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR1: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR1  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR1_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR1: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR1_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR1: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR1  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR1_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR1: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR1_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR1: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR1  ====================================================== */
#define MDR_BKP_RTC_CS_TMR1_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR1: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR1_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR1: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR1_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR1: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR1_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR1: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR1_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR1: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR1_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR1: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR1_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR1: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR1_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR1: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR1: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR1_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR1: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR1: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR1_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR1: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR1: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR1_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR1: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR1: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR1: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR1: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR1: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR1_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_IE (Bitfield-Mask: 0x01)     */
/* =====================================================  RTC_CNT_TMR2  ====================================================== */
/* =====================================================  RTC_DIV_TMR2  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR2_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR2: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR2_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR2: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR2  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR2_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR2: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR2_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR2: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR2  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR2_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR2: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR2_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR2: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR2  ====================================================== */
#define MDR_BKP_RTC_CS_TMR2_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR2: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR2_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR2: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR2_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR2: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR2_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR2: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR2_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR2: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR2_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR2: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR2_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR2: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR2_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR2: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR2: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR2_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR2: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR2: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR2_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR2: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR2: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR2_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR2: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR2: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR2: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR2: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR2: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR2_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_IE (Bitfield-Mask: 0x01)     */


/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* =========================================================  RXTX  ========================================================== */
#define MDR_PORTA_RXTX_Pin__Pos           (0UL)                     /*!< MDR_PORTA RXTX: Pin_ (Bit 0)                          */
#define MDR_PORTA_RXTX_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA RXTX: Pin_ (Bitfield-Mask: 0x01)            */
/* =======================================================  RXTX_Set  ======================================================== */
#define MDR_PORTA_RXTX_Set_Pin__Pos       (0UL)                     /*!< MDR_PORTA RXTX_Set: Pin_ (Bit 0)                      */
#define MDR_PORTA_RXTX_Set_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA RXTX_Set: Pin_ (Bitfield-Mask: 0x01)        */
/* ======================================================  RXTX_Clear  ======================================================= */
#define MDR_PORTA_RXTX_Clear_Pin__Pos     (0UL)                     /*!< MDR_PORTA RXTX_Clear: Pin_ (Bit 0)                    */
#define MDR_PORTA_RXTX_Clear_Pin__Msk     (0x1UL)                   /*!< MDR_PORTA RXTX_Clear: Pin_ (Bitfield-Mask: 0x01)      */
/* ==========================================================  OE  =========================================================== */
#define MDR_PORTA_OE_Pin__Pos             (0UL)                     /*!< MDR_PORTA OE: Pin_ (Bit 0)                            */
#define MDR_PORTA_OE_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA OE: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  OE_Set  ========================================================= */
#define MDR_PORTA_OE_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA OE_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_OE_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA OE_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  OE_Clear  ======================================================== */
#define MDR_PORTA_OE_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA OE_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_OE_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA OE_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* =========================================================  FUNC0  ========================================================= */
#define MDR_PORTA_FUNC0_Func_Pin__Pos     (0UL)                     /*!< MDR_PORTA FUNC0: Func_Pin_ (Bit 0)                    */
#define MDR_PORTA_FUNC0_Func_Pin__Msk     (0xfUL)                   /*!< MDR_PORTA FUNC0: Func_Pin_ (Bitfield-Mask: 0x0f)      */
/* =========================================================  FUNC1  ========================================================= */
#define MDR_PORTA_FUNC1_Func_Pin__Pos     (0UL)                     /*!< MDR_PORTA FUNC1: Func_Pin_ (Bit 0)                    */
#define MDR_PORTA_FUNC1_Func_Pin__Msk     (0xfUL)                   /*!< MDR_PORTA FUNC1: Func_Pin_ (Bitfield-Mask: 0x0f)      */
/* =========================================================  FUNC2  ========================================================= */
#define MDR_PORTA_FUNC2_Func_Pin__Pos     (0UL)                     /*!< MDR_PORTA FUNC2: Func_Pin_ (Bit 0)                    */
#define MDR_PORTA_FUNC2_Func_Pin__Msk     (0xfUL)                   /*!< MDR_PORTA FUNC2: Func_Pin_ (Bitfield-Mask: 0x0f)      */
/* =========================================================  FUNC3  ========================================================= */
#define MDR_PORTA_FUNC3_Func_Pin__Pos     (0UL)                     /*!< MDR_PORTA FUNC3: Func_Pin_ (Bit 0)                    */
#define MDR_PORTA_FUNC3_Func_Pin__Msk     (0xfUL)                   /*!< MDR_PORTA FUNC3: Func_Pin_ (Bitfield-Mask: 0x0f)      */
/* =======================================================  FUNC0_Set  ======================================================= */
#define MDR_PORTA_FUNC0_Set_Func_Pin__Pos (0UL)                     /*!< MDR_PORTA FUNC0_Set: Func_Pin_ (Bit 0)                */
#define MDR_PORTA_FUNC0_Set_Func_Pin__Msk (0xfUL)                   /*!< MDR_PORTA FUNC0_Set: Func_Pin_ (Bitfield-Mask: 0x0f)  */
/* =======================================================  FUNC1_Set  ======================================================= */
#define MDR_PORTA_FUNC1_Set_Func_Pin__Pos (0UL)                     /*!< MDR_PORTA FUNC1_Set: Func_Pin_ (Bit 0)                */
#define MDR_PORTA_FUNC1_Set_Func_Pin__Msk (0xfUL)                   /*!< MDR_PORTA FUNC1_Set: Func_Pin_ (Bitfield-Mask: 0x0f)  */
/* =======================================================  FUNC2_Set  ======================================================= */
#define MDR_PORTA_FUNC2_Set_Func_Pin__Pos (0UL)                     /*!< MDR_PORTA FUNC2_Set: Func_Pin_ (Bit 0)                */
#define MDR_PORTA_FUNC2_Set_Func_Pin__Msk (0xfUL)                   /*!< MDR_PORTA FUNC2_Set: Func_Pin_ (Bitfield-Mask: 0x0f)  */
/* =======================================================  FUNC3_Set  ======================================================= */
#define MDR_PORTA_FUNC3_Set_Func_Pin__Pos (0UL)                     /*!< MDR_PORTA FUNC3_Set: Func_Pin_ (Bit 0)                */
#define MDR_PORTA_FUNC3_Set_Func_Pin__Msk (0xfUL)                   /*!< MDR_PORTA FUNC3_Set: Func_Pin_ (Bitfield-Mask: 0x0f)  */
/* ======================================================  FUNC0_Clear  ====================================================== */
#define MDR_PORTA_FUNC0_Clear_Func_Pin__Pos (0UL)                   /*!< MDR_PORTA FUNC0_Clear: Func_Pin_ (Bit 0)              */
#define MDR_PORTA_FUNC0_Clear_Func_Pin__Msk (0xfUL)                 /*!< MDR_PORTA FUNC0_Clear: Func_Pin_ (Bitfield-Mask: 0x0f) */
/* ======================================================  FUNC1_Clear  ====================================================== */
#define MDR_PORTA_FUNC1_Clear_Func_Pin__Pos (0UL)                   /*!< MDR_PORTA FUNC1_Clear: Func_Pin_ (Bit 0)              */
#define MDR_PORTA_FUNC1_Clear_Func_Pin__Msk (0xfUL)                 /*!< MDR_PORTA FUNC1_Clear: Func_Pin_ (Bitfield-Mask: 0x0f) */
/* ======================================================  FUNC2_Clear  ====================================================== */
#define MDR_PORTA_FUNC2_Clear_Func_Pin__Pos (0UL)                   /*!< MDR_PORTA FUNC2_Clear: Func_Pin_ (Bit 0)              */
#define MDR_PORTA_FUNC2_Clear_Func_Pin__Msk (0xfUL)                 /*!< MDR_PORTA FUNC2_Clear: Func_Pin_ (Bitfield-Mask: 0x0f) */
/* ======================================================  FUNC3_Clear  ====================================================== */
#define MDR_PORTA_FUNC3_Clear_Func_Pin__Pos (0UL)                   /*!< MDR_PORTA FUNC3_Clear: Func_Pin_ (Bit 0)              */
#define MDR_PORTA_FUNC3_Clear_Func_Pin__Msk (0xfUL)                 /*!< MDR_PORTA FUNC3_Clear: Func_Pin_ (Bitfield-Mask: 0x0f) */
/* ========================================================  ANALOG  ========================================================= */
#define MDR_PORTA_ANALOG_Pin__Pos         (0UL)                     /*!< MDR_PORTA ANALOG: Pin_ (Bit 0)                        */
#define MDR_PORTA_ANALOG_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA ANALOG: Pin_ (Bitfield-Mask: 0x01)          */
/* ======================================================  ANALOG_Set  ======================================================= */
#define MDR_PORTA_ANALOG_Set_Pin__Pos     (0UL)                     /*!< MDR_PORTA ANALOG_Set: Pin_ (Bit 0)                    */
#define MDR_PORTA_ANALOG_Set_Pin__Msk     (0x1UL)                   /*!< MDR_PORTA ANALOG_Set: Pin_ (Bitfield-Mask: 0x01)      */
/* =====================================================  ANALOG_Clear  ====================================================== */
#define MDR_PORTA_ANALOG_Clear_Pin__Pos   (0UL)                     /*!< MDR_PORTA ANALOG_Clear: Pin_ (Bit 0)                  */
#define MDR_PORTA_ANALOG_Clear_Pin__Msk   (0x1UL)                   /*!< MDR_PORTA ANALOG_Clear: Pin_ (Bitfield-Mask: 0x01)    */
/* ========================================================  PULLUP  ========================================================= */
#define MDR_PORTA_PULLUP_Pin__Pos         (0UL)                     /*!< MDR_PORTA PULLUP: Pin_ (Bit 0)                        */
#define MDR_PORTA_PULLUP_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA PULLUP: Pin_ (Bitfield-Mask: 0x01)          */
/* ======================================================  PULLUP_Set  ======================================================= */
#define MDR_PORTA_PULLUP_Set_Pin__Pos     (0UL)                     /*!< MDR_PORTA PULLUP_Set: Pin_ (Bit 0)                    */
#define MDR_PORTA_PULLUP_Set_Pin__Msk     (0x1UL)                   /*!< MDR_PORTA PULLUP_Set: Pin_ (Bitfield-Mask: 0x01)      */
/* =====================================================  PULLUP_Clear  ====================================================== */
#define MDR_PORTA_PULLUP_Clear_Pin__Pos   (0UL)                     /*!< MDR_PORTA PULLUP_Clear: Pin_ (Bit 0)                  */
#define MDR_PORTA_PULLUP_Clear_Pin__Msk   (0x1UL)                   /*!< MDR_PORTA PULLUP_Clear: Pin_ (Bitfield-Mask: 0x01)    */
/* =======================================================  PULLDOWN  ======================================================== */
#define MDR_PORTA_PULLDOWN_Pin__Pos       (0UL)                     /*!< MDR_PORTA PULLDOWN: Pin_ (Bit 0)                      */
#define MDR_PORTA_PULLDOWN_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA PULLDOWN: Pin_ (Bitfield-Mask: 0x01)        */
/* =====================================================  PULLDOWN_Set  ====================================================== */
#define MDR_PORTA_PULLDOWN_Set_Pin__Pos   (0UL)                     /*!< MDR_PORTA PULLDOWN_Set: Pin_ (Bit 0)                  */
#define MDR_PORTA_PULLDOWN_Set_Pin__Msk   (0x1UL)                   /*!< MDR_PORTA PULLDOWN_Set: Pin_ (Bitfield-Mask: 0x01)    */
/* ====================================================  PULLDOWN_Clear  ===================================================== */
#define MDR_PORTA_PULLDOWN_Clear_Pin__Pos (0UL)                     /*!< MDR_PORTA PULLDOWN_Clear: Pin_ (Bit 0)                */
#define MDR_PORTA_PULLDOWN_Clear_Pin__Msk (0x1UL)                   /*!< MDR_PORTA PULLDOWN_Clear: Pin_ (Bitfield-Mask: 0x01)  */
/* ==========================================================  PD  =========================================================== */
#define MDR_PORTA_PD_Pin__Pos             (0UL)                     /*!< MDR_PORTA PD: Pin_ (Bit 0)                            */
#define MDR_PORTA_PD_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA PD: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  PD_Set  ========================================================= */
#define MDR_PORTA_PD_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA PD_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_PD_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA PD_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  PD_Clear  ======================================================== */
#define MDR_PORTA_PD_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA PD_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_PD_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA PD_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* =========================================================  PWR0  ========================================================== */
#define MDR_PORTA_PWR0_Pin__Pos           (0UL)                     /*!< MDR_PORTA PWR0: Pin_ (Bit 0)                          */
#define MDR_PORTA_PWR0_Pin__Msk           (0x3UL)                   /*!< MDR_PORTA PWR0: Pin_ (Bitfield-Mask: 0x03)            */
/* =========================================================  PWR1  ========================================================== */
#define MDR_PORTA_PWR1_Pin__Pos           (0UL)                     /*!< MDR_PORTA PWR1: Pin_ (Bit 0)                          */
#define MDR_PORTA_PWR1_Pin__Msk           (0x3UL)                   /*!< MDR_PORTA PWR1: Pin_ (Bitfield-Mask: 0x03)            */
/* =======================================================  PWR0_Set  ======================================================== */
#define MDR_PORTA_PWR0_Set_Pin__Pos       (0UL)                     /*!< MDR_PORTA PWR0_Set: Pin_ (Bit 0)                      */
#define MDR_PORTA_PWR0_Set_Pin__Msk       (0x3UL)                   /*!< MDR_PORTA PWR0_Set: Pin_ (Bitfield-Mask: 0x03)        */
/* =======================================================  PWR1_Set  ======================================================== */
#define MDR_PORTA_PWR1_Set_Pin__Pos       (0UL)                     /*!< MDR_PORTA PWR1_Set: Pin_ (Bit 0)                      */
#define MDR_PORTA_PWR1_Set_Pin__Msk       (0x3UL)                   /*!< MDR_PORTA PWR1_Set: Pin_ (Bitfield-Mask: 0x03)        */
/* ======================================================  PWR0_Clear  ======================================================= */
#define MDR_PORTA_PWR0_Clear_Pin__Pos     (0UL)                     /*!< MDR_PORTA PWR0_Clear: Pin_ (Bit 0)                    */
#define MDR_PORTA_PWR0_Clear_Pin__Msk     (0x3UL)                   /*!< MDR_PORTA PWR0_Clear: Pin_ (Bitfield-Mask: 0x03)      */
/* ======================================================  PWR1_Clear  ======================================================= */
#define MDR_PORTA_PWR1_Clear_Pin__Pos     (0UL)                     /*!< MDR_PORTA PWR1_Clear: Pin_ (Bit 0)                    */
#define MDR_PORTA_PWR1_Clear_Pin__Msk     (0x3UL)                   /*!< MDR_PORTA PWR1_Clear: Pin_ (Bitfield-Mask: 0x03)      */
/* ==========================================================  CL  =========================================================== */
#define MDR_PORTA_CL_Pin__Pos             (0UL)                     /*!< MDR_PORTA CL: Pin_ (Bit 0)                            */
#define MDR_PORTA_CL_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA CL: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  CL_Set  ========================================================= */
#define MDR_PORTA_CL_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA CL_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_CL_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA CL_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  CL_Clear  ======================================================== */
#define MDR_PORTA_CL_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA CL_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_CL_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA CL_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* ==========================================================  IE  =========================================================== */
#define MDR_PORTA_IE_Pin__Pos             (0UL)                     /*!< MDR_PORTA IE: Pin_ (Bit 0)                            */
#define MDR_PORTA_IE_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA IE: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  IE_Set  ========================================================= */
#define MDR_PORTA_IE_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA IE_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_IE_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA IE_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  IE_Clear  ======================================================== */
#define MDR_PORTA_IE_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA IE_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_IE_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA IE_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* ==========================================================  IT  =========================================================== */
#define MDR_PORTA_IT_Pin__Pos             (0UL)                     /*!< MDR_PORTA IT: Pin_ (Bit 0)                            */
#define MDR_PORTA_IT_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA IT: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  IT_Set  ========================================================= */
#define MDR_PORTA_IT_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA IT_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_IT_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA IT_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  IT_Clear  ======================================================== */
#define MDR_PORTA_IT_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA IT_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_IT_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA IT_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* ==========================================================  IR  =========================================================== */
#define MDR_PORTA_IR_Pin__Pos             (0UL)                     /*!< MDR_PORTA IR: Pin_ (Bit 0)                            */
#define MDR_PORTA_IR_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA IR: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  IR_Set  ========================================================= */
#define MDR_PORTA_IR_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA IR_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_IR_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA IR_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  IR_Clear  ======================================================== */
#define MDR_PORTA_IR_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA IR_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_IR_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA IR_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* =========================================================  HCUR  ========================================================== */
#define MDR_PORTA_HCUR_Pin__Pos           (0UL)                     /*!< MDR_PORTA HCUR: Pin_ (Bit 0)                          */
#define MDR_PORTA_HCUR_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA HCUR: Pin_ (Bitfield-Mask: 0x01)            */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* ========================================================  MAX_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK MAX_CLK Select [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_MAX_CLK_Select                                              */
  MDR_RST_CLOCK_MAX_CLK_Select_HSI     = 0,     /*!< HSI : MAX_CLOCK is HSI                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_HSI_div2 = 1,    /*!< HSI_div2 : MAX_CLOCK is HSI/2                                             */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE0    = 2,     /*!< HSE0 : MAX_CLOCK is HSE0                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE0_div2 = 3,   /*!< HSE0_div2 : MAX_CLOCK is HSE0/2                                           */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE1    = 4,     /*!< HSE1 : MAX_CLOCK is HSE1                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE1_div2 = 5,   /*!< HSE1_div2 : MAX_CLOCK is HSE1/2                                           */
  MDR_RST_CLOCK_MAX_CLK_Select_LSI     = 6,     /*!< LSI : MAX_CLOCK is LSI                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_LSE     = 7,     /*!< LSE : MAX_CLOCK is LSE                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL0    = 8,     /*!< PLL0 : MAX_CLOCK is PLL0                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL1    = 9,     /*!< PLL1 : MAX_CLOCK is PLL1                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL2    = 10,    /*!< PLL2 : MAX_CLOCK is PLL2                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL3    = 11,    /*!< PLL3 : MAX_CLOCK is PLL3                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL4    = 12,    /*!< PLL4 : MAX_CLOCK is PLL4                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL5    = 13,    /*!< PLL5 : MAX_CLOCK is PLL5                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL6    = 14,    /*!< PLL6 : MAX_CLOCK is PLL6                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL7    = 15,    /*!< PLL7 : MAX_CLOCK is PLL7                                                  */
} MDR_RST_CLOCK_MAX_CLK_Select_Enum;

/* ========================================================  CPU_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK CPU_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  PER0_CLK  ======================================================== */
/* =======================================  MDR_RST_CLOCK PER0_CLK RST_CLK_EN [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_RST_CLK_EN                                         */
  MDR_RST_CLOCK_PER0_CLK_RST_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_RST_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_RST_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER0_CLK BKP_CLK_EN [1..1]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_BKP_CLK_EN                                         */
  MDR_RST_CLOCK_PER0_CLK_BKP_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_BKP_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_BKP_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER0_CLK PWR_CLK_EN [2..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PWR_CLK_EN                                         */
  MDR_RST_CLOCK_PER0_CLK_PWR_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PWR_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PWR_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK FTCNTR_CLK_EN [3..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_FTCNTR_CLK_EN                                      */
  MDR_RST_CLOCK_PER0_CLK_FTCNTR_CLK_EN_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_FTCNTR_CLK_EN_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_FTCNTR_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER0_CLK WDT_CLK_EN [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_WDT_CLK_EN                                         */
  MDR_RST_CLOCK_PER0_CLK_WDT_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_WDT_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_WDT_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK DMA_CLK_EN [11..11]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_DMA_CLK_EN                                         */
  MDR_RST_CLOCK_PER0_CLK_DMA_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_DMA_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_DMA_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortA_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortB_CLK_EN [14..14]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortC_CLK_EN [15..15]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortD_CLK_EN [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortE_CLK_EN [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK SPW1_CLK_EN [21..21]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK SPW2_CLK_EN [22..22]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_SPW2_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_SPW2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_SPW2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_SPW2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK TIM1_CLK_EN [23..23]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK TIM2_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK TIM3_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK TIM4_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK CAN1_CLK_EN [29..29]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK CAN2_CLK_EN [30..30]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_CAN2_CLK_EN_Enum;

/* =======================================================  PER1_CLK  ======================================================== */
/* =======================================  MDR_RST_CLOCK PER1_CLK SSP1_CLK_EN [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK SSP2_CLK_EN [3..3]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_SSP2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_SSP2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_SSP2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_SSP2_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK SSP3_CLK_EN [4..4]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_SSP3_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_SSP3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_SSP3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_SSP3_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLK SSP4_CLK_EN [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_SSP4_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_SSP4_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_SSP4_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_SSP4_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK UART1_CLK_EN [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN                                       */
  MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK UART2_CLK_EN [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN                                       */
  MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK MIL1_CLK_EN [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK MIL2_CLK_EN [21..21]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK MIL3_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_MIL3_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_MIL3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_MIL3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_MIL3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK CRC_CLK_EN [28..28]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_CRC_CLK_EN                                         */
  MDR_RST_CLOCK_PER1_CLK_CRC_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_CRC_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_CRC_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK ECC_CLK_EN [29..29]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_ECC_CLK_EN                                         */
  MDR_RST_CLOCK_PER1_CLK_ECC_CLK_EN_Off = 0,    /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_ECC_CLK_EN_On = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_ECC_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK SSP5_CLK_EN [30..30]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_SSP5_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_SSP5_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_SSP5_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_SSP5_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK SSP6_CLK_EN [31..31]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_SSP6_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_SSP6_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_SSP6_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_SSP6_CLK_EN_Enum;

/* =======================================================  CPU_CHK0  ======================================================== */
/* =======================================================  CPU_CHK1  ======================================================== */
/* =======================================================  CPU_CHK2  ======================================================== */
/* =======================================================  CPU_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT0                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT1                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT2                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT3                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT3_Enum;

/* ========================================================  LSI_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSI_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  LSI_CHK0  ======================================================== */
/* =======================================================  LSI_CHK1  ======================================================== */
/* =======================================================  LSI_CHK2  ======================================================== */
/* =======================================================  LSI_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT0                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT1                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT2                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT3                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSI_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_READY                                              */
  MDR_RST_CLOCK_LSI_STAT_READY_Off     = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_LSI_STAT_READY_On      = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_LSI_STAT_READY_Enum;

/* =========================================  MDR_RST_CLOCK LSI_STAT Error [21..21]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_Error                                              */
  MDR_RST_CLOCK_LSI_STAT_Error_Off     = 0,     /*!< Off : Inactive state                                                      */
  MDR_RST_CLOCK_LSI_STAT_Error_On      = 1,     /*!< On : Ready Fault                                                          */
} MDR_RST_CLOCK_LSI_STAT_Error_Enum;

/* =======================================================  HSE_STAT  ======================================================== */
/* =========================================  MDR_RST_CLOCK HSE_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE_STAT_READY                                              */
  MDR_RST_CLOCK_HSE_STAT_READY_Off     = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_HSE_STAT_READY_On      = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_HSE_STAT_READY_Enum;

/* =========================================  MDR_RST_CLOCK HSE_STAT Error [21..21]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE_STAT_Error                                              */
  MDR_RST_CLOCK_HSE_STAT_Error_Off     = 0,     /*!< Off : Inactive state                                                      */
  MDR_RST_CLOCK_HSE_STAT_Error_On      = 1,     /*!< On : Ready Fault                                                          */
} MDR_RST_CLOCK_HSE_STAT_Error_Enum;

/* ========================================================  LSE_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSE_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  LSE_CHK0  ======================================================== */
/* =======================================================  LSE_CHK1  ======================================================== */
/* =======================================================  LSE_CHK2  ======================================================== */
/* =======================================================  LSE_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT0                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT1                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT2                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT3                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSE_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_READY                                              */
  MDR_RST_CLOCK_LSE_STAT_READY_Off     = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_LSE_STAT_READY_On      = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_LSE_STAT_READY_Enum;

/* =======================================================  HSE0_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK HSE_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_HSE_ON                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK HSE_BYP [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_HSE_BYP                                            */
  MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_On    = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Enum;

/* =======================================  MDR_RST_CLOCK HSE0_CLK FILTER_EN [29..29]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_FILTER_EN                                          */
  MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Enum;

/* =======================================================  HSE0_CHK0  ======================================================= */
/* =======================================================  HSE0_CHK1  ======================================================= */
/* =======================================================  HSE0_CHK2  ======================================================= */
/* =======================================================  HSE0_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT0                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT1                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT2                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT3                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_READY                                             */
  MDR_RST_CLOCK_HSE0_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_HSE0_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_HSE0_STAT_READY_Enum;

/* =======================================================  HSE1_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK HSE_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_HSE_ON                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK HSE_BYP [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_HSE_BYP                                            */
  MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_On    = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Enum;

/* =======================================  MDR_RST_CLOCK HSE1_CLK FILTER_EN [29..29]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_FILTER_EN                                          */
  MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Enum;

/* =======================================================  HSE1_CHK0  ======================================================= */
/* =======================================================  HSE1_CHK1  ======================================================= */
/* =======================================================  HSE1_CHK2  ======================================================= */
/* =======================================================  HSE1_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT0                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT1                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT2                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT3                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_READY                                             */
  MDR_RST_CLOCK_HSE1_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_HSE1_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_HSE1_STAT_READY_Enum;

/* =======================================================  PLL0_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL0_CLK PLL_Q [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
} MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Enum;

/* ===========================================  MDR_RST_CLOCK PLL0_CLK DV [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL0_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
} MDR_RST_CLOCK_PLL0_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK PLL_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK PLL_RLD [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_RLD                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Inactive = 0,  /*!< Inactive : Inactive state                                                 */
  MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Reload = 1,    /*!< Reload : Reload PLL                                                       */
} MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK SELECT [29..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL0_CLK_SELECT_Enum;

/* =======================================================  PLL0_CHK0  ======================================================= */
/* =======================================================  PLL0_CHK1  ======================================================= */
/* =======================================================  PLL0_CHK2  ======================================================= */
/* =======================================================  PLL0_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_READY                                             */
  MDR_RST_CLOCK_PLL0_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL0_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL0_STAT_READY_Enum;

/* =======================================================  PLL1_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL1_CLK PLL_Q [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
} MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Enum;

/* ===========================================  MDR_RST_CLOCK PLL1_CLK DV [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL1_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
} MDR_RST_CLOCK_PLL1_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK PLL_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK PLL_RLD [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_RLD                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Inactive = 0,  /*!< Inactive : Inactive state                                                 */
  MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Reload = 1,    /*!< Reload : Reload PLL                                                       */
} MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK SELECT [29..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL1_CLK_SELECT_Enum;

/* =======================================================  PLL1_CHK0  ======================================================= */
/* =======================================================  PLL1_CHK1  ======================================================= */
/* =======================================================  PLL1_CHK2  ======================================================= */
/* =======================================================  PLL1_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_READY                                             */
  MDR_RST_CLOCK_PLL1_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL1_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL1_STAT_READY_Enum;

/* =======================================================  PLL2_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL2_CLK PLL_Q [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
} MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Enum;

/* ===========================================  MDR_RST_CLOCK PLL2_CLK DV [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL2_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
} MDR_RST_CLOCK_PLL2_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK PLL_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK PLL_RLD [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_RLD                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Inactive = 0,  /*!< Inactive : Inactive state                                                 */
  MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Reload = 1,    /*!< Reload : Reload PLL                                                       */
} MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK SELECT [29..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL2_CLK_SELECT_Enum;

/* =======================================================  PLL2_CHK0  ======================================================= */
/* =======================================================  PLL2_CHK1  ======================================================= */
/* =======================================================  PLL2_CHK2  ======================================================= */
/* =======================================================  PLL2_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_READY                                             */
  MDR_RST_CLOCK_PLL2_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL2_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL2_STAT_READY_Enum;

/* =======================================================  CAN1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAN1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAN1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Enum;

/* =======================================================  CAN2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAN2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAN2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAN2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAN2_CLK_CLK_EN_Enum;

/* =======================================================  TIM1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Enum;

/* =======================================================  TIM2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Enum;

/* =======================================================  TIM3_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM3_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM3_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM3_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Enum;

/* =======================================================  TIM4_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM4_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM4_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM4_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Enum;

/* =======================================================  MIL1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK MIL1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_MIL1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_MIL1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_MIL1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_MIL1_CLK_CLK_EN_Enum;

/* =======================================================  MIL2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK MIL2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_MIL2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_MIL2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_MIL2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_MIL2_CLK_CLK_EN_Enum;

/* =======================================================  MIL3_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK MIL3_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_MIL3_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_MIL3_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_MIL3_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_MIL3_CLK_CLK_EN_Enum;

/* =======================================================  MIL4_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK MIL4_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_MIL4_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_MIL4_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_MIL4_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_MIL4_CLK_CLK_EN_Enum;

/* =======================================================  SPW1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SPW1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SPW1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SPW1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SPW1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SPW1_CLK_CLK_EN_Enum;

/* =======================================================  SPW2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SPW2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SPW2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SPW2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SPW2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SPW2_CLK_CLK_EN_Enum;

/* =======================================================  UART1_CLK  ======================================================= */
/* ========================================  MDR_RST_CLOCK UART1_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART1_CLK_CLK_EN                                            */
  MDR_RST_CLOCK_UART1_CLK_CLK_EN_Off   = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_UART1_CLK_CLK_EN_On    = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_UART1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK UART1_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART1_CLK_SELECT                                            */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSI   = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSE0  = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSE1  = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_LSI   = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_LSE   = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL0  = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL1  = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL2  = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_MAX_CLK = 13,  /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_UART1_CLK_SELECT_Enum;

/* =======================================================  UART2_CLK  ======================================================= */
/* ========================================  MDR_RST_CLOCK UART2_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART2_CLK_CLK_EN                                            */
  MDR_RST_CLOCK_UART2_CLK_CLK_EN_Off   = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_UART2_CLK_CLK_EN_On    = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_UART2_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK UART2_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART2_CLK_SELECT                                            */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSI   = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSE0  = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSE1  = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_LSI   = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_LSE   = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL0  = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL1  = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL2  = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_MAX_CLK = 13,  /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_UART2_CLK_SELECT_Enum;

/* =======================================================  SSP1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP1_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP1_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP1_CLK_SELECT_Enum;

/* =======================================================  SSP2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP2_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP2_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP2_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP2_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP2_CLK_SELECT_Enum;

/* =======================================================  SSP3_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP3_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP3_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP3_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP3_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP3_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP3_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP3_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP3_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP3_CLK_SELECT_Enum;

/* =======================================================  SSP4_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP4_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP4_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP4_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP4_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP4_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP4_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP4_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP4_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP4_CLK_SELECT_Enum;

/* =======================================================  SSP5_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP5_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP5_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP5_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP5_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP5_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP5_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP5_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP5_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP5_CLK_SELECT_Enum;

/* =======================================================  SSP6_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP6_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP6_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP6_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP6_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP6_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP6_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP6_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP6_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP6_CLK_SELECT_Enum;

/* ========================================================  RTC_CLK  ======================================================== */
/* =========================================  MDR_RST_CLOCK RTC_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLK_CLK_EN                                              */
  MDR_RST_CLOCK_RTC_CLK_CLK_EN_Off     = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_RTC_CLK_CLK_EN_On      = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_RTC_CLK_CLK_EN_Enum;

/* =========================================  MDR_RST_CLOCK RTC_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLK_SELECT                                              */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSI     = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSE0    = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSE1    = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_LSI     = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_LSE     = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL0    = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL1    = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL2    = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_MAX_CLK = 13,    /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_RTC_CLK_SELECT_Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  REG  ========================================================== */
/* ==========================================================  KEY  ========================================================== */
/* ======================================================  REG_60_TMR0  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR0 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_FPOR                                                  */
  MDR_BKP_REG_60_TMR0_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR0_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR0_FPOR_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 S_UccReset [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_UccReset                                            */
  MDR_BKP_REG_60_TMR0_S_UccReset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_UccReset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_UccReset_Enum;

/* ==========================================  MDR_BKP REG_60_TMR0 S_RSTn0 [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR0_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 S_FT_Reset [10..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR0_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR0 S_WDT_Reset [11..11]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR0_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_WDT_Reset_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 S_RSTn1 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR0_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 S_OVRSTn [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_OVRSTn                                              */
  MDR_BKP_REG_60_TMR0_S_OVRSTn_Off     = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_OVRSTn_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_OVRSTn_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 S_SYSRSTn [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR0_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_SYSRSTn_Enum;

/* =======================================  MDR_BKP REG_60_TMR0 JTAG_Enable [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR0_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR0_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR0_JTAG_Enable_Enum;

/* =====================================  MDR_BKP REG_60_TMR0 LimEn_LDO_DUcc0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0                                       */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_Enum;

/* =====================================  MDR_BKP REG_60_TMR0 LimEn_LDO_DUcc1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1                                       */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_Enum;

/* =====================================  MDR_BKP REG_60_TMR0 LimEn_LDO_DUcc2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2                                       */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_Enum;

/* =====================================  MDR_BKP REG_60_TMR0 LimEn_LDO_DUcc3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3                                       */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_Enum;

/* ======================================  MDR_BKP REG_60_TMR0 LimEn_LDO_BUcc [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc                                        */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_Off = 0,   /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_On = 1,    /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_Enum;

/* ======================================  MDR_BKP REG_60_TMR0 LimEn_LDO_PLL [21..21]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL                                         */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR0_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR0 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR0_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG63x_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 PORSTn_En [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_PORSTn_En                                             */
  MDR_BKP_REG_60_TMR0_PORSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR0_PORSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR0_PORSTn_En_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 OVRSTn_En [29..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_OVRSTn_En                                             */
  MDR_BKP_REG_60_TMR0_OVRSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR0_OVRSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR0_OVRSTn_En_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR0_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR0_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR0_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR0  ====================================================== */
/* ========================================  MDR_BKP REG_61_TMR0 LDO0_SRILow [0..2]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO0_SRILow                                           */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR0_LDO0_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO0_Trim [3..5]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO0_Trim                                             */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR0_LDO0_Trim_Enum;

/* ==========================================  MDR_BKP REG_61_TMR0 LDO0_En [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO0_En                                               */
  MDR_BKP_REG_61_TMR0_LDO0_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR0_LDO0_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR0_LDO0_En_Enum;

/* ==========================================  MDR_BKP REG_61_TMR0 LDO0_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO0_RDY                                              */
  MDR_BKP_REG_61_TMR0_LDO0_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR0_LDO0_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR0_LDO0_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 LDO1_SRILow [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO1_SRILow                                           */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR0_LDO1_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 LDO1_Trim [11..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO1_Trim                                             */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR0_LDO1_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO1_En [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO1_En                                               */
  MDR_BKP_REG_61_TMR0_LDO1_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR0_LDO1_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR0_LDO1_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO1_RDY [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO1_RDY                                              */
  MDR_BKP_REG_61_TMR0_LDO1_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR0_LDO1_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR0_LDO1_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 LDO2_SRILow [16..18]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO2_SRILow                                           */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR0_LDO2_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 LDO2_Trim [19..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO2_Trim                                             */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR0_LDO2_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO2_En [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO2_En                                               */
  MDR_BKP_REG_61_TMR0_LDO2_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR0_LDO2_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR0_LDO2_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO2_RDY [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO2_RDY                                              */
  MDR_BKP_REG_61_TMR0_LDO2_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR0_LDO2_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR0_LDO2_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 LDO3_SRILow [24..26]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO3_SRILow                                           */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR0_LDO3_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 LDO3_Trim [27..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO3_Trim                                             */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR0_LDO3_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO3_En [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO3_En                                               */
  MDR_BKP_REG_61_TMR0_LDO3_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR0_LDO3_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR0_LDO3_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO3_RDY [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO3_RDY                                              */
  MDR_BKP_REG_61_TMR0_LDO3_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR0_LDO3_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR0_LDO3_RDY_Enum;

/* ======================================================  REG_62_TMR0  ====================================================== */
/* ======================================  MDR_BKP REG_62_TMR0 LDO_BUcc_SRILow [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow                                       */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~300uA                                          */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge200KHz = 1,/*!< ge200KHz : Extra_I about ~7uA                                          */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge500KHz = 2,/*!< ge500KHz : Extra_I about ~20uA                                         */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge1MHz = 3,/*!< ge1MHz : Extra_I about ~80uA                                             */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_GensOff = 4,/*!< GensOff : Extra_I about ~2uA                                            */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge40MHz = 5,/*!< ge40MHz : Extra_I about ~900uA                                          */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge80MHz = 6,/*!< ge80MHz : Extra_I about ~5mA                                            */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_gt80MHz = 7,/*!< gt80MHz : Extra_I about ~20mA                                           */
} MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 LDO_BUcc_Trim [3..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim                                         */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR0 LDO_BUcc_En [6..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_BUcc_En                                           */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_En_Off  = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_En_On   = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR0_LDO_BUcc_En_Enum;

/* ========================================  MDR_BKP REG_62_TMR0 LDO_BUcc_RDY [7..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY                                          */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_NotReady = 0,/*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_Ready = 1,   /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_Enum;

/* ======================================  MDR_BKP REG_62_TMR0 LDO_PLL_SRILow [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow                                        */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~300uA                                           */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge200KHz = 1,/*!< ge200KHz : Extra_I about ~7uA                                           */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge500KHz = 2,/*!< ge500KHz : Extra_I about ~20uA                                          */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge1MHz = 3,/*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_GensOff = 4,/*!< GensOff : Extra_I about ~2uA                                             */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge40MHz = 5,/*!< ge40MHz : Extra_I about ~900uA                                           */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge80MHz = 6,/*!< ge80MHz : Extra_I about ~5mA                                             */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_gt80MHz = 7,/*!< gt80MHz : Extra_I about ~20mA                                            */
} MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 LDO_PLL_Trim [11..13]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_PLL_Trim                                          */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_add_0v1 = 0, /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_sub_0v1 = 7, /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR0 LDO_PLL_En [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_PLL_En                                            */
  MDR_BKP_REG_62_TMR0_LDO_PLL_En_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR0_LDO_PLL_En_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR0_LDO_PLL_En_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 LDO_PLL_RDY [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_PLL_RDY                                           */
  MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_NotReady = 0, /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_Ready = 1,    /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_Enum;

/* =========================================  MDR_BKP REG_62_TMR0 Trim_Ref [28..30]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_Trim_Ref                                              */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr0     = 0,     /*!< Tr0 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr1     = 1,     /*!< Tr1 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr2     = 2,     /*!< Tr2 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr3     = 3,     /*!< Tr3 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr4     = 4,     /*!< Tr4 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr5     = 5,     /*!< Tr5 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr6     = 6,     /*!< Tr6 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr7     = 7,     /*!< Tr7 : Trim                                                                */
} MDR_BKP_REG_62_TMR0_Trim_Ref_Enum;

/* ======================================================  REG_63_TMR0  ====================================================== */
/* ===========================================  MDR_BKP REG_63_TMR0 LSE_On [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_On                                                */
  MDR_BKP_REG_63_TMR0_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 LSE_BYP [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR0_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 RTC_Sel [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_RTC_Sel                                               */
  MDR_BKP_REG_63_TMR0_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_63_TMR0_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_63_TMR0_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_63_TMR0_RTC_Sel_Enum;

/* ===========================================  MDR_BKP REG_63_TMR0 RTC_En [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_RTC_En                                                */
  MDR_BKP_REG_63_TMR0_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_RTC_En_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 LSE_RDY [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR0_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR0 LSE_FilterEn [14..14]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_FilterEn                                          */
  MDR_BKP_REG_63_TMR0_LSE_FilterEn_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_FilterEn_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 LSI_On [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_On                                                */
  MDR_BKP_REG_63_TMR0_LSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 LSI_Trim [16..20]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_Trim                                              */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max8    = 0,     /*!< Max8 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max7    = 1,     /*!< Max7 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max6    = 2,     /*!< Max6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max5    = 3,     /*!< Max5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max4    = 4,     /*!< Max4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max3    = 5,     /*!< Max3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max2    = 6,     /*!< Max2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max1    = 7,     /*!< Max1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Typical = 8,     /*!< Typical : LSI Default                                                     */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min1    = 9,     /*!< Min1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min2    = 10,    /*!< Min2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min3    = 11,    /*!< Min3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min4    = 12,    /*!< Min4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min5    = 13,    /*!< Min5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min6    = 14,    /*!< Min6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min7    = 15,    /*!< Min7 : LSI Trim                                                           */
} MDR_BKP_REG_63_TMR0_LSI_Trim_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 LSI_RDY [21..21]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_RDY                                               */
  MDR_BKP_REG_63_TMR0_LSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSI_RDY_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 HSI_On [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSI_On                                                */
  MDR_BKP_REG_63_TMR0_HSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 HSI_RDY [23..23]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSI_RDY                                               */
  MDR_BKP_REG_63_TMR0_HSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSI_RDY_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 STANDBY [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_STANDBY                                               */
  MDR_BKP_REG_63_TMR0_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_63_TMR0_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_63_TMR0_STANDBY_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 RTC_RST [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_RTC_RST                                               */
  MDR_BKP_REG_63_TMR0_RTC_RST_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_RTC_RST_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_RTC_RST_Enum;

/* ======================================================  REG_60_TMR1  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR1 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_FPOR                                                  */
  MDR_BKP_REG_60_TMR1_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR1_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR1_FPOR_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 S_UccReset [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_UccReset                                            */
  MDR_BKP_REG_60_TMR1_S_UccReset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_UccReset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_UccReset_Enum;

/* ==========================================  MDR_BKP REG_60_TMR1 S_RSTn0 [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR1_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 S_FT_Reset [10..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR1_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR1 S_WDT_Reset [11..11]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR1_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_WDT_Reset_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 S_RSTn1 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR1_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 S_OVRSTn [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_OVRSTn                                              */
  MDR_BKP_REG_60_TMR1_S_OVRSTn_Off     = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_OVRSTn_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_OVRSTn_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 S_SYSRSTn [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR1_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_SYSRSTn_Enum;

/* =======================================  MDR_BKP REG_60_TMR1 JTAG_Enable [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR1_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR1_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR1_JTAG_Enable_Enum;

/* =====================================  MDR_BKP REG_60_TMR1 LimEn_LDO_DUcc0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0                                       */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_Enum;

/* =====================================  MDR_BKP REG_60_TMR1 LimEn_LDO_DUcc1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1                                       */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_Enum;

/* =====================================  MDR_BKP REG_60_TMR1 LimEn_LDO_DUcc2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2                                       */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_Enum;

/* =====================================  MDR_BKP REG_60_TMR1 LimEn_LDO_DUcc3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3                                       */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_Enum;

/* ======================================  MDR_BKP REG_60_TMR1 LimEn_LDO_BUcc [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc                                        */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_Off = 0,   /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_On = 1,    /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_Enum;

/* ======================================  MDR_BKP REG_60_TMR1 LimEn_LDO_PLL [21..21]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL                                         */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR1_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR1 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR1_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG63x_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 PORSTn_En [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_PORSTn_En                                             */
  MDR_BKP_REG_60_TMR1_PORSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR1_PORSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR1_PORSTn_En_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 OVRSTn_En [29..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_OVRSTn_En                                             */
  MDR_BKP_REG_60_TMR1_OVRSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR1_OVRSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR1_OVRSTn_En_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR1_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR1_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR1_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR1  ====================================================== */
/* ========================================  MDR_BKP REG_61_TMR1 LDO0_SRILow [0..2]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO0_SRILow                                           */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR1_LDO0_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO0_Trim [3..5]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO0_Trim                                             */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR1_LDO0_Trim_Enum;

/* ==========================================  MDR_BKP REG_61_TMR1 LDO0_En [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO0_En                                               */
  MDR_BKP_REG_61_TMR1_LDO0_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR1_LDO0_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR1_LDO0_En_Enum;

/* ==========================================  MDR_BKP REG_61_TMR1 LDO0_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO0_RDY                                              */
  MDR_BKP_REG_61_TMR1_LDO0_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR1_LDO0_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR1_LDO0_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 LDO1_SRILow [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO1_SRILow                                           */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR1_LDO1_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 LDO1_Trim [11..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO1_Trim                                             */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR1_LDO1_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO1_En [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO1_En                                               */
  MDR_BKP_REG_61_TMR1_LDO1_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR1_LDO1_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR1_LDO1_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO1_RDY [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO1_RDY                                              */
  MDR_BKP_REG_61_TMR1_LDO1_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR1_LDO1_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR1_LDO1_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 LDO2_SRILow [16..18]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO2_SRILow                                           */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR1_LDO2_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 LDO2_Trim [19..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO2_Trim                                             */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR1_LDO2_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO2_En [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO2_En                                               */
  MDR_BKP_REG_61_TMR1_LDO2_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR1_LDO2_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR1_LDO2_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO2_RDY [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO2_RDY                                              */
  MDR_BKP_REG_61_TMR1_LDO2_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR1_LDO2_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR1_LDO2_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 LDO3_SRILow [24..26]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO3_SRILow                                           */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR1_LDO3_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 LDO3_Trim [27..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO3_Trim                                             */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR1_LDO3_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO3_En [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO3_En                                               */
  MDR_BKP_REG_61_TMR1_LDO3_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR1_LDO3_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR1_LDO3_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO3_RDY [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO3_RDY                                              */
  MDR_BKP_REG_61_TMR1_LDO3_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR1_LDO3_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR1_LDO3_RDY_Enum;

/* ======================================================  REG_62_TMR1  ====================================================== */
/* ======================================  MDR_BKP REG_62_TMR1 LDO_BUcc_SRILow [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow                                       */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~300uA                                          */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge200KHz = 1,/*!< ge200KHz : Extra_I about ~7uA                                          */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge500KHz = 2,/*!< ge500KHz : Extra_I about ~20uA                                         */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge1MHz = 3,/*!< ge1MHz : Extra_I about ~80uA                                             */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_GensOff = 4,/*!< GensOff : Extra_I about ~2uA                                            */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge40MHz = 5,/*!< ge40MHz : Extra_I about ~900uA                                          */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge80MHz = 6,/*!< ge80MHz : Extra_I about ~5mA                                            */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_gt80MHz = 7,/*!< gt80MHz : Extra_I about ~20mA                                           */
} MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 LDO_BUcc_Trim [3..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim                                         */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR1 LDO_BUcc_En [6..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_BUcc_En                                           */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_En_Off  = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_En_On   = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR1_LDO_BUcc_En_Enum;

/* ========================================  MDR_BKP REG_62_TMR1 LDO_BUcc_RDY [7..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY                                          */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_NotReady = 0,/*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_Ready = 1,   /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_Enum;

/* ======================================  MDR_BKP REG_62_TMR1 LDO_PLL_SRILow [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow                                        */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~300uA                                           */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge200KHz = 1,/*!< ge200KHz : Extra_I about ~7uA                                           */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge500KHz = 2,/*!< ge500KHz : Extra_I about ~20uA                                          */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge1MHz = 3,/*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_GensOff = 4,/*!< GensOff : Extra_I about ~2uA                                             */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge40MHz = 5,/*!< ge40MHz : Extra_I about ~900uA                                           */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge80MHz = 6,/*!< ge80MHz : Extra_I about ~5mA                                             */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_gt80MHz = 7,/*!< gt80MHz : Extra_I about ~20mA                                            */
} MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 LDO_PLL_Trim [11..13]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_PLL_Trim                                          */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_add_0v1 = 0, /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_sub_0v1 = 7, /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR1 LDO_PLL_En [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_PLL_En                                            */
  MDR_BKP_REG_62_TMR1_LDO_PLL_En_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR1_LDO_PLL_En_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR1_LDO_PLL_En_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 LDO_PLL_RDY [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_PLL_RDY                                           */
  MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_NotReady = 0, /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_Ready = 1,    /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_Enum;

/* =========================================  MDR_BKP REG_62_TMR1 Trim_Ref [28..30]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_Trim_Ref                                              */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr0     = 0,     /*!< Tr0 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr1     = 1,     /*!< Tr1 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr2     = 2,     /*!< Tr2 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr3     = 3,     /*!< Tr3 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr4     = 4,     /*!< Tr4 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr5     = 5,     /*!< Tr5 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr6     = 6,     /*!< Tr6 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr7     = 7,     /*!< Tr7 : Trim                                                                */
} MDR_BKP_REG_62_TMR1_Trim_Ref_Enum;

/* ======================================================  REG_63_TMR1  ====================================================== */
/* ===========================================  MDR_BKP REG_63_TMR1 LSE_On [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_On                                                */
  MDR_BKP_REG_63_TMR1_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 LSE_BYP [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR1_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 RTC_Sel [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_RTC_Sel                                               */
  MDR_BKP_REG_63_TMR1_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_63_TMR1_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_63_TMR1_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_63_TMR1_RTC_Sel_Enum;

/* ===========================================  MDR_BKP REG_63_TMR1 RTC_En [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_RTC_En                                                */
  MDR_BKP_REG_63_TMR1_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_RTC_En_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 LSE_RDY [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR1_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR1 LSE_FilterEn [14..14]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_FilterEn                                          */
  MDR_BKP_REG_63_TMR1_LSE_FilterEn_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_FilterEn_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 LSI_On [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_On                                                */
  MDR_BKP_REG_63_TMR1_LSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 LSI_Trim [16..20]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_Trim                                              */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max8    = 0,     /*!< Max8 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max7    = 1,     /*!< Max7 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max6    = 2,     /*!< Max6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max5    = 3,     /*!< Max5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max4    = 4,     /*!< Max4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max3    = 5,     /*!< Max3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max2    = 6,     /*!< Max2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max1    = 7,     /*!< Max1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Typical = 8,     /*!< Typical : LSI Default                                                     */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min1    = 9,     /*!< Min1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min2    = 10,    /*!< Min2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min3    = 11,    /*!< Min3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min4    = 12,    /*!< Min4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min5    = 13,    /*!< Min5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min6    = 14,    /*!< Min6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min7    = 15,    /*!< Min7 : LSI Trim                                                           */
} MDR_BKP_REG_63_TMR1_LSI_Trim_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 LSI_RDY [21..21]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_RDY                                               */
  MDR_BKP_REG_63_TMR1_LSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSI_RDY_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 HSI_On [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSI_On                                                */
  MDR_BKP_REG_63_TMR1_HSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 HSI_RDY [23..23]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSI_RDY                                               */
  MDR_BKP_REG_63_TMR1_HSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSI_RDY_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 STANDBY [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_STANDBY                                               */
  MDR_BKP_REG_63_TMR1_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_63_TMR1_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_63_TMR1_STANDBY_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 RTC_RST [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_RTC_RST                                               */
  MDR_BKP_REG_63_TMR1_RTC_RST_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_RTC_RST_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_RTC_RST_Enum;

/* ======================================================  REG_60_TMR2  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR2 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_FPOR                                                  */
  MDR_BKP_REG_60_TMR2_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR2_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR2_FPOR_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 S_UccReset [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_UccReset                                            */
  MDR_BKP_REG_60_TMR2_S_UccReset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_UccReset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_UccReset_Enum;

/* ==========================================  MDR_BKP REG_60_TMR2 S_RSTn0 [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR2_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 S_FT_Reset [10..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR2_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR2 S_WDT_Reset [11..11]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR2_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_WDT_Reset_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 S_RSTn1 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR2_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 S_OVRSTn [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_OVRSTn                                              */
  MDR_BKP_REG_60_TMR2_S_OVRSTn_Off     = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_OVRSTn_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_OVRSTn_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 S_SYSRSTn [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR2_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_SYSRSTn_Enum;

/* =======================================  MDR_BKP REG_60_TMR2 JTAG_Enable [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR2_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR2_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR2_JTAG_Enable_Enum;

/* =====================================  MDR_BKP REG_60_TMR2 LimEn_LDO_DUcc0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0                                       */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_Enum;

/* =====================================  MDR_BKP REG_60_TMR2 LimEn_LDO_DUcc1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1                                       */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_Enum;

/* =====================================  MDR_BKP REG_60_TMR2 LimEn_LDO_DUcc2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2                                       */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_Enum;

/* =====================================  MDR_BKP REG_60_TMR2 LimEn_LDO_DUcc3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3                                       */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_Enum;

/* ======================================  MDR_BKP REG_60_TMR2 LimEn_LDO_BUcc [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc                                        */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_Off = 0,   /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_On = 1,    /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_Enum;

/* ======================================  MDR_BKP REG_60_TMR2 LimEn_LDO_PLL [21..21]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL                                         */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR2_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR2 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR2_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG63x_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 PORSTn_En [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_PORSTn_En                                             */
  MDR_BKP_REG_60_TMR2_PORSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR2_PORSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR2_PORSTn_En_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 OVRSTn_En [29..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_OVRSTn_En                                             */
  MDR_BKP_REG_60_TMR2_OVRSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR2_OVRSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR2_OVRSTn_En_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR2_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR2_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR2_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR2  ====================================================== */
/* ========================================  MDR_BKP REG_61_TMR2 LDO0_SRILow [0..2]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO0_SRILow                                           */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR2_LDO0_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO0_Trim [3..5]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO0_Trim                                             */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR2_LDO0_Trim_Enum;

/* ==========================================  MDR_BKP REG_61_TMR2 LDO0_En [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO0_En                                               */
  MDR_BKP_REG_61_TMR2_LDO0_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR2_LDO0_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR2_LDO0_En_Enum;

/* ==========================================  MDR_BKP REG_61_TMR2 LDO0_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO0_RDY                                              */
  MDR_BKP_REG_61_TMR2_LDO0_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR2_LDO0_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR2_LDO0_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 LDO1_SRILow [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO1_SRILow                                           */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR2_LDO1_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 LDO1_Trim [11..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO1_Trim                                             */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR2_LDO1_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO1_En [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO1_En                                               */
  MDR_BKP_REG_61_TMR2_LDO1_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR2_LDO1_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR2_LDO1_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO1_RDY [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO1_RDY                                              */
  MDR_BKP_REG_61_TMR2_LDO1_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR2_LDO1_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR2_LDO1_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 LDO2_SRILow [16..18]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO2_SRILow                                           */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR2_LDO2_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 LDO2_Trim [19..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO2_Trim                                             */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR2_LDO2_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO2_En [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO2_En                                               */
  MDR_BKP_REG_61_TMR2_LDO2_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR2_LDO2_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR2_LDO2_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO2_RDY [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO2_RDY                                              */
  MDR_BKP_REG_61_TMR2_LDO2_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR2_LDO2_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR2_LDO2_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 LDO3_SRILow [24..26]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO3_SRILow                                           */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge200KHz = 1, /*!< ge200KHz : Extra_I about ~7uA                                             */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge500KHz = 2, /*!< ge500KHz : Extra_I about ~20uA                                            */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge1MHz = 3,   /*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_GensOff = 4,  /*!< GensOff : Extra_I about ~2uA                                              */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge40MHz = 5,  /*!< ge40MHz : Extra_I about ~900uA                                            */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge80MHz = 6,  /*!< ge80MHz : Extra_I about ~5mA                                              */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_gt80MHz = 7,  /*!< gt80MHz : Extra_I about ~20mA                                             */
} MDR_BKP_REG_61_TMR2_LDO3_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 LDO3_Trim [27..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO3_Trim                                             */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_add_0v1 = 0,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_add_0v06 = 1,   /*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_add_0v04 = 2,   /*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_add_0v01 = 3,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_sub_0v04 = 5,   /*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_sub_0v06 = 6,   /*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_sub_0v1 = 7,    /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_61_TMR2_LDO3_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO3_En [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO3_En                                               */
  MDR_BKP_REG_61_TMR2_LDO3_En_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_61_TMR2_LDO3_En_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_61_TMR2_LDO3_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO3_RDY [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO3_RDY                                              */
  MDR_BKP_REG_61_TMR2_LDO3_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR2_LDO3_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR2_LDO3_RDY_Enum;

/* ======================================================  REG_62_TMR2  ====================================================== */
/* ======================================  MDR_BKP REG_62_TMR2 LDO_BUcc_SRILow [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow                                       */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~300uA                                          */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge200KHz = 1,/*!< ge200KHz : Extra_I about ~7uA                                          */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge500KHz = 2,/*!< ge500KHz : Extra_I about ~20uA                                         */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge1MHz = 3,/*!< ge1MHz : Extra_I about ~80uA                                             */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_GensOff = 4,/*!< GensOff : Extra_I about ~2uA                                            */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge40MHz = 5,/*!< ge40MHz : Extra_I about ~900uA                                          */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge80MHz = 6,/*!< ge80MHz : Extra_I about ~5mA                                            */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_gt80MHz = 7,/*!< gt80MHz : Extra_I about ~20mA                                           */
} MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 LDO_BUcc_Trim [3..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim                                         */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_add_0v1 = 0,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_sub_0v1 = 7,/*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR2 LDO_BUcc_En [6..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_BUcc_En                                           */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_En_Off  = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_En_On   = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR2_LDO_BUcc_En_Enum;

/* ========================================  MDR_BKP REG_62_TMR2 LDO_BUcc_RDY [7..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY                                          */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_NotReady = 0,/*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_Ready = 1,   /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_Enum;

/* ======================================  MDR_BKP REG_62_TMR2 LDO_PLL_SRILow [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow                                        */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~300uA                                           */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge200KHz = 1,/*!< ge200KHz : Extra_I about ~7uA                                           */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge500KHz = 2,/*!< ge500KHz : Extra_I about ~20uA                                          */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge1MHz = 3,/*!< ge1MHz : Extra_I about ~80uA                                              */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_GensOff = 4,/*!< GensOff : Extra_I about ~2uA                                             */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge40MHz = 5,/*!< ge40MHz : Extra_I about ~900uA                                           */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge80MHz = 6,/*!< ge80MHz : Extra_I about ~5mA                                             */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_gt80MHz = 7,/*!< gt80MHz : Extra_I about ~20mA                                            */
} MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 LDO_PLL_Trim [11..13]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_PLL_Trim                                          */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_add_0v1 = 0, /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_add_0v06 = 1,/*!< add_0v06 : LD0 extra voltage +0.06V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_add_0v04 = 2,/*!< add_0v04 : LD0 extra voltage +0.04V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_add_0v01 = 3,/*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_sub_0v04 = 5,/*!< sub_0v04 : LD0 extra voltage -0.04V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_sub_0v06 = 6,/*!< sub_0v06 : LD0 extra voltage -0.06V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_sub_0v1 = 7, /*!< sub_0v1 : LD0 extra voltage -0.1V                                         */
} MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR2 LDO_PLL_En [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_PLL_En                                            */
  MDR_BKP_REG_62_TMR2_LDO_PLL_En_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_62_TMR2_LDO_PLL_En_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_62_TMR2_LDO_PLL_En_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 LDO_PLL_RDY [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_PLL_RDY                                           */
  MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_NotReady = 0, /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_Ready = 1,    /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_Enum;

/* =========================================  MDR_BKP REG_62_TMR2 Trim_Ref [28..30]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_Trim_Ref                                              */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr0     = 0,     /*!< Tr0 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr1     = 1,     /*!< Tr1 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr2     = 2,     /*!< Tr2 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr3     = 3,     /*!< Tr3 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr4     = 4,     /*!< Tr4 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr5     = 5,     /*!< Tr5 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr6     = 6,     /*!< Tr6 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr7     = 7,     /*!< Tr7 : Trim                                                                */
} MDR_BKP_REG_62_TMR2_Trim_Ref_Enum;

/* ======================================================  REG_63_TMR2  ====================================================== */
/* ===========================================  MDR_BKP REG_63_TMR2 LSE_On [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_On                                                */
  MDR_BKP_REG_63_TMR2_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 LSE_BYP [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR2_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 RTC_Sel [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_RTC_Sel                                               */
  MDR_BKP_REG_63_TMR2_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_63_TMR2_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_63_TMR2_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_63_TMR2_RTC_Sel_Enum;

/* ===========================================  MDR_BKP REG_63_TMR2 RTC_En [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_RTC_En                                                */
  MDR_BKP_REG_63_TMR2_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_RTC_En_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 LSE_RDY [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR2_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR2 LSE_FilterEn [14..14]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_FilterEn                                          */
  MDR_BKP_REG_63_TMR2_LSE_FilterEn_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_FilterEn_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 LSI_On [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_On                                                */
  MDR_BKP_REG_63_TMR2_LSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 LSI_Trim [16..20]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_Trim                                              */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max8    = 0,     /*!< Max8 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max7    = 1,     /*!< Max7 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max6    = 2,     /*!< Max6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max5    = 3,     /*!< Max5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max4    = 4,     /*!< Max4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max3    = 5,     /*!< Max3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max2    = 6,     /*!< Max2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max1    = 7,     /*!< Max1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Typical = 8,     /*!< Typical : LSI Default                                                     */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min1    = 9,     /*!< Min1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min2    = 10,    /*!< Min2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min3    = 11,    /*!< Min3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min4    = 12,    /*!< Min4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min5    = 13,    /*!< Min5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min6    = 14,    /*!< Min6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min7    = 15,    /*!< Min7 : LSI Trim                                                           */
} MDR_BKP_REG_63_TMR2_LSI_Trim_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 LSI_RDY [21..21]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_RDY                                               */
  MDR_BKP_REG_63_TMR2_LSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSI_RDY_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 HSI_On [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSI_On                                                */
  MDR_BKP_REG_63_TMR2_HSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 HSI_RDY [23..23]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSI_RDY                                               */
  MDR_BKP_REG_63_TMR2_HSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSI_RDY_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 STANDBY [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_STANDBY                                               */
  MDR_BKP_REG_63_TMR2_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_63_TMR2_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_63_TMR2_STANDBY_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 RTC_RST [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_RTC_RST                                               */
  MDR_BKP_REG_63_TMR2_RTC_RST_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_RTC_RST_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_RTC_RST_Enum;

/* =====================================================  RTC_CNT_TMR0  ====================================================== */
/* =====================================================  RTC_DIV_TMR0  ====================================================== */
/* =====================================================  RTC_PRL_TMR0  ====================================================== */
/* =====================================================  RTC_ALRM_TMR0  ===================================================== */
/* ======================================================  RTC_CS_TMR0  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR0 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_OWF                                                   */
  MDR_BKP_RTC_CS_TMR0_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_SECF                                                  */
  MDR_BKP_RTC_CS_TMR0_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR0_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR0 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR0_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR0_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR0_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_WEC                                                   */
  MDR_BKP_RTC_CS_TMR0_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR0_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR0_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR0_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR0_ERR_IE_Enum;

/* =====================================================  RTC_CNT_TMR1  ====================================================== */
/* =====================================================  RTC_DIV_TMR1  ====================================================== */
/* =====================================================  RTC_PRL_TMR1  ====================================================== */
/* =====================================================  RTC_ALRM_TMR1  ===================================================== */
/* ======================================================  RTC_CS_TMR1  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR1 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_OWF                                                   */
  MDR_BKP_RTC_CS_TMR1_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_SECF                                                  */
  MDR_BKP_RTC_CS_TMR1_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR1_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR1 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR1_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR1_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR1_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_WEC                                                   */
  MDR_BKP_RTC_CS_TMR1_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR1_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR1_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR1_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR1_ERR_IE_Enum;

/* =====================================================  RTC_CNT_TMR2  ====================================================== */
/* =====================================================  RTC_DIV_TMR2  ====================================================== */
/* =====================================================  RTC_PRL_TMR2  ====================================================== */
/* =====================================================  RTC_ALRM_TMR2  ===================================================== */
/* ======================================================  RTC_CS_TMR2  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR2 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_OWF                                                   */
  MDR_BKP_RTC_CS_TMR2_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_SECF                                                  */
  MDR_BKP_RTC_CS_TMR2_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR2_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR2 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR2_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR2_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR2_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_WEC                                                   */
  MDR_BKP_RTC_CS_TMR2_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR2_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR2_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR2_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR2_ERR_IE_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* =========================================================  RXTX  ========================================================== */
/* ==============================================  MDR_PORTA RXTX Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Pin_                                                       */
  MDR_PORTA_RXTX_Pin__Low              = 0,     /*!< Low : LOW Level Voltage                                                   */
  MDR_PORTA_RXTX_Pin__High             = 1,     /*!< High : HIGH Level Voltage                                                 */
} MDR_PORTA_RXTX_Pin__Enum;

/* =======================================================  RXTX_Set  ======================================================== */
/* ============================================  MDR_PORTA RXTX_Set Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Set_Pin_                                                   */
  MDR_PORTA_RXTX_Set_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_RXTX_Set_Pin__SET          = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_RXTX_Set_Pin__Enum;

/* ======================================================  RXTX_Clear  ======================================================= */
/* ===========================================  MDR_PORTA RXTX_Clear Pin_ [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Clear_Pin_                                                 */
  MDR_PORTA_RXTX_Clear_Pin__Off        = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_RXTX_Clear_Pin__CLEAR      = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_RXTX_Clear_Pin__Enum;

/* ==========================================================  OE  =========================================================== */
/* ===============================================  MDR_PORTA OE Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_OE_Pin_                                                         */
  MDR_PORTA_OE_Pin__IN                 = 0,     /*!< IN : Input pin                                                            */
  MDR_PORTA_OE_Pin__OUT                = 1,     /*!< OUT : Output pin                                                          */
} MDR_PORTA_OE_Pin__Enum;

/* ========================================================  OE_Set  ========================================================= */
/* =============================================  MDR_PORTA OE_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_OE_Set_Pin_                                                     */
  MDR_PORTA_OE_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_OE_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_OE_Set_Pin__Enum;

/* =======================================================  OE_Clear  ======================================================== */
/* ============================================  MDR_PORTA OE_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_OE_Clear_Pin_                                                   */
  MDR_PORTA_OE_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_OE_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_OE_Clear_Pin__Enum;

/* =========================================================  FUNC0  ========================================================= */
/* ===========================================  MDR_PORTA FUNC0 Func_Pin_ [0..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_FUNC0_Func_Pin_                                                 */
  MDR_PORTA_FUNC0_Func_Pin__PORT       = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC0_Func_Pin__Func_1     = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_2     = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_3     = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_4     = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_5     = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_6     = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_7     = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_8     = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_9     = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_10    = 10,    /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_11    = 11,    /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_12    = 12,    /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_13    = 13,    /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_14    = 14,    /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_15    = 15,    /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC0_Func_Pin__Enum;

/* =========================================================  FUNC1  ========================================================= */
/* ===========================================  MDR_PORTA FUNC1 Func_Pin_ [0..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_FUNC1_Func_Pin_                                                 */
  MDR_PORTA_FUNC1_Func_Pin__PORT       = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC1_Func_Pin__Func_1     = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_2     = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_3     = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_4     = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_5     = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_6     = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_7     = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_8     = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_9     = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_10    = 10,    /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_11    = 11,    /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_12    = 12,    /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_13    = 13,    /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_14    = 14,    /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_15    = 15,    /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC1_Func_Pin__Enum;

/* =========================================================  FUNC2  ========================================================= */
/* ===========================================  MDR_PORTA FUNC2 Func_Pin_ [0..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_FUNC2_Func_Pin_                                                 */
  MDR_PORTA_FUNC2_Func_Pin__PORT       = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC2_Func_Pin__Func_1     = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_2     = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_3     = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_4     = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_5     = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_6     = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_7     = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_8     = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_9     = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_10    = 10,    /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_11    = 11,    /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_12    = 12,    /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_13    = 13,    /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_14    = 14,    /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_15    = 15,    /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC2_Func_Pin__Enum;

/* =========================================================  FUNC3  ========================================================= */
/* ===========================================  MDR_PORTA FUNC3 Func_Pin_ [0..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_FUNC3_Func_Pin_                                                 */
  MDR_PORTA_FUNC3_Func_Pin__PORT       = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC3_Func_Pin__Func_1     = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_2     = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_3     = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_4     = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_5     = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_6     = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_7     = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_8     = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_9     = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_10    = 10,    /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_11    = 11,    /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_12    = 12,    /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_13    = 13,    /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_14    = 14,    /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_15    = 15,    /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC3_Func_Pin__Enum;

/* =======================================================  FUNC0_Set  ======================================================= */
/* =========================================  MDR_PORTA FUNC0_Set Func_Pin_ [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC0_Set_Func_Pin_                                             */
  MDR_PORTA_FUNC0_Set_Func_Pin__PORT   = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_1 = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_2 = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_3 = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_4 = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_5 = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_6 = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_7 = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_8 = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_9 = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_10 = 10,   /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_11 = 11,   /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_12 = 12,   /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_13 = 13,   /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_14 = 14,   /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_15 = 15,   /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC0_Set_Func_Pin__Enum;

/* =======================================================  FUNC1_Set  ======================================================= */
/* =========================================  MDR_PORTA FUNC1_Set Func_Pin_ [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC1_Set_Func_Pin_                                             */
  MDR_PORTA_FUNC1_Set_Func_Pin__PORT   = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_1 = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_2 = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_3 = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_4 = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_5 = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_6 = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_7 = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_8 = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_9 = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_10 = 10,   /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_11 = 11,   /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_12 = 12,   /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_13 = 13,   /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_14 = 14,   /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_15 = 15,   /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC1_Set_Func_Pin__Enum;

/* =======================================================  FUNC2_Set  ======================================================= */
/* =========================================  MDR_PORTA FUNC2_Set Func_Pin_ [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC2_Set_Func_Pin_                                             */
  MDR_PORTA_FUNC2_Set_Func_Pin__PORT   = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_1 = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_2 = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_3 = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_4 = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_5 = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_6 = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_7 = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_8 = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_9 = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_10 = 10,   /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_11 = 11,   /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_12 = 12,   /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_13 = 13,   /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_14 = 14,   /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_15 = 15,   /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC2_Set_Func_Pin__Enum;

/* =======================================================  FUNC3_Set  ======================================================= */
/* =========================================  MDR_PORTA FUNC3_Set Func_Pin_ [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC3_Set_Func_Pin_                                             */
  MDR_PORTA_FUNC3_Set_Func_Pin__PORT   = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_1 = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_2 = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_3 = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_4 = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_5 = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_6 = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_7 = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_8 = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_9 = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_10 = 10,   /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_11 = 11,   /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_12 = 12,   /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_13 = 13,   /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_14 = 14,   /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_15 = 15,   /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC3_Set_Func_Pin__Enum;

/* ======================================================  FUNC0_Clear  ====================================================== */
/* ========================================  MDR_PORTA FUNC0_Clear Func_Pin_ [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_PORTA_FUNC0_Clear_Func_Pin_                                           */
  MDR_PORTA_FUNC0_Clear_Func_Pin__Inactive = 0, /*!< Inactive : No Action                                                      */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_1 = 1,/*!< ClrFunc_1 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_2 = 2,/*!< ClrFunc_2 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_3 = 3,/*!< ClrFunc_3 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_4 = 4,/*!< ClrFunc_4 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_5 = 5,/*!< ClrFunc_5 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_6 = 6,/*!< ClrFunc_6 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_7 = 7,/*!< ClrFunc_7 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_8 = 8,/*!< ClrFunc_8 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_9 = 9,/*!< ClrFunc_9 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_10 = 10,/*!< ClrFunc_10 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_11 = 11,/*!< ClrFunc_11 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_12 = 12,/*!< ClrFunc_12 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_13 = 13,/*!< ClrFunc_13 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_14 = 14,/*!< ClrFunc_14 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClearToPort = 15,/*!< ClearToPort : Set Pin to Port function                                 */
} MDR_PORTA_FUNC0_Clear_Func_Pin__Enum;

/* ======================================================  FUNC1_Clear  ====================================================== */
/* ========================================  MDR_PORTA FUNC1_Clear Func_Pin_ [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_PORTA_FUNC1_Clear_Func_Pin_                                           */
  MDR_PORTA_FUNC1_Clear_Func_Pin__Inactive = 0, /*!< Inactive : No Action                                                      */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_1 = 1,/*!< ClrFunc_1 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_2 = 2,/*!< ClrFunc_2 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_3 = 3,/*!< ClrFunc_3 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_4 = 4,/*!< ClrFunc_4 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_5 = 5,/*!< ClrFunc_5 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_6 = 6,/*!< ClrFunc_6 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_7 = 7,/*!< ClrFunc_7 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_8 = 8,/*!< ClrFunc_8 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_9 = 9,/*!< ClrFunc_9 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_10 = 10,/*!< ClrFunc_10 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_11 = 11,/*!< ClrFunc_11 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_12 = 12,/*!< ClrFunc_12 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_13 = 13,/*!< ClrFunc_13 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_14 = 14,/*!< ClrFunc_14 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClearToPort = 15,/*!< ClearToPort : Set Pin to Port function                                 */
} MDR_PORTA_FUNC1_Clear_Func_Pin__Enum;

/* ======================================================  FUNC2_Clear  ====================================================== */
/* ========================================  MDR_PORTA FUNC2_Clear Func_Pin_ [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_PORTA_FUNC2_Clear_Func_Pin_                                           */
  MDR_PORTA_FUNC2_Clear_Func_Pin__Inactive = 0, /*!< Inactive : No Action                                                      */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_1 = 1,/*!< ClrFunc_1 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_2 = 2,/*!< ClrFunc_2 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_3 = 3,/*!< ClrFunc_3 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_4 = 4,/*!< ClrFunc_4 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_5 = 5,/*!< ClrFunc_5 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_6 = 6,/*!< ClrFunc_6 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_7 = 7,/*!< ClrFunc_7 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_8 = 8,/*!< ClrFunc_8 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_9 = 9,/*!< ClrFunc_9 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_10 = 10,/*!< ClrFunc_10 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_11 = 11,/*!< ClrFunc_11 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_12 = 12,/*!< ClrFunc_12 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_13 = 13,/*!< ClrFunc_13 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_14 = 14,/*!< ClrFunc_14 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClearToPort = 15,/*!< ClearToPort : Set Pin to Port function                                 */
} MDR_PORTA_FUNC2_Clear_Func_Pin__Enum;

/* ======================================================  FUNC3_Clear  ====================================================== */
/* ========================================  MDR_PORTA FUNC3_Clear Func_Pin_ [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_PORTA_FUNC3_Clear_Func_Pin_                                           */
  MDR_PORTA_FUNC3_Clear_Func_Pin__Inactive = 0, /*!< Inactive : No Action                                                      */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_1 = 1,/*!< ClrFunc_1 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_2 = 2,/*!< ClrFunc_2 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_3 = 3,/*!< ClrFunc_3 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_4 = 4,/*!< ClrFunc_4 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_5 = 5,/*!< ClrFunc_5 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_6 = 6,/*!< ClrFunc_6 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_7 = 7,/*!< ClrFunc_7 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_8 = 8,/*!< ClrFunc_8 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_9 = 9,/*!< ClrFunc_9 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_10 = 10,/*!< ClrFunc_10 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_11 = 11,/*!< ClrFunc_11 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_12 = 12,/*!< ClrFunc_12 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_13 = 13,/*!< ClrFunc_13 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_14 = 14,/*!< ClrFunc_14 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClearToPort = 15,/*!< ClearToPort : Set Pin to Port function                                 */
} MDR_PORTA_FUNC3_Clear_Func_Pin__Enum;

/* ========================================================  ANALOG  ========================================================= */
/* =============================================  MDR_PORTA ANALOG Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Pin_                                                     */
  MDR_PORTA_ANALOG_Pin__Analog         = 0,     /*!< Analog : Pin Analog signal                                                */
  MDR_PORTA_ANALOG_Pin__Digital        = 1,     /*!< Digital : Pin Digital signal                                              */
} MDR_PORTA_ANALOG_Pin__Enum;

/* ======================================================  ANALOG_Set  ======================================================= */
/* ===========================================  MDR_PORTA ANALOG_Set Pin_ [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Set_Pin_                                                 */
  MDR_PORTA_ANALOG_Set_Pin__Off        = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_ANALOG_Set_Pin__SET        = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_ANALOG_Set_Pin__Enum;

/* =====================================================  ANALOG_Clear  ====================================================== */
/* ==========================================  MDR_PORTA ANALOG_Clear Pin_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Clear_Pin_                                               */
  MDR_PORTA_ANALOG_Clear_Pin__Off      = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_ANALOG_Clear_Pin__CLEAR    = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_ANALOG_Clear_Pin__Enum;

/* ========================================================  PULLUP  ========================================================= */
/* =============================================  MDR_PORTA PULLUP Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_PULLUP_Pin_                                                     */
  MDR_PORTA_PULLUP_Pin__Off            = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULLUP_Pin__UP             = 1,     /*!< UP : Pin pulled up to VDD                                                 */
} MDR_PORTA_PULLUP_Pin__Enum;

/* ======================================================  PULLUP_Set  ======================================================= */
/* ===========================================  MDR_PORTA PULLUP_Set Pin_ [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULLUP_Set_Pin_                                                 */
  MDR_PORTA_PULLUP_Set_Pin__Off        = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PULLUP_Set_Pin__SET        = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_PULLUP_Set_Pin__Enum;

/* =====================================================  PULLUP_Clear  ====================================================== */
/* ==========================================  MDR_PORTA PULLUP_Clear Pin_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULLUP_Clear_Pin_                                               */
  MDR_PORTA_PULLUP_Clear_Pin__Off      = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PULLUP_Clear_Pin__CLEAR    = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_PULLUP_Clear_Pin__Enum;

/* =======================================================  PULLDOWN  ======================================================== */
/* ============================================  MDR_PORTA PULLDOWN Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_PULLDOWN_Pin_                                                   */
  MDR_PORTA_PULLDOWN_Pin__Off          = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULLDOWN_Pin__DOWN         = 1,     /*!< DOWN : Pin pulled up to GND                                               */
} MDR_PORTA_PULLDOWN_Pin__Enum;

/* =====================================================  PULLDOWN_Set  ====================================================== */
/* ==========================================  MDR_PORTA PULLDOWN_Set Pin_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULLDOWN_Set_Pin_                                               */
  MDR_PORTA_PULLDOWN_Set_Pin__Off      = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PULLDOWN_Set_Pin__SET      = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_PULLDOWN_Set_Pin__Enum;

/* ====================================================  PULLDOWN_Clear  ===================================================== */
/* =========================================  MDR_PORTA PULLDOWN_Clear Pin_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULLDOWN_Clear_Pin_                                             */
  MDR_PORTA_PULLDOWN_Clear_Pin__Off    = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PULLDOWN_Clear_Pin__CLEAR  = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_PULLDOWN_Clear_Pin__Enum;

/* ==========================================================  PD  =========================================================== */
/* ===============================================  MDR_PORTA PD Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Pin_                                                         */
  MDR_PORTA_PD_Pin__Driver             = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Pin__OpenDrain          = 1,     /*!< OpenDrain : Drain Pulled Up Line                                          */
} MDR_PORTA_PD_Pin__Enum;

/* ========================================================  PD_Set  ========================================================= */
/* =============================================  MDR_PORTA PD_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Set_Pin_                                                     */
  MDR_PORTA_PD_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PD_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_PD_Set_Pin__Enum;

/* =======================================================  PD_Clear  ======================================================== */
/* ============================================  MDR_PORTA PD_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_PD_Clear_Pin_                                                   */
  MDR_PORTA_PD_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PD_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_PD_Clear_Pin__Enum;

/* =========================================================  PWR0  ========================================================== */
/* ==============================================  MDR_PORTA PWR0 Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_PWR0_Pin_                                                       */
  MDR_PORTA_PWR0_Pin__Off              = 0,     /*!< Off : Level switch disabled                                               */
  MDR_PORTA_PWR0_Pin__Slow             = 1,     /*!< Slow : Front ~300ns                                                       */
  MDR_PORTA_PWR0_Pin__Fast             = 2,     /*!< Fast : Front ~100ns                                                       */
  MDR_PORTA_PWR0_Pin__MaxFast          = 3,     /*!< MaxFast : Front ~10ns                                                     */
} MDR_PORTA_PWR0_Pin__Enum;

/* =========================================================  PWR1  ========================================================== */
/* ==============================================  MDR_PORTA PWR1 Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_PWR1_Pin_                                                       */
  MDR_PORTA_PWR1_Pin__Off              = 0,     /*!< Off : Level switch disabled                                               */
  MDR_PORTA_PWR1_Pin__Slow             = 1,     /*!< Slow : Front ~300ns                                                       */
  MDR_PORTA_PWR1_Pin__Fast             = 2,     /*!< Fast : Front ~100ns                                                       */
  MDR_PORTA_PWR1_Pin__MaxFast          = 3,     /*!< MaxFast : Front ~10ns                                                     */
} MDR_PORTA_PWR1_Pin__Enum;

/* =======================================================  PWR0_Set  ======================================================== */
/* ============================================  MDR_PORTA PWR0_Set Pin_ [0..1]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_PWR0_Set_Pin_                                                   */
  MDR_PORTA_PWR0_Set_Pin__Off          = 0,     /*!< Off : Level switch disabled                                               */
  MDR_PORTA_PWR0_Set_Pin__Slow         = 1,     /*!< Slow : Front ~300ns                                                       */
  MDR_PORTA_PWR0_Set_Pin__Fast         = 2,     /*!< Fast : Front ~100ns                                                       */
  MDR_PORTA_PWR0_Set_Pin__MaxFast      = 3,     /*!< MaxFast : Front ~10ns                                                     */
} MDR_PORTA_PWR0_Set_Pin__Enum;

/* =======================================================  PWR1_Set  ======================================================== */
/* ============================================  MDR_PORTA PWR1_Set Pin_ [0..1]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_PWR1_Set_Pin_                                                   */
  MDR_PORTA_PWR1_Set_Pin__Off          = 0,     /*!< Off : Level switch disabled                                               */
  MDR_PORTA_PWR1_Set_Pin__Slow         = 1,     /*!< Slow : Front ~300ns                                                       */
  MDR_PORTA_PWR1_Set_Pin__Fast         = 2,     /*!< Fast : Front ~100ns                                                       */
  MDR_PORTA_PWR1_Set_Pin__MaxFast      = 3,     /*!< MaxFast : Front ~10ns                                                     */
} MDR_PORTA_PWR1_Set_Pin__Enum;

/* ======================================================  PWR0_Clear  ======================================================= */
/* ===========================================  MDR_PORTA PWR0_Clear Pin_ [0..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PWR0_Clear_Pin_                                                 */
  MDR_PORTA_PWR0_Clear_Pin__Inactive   = 0,     /*!< Inactive : No action                                                      */
  MDR_PORTA_PWR0_Clear_Pin__ClrSlow    = 1,     /*!< ClrSlow : Front ~300ns                                                    */
  MDR_PORTA_PWR0_Clear_Pin__ClrFast    = 2,     /*!< ClrFast : Front ~100ns                                                    */
  MDR_PORTA_PWR0_Clear_Pin__ClrToOff   = 3,     /*!< ClrToOff : Pin Power Off                                                  */
} MDR_PORTA_PWR0_Clear_Pin__Enum;

/* ======================================================  PWR1_Clear  ======================================================= */
/* ===========================================  MDR_PORTA PWR1_Clear Pin_ [0..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PWR1_Clear_Pin_                                                 */
  MDR_PORTA_PWR1_Clear_Pin__Inactive   = 0,     /*!< Inactive : No action                                                      */
  MDR_PORTA_PWR1_Clear_Pin__ClrSlow    = 1,     /*!< ClrSlow : Front ~300ns                                                    */
  MDR_PORTA_PWR1_Clear_Pin__ClrFast    = 2,     /*!< ClrFast : Front ~100ns                                                    */
  MDR_PORTA_PWR1_Clear_Pin__ClrToOff   = 3,     /*!< ClrToOff : Pin Power Off                                                  */
} MDR_PORTA_PWR1_Clear_Pin__Enum;

/* ==========================================================  CL  =========================================================== */
/* ===============================================  MDR_PORTA CL Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_CL_Pin_                                                         */
  MDR_PORTA_CL_Pin__Off                = 0,     /*!< Off : Disable                                                             */
  MDR_PORTA_CL_Pin__On                 = 1,     /*!< On : Enable                                                               */
} MDR_PORTA_CL_Pin__Enum;

/* ========================================================  CL_Set  ========================================================= */
/* =============================================  MDR_PORTA CL_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_CL_Set_Pin_                                                     */
  MDR_PORTA_CL_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_CL_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_CL_Set_Pin__Enum;

/* =======================================================  CL_Clear  ======================================================== */
/* ============================================  MDR_PORTA CL_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_CL_Clear_Pin_                                                   */
  MDR_PORTA_CL_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_CL_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_CL_Clear_Pin__Enum;

/* ==========================================================  IE  =========================================================== */
/* ===============================================  MDR_PORTA IE Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_IE_Pin_                                                         */
  MDR_PORTA_IE_Pin__Off                = 0,     /*!< Off : IRQ disabled                                                        */
  MDR_PORTA_IE_Pin__On                 = 1,     /*!< On : IRQ enable                                                           */
} MDR_PORTA_IE_Pin__Enum;

/* ========================================================  IE_Set  ========================================================= */
/* =============================================  MDR_PORTA IE_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_IE_Set_Pin_                                                     */
  MDR_PORTA_IE_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IE_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_IE_Set_Pin__Enum;

/* =======================================================  IE_Clear  ======================================================== */
/* ============================================  MDR_PORTA IE_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_IE_Clear_Pin_                                                   */
  MDR_PORTA_IE_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IE_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_IE_Clear_Pin__Enum;

/* ==========================================================  IT  =========================================================== */
/* ===============================================  MDR_PORTA IT Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_IT_Pin_                                                         */
  MDR_PORTA_IT_Pin__Low                = 0,     /*!< Low : IRQ by low level                                                    */
  MDR_PORTA_IT_Pin__HIGH               = 1,     /*!< HIGH : IRQ by High level                                                  */
} MDR_PORTA_IT_Pin__Enum;

/* ========================================================  IT_Set  ========================================================= */
/* =============================================  MDR_PORTA IT_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_IT_Set_Pin_                                                     */
  MDR_PORTA_IT_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IT_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_IT_Set_Pin__Enum;

/* =======================================================  IT_Clear  ======================================================== */
/* ============================================  MDR_PORTA IT_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_IT_Clear_Pin_                                                   */
  MDR_PORTA_IT_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IT_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_IT_Clear_Pin__Enum;

/* ==========================================================  IR  =========================================================== */
/* ===============================================  MDR_PORTA IR Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_IR_Pin_                                                         */
  MDR_PORTA_IR_Pin__Off                = 0,     /*!< Off : Inactive IRQ request                                                */
  MDR_PORTA_IR_Pin__On                 = 1,     /*!< On : Active IRQ request                                                   */
} MDR_PORTA_IR_Pin__Enum;

/* ========================================================  IR_Set  ========================================================= */
/* =============================================  MDR_PORTA IR_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_IR_Set_Pin_                                                     */
  MDR_PORTA_IR_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IR_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_IR_Set_Pin__Enum;

/* =======================================================  IR_Clear  ======================================================== */
/* ============================================  MDR_PORTA IR_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_IR_Clear_Pin_                                                   */
  MDR_PORTA_IR_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IR_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_IR_Clear_Pin__Enum;

/* =========================================================  HCUR  ========================================================== */
/* ==============================================  MDR_PORTA HCUR Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_HCUR_Pin_                                                       */
  MDR_PORTA_HCUR_Pin__Off              = 0,     /*!< Off : Overcurrent is inactive                                             */
  MDR_PORTA_HCUR_Pin__On               = 1,     /*!< On : Overcurrent is active                                                */
} MDR_PORTA_HCUR_Pin__Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* MDR1923VK014_H */


/** @} */ /* End of group MDR1923VK014 */

/** @} */ /* End of group Milandr */
