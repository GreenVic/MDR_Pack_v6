/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     MDR1986VE1.h
 * @brief    CMSIS HeaderFile
 * @version  2.0
 * @date     19. August 2019
 * @note     Generated by SVDConv V3.3.18 on Monday, 19.08.2019 10:21:18
 *           from File '../_src/MDR1986VE1.svd',
 *           last modified on Monday, 19.08.2019 07:21:13
 */



/** @addtogroup Milandr
  * @{
  */


/** @addtogroup MDR1986VE1
  * @{
  */


#ifndef MDR1986VE1_H
#define MDR1986VE1_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M1 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  MDR1986VE1 Specific Interrupt Numbers  ========================================= */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M1 Processor and Core Peripherals  =========================== */
#define __CM1_REV                 0x0100U       /*!< CM1 Core Revision                                                         */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm1.h"                           /*!< ARM Cortex-M1 processor and core peripherals                              */
#include "system_MDR1986VE1.h"                  /*!< MDR1986VE1 System                                                         */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief EEPROM Control (MDR_EEPROM)
  */

typedef struct {                                /*!< (@ 0x40018000) MDR_EEPROM Structure                                       */
  
  union {
    __IOM uint32_t CMD;                         /*!< (@ 0x00000000) EEPROM Control register                                    */
    
    struct {
      __IOM uint32_t CON        : 1;            /*!< [0..0] Enable memory access through EEPROM controller                     */
      __IOM uint32_t WR         : 1;            /*!< [1..1] Write operation (test bit)                                         */
      __IOM uint32_t RD         : 1;            /*!< [2..2] Read operation, (test bit)                                         */
      __IOM uint32_t DELAY      : 3;            /*!< [5..3] Memory access CPU delay tacts                                      */
      __IOM uint32_t XE         : 1;            /*!< [6..6] Enable ADDR[16..9]                                                 */
      __IOM uint32_t YE         : 1;            /*!< [7..7] Enable ADDR[8..2]                                                  */
      __IOM uint32_t SE         : 1;            /*!< [8..8] RD Amplifier enable                                                */
      __IOM uint32_t IFREN      : 1;            /*!< [9..9] Select main or info memory                                         */
      __IOM uint32_t ERASE      : 1;            /*!< [10..10] Erase string at ADDR[16:0]                                       */
      __IOM uint32_t MAS1       : 1;            /*!< [11..11] Erase whole block with ERASE                                     */
      __IOM uint32_t PROG       : 1;            /*!< [12..12] Programm EEPROM_DI to ADDR[16:0]                                 */
      __IOM uint32_t NVSTR      : 1;            /*!< [13..13] Memory access mode                                               */
    } CMD_b;
  } ;
  __IOM uint32_t  ADDR;                         /*!< (@ 0x00000004) Address register                                           */
  __IOM uint32_t  DI;                           /*!< (@ 0x00000008) Write data register                                        */
  __IOM uint32_t  DO;                           /*!< (@ 0x0000000C) Read data register                                         */
  __IOM uint32_t  KEY;                          /*!< (@ 0x00000010) Unlock block register                                      */
} MDR_EEPROM_Type;                              /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLock Control (MDR_RST_CLOCK)
  */

typedef struct {                                /*!< (@ 0x40020000) MDR_RST_CLOCK Structure                                    */
  
  union {
    __IM  uint32_t CLOCK_STATUS;                /*!< (@ 0x00000000) Clock Status Register                                      */
    
    struct {
      __IM  uint32_t PLL_USB_RDY : 1;           /*!< [0..0] PLL USP ready                                                      */
      __IM  uint32_t PLL_CPU_RDY : 1;           /*!< [1..1] PLL CPU ready                                                      */
      __IM  uint32_t HSE_RDY    : 1;            /*!< [2..2] HSE generator ready                                                */
      __IM  uint32_t HSE2_RDY   : 1;            /*!< [3..3] HSE2 generator ready                                               */
    } CLOCK_STATUS_b;
  } ;
  
  union {
    __IOM uint32_t PLL_CONTROL;                 /*!< (@ 0x00000004) PLL Control Register                                       */
    
    struct {
      __IOM uint32_t PLL_USB_ON : 1;            /*!< [0..0] PLL USB Enable                                                     */
      __IOM uint32_t PLL_USB_PLD : 1;           /*!< [1..1] PLL USB Restart                                                    */
      __IOM uint32_t PLL_CPU_ON : 1;            /*!< [2..2] PLL CPU Enable                                                     */
      __IOM uint32_t PLL_CPU_PLD : 1;           /*!< [3..3] PLL CPU Restart                                                    */
      __IOM uint32_t PLL_USB_MUL : 4;           /*!< [7..4] PLL USB Mul, [x1 .. x16]                                           */
      __IOM uint32_t PLL_CPU_MUL : 4;           /*!< [11..8] PLL CPU Mul, [x1 .. x16]                                          */
    } PLL_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t HS_CONTROL;                  /*!< (@ 0x00000008) HSE Generator Control                                      */
    
    struct {
      __IOM uint32_t HSE_ON     : 1;            /*!< [0..0] HSE Enable                                                         */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [1..1] HSE Bypass Mode                                                    */
      __IOM uint32_t HSE2_ON    : 1;            /*!< [2..2] HSE2 Enable                                                        */
      __IOM uint32_t HSE2_BYP   : 1;            /*!< [3..3] HSE2 Bypass Mode                                                   */
    } HS_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CLOCK;                   /*!< (@ 0x0000000C) CPU Clock Control                                          */
    
    struct {
      __IOM uint32_t CPU_C1_SEL : 2;            /*!< [1..0] CPU_C1 mux freq select                                             */
      __IOM uint32_t CPU_C2_SEL : 1;            /*!< [2..2] CPU_C2 mux freq select                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CPU_C3_SEL : 4;            /*!< [7..4] CPU_C2 mux output freq devider, [/1, /2, /4 .. /256]               */
      __IOM uint32_t HCLK_SEL   : 2;            /*!< [9..8] Select Clock for CPU                                               */
    } CPU_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t USB_CLOCK;                   /*!< (@ 0x00000010) USB Clock Control                                          */
    
    struct {
      __IOM uint32_t USB_C1_SEL : 2;            /*!< [1..0] USB_C1 mux freq select                                             */
      __IOM uint32_t USB_C2_SEL : 1;            /*!< [2..2] USB_C2 mux freq select                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t USB_C3_SEL : 1;            /*!< [4..4] USB_C3 Input Select                                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t USB_EN     : 1;            /*!< [8..8] USB Clock Enable                                                   */
    } USB_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t ADC_CLOCK;                   /*!< (@ 0x00000014) ADC Clock Control                                          */
    
    struct {
      __IOM uint32_t ADC_C1_SEL : 2;            /*!< [1..0] ADC_C1 mux freq select                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADC_C2_SEL : 2;            /*!< [5..4] ADC_C2 mux freq select                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADC_C3_SEL : 4;            /*!< [11..8] ADC_C2 mux output freq devider, [/1, /2, /4 .. /256]              */
      __IM  uint32_t            : 1;
      __IOM uint32_t ADC_CLK_EN : 1;            /*!< [13..13] ADC Clock Enable                                                 */
    } ADC_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CLOCK;                   /*!< (@ 0x00000018) RTC Clock Control                                          */
    
    struct {
      __IOM uint32_t HSE_SEL    : 4;            /*!< [3..0] RTC HSE freq devider, [/1, /2, /4 .. /256]                         */
      __IOM uint32_t HSI_SEL    : 4;            /*!< [7..4] RTC HSI freq devider, [/1, /2, /4 .. /256]                         */
      __IOM uint32_t HSE_RTC_EN : 1;            /*!< [8..8] RTC HSE Clock enable                                               */
      __IOM uint32_t HSI_RTC_EN : 1;            /*!< [9..9] RTC HSI Clock enable                                               */
    } RTC_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t PER_CLOCK;                   /*!< (@ 0x0000001C) Peripherials Clock Control                                 */
    
    struct {
      __IOM uint32_t CAN1_CLK_EN : 1;           /*!< [0..0] CAN1 Clock Enable                                                  */
      __IOM uint32_t CAN2_CLK_EN : 1;           /*!< [1..1] CAN2 Clock Enable                                                  */
      __IOM uint32_t USB_CLK_EN : 1;            /*!< [2..2] USB Clock Enable                                                   */
      __IOM uint32_t EEPROM_CLK_EN : 1;         /*!< [3..3] EEPROM Controller Clock Enable                                     */
      __IOM uint32_t RST_CLK_EN : 1;            /*!< [4..4] RST Clock Enable                                                   */
      __IOM uint32_t DMA_CLK_EN : 1;            /*!< [5..5] DMA Clock Enable                                                   */
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [6..6] UART1 Clock Enable                                                 */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [7..7] UART2 Clock Enable                                                 */
      __IOM uint32_t SPI1_CLK_EN : 1;           /*!< [8..8] SPI1 Clock Enable                                                  */
      __IOM uint32_t MIL1_CLK_EN : 1;           /*!< [9..9] MIL1 Clock Enable                                                  */
      __IOM uint32_t MIL2_CLK_EN : 1;           /*!< [10..10] MIL2 Clock Enable                                                */
      __IOM uint32_t PWR_CLK_EN : 1;            /*!< [11..11] Power Clock Enable                                               */
      __IOM uint32_t WWDT_CLK_EN : 1;           /*!< [12..12] WWDT Clock Enable                                                */
      __IOM uint32_t IWDT_CLK_EN : 1;           /*!< [13..13] IWDT Clock Enable                                                */
      __IOM uint32_t TIMER1_CLK_EN : 1;         /*!< [14..14] TIMER1 Clock Enable                                              */
      __IOM uint32_t TIMER2_CLK_EN : 1;         /*!< [15..15] TIMER2 Clock Enable                                              */
      __IOM uint32_t TIMER3_CLK_EN : 1;         /*!< [16..16] TIMER3 Clock Enable                                              */
      __IOM uint32_t ADC_CLK_EN : 1;            /*!< [17..17] ADC Clock Enable                                                 */
      __IOM uint32_t DAC_CLK_EN : 1;            /*!< [18..18] DAC Clock Enable                                                 */
      __IOM uint32_t TIMER4_CLK_EN : 1;         /*!< [19..19] TIMER4 Clock Enable                                              */
      __IOM uint32_t SPI2_CLK_EN : 1;           /*!< [20..20] SPI2 Clock Enable                                                */
      __IOM uint32_t PORTA_CLK_EN : 1;          /*!< [21..21] GPIO PORT_A Clock Enable                                         */
      __IOM uint32_t PORTB_CLK_EN : 1;          /*!< [22..22] GPIO PORT_B Clock Enable                                         */
      __IOM uint32_t PORTC_CLK_EN : 1;          /*!< [23..23] GPIO PORT_C Clock Enable                                         */
      __IOM uint32_t PORTD_CLK_EN : 1;          /*!< [24..24] GPIO PORT_D Clock Enable                                         */
      __IOM uint32_t PORTE_CLK_EN : 1;          /*!< [25..25] GPIO PORT_E Clock Enable                                         */
      __IOM uint32_t ARINC_RX_CLK_EN : 1;       /*!< [26..26] ARINC_RX Clock Enable                                            */
      __IOM uint32_t BKP_CLK_EN : 1;            /*!< [27..27] Backup Clock Enable                                              */
      __IOM uint32_t ARINC_TX_CLK_EN : 1;       /*!< [28..28] ARINC_TX Clock Enable                                            */
      __IOM uint32_t PORTF_CLK_EN : 1;          /*!< [29..29] GPIO PORT_F Clock Enable                                         */
      __IOM uint32_t EBC_CLK_EN : 1;            /*!< [30..30] External Bus Clock Enable                                        */
      __IOM uint32_t SPI3_CLK_EN : 1;           /*!< [31..31] SPI3 Clock Enable                                                */
    } PER_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t CAN_CLOCK;                   /*!< (@ 0x00000020) CAN's Clock Control                                        */
    
    struct {
      __IOM uint32_t CAN1_BRG   : 3;            /*!< [2..0] HCLK divider to get CAN1_CLOCK, [/1, /2, /4 .. /128]               */
      __IM  uint32_t            : 5;
      __IOM uint32_t CAN2_BRG   : 3;            /*!< [10..8] HCLK freq divider to get CAN2_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 13;
      __IOM uint32_t CAN1_CLK_EN : 1;           /*!< [24..24] CAN1_CLOCK enable                                                */
      __IOM uint32_t CAN2_CLK_EN : 1;           /*!< [25..25] CAN2_CLOCK enable                                                */
    } CAN_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t TIM_CLOCK;                   /*!< (@ 0x00000024) Timer's Clock Control                                      */
    
    struct {
      __IOM uint32_t TIM1_BRG   : 3;            /*!< [2..0] HCLK freq divider to get TIM1_CLOCK, [/1, /2, /4 .. /128]          */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM2_BRG   : 3;            /*!< [10..8] HCLK freq divider to get TIM2_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM3_BRG   : 3;            /*!< [18..16] HCLK freq divider to get TIM3_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM1_CLK_EN : 1;           /*!< [24..24] TIM1_CLOCK enable                                                */
      __IOM uint32_t TIM2_CLK_EN : 1;           /*!< [25..25] TIM2_CLOCK enable                                                */
      __IOM uint32_t TIM3_CLK_EN : 1;           /*!< [26..26] TIM3_CLOCK enable                                                */
    } TIM_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t UART_CLOCK;                  /*!< (@ 0x00000028) UART's Clock Control                                       */
    
    struct {
      __IOM uint32_t UART1_BRG  : 3;            /*!< [2..0] HCLK freq divider to get UART1_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t UART2_BRG  : 3;            /*!< [10..8] HCLK freq divider to get UART2_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM4_BRG   : 3;            /*!< [18..16] HCLK freq divider to get TIM4_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [24..24] UART1_CLOCK enable                                               */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [25..25] UART2_CLOCK enable                                               */
      __IOM uint32_t TIM4_CLK_EN : 1;           /*!< [26..26] TIM4_CLOCK enable                                                */
    } UART_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t SSP_CLOCK;                   /*!< (@ 0x0000002C) SSP's Clock Control                                        */
    
    struct {
      __IOM uint32_t SSP1_BRG   : 3;            /*!< [2..0] HCLK freq divider to get SSP1_CLOCK, [/1, /2, /4 .. /128]          */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSP2_BRG   : 3;            /*!< [10..8] HCLK freq divider to get SSP2_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSP3_BRG   : 3;            /*!< [18..16] HCLK freq divider to get SSP3_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSP1_CLK_EN : 1;           /*!< [24..24] SSP1_CLOCK Enable                                                */
      __IOM uint32_t SSP2_CLK_EN : 1;           /*!< [25..25] SSP2_CLOCK Enable                                                */
      __IOM uint32_t SSP3_CLK_EN : 1;           /*!< [26..26] SSP3_CLOCK Enable                                                */
    } SSP_CLOCK_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ETH_CLOCK;                   /*!< (@ 0x00000034) Ethernet and MIL Clock Control                             */
    
    struct {
      __IOM uint32_t ETH_BRG    : 8;            /*!< [7..0] Always set to 0!                                                   */
      __IOM uint32_t MIL_BRG    : 3;            /*!< [10..8] HCLK freq divider to get MAN_CLOCK, [/1, /2, /4 .. /128]          */
      __IM  uint32_t            : 5;
      __IOM uint32_t PHY_BRG    : 3;            /*!< [18..16] HCLK freq divider to get PHY_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t ETH_CLK_EN : 1;            /*!< [24..24] Ethernet MAC Clock Enable                                        */
      __IOM uint32_t MIL_CLK_EN : 1;            /*!< [25..25] MIL-STD CLOCK Enable                                             */
      __IOM uint32_t SLEEP      : 1;            /*!< [26..26] Switch to Sleep mode                                             */
      __IOM uint32_t PHY_CLK_EN : 1;            /*!< [27..27] Ethernet PHY CLOCK Enable                                        */
      __IOM uint32_t PHY_CLK_SEL : 2;           /*!< [29..28] Ethernet PHY CLOCK Select                                        */
    } ETH_CLOCK_b;
  } ;
} MDR_RST_CLOCK_Type;                           /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                          MDR_DMA                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controler (MDR_DMA)
  */

typedef struct {                                /*!< (@ 0x40028000) MDR_DMA Structure                                          */
  
  union {
    __IM  uint32_t STATUS;                      /*!< (@ 0x00000000) Status register                                            */
    
    struct {
      __IM  uint32_t Enable     : 1;            /*!< [0..0] Enable block                                                       */
      __IM  uint32_t            : 3;
      __IM  uint32_t State      : 4;            /*!< [7..4] Active Operation                                                   */
      __IM  uint32_t            : 8;
      __IM  uint32_t Chnls_minus1 : 5;          /*!< [20..16] Channels count                                                   */
      __IM  uint32_t            : 7;
      __IM  uint32_t test_status : 1;           /*!< [28..28] Test logic availability                                          */
    } STATUS_b;
  } ;
  
  union {
    __OM  uint32_t CFG;                         /*!< (@ 0x00000004) Config register                                            */
    
    struct {
      __OM  uint32_t Enable     : 1;            /*!< [0..0] Enable block                                                       */
      __IM  uint32_t            : 4;
      __OM  uint32_t Privileged : 1;            /*!< [5..5] Privileged AHB bus priority                                        */
      __OM  uint32_t Bufferable : 1;            /*!< [6..6] Bufferable AHB bus priority                                        */
      __OM  uint32_t Cachable   : 1;            /*!< [7..7] Cachable AHB bus priority                                          */
    } CFG_b;
  } ;
  
  union {
    __IOM uint32_t CTRL_BASE_PTR;               /*!< (@ 0x00000008) Channel control data base pointer                          */
    
    struct {
      __IM  uint32_t            : 10;
      __IOM uint32_t Addr_Hi    : 22;           /*!< [31..10] Pointer                                                          */
    } CTRL_BASE_PTR_b;
  } ;
  
  union {
    __IM  uint32_t ALT_CTRL_BASE_PTR;           /*!< (@ 0x0000000C) Channel alternate control data base pointer                */
    
    struct {
      __IM  uint32_t Addr       : 32;           /*!< [31..0] Pointer                                                           */
    } ALT_CTRL_BASE_PTR_b;
  } ;
  
  union {
    __IM  uint32_t WAITONREQ_STATUS;            /*!< (@ 0x00000010) Channel wait on request status                             */
    
    struct {
      __IM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } WAITONREQ_STATUS_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_SW_REQUEST;             /*!< (@ 0x00000014) Channel Software Request                                   */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_SW_REQUEST_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_USEBURST_SET;           /*!< (@ 0x00000018) Disable SREQ requests                                      */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_USEBURST_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_USEBURST_CLR;           /*!< (@ 0x0000001C) Enable SREQ requests                                       */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_USEBURST_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_REQ_MASK_SET;           /*!< (@ 0x00000020) Disable channel processing                                 */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_REQ_MASK_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_REQ_MASK_CLR;           /*!< (@ 0x00000024) Enable channel processing                                  */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_REQ_MASK_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_ENABLE_SET;             /*!< (@ 0x00000028) Start Channel                                              */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_ENABLE_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_ENABLE_CLR;             /*!< (@ 0x0000002C) Stop Channel                                               */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_ENABLE_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_PRI_ALT_SET;            /*!< (@ 0x00000030) Select Alter Structure                                     */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_PRI_ALT_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_PRI_ALT_CLR;            /*!< (@ 0x00000034) Select Primary Structure                                   */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_PRI_ALT_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_PRIORITY_SET;           /*!< (@ 0x00000038) Rise up priority to High                                   */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_PRIORITY_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_PRIORITY_CLR;           /*!< (@ 0x0000003C) Clear Priority to Normal                                   */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_PRIORITY_CLR_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t ERR_CLR;                     /*!< (@ 0x0000004C) AHB-Lite bus error clear                                   */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } ERR_CLR_b;
  } ;
} MDR_DMA_Type;                                 /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                         MDR_Power                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Detector (MDR_Power)
  */

typedef struct {                                /*!< (@ 0x40058000) MDR_Power Structure                                        */
  
  union {
    __IOM uint32_t PVDCS;                       /*!< (@ 0x00000000) Control-Status register                                    */
    
    struct {
      __IOM uint32_t PVDEN      : 1;            /*!< [0..0] Enable Ucc detector                                                */
      __IOM uint32_t PBLS       : 2;            /*!< [2..1] BUcc compare level                                                 */
      __IOM uint32_t PLS        : 3;            /*!< [5..3] Ucc compare level                                                  */
      __IOM uint32_t PVBD       : 1;            /*!< [6..6] Event on BUcc gt PBLS                                              */
      __IOM uint32_t PVD        : 1;            /*!< [7..7] Event on Ucc gt PLS                                                */
      __IOM uint32_t IEPVBD     : 1;            /*!< [8..8] Enable IRQ by PVBD event                                           */
      __IOM uint32_t IEPVD      : 1;            /*!< [9..9] Enable IRQ by PVD event                                            */
      __IOM uint32_t INVB       : 1;            /*!< [10..10] PVBD event on BUcc lt PBLS                                       */
      __IOM uint32_t INV        : 1;            /*!< [11..11] PVD event on BUcc lt PBLS                                        */
      __IOM uint32_t PVDBEN     : 1;            /*!< [12..12] Enable BUcc detector                                             */
    } PVDCS_b;
  } ;
  
  union {
    __IM  uint32_t ResReg;                      /*!< (@ 0x00000004) Reserved register                                          */
    
    struct {
      __IM  uint32_t Value      : 32;           /*!< [31..0] blank                                                             */
    } ResReg_b;
  } ;
} MDR_Power_Type;                               /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                         MDR_WWDT                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Window Watchdog Timer (MDR_WWDT)
  */

typedef struct {                                /*!< (@ 0x40060000) MDR_WWDT Structure                                         */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) WWDT Control register                                      */
    
    struct {
      __IOM uint32_t T          : 7;            /*!< [6..0] Counter                                                            */
      __IOM uint32_t WDGA       : 1;            /*!< [7..7] Enable                                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t CFR;                         /*!< (@ 0x00000004) WWDT Config register                                       */
    
    struct {
      __IOM uint32_t W          : 7;            /*!< [6..0] Window value                                                       */
      __IOM uint32_t WGTB       : 2;            /*!< [8..7] Clock Divider                                                      */
      __IOM uint32_t EWI        : 1;            /*!< [9..9] Early Window Interrupt                                             */
    } CFR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000008) WWDT Status register                                       */
    
    struct {
      __IOM uint32_t EWIF       : 1;            /*!< [0..0] Early Window Flag                                                  */
    } SR_b;
  } ;
} MDR_WWDT_Type;                                /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                         MDR_IWDT                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent Watchdog Timer (MDR_IWDT)
  */

typedef struct {                                /*!< (@ 0x40068000) MDR_IWDT Structure                                         */
  
  union {
    __OM  uint32_t KR;                          /*!< (@ 0x00000000) Key register                                               */
    
    struct {
      __OM  uint32_t KEY        : 16;           /*!< [15..0] Enable, start and reload control                                  */
    } KR_b;
  } ;
  
  union {
    __IOM uint32_t PR;                          /*!< (@ 0x00000004) Clock Prescaler register                                   */
    
    struct {
      __IOM uint32_t PR         : 3;            /*!< [2..0] Prescaler Register                                                 */
    } PR_b;
  } ;
  
  union {
    __IOM uint32_t RLR;                         /*!< (@ 0x00000008) Reload Period Register                                     */
    
    struct {
      __IOM uint32_t PRL        : 12;           /*!< [11..0] Timer Period Value                                                */
    } RLR_b;
  } ;
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x0000000C) Status Regster                                             */
    
    struct {
      __IM  uint32_t PVU        : 1;            /*!< [0..0] PR busy                                                            */
      __IM  uint32_t RVU        : 1;            /*!< [1..1] PRL busy                                                           */
    } SR_b;
  } ;
} MDR_IWDT_Type;                                /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Successive Approximation ADC (MDR_ADC)
  */

typedef struct {                                /*!< (@ 0x40088000) MDR_ADC Structure                                          */
  
  union {
    __IOM uint32_t ADC1_Cfg;                    /*!< (@ 0x00000000) ADC1 config register                                       */
    
    struct {
      __IOM uint32_t ADON       : 1;            /*!< [0..0] Enable ADC                                                         */
      __IOM uint32_t GO         : 1;            /*!< [1..1] Start single ADC mesurement                                        */
      __IOM uint32_t CLKS       : 1;            /*!< [2..2] Select Clock                                                       */
      __IOM uint32_t SAMPLE     : 1;            /*!< [3..3] Single or Continuous measurement                                   */
      __IOM uint32_t CHS        : 5;            /*!< [8..4] Active channel select                                              */
      __IOM uint32_t CHCH       : 1;            /*!< [9..9] Channel switching enable                                           */
      __IOM uint32_t RGNC       : 1;            /*!< [10..10] Signal limiters enable                                           */
      __IOM uint32_t M_REF      : 1;            /*!< [11..11] Signal amplitude reference                                       */
      __IOM uint32_t DIV_CLK    : 4;            /*!< [15..12] Divider for CPU_Clock usage                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS_EN      : 1;            /*!< [17..17] Thermosensor enable                                              */
      __IOM uint32_t TS_BUFF_EN : 1;            /*!< [18..18] Thermosensor buffer enable                                       */
      __IOM uint32_t SEL_TS     : 1;            /*!< [19..19] Output temperature from Thermosensor                             */
      __IOM uint32_t SEL_VREF   : 1;            /*!< [20..20] Output Vref=1.23 from Thermosensor                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t Delay_GO   : 3;            /*!< [27..25] Delay after channels switching in CPU_CLK                        */
    } ADC1_Cfg_b;
  } ;
  
  union {
    __IOM uint32_t ADC2_Cfg;                    /*!< (@ 0x00000004) ADC2 config register                                       */
    
    struct {
      __IM  uint32_t            : 17;
      __IOM uint32_t ADC1_OP    : 1;            /*!< [17..17] ADC1 Setpoint Vref source                                        */
    } ADC2_Cfg_b;
  } ;
  
  union {
    __IOM uint32_t ADC1_H_Level;                /*!< (@ 0x00000008) ADC High limit                                             */
    
    struct {
      __IOM uint32_t Level      : 12;           /*!< [11..0] Signal limit level                                                */
    } ADC1_H_Level_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ADC1_L_Level;                /*!< (@ 0x00000010) ADC Low limit                                              */
    
    struct {
      __IOM uint32_t Level      : 12;           /*!< [11..0] Signal limit level                                                */
    } ADC1_L_Level_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IM  uint32_t ADC1_RESULT;                 /*!< (@ 0x00000018) ADC result register                                        */
    
    struct {
      __IM  uint32_t Value      : 12;           /*!< [11..0] Channel signal value                                              */
      __IM  uint32_t            : 4;
      __IM  uint32_t Channel    : 5;            /*!< [20..16] Channel index                                                    */
    } ADC1_RESULT_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t ADC1_STATUS;                 /*!< (@ 0x00000020) ADC status register                                        */
    
    struct {
      __IOM uint32_t Overwrite  : 1;            /*!< [0..0] Result overwritten flag                                            */
      __IOM uint32_t AWOIFEN    : 1;            /*!< [1..1] Signal is out of limiters range                                    */
      __IOM uint32_t EOCIF      : 1;            /*!< [2..2] Result ready to read                                               */
      __IOM uint32_t AWOIF_IE   : 1;            /*!< [3..3] Enable IRQ by AWOIFEN flag                                         */
      __IOM uint32_t EOCIF_EN   : 1;            /*!< [4..4] Enable IRQ by EOCIF flag                                           */
    } ADC1_STATUS_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t ADC1_CHSEL;                  /*!< (@ 0x00000028) ADC channels select register                               */
    
    struct {
      __IOM uint32_t Channel_0  : 1;            /*!< [0..0] Signal on PD7, Ref+                                                */
      __IOM uint32_t Channel_1  : 1;            /*!< [1..1] Signal on PD8, Ref-                                                */
      __IOM uint32_t Channel_2  : 1;            /*!< [2..2] Signal on PD9                                                      */
      __IOM uint32_t Channel_3  : 1;            /*!< [3..3] Signal on PD10                                                     */
      __IOM uint32_t Channel_4  : 1;            /*!< [4..4] Signal on PD11                                                     */
      __IOM uint32_t Channel_5  : 1;            /*!< [5..5] Signal on PD12                                                     */
      __IOM uint32_t Channel_6  : 1;            /*!< [6..6] Signal on PD13                                                     */
      __IOM uint32_t Channel_7  : 1;            /*!< [7..7] Signal on PD14                                                     */
      __IM  uint32_t            : 22;
      __IOM uint32_t Channel_30 : 1;            /*!< [30..30] VRef from Thermosensor                                           */
      __IOM uint32_t Channel_31 : 1;            /*!< [31..31] Temperature from Thermosensor                                    */
    } ADC1_CHSEL_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t ADC1_TRIM;                   /*!< (@ 0x00000030) ADC TS_Vref trim register                                  */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t TS_Trim    : 5;            /*!< [5..1] Trim Vref from Thermosensor                                        */
      __IOM uint32_t SEL_VREF_BUF : 1;          /*!< [6..6] Output Vref_Buf=1.23 from Thermosensor                             */
    } ADC1_TRIM_b;
  } ;
} MDR_ADC_Type;                                 /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup and RTC Control (MDR_BKP)
  */

typedef struct {                                /*!< (@ 0x400D8000) MDR_BKP Structure                                          */
  __IOM uint32_t  REG_00;                       /*!< (@ 0x00000000) User backup registers                                      */
  __IOM uint32_t  REG_01;                       /*!< (@ 0x00000004) User backup registers                                      */
  __IOM uint32_t  REG_02;                       /*!< (@ 0x00000008) User backup registers                                      */
  __IOM uint32_t  REG_03;                       /*!< (@ 0x0000000C) User backup registers                                      */
  __IOM uint32_t  REG_04;                       /*!< (@ 0x00000010) User backup registers                                      */
  __IOM uint32_t  REG_05;                       /*!< (@ 0x00000014) User backup registers                                      */
  __IOM uint32_t  REG_06;                       /*!< (@ 0x00000018) User backup registers                                      */
  __IOM uint32_t  REG_07;                       /*!< (@ 0x0000001C) User backup registers                                      */
  __IOM uint32_t  REG_08;                       /*!< (@ 0x00000020) User backup registers                                      */
  __IOM uint32_t  REG_09;                       /*!< (@ 0x00000024) User backup registers                                      */
  __IOM uint32_t  REG_0A;                       /*!< (@ 0x00000028) User backup registers                                      */
  __IOM uint32_t  REG_0B;                       /*!< (@ 0x0000002C) User backup registers                                      */
  __IOM uint32_t  REG_0C;                       /*!< (@ 0x00000030) User backup registers                                      */
  __IOM uint32_t  REG_0D;                       /*!< (@ 0x00000034) User backup registers                                      */
  
  union {
    __IOM uint32_t REG_0E;                      /*!< (@ 0x00000038) REG_OE Control register                                    */
    
    struct {
      __IOM uint32_t LOW        : 3;            /*!< [2..0] DUcc Freq control                                                  */
      __IOM uint32_t SelectRI   : 3;            /*!< [5..3] DUcc extra I, should be equals to LOW field!                       */
      __IOM uint32_t StandAlone : 1;            /*!< [6..6] Switch to StandAlone mode                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t Trim_dDUcc : 3;            /*!< [10..8] Ducc adjust voltages                                              */
      __IOM uint32_t FPOR       : 1;            /*!< [11..11] Power Reset Flag                                                 */
      __IOM uint32_t Trim_DUcc  : 2;            /*!< [13..12] Select DUcc voltage                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t I_LimEn    : 1;            /*!< [15..15] Enable I 150mA protection                                        */
    } REG_0E_b;
  } ;
  
  union {
    __IOM uint32_t REG_0F;                      /*!< (@ 0x0000003C) REG_OF Control register                                    */
    
    struct {
      __IOM uint32_t LSE_ON     : 1;            /*!< [0..0] LSE generator enable                                               */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE generator                                                      */
      __IOM uint32_t RTC_SEL    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_EN     : 1;            /*!< [4..4] RTC enable                                                         */
      __IOM uint32_t RTC_CAL    : 8;            /*!< [12..5] RTC calibration                                                   */
      __IM  uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE frequency ready                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSI_ON     : 1;            /*!< [15..15] LSI generator enable                                             */
      __IOM uint32_t LSI_TRIM   : 5;            /*!< [20..16] LSI frequency adjust                                             */
      __IM  uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI frequency ready                                              */
      __IOM uint32_t HSI_ON     : 1;            /*!< [22..22] HSI generator enable                                             */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI frequency ready                                              */
      __IOM uint32_t HSI_TRIM   : 6;            /*!< [29..24] HSI frequency adjust                                             */
      __IOM uint32_t Standby    : 1;            /*!< [30..30] Standby sleep mode                                               */
      __IOM uint32_t RTC_RESET  : 1;            /*!< [31..31] Reset RTC bit                                                    */
    } REG_0F_b;
  } ;
  __IOM uint32_t  RTC_CNT;                      /*!< (@ 0x00000040) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV;                     /*!< (@ 0x00000044) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL;                     /*!< (@ 0x00000048) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM;                    /*!< (@ 0x0000004C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS;                      /*!< (@ 0x00000050) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
    } RTC_CS_b;
  } ;
} MDR_BKP_Type;                                 /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief UART Control (MDR_UART1)
  */

typedef struct {                                /*!< (@ 0x40030000) MDR_UART1 Structure                                        */
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000000) Data Register                                              */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Data FIFO access                                                   */
      __IOM uint32_t FE         : 1;            /*!< [8..8] Stop Bit Error                                                     */
      __IOM uint32_t PE         : 1;            /*!< [9..9] Parity Error                                                       */
      __IOM uint32_t BE         : 1;            /*!< [10..10] Break Error                                                      */
      __IOM uint32_t OE         : 1;            /*!< [11..11] Overrun FIFO_RX                                                  */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t RSR_ECR;                     /*!< (@ 0x00000004) Receive Status and Error Clear Register                    */
    
    struct {
      __IOM uint32_t FE         : 1;            /*!< [0..0] Stop Bit Error                                                     */
      __IOM uint32_t PE         : 1;            /*!< [1..1] Parity Error                                                       */
      __IOM uint32_t BE         : 1;            /*!< [2..2] Break Error                                                        */
      __IOM uint32_t OE         : 1;            /*!< [3..3] Overrun FIFO_RX                                                    */
    } RSR_ECR_b;
  } ;
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IM  uint32_t FR;                          /*!< (@ 0x00000018) Flag Register                                              */
    
    struct {
      __IM  uint32_t CTS        : 1;            /*!< [0..0] Modem Clear To Send                                                */
      __IM  uint32_t DSR        : 1;            /*!< [1..1] Modem Data Set Ready                                               */
      __IM  uint32_t DCD        : 1;            /*!< [2..2] Modem Data Carrier Detect                                          */
      __IM  uint32_t BUSY       : 1;            /*!< [3..3] Transmitting data                                                  */
      __IM  uint32_t RXFE       : 1;            /*!< [4..4] FIFO_RX Empty status                                               */
      __IM  uint32_t TXFF       : 1;            /*!< [5..5] FIFO_TX Full Status                                                */
      __IM  uint32_t RXFF       : 1;            /*!< [6..6] FIFO_RX Full Status                                                */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] FIFO_RX Empty status                                               */
      __IM  uint32_t RI         : 1;            /*!< [8..8] Modem Ring Indicator                                               */
    } FR_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t ILPR;                        /*!< (@ 0x00000020) IrDA Low-Power Counter                                     */
    
    struct {
      __IOM uint32_t DVSR       : 8;            /*!< [7..0] Div of SampleRate                                                  */
    } ILPR_b;
  } ;
  
  union {
    __IOM uint32_t IBRD;                        /*!< (@ 0x00000024) Integer BaudRate Divisor                                   */
    
    struct {
      __IOM uint32_t Baud_DivInt : 16;          /*!< [15..0] Integer part of Rate divisor                                      */
    } IBRD_b;
  } ;
  
  union {
    __IOM uint32_t FBRD;                        /*!< (@ 0x00000028) Fractional BaudRate Divisor                                */
    
    struct {
      __IOM uint32_t Baud_DivFrac : 6;          /*!< [5..0] Fractional part of Rate divisor                                    */
    } FBRD_b;
  } ;
  
  union {
    __IOM uint32_t LCR_H;                       /*!< (@ 0x0000002C) Line Control Register                                      */
    
    struct {
      __IOM uint32_t BRK        : 1;            /*!< [0..0] Send Break - TX LOW for 2 words                                    */
      __IOM uint32_t PEN        : 1;            /*!< [1..1] Parity Enable                                                      */
      __IOM uint32_t EPS        : 1;            /*!< [2..2] Even Parity Select                                                 */
      __IOM uint32_t STP2       : 1;            /*!< [3..3] Double Stop Bits Enable                                            */
      __IOM uint32_t FEN        : 1;            /*!< [4..4] FIFOs Enable                                                       */
      __IOM uint32_t WLEN       : 2;            /*!< [6..5] Word Length                                                        */
      __IOM uint32_t SPS        : 1;            /*!< [7..7] Stick Parity Select                                                */
    } LCR_H_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000030) Control Register                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable UART                                                        */
      __IOM uint32_t SIREN      : 1;            /*!< [1..1] IrDA Enable                                                        */
      __IOM uint32_t SIRLP      : 1;            /*!< [2..2] IrDA Low-Power Enable                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t LBE        : 1;            /*!< [7..7] LoopBack Enable                                                    */
      __IOM uint32_t TXE        : 1;            /*!< [8..8] Transmitter Enable                                                 */
      __IOM uint32_t RXE        : 1;            /*!< [9..9] Receiver Enable                                                    */
      __IOM uint32_t DTR        : 1;            /*!< [10..10] Data Transmit Ready                                              */
      __IOM uint32_t RTS        : 1;            /*!< [11..11] Request To Send                                                  */
      __IOM uint32_t Out1       : 1;            /*!< [12..12] Custom Modem Output1 - DCD                                       */
      __IOM uint32_t Out2       : 1;            /*!< [13..13] Custom Modem Output2 - RI                                        */
      __IOM uint32_t RTSEn      : 1;            /*!< [14..14] Hardware RTS Control                                             */
      __IOM uint32_t CTSEn      : 1;            /*!< [15..15] Hardware CTS Control                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IFLS;                        /*!< (@ 0x00000034) IRQ FIFO Level                                             */
    
    struct {
      __IOM uint32_t TXIFLSES   : 3;            /*!< [2..0] IRQ FIFO_TX level                                                  */
      __IOM uint32_t RXIFLSES   : 3;            /*!< [5..3] IRQ FIFO_RX level                                                  */
    } IFLS_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000038) IRQ Mask Set Clear                                         */
    
    struct {
      __IOM uint32_t RIM_IM     : 1;            /*!< [0..0] RI Modem IRQ Mask                                                  */
      __IOM uint32_t STCM_IM    : 1;            /*!< [1..1] STC Modem IRQ Mask                                                 */
      __IOM uint32_t DCDM_IM    : 1;            /*!< [2..2] DCD Modem IRQ Mask                                                 */
      __IOM uint32_t DSRM_IM    : 1;            /*!< [3..3] DSR Modem IRQ Mask                                                 */
      __IOM uint32_t RX_IM      : 1;            /*!< [4..4] RX IRQ Mask                                                        */
      __IOM uint32_t TX_IM      : 1;            /*!< [5..5] TX IRQ Mask                                                        */
      __IOM uint32_t RT_IM      : 1;            /*!< [6..6] RX Timeout IRQ Mask                                                */
      __IOM uint32_t FE_IM      : 1;            /*!< [7..7] Frame Error IRQ Mask                                               */
      __IOM uint32_t PE_IM      : 1;            /*!< [8..8] Parity Error IRQ Mask                                              */
      __IOM uint32_t BE_IM      : 1;            /*!< [9..9] BreakLine IRQ Mask                                                 */
      __IOM uint32_t OE_IM      : 1;            /*!< [10..10] Overrun FIFO_RX IRQ Mask                                         */
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x0000003C) Raw IQR Status Register                                    */
    
    struct {
      __IM  uint32_t RIM_RIS    : 1;            /*!< [0..0] RI Modem Event                                                     */
      __IM  uint32_t STCM_RIS   : 1;            /*!< [1..1] STC Modem Event                                                    */
      __IM  uint32_t DCDM_RIS   : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __IM  uint32_t DSRM_RIS   : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __IM  uint32_t RX_RIS     : 1;            /*!< [4..4] RX Event                                                           */
      __IM  uint32_t TX_RIS     : 1;            /*!< [5..5] TX Event                                                           */
      __IM  uint32_t RT_RIS     : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __IM  uint32_t FE_RIS     : 1;            /*!< [7..7] Frame Error Event                                                  */
      __IM  uint32_t PE_RIS     : 1;            /*!< [8..8] Parity Error Event                                                 */
      __IM  uint32_t BE_RIS     : 1;            /*!< [9..9] BreakLine Event                                                    */
      __IM  uint32_t OE_RIS     : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x00000040) Masked IQR Status Register                                 */
    
    struct {
      __IM  uint32_t RIM_MIS    : 1;            /*!< [0..0] RI Modem Event                                                     */
      __IM  uint32_t STCM_MIS   : 1;            /*!< [1..1] STC Modem Event                                                    */
      __IM  uint32_t DCDM_MIS   : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __IM  uint32_t DSRM_MIS   : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __IM  uint32_t RX_MIS     : 1;            /*!< [4..4] RX Event                                                           */
      __IM  uint32_t TX_MIS     : 1;            /*!< [5..5] TX Event                                                           */
      __IM  uint32_t RT_MIS     : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __IM  uint32_t FE_MIS     : 1;            /*!< [7..7] Frame Error Event                                                  */
      __IM  uint32_t PE_MIS     : 1;            /*!< [8..8] Parity Error Event                                                 */
      __IM  uint32_t BE_MIS     : 1;            /*!< [9..9] BreakLine Event                                                    */
      __IM  uint32_t OE_MIS     : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000044) IRQ Clear Register                                         */
    
    struct {
      __OM  uint32_t RIM_IC     : 1;            /*!< [0..0] RI Modem Event                                                     */
      __OM  uint32_t STCM_IC    : 1;            /*!< [1..1] STC Modem Event                                                    */
      __OM  uint32_t DCDM_IC    : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __OM  uint32_t DSRM_IC    : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __OM  uint32_t RX_IC      : 1;            /*!< [4..4] RX Event                                                           */
      __OM  uint32_t TX_IC      : 1;            /*!< [5..5] TX Event                                                           */
      __OM  uint32_t RT_IC      : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __OM  uint32_t FE_IC      : 1;            /*!< [7..7] Frame Error Event                                                  */
      __OM  uint32_t PE_IC      : 1;            /*!< [8..8] Parity Error Event                                                 */
      __OM  uint32_t BE_IC      : 1;            /*!< [9..9] BreakLine Event                                                    */
      __OM  uint32_t OE_IC      : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000048) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] RX DMA Enable                                                      */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] TX DMA Enable                                                      */
      __IOM uint32_t DMAonErr   : 1;            /*!< [2..2] Disable DMA req on Error                                           */
    } DMACR_b;
  } ;
  __IM  uint32_t  RESERVED2[13];
  
  union {
    __IOM uint32_t TCR;                         /*!< (@ 0x00000080) Test Control Register                                      */
    
    struct {
      __IOM uint32_t ITEN       : 1;            /*!< [0..0] Test Mode Enable                                                   */
      __IOM uint32_t TestFIFO   : 1;            /*!< [1..1] FIFO test mode                                                     */
      __IOM uint32_t SIRTest    : 1;            /*!< [2..2] IrDA test mode                                                     */
    } TCR_b;
  } ;
} MDR_UART1_Type;                               /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief TIMER Control (MDR_TIMER1)
  */

typedef struct {                                /*!< (@ 0x40070000) MDR_TIMER1 Structure                                       */
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000000) Counter register                                           */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Counter Value                                                     */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t PSG;                         /*!< (@ 0x00000004) Presample Gain                                             */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Inc CNT by PSG clocks of TIM_CLOCK                                */
    } PSG_b;
  } ;
  
  union {
    __IOM uint32_t ARR;                         /*!< (@ 0x00000008) Counter Period                                             */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Counter Value                                                     */
    } ARR_b;
  } ;
  
  union {
    __IOM uint32_t CNTRL;                       /*!< (@ 0x0000000C) Timer Control                                              */
    
    struct {
      __IOM uint32_t CNT_EN     : 1;            /*!< [0..0] Timer Enable                                                       */
      __IOM uint32_t ARRB_EN    : 1;            /*!< [1..1] ARR update mode                                                    */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [2..2] Can write to CNT, ARR, PSG                                         */
      __IOM uint32_t DIR        : 1;            /*!< [3..3] Count Direction                                                    */
      __IOM uint32_t FDTS       : 2;            /*!< [5..4] Select Data Sampling frequency                                     */
      __IOM uint32_t CNT_MODE   : 2;            /*!< [7..6] Counting mode                                                      */
      __IOM uint32_t EVENT_SEL  : 4;            /*!< [11..8] Events for counting                                               */
    } CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CCR1;                        /*!< (@ 0x00000010) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR1_b;
  } ;
  
  union {
    __IOM uint32_t CCR2;                        /*!< (@ 0x00000014) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR2_b;
  } ;
  
  union {
    __IOM uint32_t CCR3;                        /*!< (@ 0x00000018) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR3_b;
  } ;
  
  union {
    __IOM uint32_t CCR4;                        /*!< (@ 0x0000001C) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR4_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL;                   /*!< (@ 0x00000020) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH1_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL;                   /*!< (@ 0x00000024) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH2_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL;                   /*!< (@ 0x00000028) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH3_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL;                   /*!< (@ 0x0000002C) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH4_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL1;                  /*!< (@ 0x00000030) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH1_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL1;                  /*!< (@ 0x00000034) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH2_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL1;                  /*!< (@ 0x00000038) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH3_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL1;                  /*!< (@ 0x0000003C) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH4_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH1_DTG;                     /*!< (@ 0x00000040) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH1_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH2_DTG;                     /*!< (@ 0x00000044) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH2_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH3_DTG;                     /*!< (@ 0x00000048) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH3_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH4_DTG;                     /*!< (@ 0x0000004C) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH4_DTG_b;
  } ;
  
  union {
    __IOM uint32_t BRKETR_CNTRL;                /*!< (@ 0x00000050) Break and External Count Control                           */
    
    struct {
      __IOM uint32_t BRK_INV    : 1;            /*!< [0..0] Invert Break Signal                                                */
      __IOM uint32_t ETR_INV    : 1;            /*!< [1..1] Invert External Count Signal                                       */
      __IOM uint32_t ETR_PSC    : 2;            /*!< [3..2] External Count Div                                                 */
      __IOM uint32_t ETR_Filter : 4;            /*!< [7..4] External Count Signal Filter                                       */
    } BRKETR_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000054) Status Register                                            */
    
    struct {
      __IOM uint32_t CNT_ZERO   : 1;            /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR    : 1;            /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE     : 1;            /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE     : 1;            /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK        : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1 : 1;           /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2 : 1;           /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3 : 1;           /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4 : 1;           /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1 : 1;           /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2 : 1;           /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3 : 1;           /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4 : 1;           /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1 : 1;          /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2 : 1;          /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3 : 1;          /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4 : 1;          /*!< [16..16] Captured to CCR1                                                 */
    } STATUS_b;
  } ;
  
  union {
    __IOM uint32_t IE;                          /*!< (@ 0x00000058) IRQ Enable                                                 */
    
    struct {
      __IOM uint32_t CNT_ZERO_IE : 1;           /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_IE : 1;            /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_IE  : 1;            /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_IE  : 1;            /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_IE     : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_IE : 1;        /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_IE : 1;        /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_IE : 1;        /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_IE : 1;        /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_IE : 1;        /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_IE : 1;        /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_IE : 1;        /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_IE : 1;        /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_IE : 1;       /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_IE : 1;       /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_IE : 1;       /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_IE : 1;       /*!< [16..16] Captured to CCR1                                                 */
    } IE_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE;                      /*!< (@ 0x0000005C) DMA Request Enable for TIMx_DMA_REQ                        */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL2;                  /*!< (@ 0x00000060) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
      __IOM uint32_t CAP_CCR_Fix : 1;           /*!< [4..4] CAP update CCRs fix                                                */
    } CH1_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL2;                  /*!< (@ 0x00000064) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
      __IOM uint32_t CAP_CCR_Fix : 1;           /*!< [4..4] CAP update CCRs fix                                                */
    } CH2_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL2;                  /*!< (@ 0x00000068) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
      __IOM uint32_t CAP_CCR_Fix : 1;           /*!< [4..4] CAP update CCRs fix                                                */
    } CH3_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL2;                  /*!< (@ 0x0000006C) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
      __IOM uint32_t CAP_CCR_Fix : 1;           /*!< [4..4] CAP update CCRs fix                                                */
    } CH4_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CCR11;                       /*!< (@ 0x00000070) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR11_b;
  } ;
  
  union {
    __IOM uint32_t CCR21;                       /*!< (@ 0x00000074) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR21_b;
  } ;
  
  union {
    __IOM uint32_t CCR31;                       /*!< (@ 0x00000078) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR31_b;
  } ;
  
  union {
    __IOM uint32_t CCR41;                       /*!< (@ 0x0000007C) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR41_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE1;                     /*!< (@ 0x00000080) DMA Request Enable for TIMx_DMA_REQ1                       */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE1_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE2;                     /*!< (@ 0x00000084) DMA Request Enable for TIMx_DMA_REQ2                       */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE2_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE3;                     /*!< (@ 0x00000088) DMA Request Enable for TIMx_DMA_REQ3                       */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE3_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE4;                     /*!< (@ 0x0000008C) DMA Request Enable for TIMx_DMA_REQ4                       */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE4_b;
  } ;
} MDR_TIMER1_Type;                              /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                         MDR_SSP1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Synchronous Serial Port (MDR_SSP1)
  */

typedef struct {                                /*!< (@ 0x40040000) MDR_SSP1 Structure                                         */
  
  union {
    __IOM uint32_t CR0;                         /*!< (@ 0x00000000) Control Register 0                                         */
    
    struct {
      __IOM uint32_t DSS        : 4;            /*!< [3..0] Data Size Select                                                   */
      __IOM uint32_t FRF        : 2;            /*!< [5..4] Frame Format                                                       */
      __IOM uint32_t SPO        : 1;            /*!< [6..6] SPI Clock Polarity                                                 */
      __IOM uint32_t SPH        : 1;            /*!< [7..7] SPI Capture Clock Phase                                            */
      __IOM uint32_t SCR        : 8;            /*!< [15..8] Signal CLock Rate                                                 */
    } CR0_b;
  } ;
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000004) Control Register 1                                         */
    
    struct {
      __IOM uint32_t LBM        : 1;            /*!< [0..0] Loop Back Mode                                                     */
      __IOM uint32_t SSE        : 1;            /*!< [1..1] Synchronous Serial Enable                                          */
      __IOM uint32_t MS         : 1;            /*!< [2..2] Master or Slave mode                                               */
      __IOM uint32_t SOD        : 1;            /*!< [3..3] Slave mode Output Disable                                          */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000008) FIFO_Rx and FIFO_Tx access                                 */
    
    struct {
      __IOM uint32_t Data       : 16;           /*!< [15..0] Data value                                                        */
    } DR_b;
  } ;
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x0000000C) Status Register                                            */
    
    struct {
      __IM  uint32_t TFE        : 1;            /*!< [0..0] FIFO_TX is Empty                                                   */
      __IM  uint32_t TNF        : 1;            /*!< [1..1] FIFO_TX is Not Full                                                */
      __IM  uint32_t RNE        : 1;            /*!< [2..2] FIFO_RX is Not Empty                                               */
      __IM  uint32_t RFF        : 1;            /*!< [3..3] FIFO_RX is Full                                                    */
      __IM  uint32_t BSY        : 1;            /*!< [4..4] Transfer in progress                                               */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t CPSR;                        /*!< (@ 0x00000010) Clock Prescaller Register                                  */
    
    struct {
      __IOM uint32_t CPSDVSR    : 8;            /*!< [7..0] Clock Prescaller                                                   */
    } CPSR_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000014) IRQ Mask Set-Clear                                         */
    
    struct {
      __IOM uint32_t RORIM      : 1;            /*!< [0..0] Enable IRQ on FIFO_RX overrun                                      */
      __IOM uint32_t RTIM       : 1;            /*!< [1..1] Enable IQR on RX timeout for 32bits                                */
      __IOM uint32_t RXIM       : 1;            /*!< [2..2] Enable IQR on FIFO_RX ge 4 words                                   */
      __IOM uint32_t TXIM       : 1;            /*!< [3..3] Enable IQR on FIFO_TX le 4 words                                   */
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x00000018) Raw Interupt Status                                        */
    
    struct {
      __IM  uint32_t RORRIS     : 1;            /*!< [0..0] FIFO_RX is overrun                                                 */
      __IM  uint32_t RTRIS      : 1;            /*!< [1..1] RX timeout for 32bits                                              */
      __IM  uint32_t RXRIS      : 1;            /*!< [2..2] FIFO_RX gt words                                                   */
      __IM  uint32_t TXRIS      : 1;            /*!< [3..3] FIFO_TX le words                                                   */
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x0000001C) Masked Interupt Status                                     */
    
    struct {
      __IM  uint32_t RORMIS     : 1;            /*!< [0..0] FIFO_RX is overrun                                                 */
      __IM  uint32_t RTMIS      : 1;            /*!< [1..1] RX timeout for 32bits                                              */
      __IM  uint32_t RXMIS      : 1;            /*!< [2..2] FIFO_RX ge 4 words                                                 */
      __IM  uint32_t TXMIS      : 1;            /*!< [3..3] FIFO_TX le 4 words                                                 */
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000020) Interupt Clear Register                                    */
    
    struct {
      __OM  uint32_t RORIC      : 1;            /*!< [0..0] Clear FIFO_RX overrun flag                                         */
      __OM  uint32_t RTIC       : 1;            /*!< [1..1] Clear RX timeout flag                                              */
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000024) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] Enable DMA by FIFO_RX has data                                     */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] Enable DMA by FIFO_TX not Full                                     */
    } DMACR_b;
  } ;
} MDR_SSP1_Type;                                /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Port Control (MDR_PORTA)
  */

typedef struct {                                /*!< (@ 0x400A8000) MDR_PORTA Structure                                        */
  
  union {
    __IOM uint32_t RXTX;                        /*!< (@ 0x00000000) GPIO Pin Data                                              */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Pin data value                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Pin data value                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Pin data value                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Pin data value                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Pin data value                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Pin data value                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Pin data value                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Pin data value                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Pin data value                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Pin data value                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Pin data value                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Pin data value                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Pin data value                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Pin data value                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Pin data value                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Pin data value                                                   */
    } RXTX_b;
  } ;
  
  union {
    __IOM uint32_t OE;                          /*!< (@ 0x00000004) Output Enable Control                                      */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Pin data direction                                                 */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Pin data direction                                                 */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Pin data direction                                                 */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Pin data direction                                                 */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Pin data direction                                                 */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Pin data direction                                                 */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Pin data direction                                                 */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Pin data direction                                                 */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Pin data direction                                                 */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Pin data direction                                                 */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Pin data direction                                               */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Pin data direction                                               */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Pin data direction                                               */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Pin data direction                                               */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Pin data direction                                               */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Pin data direction                                               */
    } OE_b;
  } ;
  
  union {
    __IOM uint32_t FUNC;                        /*!< (@ 0x00000008) Pin Functions in Digital mode                              */
    
    struct {
      __IOM uint32_t Pin_0      : 2;            /*!< [1..0] Pin Digital Function                                               */
      __IOM uint32_t Pin_1      : 2;            /*!< [3..2] Pin Digital Function                                               */
      __IOM uint32_t Pin_2      : 2;            /*!< [5..4] Pin Digital Function                                               */
      __IOM uint32_t Pin_3      : 2;            /*!< [7..6] Pin Digital Function                                               */
      __IOM uint32_t Pin_4      : 2;            /*!< [9..8] Pin Digital Function                                               */
      __IOM uint32_t Pin_5      : 2;            /*!< [11..10] Pin Digital Function                                             */
      __IOM uint32_t Pin_6      : 2;            /*!< [13..12] Pin Digital Function                                             */
      __IOM uint32_t Pin_7      : 2;            /*!< [15..14] Pin Digital Function                                             */
      __IOM uint32_t Pin_8      : 2;            /*!< [17..16] Pin Digital Function                                             */
      __IOM uint32_t Pin_9      : 2;            /*!< [19..18] Pin Digital Function                                             */
      __IOM uint32_t Pin_10     : 2;            /*!< [21..20] Pin Digital Function                                             */
      __IOM uint32_t Pin_11     : 2;            /*!< [23..22] Pin Digital Function                                             */
      __IOM uint32_t Pin_12     : 2;            /*!< [25..24] Pin Digital Function                                             */
      __IOM uint32_t Pin_13     : 2;            /*!< [27..26] Pin Digital Function                                             */
      __IOM uint32_t Pin_14     : 2;            /*!< [29..28] Pin Digital Function                                             */
      __IOM uint32_t Pin_15     : 2;            /*!< [31..30] Pin Digital Function                                             */
    } FUNC_b;
  } ;
  
  union {
    __IOM uint32_t ANALOG;                      /*!< (@ 0x0000000C) Enable Digital Mode Control                                */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Enable Digital mode                                                */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Enable Digital mode                                                */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Enable Digital mode                                                */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Enable Digital mode                                                */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Enable Digital mode                                                */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Enable Digital mode                                                */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Enable Digital mode                                                */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Enable Digital mode                                                */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Enable Digital mode                                                */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Enable Digital mode                                                */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Enable Digital mode                                              */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Enable Digital mode                                              */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Enable Digital mode                                              */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Enable Digital mode                                              */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Enable Digital mode                                              */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Enable Digital mode                                              */
    } ANALOG_b;
  } ;
  
  union {
    __IOM uint32_t PULL;                        /*!< (@ 0x00000010) PULL Up and Down Control                                   */
    
    struct {
      __IOM uint32_t Down_Pin_0 : 1;            /*!< [0..0] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_1 : 1;            /*!< [1..1] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_2 : 1;            /*!< [2..2] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_3 : 1;            /*!< [3..3] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_4 : 1;            /*!< [4..4] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_5 : 1;            /*!< [5..5] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_6 : 1;            /*!< [6..6] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_7 : 1;            /*!< [7..7] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_8 : 1;            /*!< [8..8] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_9 : 1;            /*!< [9..9] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_10 : 1;           /*!< [10..10] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_11 : 1;           /*!< [11..11] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_12 : 1;           /*!< [12..12] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_13 : 1;           /*!< [13..13] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_14 : 1;           /*!< [14..14] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_15 : 1;           /*!< [15..15] Pull Down Enable                                                 */
      __IOM uint32_t UP_Pin_0   : 1;            /*!< [16..16] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_1   : 1;            /*!< [17..17] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_2   : 1;            /*!< [18..18] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_3   : 1;            /*!< [19..19] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_4   : 1;            /*!< [20..20] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_5   : 1;            /*!< [21..21] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_6   : 1;            /*!< [22..22] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_7   : 1;            /*!< [23..23] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_8   : 1;            /*!< [24..24] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_9   : 1;            /*!< [25..25] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_10  : 1;            /*!< [26..26] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_11  : 1;            /*!< [27..27] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_12  : 1;            /*!< [28..28] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_13  : 1;            /*!< [29..29] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_14  : 1;            /*!< [30..30] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_15  : 1;            /*!< [31..31] Pull Up Enable                                                   */
    } PULL_b;
  } ;
  
  union {
    __IOM uint32_t PD;                          /*!< (@ 0x00000014) Otput Driver Mode                                          */
    
    struct {
      __IOM uint32_t Driver_Pin_0 : 1;          /*!< [0..0] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_1 : 1;          /*!< [1..1] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_2 : 1;          /*!< [2..2] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_3 : 1;          /*!< [3..3] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_4 : 1;          /*!< [4..4] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_5 : 1;          /*!< [5..5] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_6 : 1;          /*!< [6..6] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_7 : 1;          /*!< [7..7] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_8 : 1;          /*!< [8..8] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_9 : 1;          /*!< [9..9] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_10 : 1;         /*!< [10..10] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_11 : 1;         /*!< [11..11] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_12 : 1;         /*!< [12..12] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_13 : 1;         /*!< [13..13] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_14 : 1;         /*!< [14..14] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_15 : 1;         /*!< [15..15] Driver mode for pin                                              */
      __IOM uint32_t Schmitt_Pin_0 : 1;         /*!< [16..16] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_1 : 1;         /*!< [17..17] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_2 : 1;         /*!< [18..18] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_3 : 1;         /*!< [19..19] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_4 : 1;         /*!< [20..20] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_5 : 1;         /*!< [21..21] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_6 : 1;         /*!< [22..22] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_7 : 1;         /*!< [23..23] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_8 : 1;         /*!< [24..24] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_9 : 1;         /*!< [25..25] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_10 : 1;        /*!< [26..26] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_11 : 1;        /*!< [27..27] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_12 : 1;        /*!< [28..28] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_13 : 1;        /*!< [29..29] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_14 : 1;        /*!< [30..30] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_15 : 1;        /*!< [31..31] Schmitt trigger enable                                           */
    } PD_b;
  } ;
  
  union {
    __IOM uint32_t PWR;                         /*!< (@ 0x00000018) Output voltage switch rate                                 */
    
    struct {
      __IOM uint32_t Pin_0      : 2;            /*!< [1..0] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_1      : 2;            /*!< [3..2] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_2      : 2;            /*!< [5..4] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_3      : 2;            /*!< [7..6] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_4      : 2;            /*!< [9..8] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_5      : 2;            /*!< [11..10] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_6      : 2;            /*!< [13..12] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_7      : 2;            /*!< [15..14] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_8      : 2;            /*!< [17..16] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_9      : 2;            /*!< [19..18] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_10     : 2;            /*!< [21..20] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_11     : 2;            /*!< [23..22] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_12     : 2;            /*!< [25..24] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_13     : 2;            /*!< [27..26] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_14     : 2;            /*!< [29..28] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_15     : 2;            /*!< [31..30] Voltage levels switch rate                                       */
    } PWR_b;
  } ;
  
  union {
    __IOM uint32_t GFEN;                        /*!< (@ 0x0000001C) Input pulses filter                                        */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Filter for pin                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Filter for pin                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Filter for pin                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Filter for pin                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Filter for pin                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Filter for pin                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Filter for pin                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Filter for pin                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Filter for pin                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Filter for pin                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Filter for pin                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Filter for pin                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Filter for pin                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Filter for pin                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Filter for pin                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Filter for pin                                                   */
    } GFEN_b;
  } ;
  
  union {
    __IOM uint32_t SETTX;                       /*!< (@ 0x00000020) Set RXTX by MASK                                           */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Set 1 to pin                                                       */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Set 1 to pin                                                       */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Set 1 to pin                                                       */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Set 1 to pin                                                       */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Set 1 to pin                                                       */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Set 1 to pin                                                       */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Set 1 to pin                                                       */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Set 1 to pin                                                       */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Set 1 to pin                                                       */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Set 1 to pin                                                       */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Set 1 to pin                                                     */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Set 1 to pin                                                     */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Set 1 to pin                                                     */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Set 1 to pin                                                     */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Set 1 to pin                                                     */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Set 1 to pin                                                     */
    } SETTX_b;
  } ;
  
  union {
    __IOM uint32_t CLRTX;                       /*!< (@ 0x00000024) CLR RXTX by MASK                                           */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Clear pin to 0                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Clear pin to 0                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Clear pin to 0                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Clear pin to 0                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Clear pin to 0                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Clear pin to 0                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Clear pin to 0                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Clear pin to 0                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Clear pin to 0                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Clear pin to 0                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Clear pin to 0                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Clear pin to 0                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Clear pin to 0                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Clear pin to 0                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Clear pin to 0                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Clear pin to 0                                                   */
    } CLRTX_b;
  } ;
  
  union {
    __IM  uint32_t RDTX;                        /*!< (@ 0x00000028) Value of RXTX in Port mode                                 */
    
    struct {
      __IM  uint32_t Pin_0      : 1;            /*!< [0..0] Pin data value                                                     */
      __IM  uint32_t Pin_1      : 1;            /*!< [1..1] Pin data value                                                     */
      __IM  uint32_t Pin_2      : 1;            /*!< [2..2] Pin data value                                                     */
      __IM  uint32_t Pin_3      : 1;            /*!< [3..3] Pin data value                                                     */
      __IM  uint32_t Pin_4      : 1;            /*!< [4..4] Pin data value                                                     */
      __IM  uint32_t Pin_5      : 1;            /*!< [5..5] Pin data value                                                     */
      __IM  uint32_t Pin_6      : 1;            /*!< [6..6] Pin data value                                                     */
      __IM  uint32_t Pin_7      : 1;            /*!< [7..7] Pin data value                                                     */
      __IM  uint32_t Pin_8      : 1;            /*!< [8..8] Pin data value                                                     */
      __IM  uint32_t Pin_9      : 1;            /*!< [9..9] Pin data value                                                     */
      __IM  uint32_t Pin_10     : 1;            /*!< [10..10] Pin data value                                                   */
      __IM  uint32_t Pin_11     : 1;            /*!< [11..11] Pin data value                                                   */
      __IM  uint32_t Pin_12     : 1;            /*!< [12..12] Pin data value                                                   */
      __IM  uint32_t Pin_13     : 1;            /*!< [13..13] Pin data value                                                   */
      __IM  uint32_t Pin_14     : 1;            /*!< [14..14] Pin data value                                                   */
      __IM  uint32_t Pin_15     : 1;            /*!< [15..15] Pin data value                                                   */
    } RDTX_b;
  } ;
} MDR_PORTA_Type;                               /*!< Size = 44 (0x2c)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define MDR_EEPROM_BASE             0x40018000UL
#define MDR_RST_CLOCK_BASE          0x40020000UL
#define MDR_DMA_BASE                0x40028000UL
#define MDR_Power_BASE              0x40058000UL
#define MDR_WWDT_BASE               0x40060000UL
#define MDR_IWDT_BASE               0x40068000UL
#define MDR_ADC_BASE                0x40088000UL
#define MDR_BKP_BASE                0x400D8000UL
#define MDR_UART1_BASE              0x40030000UL
#define MDR_UART2_BASE              0x40038000UL
#define MDR_TIMER1_BASE             0x40070000UL
#define MDR_TIMER2_BASE             0x40078000UL
#define MDR_TIMER3_BASE             0x40080000UL
#define MDR_TIMER4_BASE             0x40098000UL
#define MDR_SSP1_BASE               0x40040000UL
#define MDR_SSP2_BASE               0x400A0000UL
#define MDR_SSP3_BASE               0x400F8000UL
#define MDR_PORTA_BASE              0x400A8000UL
#define MDR_PORTB_BASE              0x400B0000UL
#define MDR_PORTC_BASE              0x400B8000UL
#define MDR_PORTD_BASE              0x400C0000UL
#define MDR_PORTE_BASE              0x400C8000UL
#define MDR_PORTF_BASE              0x400E8000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define MDR_EEPROM                  ((MDR_EEPROM_Type*)        MDR_EEPROM_BASE)
#define MDR_RST_CLOCK               ((MDR_RST_CLOCK_Type*)     MDR_RST_CLOCK_BASE)
#define MDR_DMA                     ((MDR_DMA_Type*)           MDR_DMA_BASE)
#define MDR_Power                   ((MDR_Power_Type*)         MDR_Power_BASE)
#define MDR_WWDT                    ((MDR_WWDT_Type*)          MDR_WWDT_BASE)
#define MDR_IWDT                    ((MDR_IWDT_Type*)          MDR_IWDT_BASE)
#define MDR_ADC                     ((MDR_ADC_Type*)           MDR_ADC_BASE)
#define MDR_BKP                     ((MDR_BKP_Type*)           MDR_BKP_BASE)
#define MDR_UART1                   ((MDR_UART1_Type*)         MDR_UART1_BASE)
#define MDR_UART2                   ((MDR_UART1_Type*)         MDR_UART2_BASE)
#define MDR_TIMER1                  ((MDR_TIMER1_Type*)        MDR_TIMER1_BASE)
#define MDR_TIMER2                  ((MDR_TIMER1_Type*)        MDR_TIMER2_BASE)
#define MDR_TIMER3                  ((MDR_TIMER1_Type*)        MDR_TIMER3_BASE)
#define MDR_TIMER4                  ((MDR_TIMER1_Type*)        MDR_TIMER4_BASE)
#define MDR_SSP1                    ((MDR_SSP1_Type*)          MDR_SSP1_BASE)
#define MDR_SSP2                    ((MDR_SSP1_Type*)          MDR_SSP2_BASE)
#define MDR_SSP3                    ((MDR_SSP1_Type*)          MDR_SSP3_BASE)
#define MDR_PORTA                   ((MDR_PORTA_Type*)         MDR_PORTA_BASE)
#define MDR_PORTB                   ((MDR_PORTA_Type*)         MDR_PORTB_BASE)
#define MDR_PORTC                   ((MDR_PORTA_Type*)         MDR_PORTC_BASE)
#define MDR_PORTD                   ((MDR_PORTA_Type*)         MDR_PORTD_BASE)
#define MDR_PORTE                   ((MDR_PORTA_Type*)         MDR_PORTE_BASE)
#define MDR_PORTF                   ((MDR_PORTA_Type*)         MDR_PORTF_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CMD  ========================================================== */
#define MDR_EEPROM_CMD_CON_Pos            (0UL)                     /*!< MDR_EEPROM CMD: CON (Bit 0)                           */
#define MDR_EEPROM_CMD_CON_Msk            (0x1UL)                   /*!< MDR_EEPROM CMD: CON (Bitfield-Mask: 0x01)             */
#define MDR_EEPROM_CMD_WR_Pos             (1UL)                     /*!< MDR_EEPROM CMD: WR (Bit 1)                            */
#define MDR_EEPROM_CMD_WR_Msk             (0x2UL)                   /*!< MDR_EEPROM CMD: WR (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_RD_Pos             (2UL)                     /*!< MDR_EEPROM CMD: RD (Bit 2)                            */
#define MDR_EEPROM_CMD_RD_Msk             (0x4UL)                   /*!< MDR_EEPROM CMD: RD (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_DELAY_Pos          (3UL)                     /*!< MDR_EEPROM CMD: DELAY (Bit 3)                         */
#define MDR_EEPROM_CMD_DELAY_Msk          (0x38UL)                  /*!< MDR_EEPROM CMD: DELAY (Bitfield-Mask: 0x07)           */
#define MDR_EEPROM_CMD_XE_Pos             (6UL)                     /*!< MDR_EEPROM CMD: XE (Bit 6)                            */
#define MDR_EEPROM_CMD_XE_Msk             (0x40UL)                  /*!< MDR_EEPROM CMD: XE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_YE_Pos             (7UL)                     /*!< MDR_EEPROM CMD: YE (Bit 7)                            */
#define MDR_EEPROM_CMD_YE_Msk             (0x80UL)                  /*!< MDR_EEPROM CMD: YE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_SE_Pos             (8UL)                     /*!< MDR_EEPROM CMD: SE (Bit 8)                            */
#define MDR_EEPROM_CMD_SE_Msk             (0x100UL)                 /*!< MDR_EEPROM CMD: SE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_IFREN_Pos          (9UL)                     /*!< MDR_EEPROM CMD: IFREN (Bit 9)                         */
#define MDR_EEPROM_CMD_IFREN_Msk          (0x200UL)                 /*!< MDR_EEPROM CMD: IFREN (Bitfield-Mask: 0x01)           */
#define MDR_EEPROM_CMD_ERASE_Pos          (10UL)                    /*!< MDR_EEPROM CMD: ERASE (Bit 10)                        */
#define MDR_EEPROM_CMD_ERASE_Msk          (0x400UL)                 /*!< MDR_EEPROM CMD: ERASE (Bitfield-Mask: 0x01)           */
#define MDR_EEPROM_CMD_MAS1_Pos           (11UL)                    /*!< MDR_EEPROM CMD: MAS1 (Bit 11)                         */
#define MDR_EEPROM_CMD_MAS1_Msk           (0x800UL)                 /*!< MDR_EEPROM CMD: MAS1 (Bitfield-Mask: 0x01)            */
#define MDR_EEPROM_CMD_PROG_Pos           (12UL)                    /*!< MDR_EEPROM CMD: PROG (Bit 12)                         */
#define MDR_EEPROM_CMD_PROG_Msk           (0x1000UL)                /*!< MDR_EEPROM CMD: PROG (Bitfield-Mask: 0x01)            */
#define MDR_EEPROM_CMD_NVSTR_Pos          (13UL)                    /*!< MDR_EEPROM CMD: NVSTR (Bit 13)                        */
#define MDR_EEPROM_CMD_NVSTR_Msk          (0x2000UL)                /*!< MDR_EEPROM CMD: NVSTR (Bitfield-Mask: 0x01)           */
/* =========================================================  ADDR  ========================================================== */
/* ==========================================================  DI  =========================================================== */
/* ==========================================================  DO  =========================================================== */
/* ==========================================================  KEY  ========================================================== */


/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* =====================================================  CLOCK_STATUS  ====================================================== */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_USB_RDY_Pos (0UL)            /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_USB_RDY (Bit 0)       */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_USB_RDY_Msk (0x1UL)          /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_USB_RDY (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY_Pos (1UL)            /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_CPU_RDY (Bit 1)       */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY_Msk (0x2UL)          /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_CPU_RDY (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY_Pos (2UL)                /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE_RDY (Bit 2)           */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY_Msk (0x4UL)              /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE_RDY (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE2_RDY_Pos (3UL)               /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE2_RDY (Bit 3)          */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE2_RDY_Msk (0x8UL)             /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE2_RDY (Bitfield-Mask: 0x01) */
/* ======================================================  PLL_CONTROL  ====================================================== */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_ON_Pos (0UL)              /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_ON (Bit 0)         */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_ON_Msk (0x1UL)            /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_PLD_Pos (1UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_PLD (Bit 1)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_PLD_Msk (0x2UL)           /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_PLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON_Pos (2UL)              /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_ON (Bit 2)         */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON_Msk (0x4UL)            /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD_Pos (3UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_PLD (Bit 3)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD_Msk (0x8UL)           /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_PLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_MUL_Pos (4UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_MUL (Bit 4)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_MUL_Msk (0xf0UL)          /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_USB_MUL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL_Pos (8UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_MUL (Bit 8)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL_Msk (0xf00UL)         /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_MUL (Bitfield-Mask: 0x0f) */
/* ======================================================  HS_CONTROL  ======================================================= */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_ON_Pos (0UL)                   /*!< MDR_RST_CLOCK HS_CONTROL: HSE_ON (Bit 0)              */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_ON_Msk (0x1UL)                 /*!< MDR_RST_CLOCK HS_CONTROL: HSE_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_BYP_Pos (1UL)                  /*!< MDR_RST_CLOCK HS_CONTROL: HSE_BYP (Bit 1)             */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_BYP_Msk (0x2UL)                /*!< MDR_RST_CLOCK HS_CONTROL: HSE_BYP (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HS_CONTROL_HSE2_ON_Pos (2UL)                  /*!< MDR_RST_CLOCK HS_CONTROL: HSE2_ON (Bit 2)             */
#define MDR_RST_CLOCK_HS_CONTROL_HSE2_ON_Msk (0x4UL)                /*!< MDR_RST_CLOCK HS_CONTROL: HSE2_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HS_CONTROL_HSE2_BYP_Pos (3UL)                 /*!< MDR_RST_CLOCK HS_CONTROL: HSE2_BYP (Bit 3)            */
#define MDR_RST_CLOCK_HS_CONTROL_HSE2_BYP_Msk (0x8UL)               /*!< MDR_RST_CLOCK HS_CONTROL: HSE2_BYP (Bitfield-Mask: 0x01) */
/* =======================================================  CPU_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL_Pos (2UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C2_SEL (Bit 2)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL_Msk (0x4UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C2_SEL (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C3_SEL (Bit 4)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL_Msk (0xf0UL)             /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL_Pos (8UL)                  /*!< MDR_RST_CLOCK CPU_CLOCK: HCLK_SEL (Bit 8)             */
#define MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL_Msk (0x300UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: HCLK_SEL (Bitfield-Mask: 0x03) */
/* =======================================================  USB_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK USB_CLOCK: USB_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK USB_CLOCK: USB_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C2_SEL_Pos (2UL)                /*!< MDR_RST_CLOCK USB_CLOCK: USB_C2_SEL (Bit 2)           */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C2_SEL_Msk (0x4UL)              /*!< MDR_RST_CLOCK USB_CLOCK: USB_C2_SEL (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C3_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK USB_CLOCK: USB_C3_SEL (Bit 4)           */
#define MDR_RST_CLOCK_USB_CLOCK_USB_C3_SEL_Msk (0x10UL)             /*!< MDR_RST_CLOCK USB_CLOCK: USB_C3_SEL (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_USB_CLOCK_USB_EN_Pos (8UL)                    /*!< MDR_RST_CLOCK USB_CLOCK: USB_EN (Bit 8)               */
#define MDR_RST_CLOCK_USB_CLOCK_USB_EN_Msk (0x100UL)                /*!< MDR_RST_CLOCK USB_CLOCK: USB_EN (Bitfield-Mask: 0x01) */
/* =======================================================  ADC_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C2_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C2_SEL (Bit 4)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C2_SEL_Msk (0x30UL)             /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C2_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Pos (8UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C3_SEL (Bit 8)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Msk (0xf00UL)            /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN_Pos (13UL)               /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_CLK_EN (Bit 13)          */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN_Msk (0x2000UL)           /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  RTC_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Pos (0UL)                   /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_SEL (Bit 0)              */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Msk (0xfUL)                 /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Pos (4UL)                   /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_SEL (Bit 4)              */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Msk (0xf0UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN_Pos (8UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_RTC_EN (Bit 8)           */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN_Msk (0x100UL)            /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_RTC_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN_Pos (9UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_RTC_EN (Bit 9)           */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN_Msk (0x200UL)            /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_RTC_EN (Bitfield-Mask: 0x01) */
/* =======================================================  PER_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_PER_CLOCK_CAN1_CLK_EN_Pos (0UL)               /*!< MDR_RST_CLOCK PER_CLOCK: CAN1_CLK_EN (Bit 0)          */
#define MDR_RST_CLOCK_PER_CLOCK_CAN1_CLK_EN_Msk (0x1UL)             /*!< MDR_RST_CLOCK PER_CLOCK: CAN1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_Pos (1UL)               /*!< MDR_RST_CLOCK PER_CLOCK: CAN2_CLK_EN (Bit 1)          */
#define MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_Msk (0x2UL)             /*!< MDR_RST_CLOCK PER_CLOCK: CAN2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_USB_CLK_EN_Pos (2UL)                /*!< MDR_RST_CLOCK PER_CLOCK: USB_CLK_EN (Bit 2)           */
#define MDR_RST_CLOCK_PER_CLOCK_USB_CLK_EN_Msk (0x4UL)              /*!< MDR_RST_CLOCK PER_CLOCK: USB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_Pos (3UL)             /*!< MDR_RST_CLOCK PER_CLOCK: EEPROM_CLK_EN (Bit 3)        */
#define MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_Msk (0x8UL)           /*!< MDR_RST_CLOCK PER_CLOCK: EEPROM_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_Pos (4UL)                /*!< MDR_RST_CLOCK PER_CLOCK: RST_CLK_EN (Bit 4)           */
#define MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_Msk (0x10UL)             /*!< MDR_RST_CLOCK PER_CLOCK: RST_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_Pos (5UL)                /*!< MDR_RST_CLOCK PER_CLOCK: DMA_CLK_EN (Bit 5)           */
#define MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_Msk (0x20UL)             /*!< MDR_RST_CLOCK PER_CLOCK: DMA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_Pos (6UL)              /*!< MDR_RST_CLOCK PER_CLOCK: UART1_CLK_EN (Bit 6)         */
#define MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_Msk (0x40UL)           /*!< MDR_RST_CLOCK PER_CLOCK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_Pos (7UL)              /*!< MDR_RST_CLOCK PER_CLOCK: UART2_CLK_EN (Bit 7)         */
#define MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_Msk (0x80UL)           /*!< MDR_RST_CLOCK PER_CLOCK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_Pos (8UL)               /*!< MDR_RST_CLOCK PER_CLOCK: SPI1_CLK_EN (Bit 8)          */
#define MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_Msk (0x100UL)           /*!< MDR_RST_CLOCK PER_CLOCK: SPI1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_Pos (9UL)               /*!< MDR_RST_CLOCK PER_CLOCK: MIL1_CLK_EN (Bit 9)          */
#define MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_Msk (0x200UL)           /*!< MDR_RST_CLOCK PER_CLOCK: MIL1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_Pos (10UL)              /*!< MDR_RST_CLOCK PER_CLOCK: MIL2_CLK_EN (Bit 10)         */
#define MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_Msk (0x400UL)           /*!< MDR_RST_CLOCK PER_CLOCK: MIL2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_Pos (11UL)               /*!< MDR_RST_CLOCK PER_CLOCK: PWR_CLK_EN (Bit 11)          */
#define MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_Msk (0x800UL)            /*!< MDR_RST_CLOCK PER_CLOCK: PWR_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_Pos (12UL)              /*!< MDR_RST_CLOCK PER_CLOCK: WWDT_CLK_EN (Bit 12)         */
#define MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_Msk (0x1000UL)          /*!< MDR_RST_CLOCK PER_CLOCK: WWDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_Pos (13UL)              /*!< MDR_RST_CLOCK PER_CLOCK: IWDT_CLK_EN (Bit 13)         */
#define MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_Msk (0x2000UL)          /*!< MDR_RST_CLOCK PER_CLOCK: IWDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_Pos (14UL)            /*!< MDR_RST_CLOCK PER_CLOCK: TIMER1_CLK_EN (Bit 14)       */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_Msk (0x4000UL)        /*!< MDR_RST_CLOCK PER_CLOCK: TIMER1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_Pos (15UL)            /*!< MDR_RST_CLOCK PER_CLOCK: TIMER2_CLK_EN (Bit 15)       */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_Msk (0x8000UL)        /*!< MDR_RST_CLOCK PER_CLOCK: TIMER2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_Pos (16UL)            /*!< MDR_RST_CLOCK PER_CLOCK: TIMER3_CLK_EN (Bit 16)       */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_Msk (0x10000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: TIMER3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_Pos (17UL)               /*!< MDR_RST_CLOCK PER_CLOCK: ADC_CLK_EN (Bit 17)          */
#define MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_Msk (0x20000UL)          /*!< MDR_RST_CLOCK PER_CLOCK: ADC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_Pos (18UL)               /*!< MDR_RST_CLOCK PER_CLOCK: DAC_CLK_EN (Bit 18)          */
#define MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_Msk (0x40000UL)          /*!< MDR_RST_CLOCK PER_CLOCK: DAC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_Pos (19UL)            /*!< MDR_RST_CLOCK PER_CLOCK: TIMER4_CLK_EN (Bit 19)       */
#define MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_Msk (0x80000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: TIMER4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_Pos (20UL)              /*!< MDR_RST_CLOCK PER_CLOCK: SPI2_CLK_EN (Bit 20)         */
#define MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_Msk (0x100000UL)        /*!< MDR_RST_CLOCK PER_CLOCK: SPI2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_Pos (21UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTA_CLK_EN (Bit 21)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_Msk (0x200000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: PORTA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_Pos (22UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTB_CLK_EN (Bit 22)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_Msk (0x400000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: PORTB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_Pos (23UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTC_CLK_EN (Bit 23)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_Msk (0x800000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: PORTC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_Pos (24UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTD_CLK_EN (Bit 24)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK PER_CLOCK: PORTD_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_Pos (25UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTE_CLK_EN (Bit 25)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK PER_CLOCK: PORTE_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_Pos (26UL)          /*!< MDR_RST_CLOCK PER_CLOCK: ARINC_RX_CLK_EN (Bit 26)     */
#define MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_Msk (0x4000000UL)   /*!< MDR_RST_CLOCK PER_CLOCK: ARINC_RX_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_Pos (27UL)               /*!< MDR_RST_CLOCK PER_CLOCK: BKP_CLK_EN (Bit 27)          */
#define MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_Msk (0x8000000UL)        /*!< MDR_RST_CLOCK PER_CLOCK: BKP_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_Pos (28UL)          /*!< MDR_RST_CLOCK PER_CLOCK: ARINC_TX_CLK_EN (Bit 28)     */
#define MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_Msk (0x10000000UL)  /*!< MDR_RST_CLOCK PER_CLOCK: ARINC_TX_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_Pos (29UL)             /*!< MDR_RST_CLOCK PER_CLOCK: PORTF_CLK_EN (Bit 29)        */
#define MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_Msk (0x20000000UL)     /*!< MDR_RST_CLOCK PER_CLOCK: PORTF_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_Pos (30UL)               /*!< MDR_RST_CLOCK PER_CLOCK: EBC_CLK_EN (Bit 30)          */
#define MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_Msk (0x40000000UL)       /*!< MDR_RST_CLOCK PER_CLOCK: EBC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_Pos (31UL)              /*!< MDR_RST_CLOCK PER_CLOCK: SPI3_CLK_EN (Bit 31)         */
#define MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_Msk (0x80000000UL)      /*!< MDR_RST_CLOCK PER_CLOCK: SPI3_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  CAN_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK CAN_CLOCK: CAN1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK CAN_CLOCK: CAN1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_Pos (8UL)                  /*!< MDR_RST_CLOCK CAN_CLOCK: CAN2_BRG (Bit 8)             */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_Msk (0x700UL)              /*!< MDR_RST_CLOCK CAN_CLOCK: CAN2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK CAN_CLOCK: CAN1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK CAN_CLOCK: CAN1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN2_CLK_EN_Pos (25UL)              /*!< MDR_RST_CLOCK CAN_CLOCK: CAN2_CLK_EN (Bit 25)         */
#define MDR_RST_CLOCK_CAN_CLOCK_CAN2_CLK_EN_Msk (0x2000000UL)       /*!< MDR_RST_CLOCK CAN_CLOCK: CAN2_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  TIM_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Pos (8UL)                  /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_BRG (Bit 8)             */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Msk (0x700UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_Pos (16UL)                 /*!< MDR_RST_CLOCK TIM_CLOCK: TIM3_BRG (Bit 16)            */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_Msk (0x70000UL)            /*!< MDR_RST_CLOCK TIM_CLOCK: TIM3_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN_Pos (25UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_CLK_EN (Bit 25)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN_Msk (0x2000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM3_CLK_EN_Pos (26UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM3_CLK_EN (Bit 26)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM3_CLK_EN_Msk (0x4000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM3_CLK_EN (Bitfield-Mask: 0x01) */
/* ======================================================  UART_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Pos (0UL)                /*!< MDR_RST_CLOCK UART_CLOCK: UART1_BRG (Bit 0)           */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Msk (0x7UL)              /*!< MDR_RST_CLOCK UART_CLOCK: UART1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Pos (8UL)                /*!< MDR_RST_CLOCK UART_CLOCK: UART2_BRG (Bit 8)           */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Msk (0x700UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_Pos (16UL)                /*!< MDR_RST_CLOCK UART_CLOCK: TIM4_BRG (Bit 16)           */
#define MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_Msk (0x70000UL)           /*!< MDR_RST_CLOCK UART_CLOCK: TIM4_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN_Pos (24UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART1_CLK_EN (Bit 24)       */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK UART_CLOCK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN_Pos (25UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART2_CLK_EN (Bit 25)       */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK UART_CLOCK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART_CLOCK_TIM4_CLK_EN_Pos (26UL)             /*!< MDR_RST_CLOCK UART_CLOCK: TIM4_CLK_EN (Bit 26)        */
#define MDR_RST_CLOCK_UART_CLOCK_TIM4_CLK_EN_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK UART_CLOCK: TIM4_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  SSP_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_Pos (8UL)                  /*!< MDR_RST_CLOCK SSP_CLOCK: SSP2_BRG (Bit 8)             */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_Msk (0x700UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_Pos (16UL)                 /*!< MDR_RST_CLOCK SSP_CLOCK: SSP3_BRG (Bit 16)            */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_Msk (0x70000UL)            /*!< MDR_RST_CLOCK SSP_CLOCK: SSP3_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP2_CLK_EN_Pos (25UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP2_CLK_EN (Bit 25)         */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP2_CLK_EN_Msk (0x2000000UL)       /*!< MDR_RST_CLOCK SSP_CLOCK: SSP2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP3_CLK_EN_Pos (26UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP3_CLK_EN (Bit 26)         */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP3_CLK_EN_Msk (0x4000000UL)       /*!< MDR_RST_CLOCK SSP_CLOCK: SSP3_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  ETH_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH_BRG_Pos (0UL)                   /*!< MDR_RST_CLOCK ETH_CLOCK: ETH_BRG (Bit 0)              */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH_BRG_Msk (0xffUL)                /*!< MDR_RST_CLOCK ETH_CLOCK: ETH_BRG (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_Pos (8UL)                   /*!< MDR_RST_CLOCK ETH_CLOCK: MIL_BRG (Bit 8)              */
#define MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_Msk (0x700UL)               /*!< MDR_RST_CLOCK ETH_CLOCK: MIL_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_Pos (16UL)                  /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_BRG (Bit 16)             */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_Msk (0x70000UL)             /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH_CLK_EN_Pos (24UL)               /*!< MDR_RST_CLOCK ETH_CLOCK: ETH_CLK_EN (Bit 24)          */
#define MDR_RST_CLOCK_ETH_CLOCK_ETH_CLK_EN_Msk (0x1000000UL)        /*!< MDR_RST_CLOCK ETH_CLOCK: ETH_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ETH_CLOCK_MIL_CLK_EN_Pos (25UL)               /*!< MDR_RST_CLOCK ETH_CLOCK: MIL_CLK_EN (Bit 25)          */
#define MDR_RST_CLOCK_ETH_CLOCK_MIL_CLK_EN_Msk (0x2000000UL)        /*!< MDR_RST_CLOCK ETH_CLOCK: MIL_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ETH_CLOCK_SLEEP_Pos (26UL)                    /*!< MDR_RST_CLOCK ETH_CLOCK: SLEEP (Bit 26)               */
#define MDR_RST_CLOCK_ETH_CLOCK_SLEEP_Msk (0x4000000UL)             /*!< MDR_RST_CLOCK ETH_CLOCK: SLEEP (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_EN_Pos (27UL)               /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_CLK_EN (Bit 27)          */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_EN_Msk (0x8000000UL)        /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_SEL_Pos (28UL)              /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_CLK_SEL (Bit 28)         */
#define MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_SEL_Msk (0x30000000UL)      /*!< MDR_RST_CLOCK ETH_CLOCK: PHY_CLK_SEL (Bitfield-Mask: 0x03) */


/* =========================================================================================================================== */
/* ================                                          MDR_DMA                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
#define MDR_DMA_STATUS_Enable_Pos         (0UL)                     /*!< MDR_DMA STATUS: Enable (Bit 0)                        */
#define MDR_DMA_STATUS_Enable_Msk         (0x1UL)                   /*!< MDR_DMA STATUS: Enable (Bitfield-Mask: 0x01)          */
#define MDR_DMA_STATUS_State_Pos          (4UL)                     /*!< MDR_DMA STATUS: State (Bit 4)                         */
#define MDR_DMA_STATUS_State_Msk          (0xf0UL)                  /*!< MDR_DMA STATUS: State (Bitfield-Mask: 0x0f)           */
#define MDR_DMA_STATUS_Chnls_minus1_Pos   (16UL)                    /*!< MDR_DMA STATUS: Chnls_minus1 (Bit 16)                 */
#define MDR_DMA_STATUS_Chnls_minus1_Msk   (0x1f0000UL)              /*!< MDR_DMA STATUS: Chnls_minus1 (Bitfield-Mask: 0x1f)    */
#define MDR_DMA_STATUS_test_status_Pos    (28UL)                    /*!< MDR_DMA STATUS: test_status (Bit 28)                  */
#define MDR_DMA_STATUS_test_status_Msk    (0x10000000UL)            /*!< MDR_DMA STATUS: test_status (Bitfield-Mask: 0x01)     */
/* ==========================================================  CFG  ========================================================== */
#define MDR_DMA_CFG_Enable_Pos            (0UL)                     /*!< MDR_DMA CFG: Enable (Bit 0)                           */
#define MDR_DMA_CFG_Enable_Msk            (0x1UL)                   /*!< MDR_DMA CFG: Enable (Bitfield-Mask: 0x01)             */
#define MDR_DMA_CFG_Privileged_Pos        (5UL)                     /*!< MDR_DMA CFG: Privileged (Bit 5)                       */
#define MDR_DMA_CFG_Privileged_Msk        (0x20UL)                  /*!< MDR_DMA CFG: Privileged (Bitfield-Mask: 0x01)         */
#define MDR_DMA_CFG_Bufferable_Pos        (6UL)                     /*!< MDR_DMA CFG: Bufferable (Bit 6)                       */
#define MDR_DMA_CFG_Bufferable_Msk        (0x40UL)                  /*!< MDR_DMA CFG: Bufferable (Bitfield-Mask: 0x01)         */
#define MDR_DMA_CFG_Cachable_Pos          (7UL)                     /*!< MDR_DMA CFG: Cachable (Bit 7)                         */
#define MDR_DMA_CFG_Cachable_Msk          (0x80UL)                  /*!< MDR_DMA CFG: Cachable (Bitfield-Mask: 0x01)           */
/* =====================================================  CTRL_BASE_PTR  ===================================================== */
#define MDR_DMA_CTRL_BASE_PTR_Addr_Hi_Pos (10UL)                    /*!< MDR_DMA CTRL_BASE_PTR: Addr_Hi (Bit 10)               */
#define MDR_DMA_CTRL_BASE_PTR_Addr_Hi_Msk (0xfffffc00UL)            /*!< MDR_DMA CTRL_BASE_PTR: Addr_Hi (Bitfield-Mask: 0x3fffff) */
/* ===================================================  ALT_CTRL_BASE_PTR  =================================================== */
#define MDR_DMA_ALT_CTRL_BASE_PTR_Addr_Pos (0UL)                    /*!< MDR_DMA ALT_CTRL_BASE_PTR: Addr (Bit 0)               */
#define MDR_DMA_ALT_CTRL_BASE_PTR_Addr_Msk (0xffffffffUL)           /*!< MDR_DMA ALT_CTRL_BASE_PTR: Addr (Bitfield-Mask: 0xffffffff) */
/* ===================================================  WAITONREQ_STATUS  ==================================================== */
#define MDR_DMA_WAITONREQ_STATUS_Ch__Pos  (0UL)                     /*!< MDR_DMA WAITONREQ_STATUS: Ch_ (Bit 0)                 */
#define MDR_DMA_WAITONREQ_STATUS_Ch__Msk  (0x1UL)                   /*!< MDR_DMA WAITONREQ_STATUS: Ch_ (Bitfield-Mask: 0x01)   */
/* ====================================================  CHNL_SW_REQUEST  ==================================================== */
#define MDR_DMA_CHNL_SW_REQUEST_Ch__Pos   (0UL)                     /*!< MDR_DMA CHNL_SW_REQUEST: Ch_ (Bit 0)                  */
#define MDR_DMA_CHNL_SW_REQUEST_Ch__Msk   (0x1UL)                   /*!< MDR_DMA CHNL_SW_REQUEST: Ch_ (Bitfield-Mask: 0x01)    */
/* ===================================================  CHNL_USEBURST_SET  =================================================== */
#define MDR_DMA_CHNL_USEBURST_SET_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_USEBURST_SET: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_USEBURST_SET_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_USEBURST_SET: Ch_ (Bitfield-Mask: 0x01)  */
/* ===================================================  CHNL_USEBURST_CLR  =================================================== */
#define MDR_DMA_CHNL_USEBURST_CLR_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_USEBURST_CLR: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_USEBURST_CLR_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_USEBURST_CLR: Ch_ (Bitfield-Mask: 0x01)  */
/* ===================================================  CHNL_REQ_MASK_SET  =================================================== */
#define MDR_DMA_CHNL_REQ_MASK_SET_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_REQ_MASK_SET: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_REQ_MASK_SET_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_REQ_MASK_SET: Ch_ (Bitfield-Mask: 0x01)  */
/* ===================================================  CHNL_REQ_MASK_CLR  =================================================== */
#define MDR_DMA_CHNL_REQ_MASK_CLR_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_REQ_MASK_CLR: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_REQ_MASK_CLR_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_REQ_MASK_CLR: Ch_ (Bitfield-Mask: 0x01)  */
/* ====================================================  CHNL_ENABLE_SET  ==================================================== */
#define MDR_DMA_CHNL_ENABLE_SET_Ch__Pos   (0UL)                     /*!< MDR_DMA CHNL_ENABLE_SET: Ch_ (Bit 0)                  */
#define MDR_DMA_CHNL_ENABLE_SET_Ch__Msk   (0x1UL)                   /*!< MDR_DMA CHNL_ENABLE_SET: Ch_ (Bitfield-Mask: 0x01)    */
/* ====================================================  CHNL_ENABLE_CLR  ==================================================== */
#define MDR_DMA_CHNL_ENABLE_CLR_Ch__Pos   (0UL)                     /*!< MDR_DMA CHNL_ENABLE_CLR: Ch_ (Bit 0)                  */
#define MDR_DMA_CHNL_ENABLE_CLR_Ch__Msk   (0x1UL)                   /*!< MDR_DMA CHNL_ENABLE_CLR: Ch_ (Bitfield-Mask: 0x01)    */
/* ===================================================  CHNL_PRI_ALT_SET  ==================================================== */
#define MDR_DMA_CHNL_PRI_ALT_SET_Ch__Pos  (0UL)                     /*!< MDR_DMA CHNL_PRI_ALT_SET: Ch_ (Bit 0)                 */
#define MDR_DMA_CHNL_PRI_ALT_SET_Ch__Msk  (0x1UL)                   /*!< MDR_DMA CHNL_PRI_ALT_SET: Ch_ (Bitfield-Mask: 0x01)   */
/* ===================================================  CHNL_PRI_ALT_CLR  ==================================================== */
#define MDR_DMA_CHNL_PRI_ALT_CLR_Ch__Pos  (0UL)                     /*!< MDR_DMA CHNL_PRI_ALT_CLR: Ch_ (Bit 0)                 */
#define MDR_DMA_CHNL_PRI_ALT_CLR_Ch__Msk  (0x1UL)                   /*!< MDR_DMA CHNL_PRI_ALT_CLR: Ch_ (Bitfield-Mask: 0x01)   */
/* ===================================================  CHNL_PRIORITY_SET  =================================================== */
#define MDR_DMA_CHNL_PRIORITY_SET_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_PRIORITY_SET: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_PRIORITY_SET_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_PRIORITY_SET: Ch_ (Bitfield-Mask: 0x01)  */
/* ===================================================  CHNL_PRIORITY_CLR  =================================================== */
#define MDR_DMA_CHNL_PRIORITY_CLR_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_PRIORITY_CLR: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_PRIORITY_CLR_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_PRIORITY_CLR: Ch_ (Bitfield-Mask: 0x01)  */
/* ========================================================  ERR_CLR  ======================================================== */
#define MDR_DMA_ERR_CLR_Ch__Pos           (0UL)                     /*!< MDR_DMA ERR_CLR: Ch_ (Bit 0)                          */
#define MDR_DMA_ERR_CLR_Ch__Msk           (0x1UL)                   /*!< MDR_DMA ERR_CLR: Ch_ (Bitfield-Mask: 0x01)            */


/* =========================================================================================================================== */
/* ================                                         MDR_Power                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  PVDCS  ========================================================= */
#define MDR_Power_PVDCS_PVDEN_Pos         (0UL)                     /*!< MDR_Power PVDCS: PVDEN (Bit 0)                        */
#define MDR_Power_PVDCS_PVDEN_Msk         (0x1UL)                   /*!< MDR_Power PVDCS: PVDEN (Bitfield-Mask: 0x01)          */
#define MDR_Power_PVDCS_PBLS_Pos          (1UL)                     /*!< MDR_Power PVDCS: PBLS (Bit 1)                         */
#define MDR_Power_PVDCS_PBLS_Msk          (0x6UL)                   /*!< MDR_Power PVDCS: PBLS (Bitfield-Mask: 0x03)           */
#define MDR_Power_PVDCS_PLS_Pos           (3UL)                     /*!< MDR_Power PVDCS: PLS (Bit 3)                          */
#define MDR_Power_PVDCS_PLS_Msk           (0x38UL)                  /*!< MDR_Power PVDCS: PLS (Bitfield-Mask: 0x07)            */
#define MDR_Power_PVDCS_PVBD_Pos          (6UL)                     /*!< MDR_Power PVDCS: PVBD (Bit 6)                         */
#define MDR_Power_PVDCS_PVBD_Msk          (0x40UL)                  /*!< MDR_Power PVDCS: PVBD (Bitfield-Mask: 0x01)           */
#define MDR_Power_PVDCS_PVD_Pos           (7UL)                     /*!< MDR_Power PVDCS: PVD (Bit 7)                          */
#define MDR_Power_PVDCS_PVD_Msk           (0x80UL)                  /*!< MDR_Power PVDCS: PVD (Bitfield-Mask: 0x01)            */
#define MDR_Power_PVDCS_IEPVBD_Pos        (8UL)                     /*!< MDR_Power PVDCS: IEPVBD (Bit 8)                       */
#define MDR_Power_PVDCS_IEPVBD_Msk        (0x100UL)                 /*!< MDR_Power PVDCS: IEPVBD (Bitfield-Mask: 0x01)         */
#define MDR_Power_PVDCS_IEPVD_Pos         (9UL)                     /*!< MDR_Power PVDCS: IEPVD (Bit 9)                        */
#define MDR_Power_PVDCS_IEPVD_Msk         (0x200UL)                 /*!< MDR_Power PVDCS: IEPVD (Bitfield-Mask: 0x01)          */
#define MDR_Power_PVDCS_INVB_Pos          (10UL)                    /*!< MDR_Power PVDCS: INVB (Bit 10)                        */
#define MDR_Power_PVDCS_INVB_Msk          (0x400UL)                 /*!< MDR_Power PVDCS: INVB (Bitfield-Mask: 0x01)           */
#define MDR_Power_PVDCS_INV_Pos           (11UL)                    /*!< MDR_Power PVDCS: INV (Bit 11)                         */
#define MDR_Power_PVDCS_INV_Msk           (0x800UL)                 /*!< MDR_Power PVDCS: INV (Bitfield-Mask: 0x01)            */
#define MDR_Power_PVDCS_PVDBEN_Pos        (12UL)                    /*!< MDR_Power PVDCS: PVDBEN (Bit 12)                      */
#define MDR_Power_PVDCS_PVDBEN_Msk        (0x1000UL)                /*!< MDR_Power PVDCS: PVDBEN (Bitfield-Mask: 0x01)         */
/* ========================================================  ResReg  ========================================================= */
#define MDR_Power_ResReg_Value_Pos        (0UL)                     /*!< MDR_Power ResReg: Value (Bit 0)                       */
#define MDR_Power_ResReg_Value_Msk        (0xffffffffUL)            /*!< MDR_Power ResReg: Value (Bitfield-Mask: 0xffffffff)   */


/* =========================================================================================================================== */
/* ================                                         MDR_WWDT                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define MDR_WWDT_CR_T_Pos                 (0UL)                     /*!< MDR_WWDT CR: T (Bit 0)                                */
#define MDR_WWDT_CR_T_Msk                 (0x7fUL)                  /*!< MDR_WWDT CR: T (Bitfield-Mask: 0x7f)                  */
#define MDR_WWDT_CR_WDGA_Pos              (7UL)                     /*!< MDR_WWDT CR: WDGA (Bit 7)                             */
#define MDR_WWDT_CR_WDGA_Msk              (0x80UL)                  /*!< MDR_WWDT CR: WDGA (Bitfield-Mask: 0x01)               */
/* ==========================================================  CFR  ========================================================== */
#define MDR_WWDT_CFR_W_Pos                (0UL)                     /*!< MDR_WWDT CFR: W (Bit 0)                               */
#define MDR_WWDT_CFR_W_Msk                (0x7fUL)                  /*!< MDR_WWDT CFR: W (Bitfield-Mask: 0x7f)                 */
#define MDR_WWDT_CFR_WGTB_Pos             (7UL)                     /*!< MDR_WWDT CFR: WGTB (Bit 7)                            */
#define MDR_WWDT_CFR_WGTB_Msk             (0x180UL)                 /*!< MDR_WWDT CFR: WGTB (Bitfield-Mask: 0x03)              */
#define MDR_WWDT_CFR_EWI_Pos              (9UL)                     /*!< MDR_WWDT CFR: EWI (Bit 9)                             */
#define MDR_WWDT_CFR_EWI_Msk              (0x200UL)                 /*!< MDR_WWDT CFR: EWI (Bitfield-Mask: 0x01)               */
/* ==========================================================  SR  =========================================================== */
#define MDR_WWDT_SR_EWIF_Pos              (0UL)                     /*!< MDR_WWDT SR: EWIF (Bit 0)                             */
#define MDR_WWDT_SR_EWIF_Msk              (0x1UL)                   /*!< MDR_WWDT SR: EWIF (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                         MDR_IWDT                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  KR  =========================================================== */
#define MDR_IWDT_KR_KEY_Pos               (0UL)                     /*!< MDR_IWDT KR: KEY (Bit 0)                              */
#define MDR_IWDT_KR_KEY_Msk               (0xffffUL)                /*!< MDR_IWDT KR: KEY (Bitfield-Mask: 0xffff)              */
/* ==========================================================  PR  =========================================================== */
#define MDR_IWDT_PR_PR_Pos                (0UL)                     /*!< MDR_IWDT PR: PR (Bit 0)                               */
#define MDR_IWDT_PR_PR_Msk                (0x7UL)                   /*!< MDR_IWDT PR: PR (Bitfield-Mask: 0x07)                 */
/* ==========================================================  RLR  ========================================================== */
#define MDR_IWDT_RLR_PRL_Pos              (0UL)                     /*!< MDR_IWDT RLR: PRL (Bit 0)                             */
#define MDR_IWDT_RLR_PRL_Msk              (0xfffUL)                 /*!< MDR_IWDT RLR: PRL (Bitfield-Mask: 0xfff)              */
/* ==========================================================  SR  =========================================================== */
#define MDR_IWDT_SR_PVU_Pos               (0UL)                     /*!< MDR_IWDT SR: PVU (Bit 0)                              */
#define MDR_IWDT_SR_PVU_Msk               (0x1UL)                   /*!< MDR_IWDT SR: PVU (Bitfield-Mask: 0x01)                */
#define MDR_IWDT_SR_RVU_Pos               (1UL)                     /*!< MDR_IWDT SR: RVU (Bit 1)                              */
#define MDR_IWDT_SR_RVU_Msk               (0x2UL)                   /*!< MDR_IWDT SR: RVU (Bitfield-Mask: 0x01)                */


/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  ADC1_Cfg  ======================================================== */
#define MDR_ADC_ADC1_Cfg_ADON_Pos         (0UL)                     /*!< MDR_ADC ADC1_Cfg: ADON (Bit 0)                        */
#define MDR_ADC_ADC1_Cfg_ADON_Msk         (0x1UL)                   /*!< MDR_ADC ADC1_Cfg: ADON (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_GO_Pos           (1UL)                     /*!< MDR_ADC ADC1_Cfg: GO (Bit 1)                          */
#define MDR_ADC_ADC1_Cfg_GO_Msk           (0x2UL)                   /*!< MDR_ADC ADC1_Cfg: GO (Bitfield-Mask: 0x01)            */
#define MDR_ADC_ADC1_Cfg_CLKS_Pos         (2UL)                     /*!< MDR_ADC ADC1_Cfg: CLKS (Bit 2)                        */
#define MDR_ADC_ADC1_Cfg_CLKS_Msk         (0x4UL)                   /*!< MDR_ADC ADC1_Cfg: CLKS (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_SAMPLE_Pos       (3UL)                     /*!< MDR_ADC ADC1_Cfg: SAMPLE (Bit 3)                      */
#define MDR_ADC_ADC1_Cfg_SAMPLE_Msk       (0x8UL)                   /*!< MDR_ADC ADC1_Cfg: SAMPLE (Bitfield-Mask: 0x01)        */
#define MDR_ADC_ADC1_Cfg_CHS_Pos          (4UL)                     /*!< MDR_ADC ADC1_Cfg: CHS (Bit 4)                         */
#define MDR_ADC_ADC1_Cfg_CHS_Msk          (0x1f0UL)                 /*!< MDR_ADC ADC1_Cfg: CHS (Bitfield-Mask: 0x1f)           */
#define MDR_ADC_ADC1_Cfg_CHCH_Pos         (9UL)                     /*!< MDR_ADC ADC1_Cfg: CHCH (Bit 9)                        */
#define MDR_ADC_ADC1_Cfg_CHCH_Msk         (0x200UL)                 /*!< MDR_ADC ADC1_Cfg: CHCH (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_RGNC_Pos         (10UL)                    /*!< MDR_ADC ADC1_Cfg: RGNC (Bit 10)                       */
#define MDR_ADC_ADC1_Cfg_RGNC_Msk         (0x400UL)                 /*!< MDR_ADC ADC1_Cfg: RGNC (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_M_REF_Pos        (11UL)                    /*!< MDR_ADC ADC1_Cfg: M_REF (Bit 11)                      */
#define MDR_ADC_ADC1_Cfg_M_REF_Msk        (0x800UL)                 /*!< MDR_ADC ADC1_Cfg: M_REF (Bitfield-Mask: 0x01)         */
#define MDR_ADC_ADC1_Cfg_DIV_CLK_Pos      (12UL)                    /*!< MDR_ADC ADC1_Cfg: DIV_CLK (Bit 12)                    */
#define MDR_ADC_ADC1_Cfg_DIV_CLK_Msk      (0xf000UL)                /*!< MDR_ADC ADC1_Cfg: DIV_CLK (Bitfield-Mask: 0x0f)       */
#define MDR_ADC_ADC1_Cfg_TS_EN_Pos        (17UL)                    /*!< MDR_ADC ADC1_Cfg: TS_EN (Bit 17)                      */
#define MDR_ADC_ADC1_Cfg_TS_EN_Msk        (0x20000UL)               /*!< MDR_ADC ADC1_Cfg: TS_EN (Bitfield-Mask: 0x01)         */
#define MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Pos   (18UL)                    /*!< MDR_ADC ADC1_Cfg: TS_BUFF_EN (Bit 18)                 */
#define MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Msk   (0x40000UL)               /*!< MDR_ADC ADC1_Cfg: TS_BUFF_EN (Bitfield-Mask: 0x01)    */
#define MDR_ADC_ADC1_Cfg_SEL_TS_Pos       (19UL)                    /*!< MDR_ADC ADC1_Cfg: SEL_TS (Bit 19)                     */
#define MDR_ADC_ADC1_Cfg_SEL_TS_Msk       (0x80000UL)               /*!< MDR_ADC ADC1_Cfg: SEL_TS (Bitfield-Mask: 0x01)        */
#define MDR_ADC_ADC1_Cfg_SEL_VREF_Pos     (20UL)                    /*!< MDR_ADC ADC1_Cfg: SEL_VREF (Bit 20)                   */
#define MDR_ADC_ADC1_Cfg_SEL_VREF_Msk     (0x100000UL)              /*!< MDR_ADC ADC1_Cfg: SEL_VREF (Bitfield-Mask: 0x01)      */
#define MDR_ADC_ADC1_Cfg_Delay_GO_Pos     (25UL)                    /*!< MDR_ADC ADC1_Cfg: Delay_GO (Bit 25)                   */
#define MDR_ADC_ADC1_Cfg_Delay_GO_Msk     (0xe000000UL)             /*!< MDR_ADC ADC1_Cfg: Delay_GO (Bitfield-Mask: 0x07)      */
/* =======================================================  ADC2_Cfg  ======================================================== */
#define MDR_ADC_ADC2_Cfg_ADC1_OP_Pos      (17UL)                    /*!< MDR_ADC ADC2_Cfg: ADC1_OP (Bit 17)                    */
#define MDR_ADC_ADC2_Cfg_ADC1_OP_Msk      (0x20000UL)               /*!< MDR_ADC ADC2_Cfg: ADC1_OP (Bitfield-Mask: 0x01)       */
/* =====================================================  ADC1_H_Level  ====================================================== */
#define MDR_ADC_ADC1_H_Level_Level_Pos    (0UL)                     /*!< MDR_ADC ADC1_H_Level: Level (Bit 0)                   */
#define MDR_ADC_ADC1_H_Level_Level_Msk    (0xfffUL)                 /*!< MDR_ADC ADC1_H_Level: Level (Bitfield-Mask: 0xfff)    */
/* =====================================================  ADC1_L_Level  ====================================================== */
#define MDR_ADC_ADC1_L_Level_Level_Pos    (0UL)                     /*!< MDR_ADC ADC1_L_Level: Level (Bit 0)                   */
#define MDR_ADC_ADC1_L_Level_Level_Msk    (0xfffUL)                 /*!< MDR_ADC ADC1_L_Level: Level (Bitfield-Mask: 0xfff)    */
/* ======================================================  ADC1_RESULT  ====================================================== */
#define MDR_ADC_ADC1_RESULT_Value_Pos     (0UL)                     /*!< MDR_ADC ADC1_RESULT: Value (Bit 0)                    */
#define MDR_ADC_ADC1_RESULT_Value_Msk     (0xfffUL)                 /*!< MDR_ADC ADC1_RESULT: Value (Bitfield-Mask: 0xfff)     */
#define MDR_ADC_ADC1_RESULT_Channel_Pos   (16UL)                    /*!< MDR_ADC ADC1_RESULT: Channel (Bit 16)                 */
#define MDR_ADC_ADC1_RESULT_Channel_Msk   (0x1f0000UL)              /*!< MDR_ADC ADC1_RESULT: Channel (Bitfield-Mask: 0x1f)    */
/* ======================================================  ADC1_STATUS  ====================================================== */
#define MDR_ADC_ADC1_STATUS_Overwrite_Pos (0UL)                     /*!< MDR_ADC ADC1_STATUS: Overwrite (Bit 0)                */
#define MDR_ADC_ADC1_STATUS_Overwrite_Msk (0x1UL)                   /*!< MDR_ADC ADC1_STATUS: Overwrite (Bitfield-Mask: 0x01)  */
#define MDR_ADC_ADC1_STATUS_AWOIFEN_Pos   (1UL)                     /*!< MDR_ADC ADC1_STATUS: AWOIFEN (Bit 1)                  */
#define MDR_ADC_ADC1_STATUS_AWOIFEN_Msk   (0x2UL)                   /*!< MDR_ADC ADC1_STATUS: AWOIFEN (Bitfield-Mask: 0x01)    */
#define MDR_ADC_ADC1_STATUS_EOCIF_Pos     (2UL)                     /*!< MDR_ADC ADC1_STATUS: EOCIF (Bit 2)                    */
#define MDR_ADC_ADC1_STATUS_EOCIF_Msk     (0x4UL)                   /*!< MDR_ADC ADC1_STATUS: EOCIF (Bitfield-Mask: 0x01)      */
#define MDR_ADC_ADC1_STATUS_AWOIF_IE_Pos  (3UL)                     /*!< MDR_ADC ADC1_STATUS: AWOIF_IE (Bit 3)                 */
#define MDR_ADC_ADC1_STATUS_AWOIF_IE_Msk  (0x8UL)                   /*!< MDR_ADC ADC1_STATUS: AWOIF_IE (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_STATUS_EOCIF_EN_Pos  (4UL)                     /*!< MDR_ADC ADC1_STATUS: EOCIF_EN (Bit 4)                 */
#define MDR_ADC_ADC1_STATUS_EOCIF_EN_Msk  (0x10UL)                  /*!< MDR_ADC ADC1_STATUS: EOCIF_EN (Bitfield-Mask: 0x01)   */
/* ======================================================  ADC1_CHSEL  ======================================================= */
#define MDR_ADC_ADC1_CHSEL_Channel_0_Pos  (0UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_0 (Bit 0)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_0_Msk  (0x1UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_0 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_1_Pos  (1UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_1 (Bit 1)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_1_Msk  (0x2UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_1 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_2_Pos  (2UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_2 (Bit 2)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_2_Msk  (0x4UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_2 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_3_Pos  (3UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_3 (Bit 3)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_3_Msk  (0x8UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_3 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_4_Pos  (4UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_4 (Bit 4)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_4_Msk  (0x10UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_4 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_5_Pos  (5UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_5 (Bit 5)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_5_Msk  (0x20UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_5 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_6_Pos  (6UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_6 (Bit 6)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_6_Msk  (0x40UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_6 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_7_Pos  (7UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_7 (Bit 7)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_7_Msk  (0x80UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_7 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_30_Pos (30UL)                    /*!< MDR_ADC ADC1_CHSEL: Channel_30 (Bit 30)               */
#define MDR_ADC_ADC1_CHSEL_Channel_30_Msk (0x40000000UL)            /*!< MDR_ADC ADC1_CHSEL: Channel_30 (Bitfield-Mask: 0x01)  */
#define MDR_ADC_ADC1_CHSEL_Channel_31_Pos (31UL)                    /*!< MDR_ADC ADC1_CHSEL: Channel_31 (Bit 31)               */
#define MDR_ADC_ADC1_CHSEL_Channel_31_Msk (0x80000000UL)            /*!< MDR_ADC ADC1_CHSEL: Channel_31 (Bitfield-Mask: 0x01)  */
/* =======================================================  ADC1_TRIM  ======================================================= */
#define MDR_ADC_ADC1_TRIM_TS_Trim_Pos     (1UL)                     /*!< MDR_ADC ADC1_TRIM: TS_Trim (Bit 1)                    */
#define MDR_ADC_ADC1_TRIM_TS_Trim_Msk     (0x3eUL)                  /*!< MDR_ADC ADC1_TRIM: TS_Trim (Bitfield-Mask: 0x1f)      */
#define MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Pos (6UL)                    /*!< MDR_ADC ADC1_TRIM: SEL_VREF_BUF (Bit 6)               */
#define MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Msk (0x40UL)                 /*!< MDR_ADC ADC1_TRIM: SEL_VREF_BUF (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  REG_0  ========================================================= */
/* ========================================================  REG_0E  ========================================================= */
#define MDR_BKP_REG_0E_LOW_Pos            (0UL)                     /*!< MDR_BKP REG_0E: LOW (Bit 0)                           */
#define MDR_BKP_REG_0E_LOW_Msk            (0x7UL)                   /*!< MDR_BKP REG_0E: LOW (Bitfield-Mask: 0x07)             */
#define MDR_BKP_REG_0E_SelectRI_Pos       (3UL)                     /*!< MDR_BKP REG_0E: SelectRI (Bit 3)                      */
#define MDR_BKP_REG_0E_SelectRI_Msk       (0x38UL)                  /*!< MDR_BKP REG_0E: SelectRI (Bitfield-Mask: 0x07)        */
#define MDR_BKP_REG_0E_StandAlone_Pos     (6UL)                     /*!< MDR_BKP REG_0E: StandAlone (Bit 6)                    */
#define MDR_BKP_REG_0E_StandAlone_Msk     (0x40UL)                  /*!< MDR_BKP REG_0E: StandAlone (Bitfield-Mask: 0x01)      */
#define MDR_BKP_REG_0E_Trim_dDUcc_Pos     (8UL)                     /*!< MDR_BKP REG_0E: Trim_dDUcc (Bit 8)                    */
#define MDR_BKP_REG_0E_Trim_dDUcc_Msk     (0x700UL)                 /*!< MDR_BKP REG_0E: Trim_dDUcc (Bitfield-Mask: 0x07)      */
#define MDR_BKP_REG_0E_FPOR_Pos           (11UL)                    /*!< MDR_BKP REG_0E: FPOR (Bit 11)                         */
#define MDR_BKP_REG_0E_FPOR_Msk           (0x800UL)                 /*!< MDR_BKP REG_0E: FPOR (Bitfield-Mask: 0x01)            */
#define MDR_BKP_REG_0E_Trim_DUcc_Pos      (12UL)                    /*!< MDR_BKP REG_0E: Trim_DUcc (Bit 12)                    */
#define MDR_BKP_REG_0E_Trim_DUcc_Msk      (0x3000UL)                /*!< MDR_BKP REG_0E: Trim_DUcc (Bitfield-Mask: 0x03)       */
#define MDR_BKP_REG_0E_I_LimEn_Pos        (15UL)                    /*!< MDR_BKP REG_0E: I_LimEn (Bit 15)                      */
#define MDR_BKP_REG_0E_I_LimEn_Msk        (0x8000UL)                /*!< MDR_BKP REG_0E: I_LimEn (Bitfield-Mask: 0x01)         */
/* ========================================================  REG_0F  ========================================================= */
#define MDR_BKP_REG_0F_LSE_ON_Pos         (0UL)                     /*!< MDR_BKP REG_0F: LSE_ON (Bit 0)                        */
#define MDR_BKP_REG_0F_LSE_ON_Msk         (0x1UL)                   /*!< MDR_BKP REG_0F: LSE_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_LSE_BYP_Pos        (1UL)                     /*!< MDR_BKP REG_0F: LSE_BYP (Bit 1)                       */
#define MDR_BKP_REG_0F_LSE_BYP_Msk        (0x2UL)                   /*!< MDR_BKP REG_0F: LSE_BYP (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_RTC_SEL_Pos        (2UL)                     /*!< MDR_BKP REG_0F: RTC_SEL (Bit 2)                       */
#define MDR_BKP_REG_0F_RTC_SEL_Msk        (0xcUL)                   /*!< MDR_BKP REG_0F: RTC_SEL (Bitfield-Mask: 0x03)         */
#define MDR_BKP_REG_0F_RTC_EN_Pos         (4UL)                     /*!< MDR_BKP REG_0F: RTC_EN (Bit 4)                        */
#define MDR_BKP_REG_0F_RTC_EN_Msk         (0x10UL)                  /*!< MDR_BKP REG_0F: RTC_EN (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_RTC_CAL_Pos        (5UL)                     /*!< MDR_BKP REG_0F: RTC_CAL (Bit 5)                       */
#define MDR_BKP_REG_0F_RTC_CAL_Msk        (0x1fe0UL)                /*!< MDR_BKP REG_0F: RTC_CAL (Bitfield-Mask: 0xff)         */
#define MDR_BKP_REG_0F_LSE_RDY_Pos        (13UL)                    /*!< MDR_BKP REG_0F: LSE_RDY (Bit 13)                      */
#define MDR_BKP_REG_0F_LSE_RDY_Msk        (0x2000UL)                /*!< MDR_BKP REG_0F: LSE_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_LSI_ON_Pos         (15UL)                    /*!< MDR_BKP REG_0F: LSI_ON (Bit 15)                       */
#define MDR_BKP_REG_0F_LSI_ON_Msk         (0x8000UL)                /*!< MDR_BKP REG_0F: LSI_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_LSI_TRIM_Pos       (16UL)                    /*!< MDR_BKP REG_0F: LSI_TRIM (Bit 16)                     */
#define MDR_BKP_REG_0F_LSI_TRIM_Msk       (0x1f0000UL)              /*!< MDR_BKP REG_0F: LSI_TRIM (Bitfield-Mask: 0x1f)        */
#define MDR_BKP_REG_0F_LSI_RDY_Pos        (21UL)                    /*!< MDR_BKP REG_0F: LSI_RDY (Bit 21)                      */
#define MDR_BKP_REG_0F_LSI_RDY_Msk        (0x200000UL)              /*!< MDR_BKP REG_0F: LSI_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_HSI_ON_Pos         (22UL)                    /*!< MDR_BKP REG_0F: HSI_ON (Bit 22)                       */
#define MDR_BKP_REG_0F_HSI_ON_Msk         (0x400000UL)              /*!< MDR_BKP REG_0F: HSI_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_HSI_RDY_Pos        (23UL)                    /*!< MDR_BKP REG_0F: HSI_RDY (Bit 23)                      */
#define MDR_BKP_REG_0F_HSI_RDY_Msk        (0x800000UL)              /*!< MDR_BKP REG_0F: HSI_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_HSI_TRIM_Pos       (24UL)                    /*!< MDR_BKP REG_0F: HSI_TRIM (Bit 24)                     */
#define MDR_BKP_REG_0F_HSI_TRIM_Msk       (0x3f000000UL)            /*!< MDR_BKP REG_0F: HSI_TRIM (Bitfield-Mask: 0x3f)        */
#define MDR_BKP_REG_0F_Standby_Pos        (30UL)                    /*!< MDR_BKP REG_0F: Standby (Bit 30)                      */
#define MDR_BKP_REG_0F_Standby_Msk        (0x40000000UL)            /*!< MDR_BKP REG_0F: Standby (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_RTC_RESET_Pos      (31UL)                    /*!< MDR_BKP REG_0F: RTC_RESET (Bit 31)                    */
#define MDR_BKP_REG_0F_RTC_RESET_Msk      (0x80000000UL)            /*!< MDR_BKP REG_0F: RTC_RESET (Bitfield-Mask: 0x01)       */
/* ========================================================  RTC_CNT  ======================================================== */
/* ========================================================  RTC_DIV  ======================================================== */
#define MDR_BKP_RTC_DIV_Value_Pos         (0UL)                     /*!< MDR_BKP RTC_DIV: Value (Bit 0)                        */
#define MDR_BKP_RTC_DIV_Value_Msk         (0xfffffUL)               /*!< MDR_BKP RTC_DIV: Value (Bitfield-Mask: 0xfffff)       */
/* ========================================================  RTC_PRL  ======================================================== */
#define MDR_BKP_RTC_PRL_Value_Pos         (0UL)                     /*!< MDR_BKP RTC_PRL: Value (Bit 0)                        */
#define MDR_BKP_RTC_PRL_Value_Msk         (0xfffffUL)               /*!< MDR_BKP RTC_PRL: Value (Bitfield-Mask: 0xfffff)       */
/* =======================================================  RTC_ALRM  ======================================================== */
#define MDR_BKP_RTC_ALRM_Value_Pos        (0UL)                     /*!< MDR_BKP RTC_ALRM: Value (Bit 0)                       */
#define MDR_BKP_RTC_ALRM_Value_Msk        (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM: Value (Bitfield-Mask: 0xffffffff)   */
/* ========================================================  RTC_CS  ========================================================= */
#define MDR_BKP_RTC_CS_OWF_Pos            (0UL)                     /*!< MDR_BKP RTC_CS: OWF (Bit 0)                           */
#define MDR_BKP_RTC_CS_OWF_Msk            (0x1UL)                   /*!< MDR_BKP RTC_CS: OWF (Bitfield-Mask: 0x01)             */
#define MDR_BKP_RTC_CS_SECF_Pos           (1UL)                     /*!< MDR_BKP RTC_CS: SECF (Bit 1)                          */
#define MDR_BKP_RTC_CS_SECF_Msk           (0x2UL)                   /*!< MDR_BKP RTC_CS: SECF (Bitfield-Mask: 0x01)            */
#define MDR_BKP_RTC_CS_ALRF_Pos           (2UL)                     /*!< MDR_BKP RTC_CS: ALRF (Bit 2)                          */
#define MDR_BKP_RTC_CS_ALRF_Msk           (0x4UL)                   /*!< MDR_BKP RTC_CS: ALRF (Bitfield-Mask: 0x01)            */
#define MDR_BKP_RTC_CS_OWF_IE_Pos         (3UL)                     /*!< MDR_BKP RTC_CS: OWF_IE (Bit 3)                        */
#define MDR_BKP_RTC_CS_OWF_IE_Msk         (0x8UL)                   /*!< MDR_BKP RTC_CS: OWF_IE (Bitfield-Mask: 0x01)          */
#define MDR_BKP_RTC_CS_SECF_IE_Pos        (4UL)                     /*!< MDR_BKP RTC_CS: SECF_IE (Bit 4)                       */
#define MDR_BKP_RTC_CS_SECF_IE_Msk        (0x10UL)                  /*!< MDR_BKP RTC_CS: SECF_IE (Bitfield-Mask: 0x01)         */
#define MDR_BKP_RTC_CS_ALRF_IE_Pos        (5UL)                     /*!< MDR_BKP RTC_CS: ALRF_IE (Bit 5)                       */
#define MDR_BKP_RTC_CS_ALRF_IE_Msk        (0x20UL)                  /*!< MDR_BKP RTC_CS: ALRF_IE (Bitfield-Mask: 0x01)         */
#define MDR_BKP_RTC_CS_WEC_Pos            (6UL)                     /*!< MDR_BKP RTC_CS: WEC (Bit 6)                           */
#define MDR_BKP_RTC_CS_WEC_Msk            (0x40UL)                  /*!< MDR_BKP RTC_CS: WEC (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
#define MDR_UART1_DR_DATA_Pos             (0UL)                     /*!< MDR_UART1 DR: DATA (Bit 0)                            */
#define MDR_UART1_DR_DATA_Msk             (0xffUL)                  /*!< MDR_UART1 DR: DATA (Bitfield-Mask: 0xff)              */
#define MDR_UART1_DR_FE_Pos               (8UL)                     /*!< MDR_UART1 DR: FE (Bit 8)                              */
#define MDR_UART1_DR_FE_Msk               (0x100UL)                 /*!< MDR_UART1 DR: FE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_PE_Pos               (9UL)                     /*!< MDR_UART1 DR: PE (Bit 9)                              */
#define MDR_UART1_DR_PE_Msk               (0x200UL)                 /*!< MDR_UART1 DR: PE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_BE_Pos               (10UL)                    /*!< MDR_UART1 DR: BE (Bit 10)                             */
#define MDR_UART1_DR_BE_Msk               (0x400UL)                 /*!< MDR_UART1 DR: BE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_OE_Pos               (11UL)                    /*!< MDR_UART1 DR: OE (Bit 11)                             */
#define MDR_UART1_DR_OE_Msk               (0x800UL)                 /*!< MDR_UART1 DR: OE (Bitfield-Mask: 0x01)                */
/* ========================================================  RSR_ECR  ======================================================== */
#define MDR_UART1_RSR_ECR_FE_Pos          (0UL)                     /*!< MDR_UART1 RSR_ECR: FE (Bit 0)                         */
#define MDR_UART1_RSR_ECR_FE_Msk          (0x1UL)                   /*!< MDR_UART1 RSR_ECR: FE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_PE_Pos          (1UL)                     /*!< MDR_UART1 RSR_ECR: PE (Bit 1)                         */
#define MDR_UART1_RSR_ECR_PE_Msk          (0x2UL)                   /*!< MDR_UART1 RSR_ECR: PE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_BE_Pos          (2UL)                     /*!< MDR_UART1 RSR_ECR: BE (Bit 2)                         */
#define MDR_UART1_RSR_ECR_BE_Msk          (0x4UL)                   /*!< MDR_UART1 RSR_ECR: BE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_OE_Pos          (3UL)                     /*!< MDR_UART1 RSR_ECR: OE (Bit 3)                         */
#define MDR_UART1_RSR_ECR_OE_Msk          (0x8UL)                   /*!< MDR_UART1 RSR_ECR: OE (Bitfield-Mask: 0x01)           */
/* ==========================================================  FR  =========================================================== */
#define MDR_UART1_FR_CTS_Pos              (0UL)                     /*!< MDR_UART1 FR: CTS (Bit 0)                             */
#define MDR_UART1_FR_CTS_Msk              (0x1UL)                   /*!< MDR_UART1 FR: CTS (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_DSR_Pos              (1UL)                     /*!< MDR_UART1 FR: DSR (Bit 1)                             */
#define MDR_UART1_FR_DSR_Msk              (0x2UL)                   /*!< MDR_UART1 FR: DSR (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_DCD_Pos              (2UL)                     /*!< MDR_UART1 FR: DCD (Bit 2)                             */
#define MDR_UART1_FR_DCD_Msk              (0x4UL)                   /*!< MDR_UART1 FR: DCD (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_BUSY_Pos             (3UL)                     /*!< MDR_UART1 FR: BUSY (Bit 3)                            */
#define MDR_UART1_FR_BUSY_Msk             (0x8UL)                   /*!< MDR_UART1 FR: BUSY (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RXFE_Pos             (4UL)                     /*!< MDR_UART1 FR: RXFE (Bit 4)                            */
#define MDR_UART1_FR_RXFE_Msk             (0x10UL)                  /*!< MDR_UART1 FR: RXFE (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_TXFF_Pos             (5UL)                     /*!< MDR_UART1 FR: TXFF (Bit 5)                            */
#define MDR_UART1_FR_TXFF_Msk             (0x20UL)                  /*!< MDR_UART1 FR: TXFF (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RXFF_Pos             (6UL)                     /*!< MDR_UART1 FR: RXFF (Bit 6)                            */
#define MDR_UART1_FR_RXFF_Msk             (0x40UL)                  /*!< MDR_UART1 FR: RXFF (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_TXFE_Pos             (7UL)                     /*!< MDR_UART1 FR: TXFE (Bit 7)                            */
#define MDR_UART1_FR_TXFE_Msk             (0x80UL)                  /*!< MDR_UART1 FR: TXFE (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RI_Pos               (8UL)                     /*!< MDR_UART1 FR: RI (Bit 8)                              */
#define MDR_UART1_FR_RI_Msk               (0x100UL)                 /*!< MDR_UART1 FR: RI (Bitfield-Mask: 0x01)                */
/* =========================================================  ILPR  ========================================================== */
#define MDR_UART1_ILPR_DVSR_Pos           (0UL)                     /*!< MDR_UART1 ILPR: DVSR (Bit 0)                          */
#define MDR_UART1_ILPR_DVSR_Msk           (0xffUL)                  /*!< MDR_UART1 ILPR: DVSR (Bitfield-Mask: 0xff)            */
/* =========================================================  IBRD  ========================================================== */
#define MDR_UART1_IBRD_Baud_DivInt_Pos    (0UL)                     /*!< MDR_UART1 IBRD: Baud_DivInt (Bit 0)                   */
#define MDR_UART1_IBRD_Baud_DivInt_Msk    (0xffffUL)                /*!< MDR_UART1 IBRD: Baud_DivInt (Bitfield-Mask: 0xffff)   */
/* =========================================================  FBRD  ========================================================== */
#define MDR_UART1_FBRD_Baud_DivFrac_Pos   (0UL)                     /*!< MDR_UART1 FBRD: Baud_DivFrac (Bit 0)                  */
#define MDR_UART1_FBRD_Baud_DivFrac_Msk   (0x3fUL)                  /*!< MDR_UART1 FBRD: Baud_DivFrac (Bitfield-Mask: 0x3f)    */
/* =========================================================  LCR_H  ========================================================= */
#define MDR_UART1_LCR_H_BRK_Pos           (0UL)                     /*!< MDR_UART1 LCR_H: BRK (Bit 0)                          */
#define MDR_UART1_LCR_H_BRK_Msk           (0x1UL)                   /*!< MDR_UART1 LCR_H: BRK (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_PEN_Pos           (1UL)                     /*!< MDR_UART1 LCR_H: PEN (Bit 1)                          */
#define MDR_UART1_LCR_H_PEN_Msk           (0x2UL)                   /*!< MDR_UART1 LCR_H: PEN (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_EPS_Pos           (2UL)                     /*!< MDR_UART1 LCR_H: EPS (Bit 2)                          */
#define MDR_UART1_LCR_H_EPS_Msk           (0x4UL)                   /*!< MDR_UART1 LCR_H: EPS (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_STP2_Pos          (3UL)                     /*!< MDR_UART1 LCR_H: STP2 (Bit 3)                         */
#define MDR_UART1_LCR_H_STP2_Msk          (0x8UL)                   /*!< MDR_UART1 LCR_H: STP2 (Bitfield-Mask: 0x01)           */
#define MDR_UART1_LCR_H_FEN_Pos           (4UL)                     /*!< MDR_UART1 LCR_H: FEN (Bit 4)                          */
#define MDR_UART1_LCR_H_FEN_Msk           (0x10UL)                  /*!< MDR_UART1 LCR_H: FEN (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_WLEN_Pos          (5UL)                     /*!< MDR_UART1 LCR_H: WLEN (Bit 5)                         */
#define MDR_UART1_LCR_H_WLEN_Msk          (0x60UL)                  /*!< MDR_UART1 LCR_H: WLEN (Bitfield-Mask: 0x03)           */
#define MDR_UART1_LCR_H_SPS_Pos           (7UL)                     /*!< MDR_UART1 LCR_H: SPS (Bit 7)                          */
#define MDR_UART1_LCR_H_SPS_Msk           (0x80UL)                  /*!< MDR_UART1 LCR_H: SPS (Bitfield-Mask: 0x01)            */
/* ==========================================================  CR  =========================================================== */
#define MDR_UART1_CR_EN_Pos               (0UL)                     /*!< MDR_UART1 CR: EN (Bit 0)                              */
#define MDR_UART1_CR_EN_Msk               (0x1UL)                   /*!< MDR_UART1 CR: EN (Bitfield-Mask: 0x01)                */
#define MDR_UART1_CR_SIREN_Pos            (1UL)                     /*!< MDR_UART1 CR: SIREN (Bit 1)                           */
#define MDR_UART1_CR_SIREN_Msk            (0x2UL)                   /*!< MDR_UART1 CR: SIREN (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_SIRLP_Pos            (2UL)                     /*!< MDR_UART1 CR: SIRLP (Bit 2)                           */
#define MDR_UART1_CR_SIRLP_Msk            (0x4UL)                   /*!< MDR_UART1 CR: SIRLP (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_LBE_Pos              (7UL)                     /*!< MDR_UART1 CR: LBE (Bit 7)                             */
#define MDR_UART1_CR_LBE_Msk              (0x80UL)                  /*!< MDR_UART1 CR: LBE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_TXE_Pos              (8UL)                     /*!< MDR_UART1 CR: TXE (Bit 8)                             */
#define MDR_UART1_CR_TXE_Msk              (0x100UL)                 /*!< MDR_UART1 CR: TXE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_RXE_Pos              (9UL)                     /*!< MDR_UART1 CR: RXE (Bit 9)                             */
#define MDR_UART1_CR_RXE_Msk              (0x200UL)                 /*!< MDR_UART1 CR: RXE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_DTR_Pos              (10UL)                    /*!< MDR_UART1 CR: DTR (Bit 10)                            */
#define MDR_UART1_CR_DTR_Msk              (0x400UL)                 /*!< MDR_UART1 CR: DTR (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_RTS_Pos              (11UL)                    /*!< MDR_UART1 CR: RTS (Bit 11)                            */
#define MDR_UART1_CR_RTS_Msk              (0x800UL)                 /*!< MDR_UART1 CR: RTS (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_Out1_Pos             (12UL)                    /*!< MDR_UART1 CR: Out1 (Bit 12)                           */
#define MDR_UART1_CR_Out1_Msk             (0x1000UL)                /*!< MDR_UART1 CR: Out1 (Bitfield-Mask: 0x01)              */
#define MDR_UART1_CR_Out2_Pos             (13UL)                    /*!< MDR_UART1 CR: Out2 (Bit 13)                           */
#define MDR_UART1_CR_Out2_Msk             (0x2000UL)                /*!< MDR_UART1 CR: Out2 (Bitfield-Mask: 0x01)              */
#define MDR_UART1_CR_RTSEn_Pos            (14UL)                    /*!< MDR_UART1 CR: RTSEn (Bit 14)                          */
#define MDR_UART1_CR_RTSEn_Msk            (0x4000UL)                /*!< MDR_UART1 CR: RTSEn (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_CTSEn_Pos            (15UL)                    /*!< MDR_UART1 CR: CTSEn (Bit 15)                          */
#define MDR_UART1_CR_CTSEn_Msk            (0x8000UL)                /*!< MDR_UART1 CR: CTSEn (Bitfield-Mask: 0x01)             */
/* =========================================================  IFLS  ========================================================== */
#define MDR_UART1_IFLS_TXIFLSES_Pos       (0UL)                     /*!< MDR_UART1 IFLS: TXIFLSES (Bit 0)                      */
#define MDR_UART1_IFLS_TXIFLSES_Msk       (0x7UL)                   /*!< MDR_UART1 IFLS: TXIFLSES (Bitfield-Mask: 0x07)        */
#define MDR_UART1_IFLS_RXIFLSES_Pos       (3UL)                     /*!< MDR_UART1 IFLS: RXIFLSES (Bit 3)                      */
#define MDR_UART1_IFLS_RXIFLSES_Msk       (0x38UL)                  /*!< MDR_UART1 IFLS: RXIFLSES (Bitfield-Mask: 0x07)        */
/* =========================================================  IMSC  ========================================================== */
#define MDR_UART1_IMSC_RIM_IM_Pos         (0UL)                     /*!< MDR_UART1 IMSC: RIM_IM (Bit 0)                        */
#define MDR_UART1_IMSC_RIM_IM_Msk         (0x1UL)                   /*!< MDR_UART1 IMSC: RIM_IM (Bitfield-Mask: 0x01)          */
#define MDR_UART1_IMSC_STCM_IM_Pos        (1UL)                     /*!< MDR_UART1 IMSC: STCM_IM (Bit 1)                       */
#define MDR_UART1_IMSC_STCM_IM_Msk        (0x2UL)                   /*!< MDR_UART1 IMSC: STCM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_DCDM_IM_Pos        (2UL)                     /*!< MDR_UART1 IMSC: DCDM_IM (Bit 2)                       */
#define MDR_UART1_IMSC_DCDM_IM_Msk        (0x4UL)                   /*!< MDR_UART1 IMSC: DCDM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_DSRM_IM_Pos        (3UL)                     /*!< MDR_UART1 IMSC: DSRM_IM (Bit 3)                       */
#define MDR_UART1_IMSC_DSRM_IM_Msk        (0x8UL)                   /*!< MDR_UART1 IMSC: DSRM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_RX_IM_Pos          (4UL)                     /*!< MDR_UART1 IMSC: RX_IM (Bit 4)                         */
#define MDR_UART1_IMSC_RX_IM_Msk          (0x10UL)                  /*!< MDR_UART1 IMSC: RX_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_TX_IM_Pos          (5UL)                     /*!< MDR_UART1 IMSC: TX_IM (Bit 5)                         */
#define MDR_UART1_IMSC_TX_IM_Msk          (0x20UL)                  /*!< MDR_UART1 IMSC: TX_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_RT_IM_Pos          (6UL)                     /*!< MDR_UART1 IMSC: RT_IM (Bit 6)                         */
#define MDR_UART1_IMSC_RT_IM_Msk          (0x40UL)                  /*!< MDR_UART1 IMSC: RT_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_FE_IM_Pos          (7UL)                     /*!< MDR_UART1 IMSC: FE_IM (Bit 7)                         */
#define MDR_UART1_IMSC_FE_IM_Msk          (0x80UL)                  /*!< MDR_UART1 IMSC: FE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_PE_IM_Pos          (8UL)                     /*!< MDR_UART1 IMSC: PE_IM (Bit 8)                         */
#define MDR_UART1_IMSC_PE_IM_Msk          (0x100UL)                 /*!< MDR_UART1 IMSC: PE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_BE_IM_Pos          (9UL)                     /*!< MDR_UART1 IMSC: BE_IM (Bit 9)                         */
#define MDR_UART1_IMSC_BE_IM_Msk          (0x200UL)                 /*!< MDR_UART1 IMSC: BE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_OE_IM_Pos          (10UL)                    /*!< MDR_UART1 IMSC: OE_IM (Bit 10)                        */
#define MDR_UART1_IMSC_OE_IM_Msk          (0x400UL)                 /*!< MDR_UART1 IMSC: OE_IM (Bitfield-Mask: 0x01)           */
/* ==========================================================  RIS  ========================================================== */
#define MDR_UART1_RIS_RIM_RIS_Pos         (0UL)                     /*!< MDR_UART1 RIS: RIM_RIS (Bit 0)                        */
#define MDR_UART1_RIS_RIM_RIS_Msk         (0x1UL)                   /*!< MDR_UART1 RIS: RIM_RIS (Bitfield-Mask: 0x01)          */
#define MDR_UART1_RIS_STCM_RIS_Pos        (1UL)                     /*!< MDR_UART1 RIS: STCM_RIS (Bit 1)                       */
#define MDR_UART1_RIS_STCM_RIS_Msk        (0x2UL)                   /*!< MDR_UART1 RIS: STCM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_DCDM_RIS_Pos        (2UL)                     /*!< MDR_UART1 RIS: DCDM_RIS (Bit 2)                       */
#define MDR_UART1_RIS_DCDM_RIS_Msk        (0x4UL)                   /*!< MDR_UART1 RIS: DCDM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_DSRM_RIS_Pos        (3UL)                     /*!< MDR_UART1 RIS: DSRM_RIS (Bit 3)                       */
#define MDR_UART1_RIS_DSRM_RIS_Msk        (0x8UL)                   /*!< MDR_UART1 RIS: DSRM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_RX_RIS_Pos          (4UL)                     /*!< MDR_UART1 RIS: RX_RIS (Bit 4)                         */
#define MDR_UART1_RIS_RX_RIS_Msk          (0x10UL)                  /*!< MDR_UART1 RIS: RX_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_TX_RIS_Pos          (5UL)                     /*!< MDR_UART1 RIS: TX_RIS (Bit 5)                         */
#define MDR_UART1_RIS_TX_RIS_Msk          (0x20UL)                  /*!< MDR_UART1 RIS: TX_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_RT_RIS_Pos          (6UL)                     /*!< MDR_UART1 RIS: RT_RIS (Bit 6)                         */
#define MDR_UART1_RIS_RT_RIS_Msk          (0x40UL)                  /*!< MDR_UART1 RIS: RT_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_FE_RIS_Pos          (7UL)                     /*!< MDR_UART1 RIS: FE_RIS (Bit 7)                         */
#define MDR_UART1_RIS_FE_RIS_Msk          (0x80UL)                  /*!< MDR_UART1 RIS: FE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_PE_RIS_Pos          (8UL)                     /*!< MDR_UART1 RIS: PE_RIS (Bit 8)                         */
#define MDR_UART1_RIS_PE_RIS_Msk          (0x100UL)                 /*!< MDR_UART1 RIS: PE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_BE_RIS_Pos          (9UL)                     /*!< MDR_UART1 RIS: BE_RIS (Bit 9)                         */
#define MDR_UART1_RIS_BE_RIS_Msk          (0x200UL)                 /*!< MDR_UART1 RIS: BE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_OE_RIS_Pos          (10UL)                    /*!< MDR_UART1 RIS: OE_RIS (Bit 10)                        */
#define MDR_UART1_RIS_OE_RIS_Msk          (0x400UL)                 /*!< MDR_UART1 RIS: OE_RIS (Bitfield-Mask: 0x01)           */
/* ==========================================================  MIS  ========================================================== */
#define MDR_UART1_MIS_RIM_MIS_Pos         (0UL)                     /*!< MDR_UART1 MIS: RIM_MIS (Bit 0)                        */
#define MDR_UART1_MIS_RIM_MIS_Msk         (0x1UL)                   /*!< MDR_UART1 MIS: RIM_MIS (Bitfield-Mask: 0x01)          */
#define MDR_UART1_MIS_STCM_MIS_Pos        (1UL)                     /*!< MDR_UART1 MIS: STCM_MIS (Bit 1)                       */
#define MDR_UART1_MIS_STCM_MIS_Msk        (0x2UL)                   /*!< MDR_UART1 MIS: STCM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_DCDM_MIS_Pos        (2UL)                     /*!< MDR_UART1 MIS: DCDM_MIS (Bit 2)                       */
#define MDR_UART1_MIS_DCDM_MIS_Msk        (0x4UL)                   /*!< MDR_UART1 MIS: DCDM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_DSRM_MIS_Pos        (3UL)                     /*!< MDR_UART1 MIS: DSRM_MIS (Bit 3)                       */
#define MDR_UART1_MIS_DSRM_MIS_Msk        (0x8UL)                   /*!< MDR_UART1 MIS: DSRM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_RX_MIS_Pos          (4UL)                     /*!< MDR_UART1 MIS: RX_MIS (Bit 4)                         */
#define MDR_UART1_MIS_RX_MIS_Msk          (0x10UL)                  /*!< MDR_UART1 MIS: RX_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_TX_MIS_Pos          (5UL)                     /*!< MDR_UART1 MIS: TX_MIS (Bit 5)                         */
#define MDR_UART1_MIS_TX_MIS_Msk          (0x20UL)                  /*!< MDR_UART1 MIS: TX_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_RT_MIS_Pos          (6UL)                     /*!< MDR_UART1 MIS: RT_MIS (Bit 6)                         */
#define MDR_UART1_MIS_RT_MIS_Msk          (0x40UL)                  /*!< MDR_UART1 MIS: RT_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_FE_MIS_Pos          (7UL)                     /*!< MDR_UART1 MIS: FE_MIS (Bit 7)                         */
#define MDR_UART1_MIS_FE_MIS_Msk          (0x80UL)                  /*!< MDR_UART1 MIS: FE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_PE_MIS_Pos          (8UL)                     /*!< MDR_UART1 MIS: PE_MIS (Bit 8)                         */
#define MDR_UART1_MIS_PE_MIS_Msk          (0x100UL)                 /*!< MDR_UART1 MIS: PE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_BE_MIS_Pos          (9UL)                     /*!< MDR_UART1 MIS: BE_MIS (Bit 9)                         */
#define MDR_UART1_MIS_BE_MIS_Msk          (0x200UL)                 /*!< MDR_UART1 MIS: BE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_OE_MIS_Pos          (10UL)                    /*!< MDR_UART1 MIS: OE_MIS (Bit 10)                        */
#define MDR_UART1_MIS_OE_MIS_Msk          (0x400UL)                 /*!< MDR_UART1 MIS: OE_MIS (Bitfield-Mask: 0x01)           */
/* ==========================================================  ICR  ========================================================== */
#define MDR_UART1_ICR_RIM_IC_Pos          (0UL)                     /*!< MDR_UART1 ICR: RIM_IC (Bit 0)                         */
#define MDR_UART1_ICR_RIM_IC_Msk          (0x1UL)                   /*!< MDR_UART1 ICR: RIM_IC (Bitfield-Mask: 0x01)           */
#define MDR_UART1_ICR_STCM_IC_Pos         (1UL)                     /*!< MDR_UART1 ICR: STCM_IC (Bit 1)                        */
#define MDR_UART1_ICR_STCM_IC_Msk         (0x2UL)                   /*!< MDR_UART1 ICR: STCM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_DCDM_IC_Pos         (2UL)                     /*!< MDR_UART1 ICR: DCDM_IC (Bit 2)                        */
#define MDR_UART1_ICR_DCDM_IC_Msk         (0x4UL)                   /*!< MDR_UART1 ICR: DCDM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_DSRM_IC_Pos         (3UL)                     /*!< MDR_UART1 ICR: DSRM_IC (Bit 3)                        */
#define MDR_UART1_ICR_DSRM_IC_Msk         (0x8UL)                   /*!< MDR_UART1 ICR: DSRM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_RX_IC_Pos           (4UL)                     /*!< MDR_UART1 ICR: RX_IC (Bit 4)                          */
#define MDR_UART1_ICR_RX_IC_Msk           (0x10UL)                  /*!< MDR_UART1 ICR: RX_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_TX_IC_Pos           (5UL)                     /*!< MDR_UART1 ICR: TX_IC (Bit 5)                          */
#define MDR_UART1_ICR_TX_IC_Msk           (0x20UL)                  /*!< MDR_UART1 ICR: TX_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_RT_IC_Pos           (6UL)                     /*!< MDR_UART1 ICR: RT_IC (Bit 6)                          */
#define MDR_UART1_ICR_RT_IC_Msk           (0x40UL)                  /*!< MDR_UART1 ICR: RT_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_FE_IC_Pos           (7UL)                     /*!< MDR_UART1 ICR: FE_IC (Bit 7)                          */
#define MDR_UART1_ICR_FE_IC_Msk           (0x80UL)                  /*!< MDR_UART1 ICR: FE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_PE_IC_Pos           (8UL)                     /*!< MDR_UART1 ICR: PE_IC (Bit 8)                          */
#define MDR_UART1_ICR_PE_IC_Msk           (0x100UL)                 /*!< MDR_UART1 ICR: PE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_BE_IC_Pos           (9UL)                     /*!< MDR_UART1 ICR: BE_IC (Bit 9)                          */
#define MDR_UART1_ICR_BE_IC_Msk           (0x200UL)                 /*!< MDR_UART1 ICR: BE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_OE_IC_Pos           (10UL)                    /*!< MDR_UART1 ICR: OE_IC (Bit 10)                         */
#define MDR_UART1_ICR_OE_IC_Msk           (0x400UL)                 /*!< MDR_UART1 ICR: OE_IC (Bitfield-Mask: 0x01)            */
/* =========================================================  DMACR  ========================================================= */
#define MDR_UART1_DMACR_RXDMAE_Pos        (0UL)                     /*!< MDR_UART1 DMACR: RXDMAE (Bit 0)                       */
#define MDR_UART1_DMACR_RXDMAE_Msk        (0x1UL)                   /*!< MDR_UART1 DMACR: RXDMAE (Bitfield-Mask: 0x01)         */
#define MDR_UART1_DMACR_TXDMAE_Pos        (1UL)                     /*!< MDR_UART1 DMACR: TXDMAE (Bit 1)                       */
#define MDR_UART1_DMACR_TXDMAE_Msk        (0x2UL)                   /*!< MDR_UART1 DMACR: TXDMAE (Bitfield-Mask: 0x01)         */
#define MDR_UART1_DMACR_DMAonErr_Pos      (2UL)                     /*!< MDR_UART1 DMACR: DMAonErr (Bit 2)                     */
#define MDR_UART1_DMACR_DMAonErr_Msk      (0x4UL)                   /*!< MDR_UART1 DMACR: DMAonErr (Bitfield-Mask: 0x01)       */
/* ==========================================================  TCR  ========================================================== */
#define MDR_UART1_TCR_ITEN_Pos            (0UL)                     /*!< MDR_UART1 TCR: ITEN (Bit 0)                           */
#define MDR_UART1_TCR_ITEN_Msk            (0x1UL)                   /*!< MDR_UART1 TCR: ITEN (Bitfield-Mask: 0x01)             */
#define MDR_UART1_TCR_TestFIFO_Pos        (1UL)                     /*!< MDR_UART1 TCR: TestFIFO (Bit 1)                       */
#define MDR_UART1_TCR_TestFIFO_Msk        (0x2UL)                   /*!< MDR_UART1 TCR: TestFIFO (Bitfield-Mask: 0x01)         */
#define MDR_UART1_TCR_SIRTest_Pos         (2UL)                     /*!< MDR_UART1 TCR: SIRTest (Bit 2)                        */
#define MDR_UART1_TCR_SIRTest_Msk         (0x4UL)                   /*!< MDR_UART1 TCR: SIRTest (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CNT  ========================================================== */
#define MDR_TIMER1_CNT_Value_Pos          (0UL)                     /*!< MDR_TIMER1 CNT: Value (Bit 0)                         */
#define MDR_TIMER1_CNT_Value_Msk          (0xffffffffUL)            /*!< MDR_TIMER1 CNT: Value (Bitfield-Mask: 0xffffffff)     */
/* ==========================================================  PSG  ========================================================== */
#define MDR_TIMER1_PSG_Value_Pos          (0UL)                     /*!< MDR_TIMER1 PSG: Value (Bit 0)                         */
#define MDR_TIMER1_PSG_Value_Msk          (0xffffUL)                /*!< MDR_TIMER1 PSG: Value (Bitfield-Mask: 0xffff)         */
/* ==========================================================  ARR  ========================================================== */
#define MDR_TIMER1_ARR_Value_Pos          (0UL)                     /*!< MDR_TIMER1 ARR: Value (Bit 0)                         */
#define MDR_TIMER1_ARR_Value_Msk          (0xffffffffUL)            /*!< MDR_TIMER1 ARR: Value (Bitfield-Mask: 0xffffffff)     */
/* =========================================================  CNTRL  ========================================================= */
#define MDR_TIMER1_CNTRL_CNT_EN_Pos       (0UL)                     /*!< MDR_TIMER1 CNTRL: CNT_EN (Bit 0)                      */
#define MDR_TIMER1_CNTRL_CNT_EN_Msk       (0x1UL)                   /*!< MDR_TIMER1 CNTRL: CNT_EN (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CNTRL_ARRB_EN_Pos      (1UL)                     /*!< MDR_TIMER1 CNTRL: ARRB_EN (Bit 1)                     */
#define MDR_TIMER1_CNTRL_ARRB_EN_Msk      (0x2UL)                   /*!< MDR_TIMER1 CNTRL: ARRB_EN (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_CNTRL_WR_CMPL_Pos      (2UL)                     /*!< MDR_TIMER1 CNTRL: WR_CMPL (Bit 2)                     */
#define MDR_TIMER1_CNTRL_WR_CMPL_Msk      (0x4UL)                   /*!< MDR_TIMER1 CNTRL: WR_CMPL (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_CNTRL_DIR_Pos          (3UL)                     /*!< MDR_TIMER1 CNTRL: DIR (Bit 3)                         */
#define MDR_TIMER1_CNTRL_DIR_Msk          (0x8UL)                   /*!< MDR_TIMER1 CNTRL: DIR (Bitfield-Mask: 0x01)           */
#define MDR_TIMER1_CNTRL_FDTS_Pos         (4UL)                     /*!< MDR_TIMER1 CNTRL: FDTS (Bit 4)                        */
#define MDR_TIMER1_CNTRL_FDTS_Msk         (0x30UL)                  /*!< MDR_TIMER1 CNTRL: FDTS (Bitfield-Mask: 0x03)          */
#define MDR_TIMER1_CNTRL_CNT_MODE_Pos     (6UL)                     /*!< MDR_TIMER1 CNTRL: CNT_MODE (Bit 6)                    */
#define MDR_TIMER1_CNTRL_CNT_MODE_Msk     (0xc0UL)                  /*!< MDR_TIMER1 CNTRL: CNT_MODE (Bitfield-Mask: 0x03)      */
#define MDR_TIMER1_CNTRL_EVENT_SEL_Pos    (8UL)                     /*!< MDR_TIMER1 CNTRL: EVENT_SEL (Bit 8)                   */
#define MDR_TIMER1_CNTRL_EVENT_SEL_Msk    (0xf00UL)                 /*!< MDR_TIMER1 CNTRL: EVENT_SEL (Bitfield-Mask: 0x0f)     */
/* =========================================================  CCR1  ========================================================== */
#define MDR_TIMER1_CCR1_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR1: Value (Bit 0)                        */
#define MDR_TIMER1_CCR1_Value_Msk         (0xffffffffUL)            /*!< MDR_TIMER1 CCR1: Value (Bitfield-Mask: 0xffffffff)    */
/* =========================================================  CCR2  ========================================================== */
#define MDR_TIMER1_CCR2_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR2: Value (Bit 0)                        */
#define MDR_TIMER1_CCR2_Value_Msk         (0xffffffffUL)            /*!< MDR_TIMER1 CCR2: Value (Bitfield-Mask: 0xffffffff)    */
/* =========================================================  CCR3  ========================================================== */
#define MDR_TIMER1_CCR3_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR3: Value (Bit 0)                        */
#define MDR_TIMER1_CCR3_Value_Msk         (0xffffffffUL)            /*!< MDR_TIMER1 CCR3: Value (Bitfield-Mask: 0xffffffff)    */
/* =========================================================  CCR4  ========================================================== */
#define MDR_TIMER1_CCR4_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR4: Value (Bit 0)                        */
#define MDR_TIMER1_CCR4_Value_Msk         (0xffffffffUL)            /*!< MDR_TIMER1 CCR4: Value (Bitfield-Mask: 0xffffffff)    */
/* =======================================================  CH1_CNTRL  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH1_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH1_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH1_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH1_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH1_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH1_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH1_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH1_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH1_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH1_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH1_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH1_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH1_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH1_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH1_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH1_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH1_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH1_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH1_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH1_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH1_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH1_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH1_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH1_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH1_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH1_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH1_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH1_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH2_CNTRL  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH2_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH2_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH2_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH2_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH2_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH2_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH2_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH2_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH2_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH2_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH2_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH2_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH2_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH2_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH2_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH2_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH2_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH2_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH2_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH2_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH2_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH2_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH2_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH2_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH2_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH2_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH2_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH2_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH3_CNTRL  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH3_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH3_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH3_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH3_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH3_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH3_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH3_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH3_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH3_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH3_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH3_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH3_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH3_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH3_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH3_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH3_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH3_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH3_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH3_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH3_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH3_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH3_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH3_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH3_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH3_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH3_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH3_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH3_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH4_CNTRL  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH4_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH4_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH4_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH4_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH4_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH4_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH4_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH4_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH4_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH4_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH4_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH4_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH4_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH4_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH4_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH4_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH4_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH4_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH4_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH4_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH4_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH4_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH4_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH4_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH4_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH4_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH4_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH4_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* ======================================================  CH1_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH1_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH1_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH1_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH1_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH1_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH1_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH1_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH1_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH1_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH1_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH1_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH1_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH1_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH1_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH1_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH1_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH1_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH1_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH2_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH2_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH2_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH2_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH2_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH2_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH2_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH2_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH2_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH2_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH2_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH2_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH2_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH2_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH2_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH2_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH2_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH2_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH2_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH3_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH3_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH3_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH3_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH3_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH3_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH3_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH3_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH3_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH3_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH3_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH3_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH3_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH3_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH3_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH3_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH3_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH3_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH3_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH4_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH4_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH4_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH4_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH4_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH4_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH4_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH4_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH4_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH4_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH4_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH4_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH4_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH4_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH4_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH4_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH4_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH4_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH4_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ========================================================  CH1_DTG  ======================================================== */
#define MDR_TIMER1_CH1_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH1_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH1_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH1_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH1_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH1_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH1_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH1_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH1_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH1_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH1_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH1_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH2_DTG  ======================================================== */
#define MDR_TIMER1_CH2_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH2_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH2_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH2_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH2_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH2_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH2_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH2_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH2_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH2_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH2_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH2_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH3_DTG  ======================================================== */
#define MDR_TIMER1_CH3_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH3_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH3_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH3_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH3_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH3_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH3_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH3_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH3_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH3_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH3_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH3_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH4_DTG  ======================================================== */
#define MDR_TIMER1_CH4_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH4_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH4_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH4_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH4_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH4_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH4_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH4_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH4_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH4_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH4_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH4_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* =====================================================  BRKETR_CNTRL  ====================================================== */
#define MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Pos (0UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: BRK_INV (Bit 0)              */
#define MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Msk (0x1UL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: BRK_INV (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Pos (1UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_INV (Bit 1)              */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Msk (0x2UL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_INV (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Pos (2UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_PSC (Bit 2)              */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Msk (0xcUL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_PSC (Bitfield-Mask: 0x03) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Pos (4UL)                /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_Filter (Bit 4)           */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Msk (0xf0UL)             /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_Filter (Bitfield-Mask: 0x0f) */
/* ========================================================  STATUS  ========================================================= */
#define MDR_TIMER1_STATUS_CNT_ZERO_Pos    (0UL)                     /*!< MDR_TIMER1 STATUS: CNT_ZERO (Bit 0)                   */
#define MDR_TIMER1_STATUS_CNT_ZERO_Msk    (0x1UL)                   /*!< MDR_TIMER1 STATUS: CNT_ZERO (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_STATUS_CNT_ARR_Pos     (1UL)                     /*!< MDR_TIMER1 STATUS: CNT_ARR (Bit 1)                    */
#define MDR_TIMER1_STATUS_CNT_ARR_Msk     (0x2UL)                   /*!< MDR_TIMER1 STATUS: CNT_ARR (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_STATUS_ETR_RE_Pos      (2UL)                     /*!< MDR_TIMER1 STATUS: ETR_RE (Bit 2)                     */
#define MDR_TIMER1_STATUS_ETR_RE_Msk      (0x4UL)                   /*!< MDR_TIMER1 STATUS: ETR_RE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_STATUS_ETR_FE_Pos      (3UL)                     /*!< MDR_TIMER1 STATUS: ETR_FE (Bit 3)                     */
#define MDR_TIMER1_STATUS_ETR_FE_Msk      (0x8UL)                   /*!< MDR_TIMER1 STATUS: ETR_FE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_STATUS_BRK_Pos         (4UL)                     /*!< MDR_TIMER1 STATUS: BRK (Bit 4)                        */
#define MDR_TIMER1_STATUS_BRK_Msk         (0x10UL)                  /*!< MDR_TIMER1 STATUS: BRK (Bitfield-Mask: 0x01)          */
#define MDR_TIMER1_STATUS_CCR_CAP_CH1_Pos (5UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH1 (Bit 5)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH1_Msk (0x20UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH1 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH2_Pos (6UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH2 (Bit 6)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH2_Msk (0x40UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH2 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH3_Pos (7UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH3 (Bit 7)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH3_Msk (0x80UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH3 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH4_Pos (8UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH4 (Bit 8)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH4_Msk (0x100UL)                 /*!< MDR_TIMER1 STATUS: CCR_CAP_CH4 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH1_Pos (9UL)                     /*!< MDR_TIMER1 STATUS: CCR_REF_CH1 (Bit 9)                */
#define MDR_TIMER1_STATUS_CCR_REF_CH1_Msk (0x200UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH1 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH2_Pos (10UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH2 (Bit 10)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH2_Msk (0x400UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH2 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH3_Pos (11UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH3 (Bit 11)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH3_Msk (0x800UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH3 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH4_Pos (12UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH4 (Bit 12)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH4_Msk (0x1000UL)                /*!< MDR_TIMER1 STATUS: CCR_REF_CH4 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH1_Pos (13UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH1 (Bit 13)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH1_Msk (0x2000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH1 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH2_Pos (14UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH2 (Bit 14)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH2_Msk (0x4000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH2 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH3_Pos (15UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH3 (Bit 15)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH3_Msk (0x8000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH3 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH4_Pos (16UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH4 (Bit 16)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH4_Msk (0x10000UL)              /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH4 (Bitfield-Mask: 0x01) */
/* ==========================================================  IE  =========================================================== */
#define MDR_TIMER1_IE_CNT_ZERO_IE_Pos     (0UL)                     /*!< MDR_TIMER1 IE: CNT_ZERO_IE (Bit 0)                    */
#define MDR_TIMER1_IE_CNT_ZERO_IE_Msk     (0x1UL)                   /*!< MDR_TIMER1 IE: CNT_ZERO_IE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_IE_CNT_ARR_IE_Pos      (1UL)                     /*!< MDR_TIMER1 IE: CNT_ARR_IE (Bit 1)                     */
#define MDR_TIMER1_IE_CNT_ARR_IE_Msk      (0x2UL)                   /*!< MDR_TIMER1 IE: CNT_ARR_IE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_IE_ETR_RE_IE_Pos       (2UL)                     /*!< MDR_TIMER1 IE: ETR_RE_IE (Bit 2)                      */
#define MDR_TIMER1_IE_ETR_RE_IE_Msk       (0x4UL)                   /*!< MDR_TIMER1 IE: ETR_RE_IE (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_IE_ETR_FE_IE_Pos       (3UL)                     /*!< MDR_TIMER1 IE: ETR_FE_IE (Bit 3)                      */
#define MDR_TIMER1_IE_ETR_FE_IE_Msk       (0x8UL)                   /*!< MDR_TIMER1 IE: ETR_FE_IE (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_IE_BRK_IE_Pos          (4UL)                     /*!< MDR_TIMER1 IE: BRK_IE (Bit 4)                         */
#define MDR_TIMER1_IE_BRK_IE_Msk          (0x10UL)                  /*!< MDR_TIMER1 IE: BRK_IE (Bitfield-Mask: 0x01)           */
#define MDR_TIMER1_IE_CCR_CAP_CH1_IE_Pos  (5UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH1_IE (Bit 5)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH1_IE_Msk  (0x20UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH1_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH2_IE_Pos  (6UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH2_IE (Bit 6)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH2_IE_Msk  (0x40UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH2_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH3_IE_Pos  (7UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH3_IE (Bit 7)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH3_IE_Msk  (0x80UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH3_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH4_IE_Pos  (8UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH4_IE (Bit 8)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH4_IE_Msk  (0x100UL)                 /*!< MDR_TIMER1 IE: CCR_CAP_CH4_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH1_IE_Pos  (9UL)                     /*!< MDR_TIMER1 IE: CCR_REF_CH1_IE (Bit 9)                 */
#define MDR_TIMER1_IE_CCR_REF_CH1_IE_Msk  (0x200UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH1_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH2_IE_Pos  (10UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH2_IE (Bit 10)                */
#define MDR_TIMER1_IE_CCR_REF_CH2_IE_Msk  (0x400UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH2_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH3_IE_Pos  (11UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH3_IE (Bit 11)                */
#define MDR_TIMER1_IE_CCR_REF_CH3_IE_Msk  (0x800UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH3_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH4_IE_Pos  (12UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH4_IE (Bit 12)                */
#define MDR_TIMER1_IE_CCR_REF_CH4_IE_Msk  (0x1000UL)                /*!< MDR_TIMER1 IE: CCR_REF_CH4_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Pos (13UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH1_IE (Bit 13)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Msk (0x2000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH1_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Pos (14UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH2_IE (Bit 14)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Msk (0x4000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH2_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Pos (15UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH3_IE (Bit 15)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Msk (0x8000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH3_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Pos (16UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH4_IE (Bit 16)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Msk (0x10000UL)               /*!< MDR_TIMER1 IE: CCR1_CAP_CH4_IE (Bitfield-Mask: 0x01)  */
/* ========================================================  DMA_RE  ========================================================= */
#define MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Pos (0UL)                   /*!< MDR_TIMER1 DMA_RE: CNT_ZERO_DMAE (Bit 0)              */
#define MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Msk (0x1UL)                 /*!< MDR_TIMER1 DMA_RE: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Pos (1UL)                    /*!< MDR_TIMER1 DMA_RE: CNT_ARR_DMAE (Bit 1)               */
#define MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Msk (0x2UL)                  /*!< MDR_TIMER1 DMA_RE: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Pos (2UL)                     /*!< MDR_TIMER1 DMA_RE: ETR_RE_DMAE (Bit 2)                */
#define MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Msk (0x4UL)                   /*!< MDR_TIMER1 DMA_RE: ETR_RE_DMAE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Pos (3UL)                     /*!< MDR_TIMER1 DMA_RE: ETR_FE_DMAE (Bit 3)                */
#define MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Msk (0x8UL)                   /*!< MDR_TIMER1 DMA_RE: ETR_FE_DMAE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_DMA_RE_BRK_DMAE_Pos    (4UL)                     /*!< MDR_TIMER1 DMA_RE: BRK_DMAE (Bit 4)                   */
#define MDR_TIMER1_DMA_RE_BRK_DMAE_Msk    (0x10UL)                  /*!< MDR_TIMER1 DMA_RE: BRK_DMAE (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Pos (5UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH1_DMAE (Bit 5)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Msk (0x20UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Pos (6UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH2_DMAE (Bit 6)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Msk (0x40UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Pos (7UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH3_DMAE (Bit 7)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Msk (0x80UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Pos (8UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH4_DMAE (Bit 8)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Msk (0x100UL)            /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Pos (9UL)                /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH1_DMAE (Bit 9)           */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Msk (0x200UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Pos (10UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH2_DMAE (Bit 10)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Msk (0x400UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Pos (11UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH3_DMAE (Bit 11)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Msk (0x800UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Pos (12UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH4_DMAE (Bit 12)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Msk (0x1000UL)           /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Pos (13UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH1_DMAE (Bit 13)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Pos (14UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH2_DMAE (Bit 14)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Pos (15UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH3_DMAE (Bit 15)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Pos (16UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH4_DMAE (Bit 16)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)         /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ======================================================  CH1_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH1_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH1_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH1_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH1_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH1_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_Pos (4UL)                 /*!< MDR_TIMER1 CH1_CNTRL2: CAP_CCR_Fix (Bit 4)            */
#define MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_Msk (0x10UL)              /*!< MDR_TIMER1 CH1_CNTRL2: CAP_CCR_Fix (Bitfield-Mask: 0x01) */
/* ======================================================  CH2_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH2_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH2_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH2_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH2_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH2_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_Pos (4UL)                 /*!< MDR_TIMER1 CH2_CNTRL2: CAP_CCR_Fix (Bit 4)            */
#define MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_Msk (0x10UL)              /*!< MDR_TIMER1 CH2_CNTRL2: CAP_CCR_Fix (Bitfield-Mask: 0x01) */
/* ======================================================  CH3_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH3_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH3_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH3_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH3_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH3_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_Pos (4UL)                 /*!< MDR_TIMER1 CH3_CNTRL2: CAP_CCR_Fix (Bit 4)            */
#define MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_Msk (0x10UL)              /*!< MDR_TIMER1 CH3_CNTRL2: CAP_CCR_Fix (Bitfield-Mask: 0x01) */
/* ======================================================  CH4_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH4_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH4_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH4_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH4_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH4_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_Pos (4UL)                 /*!< MDR_TIMER1 CH4_CNTRL2: CAP_CCR_Fix (Bit 4)            */
#define MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_Msk (0x10UL)              /*!< MDR_TIMER1 CH4_CNTRL2: CAP_CCR_Fix (Bitfield-Mask: 0x01) */
/* =========================================================  CCR11  ========================================================= */
#define MDR_TIMER1_CCR11_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR11: Value (Bit 0)                       */
#define MDR_TIMER1_CCR11_Value_Msk        (0xffffffffUL)            /*!< MDR_TIMER1 CCR11: Value (Bitfield-Mask: 0xffffffff)   */
/* =========================================================  CCR21  ========================================================= */
#define MDR_TIMER1_CCR21_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR21: Value (Bit 0)                       */
#define MDR_TIMER1_CCR21_Value_Msk        (0xffffffffUL)            /*!< MDR_TIMER1 CCR21: Value (Bitfield-Mask: 0xffffffff)   */
/* =========================================================  CCR31  ========================================================= */
#define MDR_TIMER1_CCR31_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR31: Value (Bit 0)                       */
#define MDR_TIMER1_CCR31_Value_Msk        (0xffffffffUL)            /*!< MDR_TIMER1 CCR31: Value (Bitfield-Mask: 0xffffffff)   */
/* =========================================================  CCR41  ========================================================= */
#define MDR_TIMER1_CCR41_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR41: Value (Bit 0)                       */
#define MDR_TIMER1_CCR41_Value_Msk        (0xffffffffUL)            /*!< MDR_TIMER1 CCR41: Value (Bitfield-Mask: 0xffffffff)   */
/* ========================================================  DMA_RE1  ======================================================== */
#define MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_Pos (0UL)                  /*!< MDR_TIMER1 DMA_RE1: CNT_ZERO_DMAE (Bit 0)             */
#define MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_Msk (0x1UL)                /*!< MDR_TIMER1 DMA_RE1: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_Pos (1UL)                   /*!< MDR_TIMER1 DMA_RE1: CNT_ARR_DMAE (Bit 1)              */
#define MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_Msk (0x2UL)                 /*!< MDR_TIMER1 DMA_RE1: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_Pos (2UL)                    /*!< MDR_TIMER1 DMA_RE1: ETR_RE_DMAE (Bit 2)               */
#define MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_Msk (0x4UL)                  /*!< MDR_TIMER1 DMA_RE1: ETR_RE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_Pos (3UL)                    /*!< MDR_TIMER1 DMA_RE1: ETR_FE_DMAE (Bit 3)               */
#define MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_Msk (0x8UL)                  /*!< MDR_TIMER1 DMA_RE1: ETR_FE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_BRK_DMAE_Pos   (4UL)                     /*!< MDR_TIMER1 DMA_RE1: BRK_DMAE (Bit 4)                  */
#define MDR_TIMER1_DMA_RE1_BRK_DMAE_Msk   (0x10UL)                  /*!< MDR_TIMER1 DMA_RE1: BRK_DMAE (Bitfield-Mask: 0x01)    */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_Pos (5UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH1_DMAE (Bit 5)          */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_Msk (0x20UL)            /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_Pos (6UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH2_DMAE (Bit 6)          */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_Msk (0x40UL)            /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_Pos (7UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH3_DMAE (Bit 7)          */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_Msk (0x80UL)            /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_Pos (8UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH4_DMAE (Bit 8)          */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_Msk (0x100UL)           /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_Pos (9UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH1_DMAE (Bit 9)          */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_Msk (0x200UL)           /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_Pos (10UL)              /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH2_DMAE (Bit 10)         */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_Msk (0x400UL)           /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_Pos (11UL)              /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH3_DMAE (Bit 11)         */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_Msk (0x800UL)           /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_Pos (12UL)              /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH4_DMAE (Bit 12)         */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_Msk (0x1000UL)          /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_Pos (13UL)             /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH1_DMAE (Bit 13)        */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)         /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_Pos (14UL)             /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH2_DMAE (Bit 14)        */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)         /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_Pos (15UL)             /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH3_DMAE (Bit 15)        */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)         /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_Pos (16UL)             /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH4_DMAE (Bit 16)        */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)        /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ========================================================  DMA_RE2  ======================================================== */
#define MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_Pos (0UL)                  /*!< MDR_TIMER1 DMA_RE2: CNT_ZERO_DMAE (Bit 0)             */
#define MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_Msk (0x1UL)                /*!< MDR_TIMER1 DMA_RE2: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_Pos (1UL)                   /*!< MDR_TIMER1 DMA_RE2: CNT_ARR_DMAE (Bit 1)              */
#define MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_Msk (0x2UL)                 /*!< MDR_TIMER1 DMA_RE2: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_Pos (2UL)                    /*!< MDR_TIMER1 DMA_RE2: ETR_RE_DMAE (Bit 2)               */
#define MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_Msk (0x4UL)                  /*!< MDR_TIMER1 DMA_RE2: ETR_RE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_Pos (3UL)                    /*!< MDR_TIMER1 DMA_RE2: ETR_FE_DMAE (Bit 3)               */
#define MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_Msk (0x8UL)                  /*!< MDR_TIMER1 DMA_RE2: ETR_FE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_BRK_DMAE_Pos   (4UL)                     /*!< MDR_TIMER1 DMA_RE2: BRK_DMAE (Bit 4)                  */
#define MDR_TIMER1_DMA_RE2_BRK_DMAE_Msk   (0x10UL)                  /*!< MDR_TIMER1 DMA_RE2: BRK_DMAE (Bitfield-Mask: 0x01)    */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_Pos (5UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH1_DMAE (Bit 5)          */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_Msk (0x20UL)            /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_Pos (6UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH2_DMAE (Bit 6)          */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_Msk (0x40UL)            /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_Pos (7UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH3_DMAE (Bit 7)          */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_Msk (0x80UL)            /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_Pos (8UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH4_DMAE (Bit 8)          */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_Msk (0x100UL)           /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_Pos (9UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH1_DMAE (Bit 9)          */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_Msk (0x200UL)           /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_Pos (10UL)              /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH2_DMAE (Bit 10)         */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_Msk (0x400UL)           /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_Pos (11UL)              /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH3_DMAE (Bit 11)         */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_Msk (0x800UL)           /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_Pos (12UL)              /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH4_DMAE (Bit 12)         */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_Msk (0x1000UL)          /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_Pos (13UL)             /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH1_DMAE (Bit 13)        */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)         /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_Pos (14UL)             /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH2_DMAE (Bit 14)        */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)         /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_Pos (15UL)             /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH3_DMAE (Bit 15)        */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)         /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_Pos (16UL)             /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH4_DMAE (Bit 16)        */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)        /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ========================================================  DMA_RE3  ======================================================== */
#define MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_Pos (0UL)                  /*!< MDR_TIMER1 DMA_RE3: CNT_ZERO_DMAE (Bit 0)             */
#define MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_Msk (0x1UL)                /*!< MDR_TIMER1 DMA_RE3: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_Pos (1UL)                   /*!< MDR_TIMER1 DMA_RE3: CNT_ARR_DMAE (Bit 1)              */
#define MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_Msk (0x2UL)                 /*!< MDR_TIMER1 DMA_RE3: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_Pos (2UL)                    /*!< MDR_TIMER1 DMA_RE3: ETR_RE_DMAE (Bit 2)               */
#define MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_Msk (0x4UL)                  /*!< MDR_TIMER1 DMA_RE3: ETR_RE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_Pos (3UL)                    /*!< MDR_TIMER1 DMA_RE3: ETR_FE_DMAE (Bit 3)               */
#define MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_Msk (0x8UL)                  /*!< MDR_TIMER1 DMA_RE3: ETR_FE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_BRK_DMAE_Pos   (4UL)                     /*!< MDR_TIMER1 DMA_RE3: BRK_DMAE (Bit 4)                  */
#define MDR_TIMER1_DMA_RE3_BRK_DMAE_Msk   (0x10UL)                  /*!< MDR_TIMER1 DMA_RE3: BRK_DMAE (Bitfield-Mask: 0x01)    */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_Pos (5UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH1_DMAE (Bit 5)          */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_Msk (0x20UL)            /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_Pos (6UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH2_DMAE (Bit 6)          */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_Msk (0x40UL)            /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_Pos (7UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH3_DMAE (Bit 7)          */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_Msk (0x80UL)            /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_Pos (8UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH4_DMAE (Bit 8)          */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_Msk (0x100UL)           /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_Pos (9UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH1_DMAE (Bit 9)          */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_Msk (0x200UL)           /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_Pos (10UL)              /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH2_DMAE (Bit 10)         */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_Msk (0x400UL)           /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_Pos (11UL)              /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH3_DMAE (Bit 11)         */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_Msk (0x800UL)           /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_Pos (12UL)              /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH4_DMAE (Bit 12)         */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_Msk (0x1000UL)          /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_Pos (13UL)             /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH1_DMAE (Bit 13)        */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)         /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_Pos (14UL)             /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH2_DMAE (Bit 14)        */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)         /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_Pos (15UL)             /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH3_DMAE (Bit 15)        */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)         /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_Pos (16UL)             /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH4_DMAE (Bit 16)        */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)        /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ========================================================  DMA_RE4  ======================================================== */
#define MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_Pos (0UL)                  /*!< MDR_TIMER1 DMA_RE4: CNT_ZERO_DMAE (Bit 0)             */
#define MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_Msk (0x1UL)                /*!< MDR_TIMER1 DMA_RE4: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_Pos (1UL)                   /*!< MDR_TIMER1 DMA_RE4: CNT_ARR_DMAE (Bit 1)              */
#define MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_Msk (0x2UL)                 /*!< MDR_TIMER1 DMA_RE4: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_Pos (2UL)                    /*!< MDR_TIMER1 DMA_RE4: ETR_RE_DMAE (Bit 2)               */
#define MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_Msk (0x4UL)                  /*!< MDR_TIMER1 DMA_RE4: ETR_RE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_Pos (3UL)                    /*!< MDR_TIMER1 DMA_RE4: ETR_FE_DMAE (Bit 3)               */
#define MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_Msk (0x8UL)                  /*!< MDR_TIMER1 DMA_RE4: ETR_FE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_BRK_DMAE_Pos   (4UL)                     /*!< MDR_TIMER1 DMA_RE4: BRK_DMAE (Bit 4)                  */
#define MDR_TIMER1_DMA_RE4_BRK_DMAE_Msk   (0x10UL)                  /*!< MDR_TIMER1 DMA_RE4: BRK_DMAE (Bitfield-Mask: 0x01)    */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_Pos (5UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH1_DMAE (Bit 5)          */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_Msk (0x20UL)            /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_Pos (6UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH2_DMAE (Bit 6)          */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_Msk (0x40UL)            /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_Pos (7UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH3_DMAE (Bit 7)          */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_Msk (0x80UL)            /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_Pos (8UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH4_DMAE (Bit 8)          */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_Msk (0x100UL)           /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_Pos (9UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH1_DMAE (Bit 9)          */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_Msk (0x200UL)           /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_Pos (10UL)              /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH2_DMAE (Bit 10)         */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_Msk (0x400UL)           /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_Pos (11UL)              /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH3_DMAE (Bit 11)         */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_Msk (0x800UL)           /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_Pos (12UL)              /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH4_DMAE (Bit 12)         */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_Msk (0x1000UL)          /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_Pos (13UL)             /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH1_DMAE (Bit 13)        */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)         /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_Pos (14UL)             /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH2_DMAE (Bit 14)        */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)         /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_Pos (15UL)             /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH3_DMAE (Bit 15)        */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)         /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_Pos (16UL)             /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH4_DMAE (Bit 16)        */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)        /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                         MDR_SSP1                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
#define MDR_SSP1_CR0_DSS_Pos              (0UL)                     /*!< MDR_SSP1 CR0: DSS (Bit 0)                             */
#define MDR_SSP1_CR0_DSS_Msk              (0xfUL)                   /*!< MDR_SSP1 CR0: DSS (Bitfield-Mask: 0x0f)               */
#define MDR_SSP1_CR0_FRF_Pos              (4UL)                     /*!< MDR_SSP1 CR0: FRF (Bit 4)                             */
#define MDR_SSP1_CR0_FRF_Msk              (0x30UL)                  /*!< MDR_SSP1 CR0: FRF (Bitfield-Mask: 0x03)               */
#define MDR_SSP1_CR0_SPO_Pos              (6UL)                     /*!< MDR_SSP1 CR0: SPO (Bit 6)                             */
#define MDR_SSP1_CR0_SPO_Msk              (0x40UL)                  /*!< MDR_SSP1 CR0: SPO (Bitfield-Mask: 0x01)               */
#define MDR_SSP1_CR0_SPH_Pos              (7UL)                     /*!< MDR_SSP1 CR0: SPH (Bit 7)                             */
#define MDR_SSP1_CR0_SPH_Msk              (0x80UL)                  /*!< MDR_SSP1 CR0: SPH (Bitfield-Mask: 0x01)               */
#define MDR_SSP1_CR0_SCR_Pos              (8UL)                     /*!< MDR_SSP1 CR0: SCR (Bit 8)                             */
#define MDR_SSP1_CR0_SCR_Msk              (0xff00UL)                /*!< MDR_SSP1 CR0: SCR (Bitfield-Mask: 0xff)               */
/* ==========================================================  CR1  ========================================================== */
#define MDR_SSP1_CR1_LBM_Pos              (0UL)                     /*!< MDR_SSP1 CR1: LBM (Bit 0)                             */
#define MDR_SSP1_CR1_LBM_Msk              (0x1UL)                   /*!< MDR_SSP1 CR1: LBM (Bitfield-Mask: 0x01)               */
#define MDR_SSP1_CR1_SSE_Pos              (1UL)                     /*!< MDR_SSP1 CR1: SSE (Bit 1)                             */
#define MDR_SSP1_CR1_SSE_Msk              (0x2UL)                   /*!< MDR_SSP1 CR1: SSE (Bitfield-Mask: 0x01)               */
#define MDR_SSP1_CR1_MS_Pos               (2UL)                     /*!< MDR_SSP1 CR1: MS (Bit 2)                              */
#define MDR_SSP1_CR1_MS_Msk               (0x4UL)                   /*!< MDR_SSP1 CR1: MS (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_CR1_SOD_Pos              (3UL)                     /*!< MDR_SSP1 CR1: SOD (Bit 3)                             */
#define MDR_SSP1_CR1_SOD_Msk              (0x8UL)                   /*!< MDR_SSP1 CR1: SOD (Bitfield-Mask: 0x01)               */
/* ==========================================================  DR  =========================================================== */
#define MDR_SSP1_DR_Data_Pos              (0UL)                     /*!< MDR_SSP1 DR: Data (Bit 0)                             */
#define MDR_SSP1_DR_Data_Msk              (0xffffUL)                /*!< MDR_SSP1 DR: Data (Bitfield-Mask: 0xffff)             */
/* ==========================================================  SR  =========================================================== */
#define MDR_SSP1_SR_TFE_Pos               (0UL)                     /*!< MDR_SSP1 SR: TFE (Bit 0)                              */
#define MDR_SSP1_SR_TFE_Msk               (0x1UL)                   /*!< MDR_SSP1 SR: TFE (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_SR_TNF_Pos               (1UL)                     /*!< MDR_SSP1 SR: TNF (Bit 1)                              */
#define MDR_SSP1_SR_TNF_Msk               (0x2UL)                   /*!< MDR_SSP1 SR: TNF (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_SR_RNE_Pos               (2UL)                     /*!< MDR_SSP1 SR: RNE (Bit 2)                              */
#define MDR_SSP1_SR_RNE_Msk               (0x4UL)                   /*!< MDR_SSP1 SR: RNE (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_SR_RFF_Pos               (3UL)                     /*!< MDR_SSP1 SR: RFF (Bit 3)                              */
#define MDR_SSP1_SR_RFF_Msk               (0x8UL)                   /*!< MDR_SSP1 SR: RFF (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_SR_BSY_Pos               (4UL)                     /*!< MDR_SSP1 SR: BSY (Bit 4)                              */
#define MDR_SSP1_SR_BSY_Msk               (0x10UL)                  /*!< MDR_SSP1 SR: BSY (Bitfield-Mask: 0x01)                */
/* =========================================================  CPSR  ========================================================== */
#define MDR_SSP1_CPSR_CPSDVSR_Pos         (0UL)                     /*!< MDR_SSP1 CPSR: CPSDVSR (Bit 0)                        */
#define MDR_SSP1_CPSR_CPSDVSR_Msk         (0xffUL)                  /*!< MDR_SSP1 CPSR: CPSDVSR (Bitfield-Mask: 0xff)          */
/* =========================================================  IMSC  ========================================================== */
#define MDR_SSP1_IMSC_RORIM_Pos           (0UL)                     /*!< MDR_SSP1 IMSC: RORIM (Bit 0)                          */
#define MDR_SSP1_IMSC_RORIM_Msk           (0x1UL)                   /*!< MDR_SSP1 IMSC: RORIM (Bitfield-Mask: 0x01)            */
#define MDR_SSP1_IMSC_RTIM_Pos            (1UL)                     /*!< MDR_SSP1 IMSC: RTIM (Bit 1)                           */
#define MDR_SSP1_IMSC_RTIM_Msk            (0x2UL)                   /*!< MDR_SSP1 IMSC: RTIM (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_IMSC_RXIM_Pos            (2UL)                     /*!< MDR_SSP1 IMSC: RXIM (Bit 2)                           */
#define MDR_SSP1_IMSC_RXIM_Msk            (0x4UL)                   /*!< MDR_SSP1 IMSC: RXIM (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_IMSC_TXIM_Pos            (3UL)                     /*!< MDR_SSP1 IMSC: TXIM (Bit 3)                           */
#define MDR_SSP1_IMSC_TXIM_Msk            (0x8UL)                   /*!< MDR_SSP1 IMSC: TXIM (Bitfield-Mask: 0x01)             */
/* ==========================================================  RIS  ========================================================== */
#define MDR_SSP1_RIS_RORRIS_Pos           (0UL)                     /*!< MDR_SSP1 RIS: RORRIS (Bit 0)                          */
#define MDR_SSP1_RIS_RORRIS_Msk           (0x1UL)                   /*!< MDR_SSP1 RIS: RORRIS (Bitfield-Mask: 0x01)            */
#define MDR_SSP1_RIS_RTRIS_Pos            (1UL)                     /*!< MDR_SSP1 RIS: RTRIS (Bit 1)                           */
#define MDR_SSP1_RIS_RTRIS_Msk            (0x2UL)                   /*!< MDR_SSP1 RIS: RTRIS (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_RIS_RXRIS_Pos            (2UL)                     /*!< MDR_SSP1 RIS: RXRIS (Bit 2)                           */
#define MDR_SSP1_RIS_RXRIS_Msk            (0x4UL)                   /*!< MDR_SSP1 RIS: RXRIS (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_RIS_TXRIS_Pos            (3UL)                     /*!< MDR_SSP1 RIS: TXRIS (Bit 3)                           */
#define MDR_SSP1_RIS_TXRIS_Msk            (0x8UL)                   /*!< MDR_SSP1 RIS: TXRIS (Bitfield-Mask: 0x01)             */
/* ==========================================================  MIS  ========================================================== */
#define MDR_SSP1_MIS_RORMIS_Pos           (0UL)                     /*!< MDR_SSP1 MIS: RORMIS (Bit 0)                          */
#define MDR_SSP1_MIS_RORMIS_Msk           (0x1UL)                   /*!< MDR_SSP1 MIS: RORMIS (Bitfield-Mask: 0x01)            */
#define MDR_SSP1_MIS_RTMIS_Pos            (1UL)                     /*!< MDR_SSP1 MIS: RTMIS (Bit 1)                           */
#define MDR_SSP1_MIS_RTMIS_Msk            (0x2UL)                   /*!< MDR_SSP1 MIS: RTMIS (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_MIS_RXMIS_Pos            (2UL)                     /*!< MDR_SSP1 MIS: RXMIS (Bit 2)                           */
#define MDR_SSP1_MIS_RXMIS_Msk            (0x4UL)                   /*!< MDR_SSP1 MIS: RXMIS (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_MIS_TXMIS_Pos            (3UL)                     /*!< MDR_SSP1 MIS: TXMIS (Bit 3)                           */
#define MDR_SSP1_MIS_TXMIS_Msk            (0x8UL)                   /*!< MDR_SSP1 MIS: TXMIS (Bitfield-Mask: 0x01)             */
/* ==========================================================  ICR  ========================================================== */
#define MDR_SSP1_ICR_RORIC_Pos            (0UL)                     /*!< MDR_SSP1 ICR: RORIC (Bit 0)                           */
#define MDR_SSP1_ICR_RORIC_Msk            (0x1UL)                   /*!< MDR_SSP1 ICR: RORIC (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_ICR_RTIC_Pos             (1UL)                     /*!< MDR_SSP1 ICR: RTIC (Bit 1)                            */
#define MDR_SSP1_ICR_RTIC_Msk             (0x2UL)                   /*!< MDR_SSP1 ICR: RTIC (Bitfield-Mask: 0x01)              */
/* =========================================================  DMACR  ========================================================= */
#define MDR_SSP1_DMACR_RXDMAE_Pos         (0UL)                     /*!< MDR_SSP1 DMACR: RXDMAE (Bit 0)                        */
#define MDR_SSP1_DMACR_RXDMAE_Msk         (0x1UL)                   /*!< MDR_SSP1 DMACR: RXDMAE (Bitfield-Mask: 0x01)          */
#define MDR_SSP1_DMACR_TXDMAE_Pos         (1UL)                     /*!< MDR_SSP1 DMACR: TXDMAE (Bit 1)                        */
#define MDR_SSP1_DMACR_TXDMAE_Msk         (0x2UL)                   /*!< MDR_SSP1 DMACR: TXDMAE (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  RXTX  ========================================================== */
#define MDR_PORTA_RXTX_Pin__Pos           (0UL)                     /*!< MDR_PORTA RXTX: Pin_ (Bit 0)                          */
#define MDR_PORTA_RXTX_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA RXTX: Pin_ (Bitfield-Mask: 0x01)            */
/* ==========================================================  OE  =========================================================== */
#define MDR_PORTA_OE_Pin__Pos             (0UL)                     /*!< MDR_PORTA OE: Pin_ (Bit 0)                            */
#define MDR_PORTA_OE_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA OE: Pin_ (Bitfield-Mask: 0x01)              */
/* =========================================================  FUNC  ========================================================== */
#define MDR_PORTA_FUNC_Pin__Pos           (0UL)                     /*!< MDR_PORTA FUNC: Pin_ (Bit 0)                          */
#define MDR_PORTA_FUNC_Pin__Msk           (0x3UL)                   /*!< MDR_PORTA FUNC: Pin_ (Bitfield-Mask: 0x03)            */
/* ========================================================  ANALOG  ========================================================= */
#define MDR_PORTA_ANALOG_Pin__Pos         (0UL)                     /*!< MDR_PORTA ANALOG: Pin_ (Bit 0)                        */
#define MDR_PORTA_ANALOG_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA ANALOG: Pin_ (Bitfield-Mask: 0x01)          */
/* =========================================================  PULL  ========================================================== */
#define MDR_PORTA_PULL_Down_Pin_0_Pos     (0UL)                     /*!< MDR_PORTA PULL: Down_Pin_0 (Bit 0)                    */
#define MDR_PORTA_PULL_Down_Pin_0_Msk     (0x1UL)                   /*!< MDR_PORTA PULL: Down_Pin_0 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_1_Pos     (1UL)                     /*!< MDR_PORTA PULL: Down_Pin_1 (Bit 1)                    */
#define MDR_PORTA_PULL_Down_Pin_1_Msk     (0x2UL)                   /*!< MDR_PORTA PULL: Down_Pin_1 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_2_Pos     (2UL)                     /*!< MDR_PORTA PULL: Down_Pin_2 (Bit 2)                    */
#define MDR_PORTA_PULL_Down_Pin_2_Msk     (0x4UL)                   /*!< MDR_PORTA PULL: Down_Pin_2 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_3_Pos     (3UL)                     /*!< MDR_PORTA PULL: Down_Pin_3 (Bit 3)                    */
#define MDR_PORTA_PULL_Down_Pin_3_Msk     (0x8UL)                   /*!< MDR_PORTA PULL: Down_Pin_3 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_4_Pos     (4UL)                     /*!< MDR_PORTA PULL: Down_Pin_4 (Bit 4)                    */
#define MDR_PORTA_PULL_Down_Pin_4_Msk     (0x10UL)                  /*!< MDR_PORTA PULL: Down_Pin_4 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_5_Pos     (5UL)                     /*!< MDR_PORTA PULL: Down_Pin_5 (Bit 5)                    */
#define MDR_PORTA_PULL_Down_Pin_5_Msk     (0x20UL)                  /*!< MDR_PORTA PULL: Down_Pin_5 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_6_Pos     (6UL)                     /*!< MDR_PORTA PULL: Down_Pin_6 (Bit 6)                    */
#define MDR_PORTA_PULL_Down_Pin_6_Msk     (0x40UL)                  /*!< MDR_PORTA PULL: Down_Pin_6 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_7_Pos     (7UL)                     /*!< MDR_PORTA PULL: Down_Pin_7 (Bit 7)                    */
#define MDR_PORTA_PULL_Down_Pin_7_Msk     (0x80UL)                  /*!< MDR_PORTA PULL: Down_Pin_7 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_8_Pos     (8UL)                     /*!< MDR_PORTA PULL: Down_Pin_8 (Bit 8)                    */
#define MDR_PORTA_PULL_Down_Pin_8_Msk     (0x100UL)                 /*!< MDR_PORTA PULL: Down_Pin_8 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_9_Pos     (9UL)                     /*!< MDR_PORTA PULL: Down_Pin_9 (Bit 9)                    */
#define MDR_PORTA_PULL_Down_Pin_9_Msk     (0x200UL)                 /*!< MDR_PORTA PULL: Down_Pin_9 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_10_Pos    (10UL)                    /*!< MDR_PORTA PULL: Down_Pin_10 (Bit 10)                  */
#define MDR_PORTA_PULL_Down_Pin_10_Msk    (0x400UL)                 /*!< MDR_PORTA PULL: Down_Pin_10 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_11_Pos    (11UL)                    /*!< MDR_PORTA PULL: Down_Pin_11 (Bit 11)                  */
#define MDR_PORTA_PULL_Down_Pin_11_Msk    (0x800UL)                 /*!< MDR_PORTA PULL: Down_Pin_11 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_12_Pos    (12UL)                    /*!< MDR_PORTA PULL: Down_Pin_12 (Bit 12)                  */
#define MDR_PORTA_PULL_Down_Pin_12_Msk    (0x1000UL)                /*!< MDR_PORTA PULL: Down_Pin_12 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_13_Pos    (13UL)                    /*!< MDR_PORTA PULL: Down_Pin_13 (Bit 13)                  */
#define MDR_PORTA_PULL_Down_Pin_13_Msk    (0x2000UL)                /*!< MDR_PORTA PULL: Down_Pin_13 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_14_Pos    (14UL)                    /*!< MDR_PORTA PULL: Down_Pin_14 (Bit 14)                  */
#define MDR_PORTA_PULL_Down_Pin_14_Msk    (0x4000UL)                /*!< MDR_PORTA PULL: Down_Pin_14 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_15_Pos    (15UL)                    /*!< MDR_PORTA PULL: Down_Pin_15 (Bit 15)                  */
#define MDR_PORTA_PULL_Down_Pin_15_Msk    (0x8000UL)                /*!< MDR_PORTA PULL: Down_Pin_15 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_UP_Pin__Pos        (16UL)                    /*!< MDR_PORTA PULL: UP_Pin_ (Bit 16)                      */
#define MDR_PORTA_PULL_UP_Pin__Msk        (0x10000UL)               /*!< MDR_PORTA PULL: UP_Pin_ (Bitfield-Mask: 0x01)         */
/* ==========================================================  PD  =========================================================== */
#define MDR_PORTA_PD_Driver_Pin_0_Pos     (0UL)                     /*!< MDR_PORTA PD: Driver_Pin_0 (Bit 0)                    */
#define MDR_PORTA_PD_Driver_Pin_0_Msk     (0x1UL)                   /*!< MDR_PORTA PD: Driver_Pin_0 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_1_Pos     (1UL)                     /*!< MDR_PORTA PD: Driver_Pin_1 (Bit 1)                    */
#define MDR_PORTA_PD_Driver_Pin_1_Msk     (0x2UL)                   /*!< MDR_PORTA PD: Driver_Pin_1 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_2_Pos     (2UL)                     /*!< MDR_PORTA PD: Driver_Pin_2 (Bit 2)                    */
#define MDR_PORTA_PD_Driver_Pin_2_Msk     (0x4UL)                   /*!< MDR_PORTA PD: Driver_Pin_2 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_3_Pos     (3UL)                     /*!< MDR_PORTA PD: Driver_Pin_3 (Bit 3)                    */
#define MDR_PORTA_PD_Driver_Pin_3_Msk     (0x8UL)                   /*!< MDR_PORTA PD: Driver_Pin_3 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_4_Pos     (4UL)                     /*!< MDR_PORTA PD: Driver_Pin_4 (Bit 4)                    */
#define MDR_PORTA_PD_Driver_Pin_4_Msk     (0x10UL)                  /*!< MDR_PORTA PD: Driver_Pin_4 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_5_Pos     (5UL)                     /*!< MDR_PORTA PD: Driver_Pin_5 (Bit 5)                    */
#define MDR_PORTA_PD_Driver_Pin_5_Msk     (0x20UL)                  /*!< MDR_PORTA PD: Driver_Pin_5 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_6_Pos     (6UL)                     /*!< MDR_PORTA PD: Driver_Pin_6 (Bit 6)                    */
#define MDR_PORTA_PD_Driver_Pin_6_Msk     (0x40UL)                  /*!< MDR_PORTA PD: Driver_Pin_6 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_7_Pos     (7UL)                     /*!< MDR_PORTA PD: Driver_Pin_7 (Bit 7)                    */
#define MDR_PORTA_PD_Driver_Pin_7_Msk     (0x80UL)                  /*!< MDR_PORTA PD: Driver_Pin_7 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_8_Pos     (8UL)                     /*!< MDR_PORTA PD: Driver_Pin_8 (Bit 8)                    */
#define MDR_PORTA_PD_Driver_Pin_8_Msk     (0x100UL)                 /*!< MDR_PORTA PD: Driver_Pin_8 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_9_Pos     (9UL)                     /*!< MDR_PORTA PD: Driver_Pin_9 (Bit 9)                    */
#define MDR_PORTA_PD_Driver_Pin_9_Msk     (0x200UL)                 /*!< MDR_PORTA PD: Driver_Pin_9 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_10_Pos    (10UL)                    /*!< MDR_PORTA PD: Driver_Pin_10 (Bit 10)                  */
#define MDR_PORTA_PD_Driver_Pin_10_Msk    (0x400UL)                 /*!< MDR_PORTA PD: Driver_Pin_10 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_11_Pos    (11UL)                    /*!< MDR_PORTA PD: Driver_Pin_11 (Bit 11)                  */
#define MDR_PORTA_PD_Driver_Pin_11_Msk    (0x800UL)                 /*!< MDR_PORTA PD: Driver_Pin_11 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_12_Pos    (12UL)                    /*!< MDR_PORTA PD: Driver_Pin_12 (Bit 12)                  */
#define MDR_PORTA_PD_Driver_Pin_12_Msk    (0x1000UL)                /*!< MDR_PORTA PD: Driver_Pin_12 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_13_Pos    (13UL)                    /*!< MDR_PORTA PD: Driver_Pin_13 (Bit 13)                  */
#define MDR_PORTA_PD_Driver_Pin_13_Msk    (0x2000UL)                /*!< MDR_PORTA PD: Driver_Pin_13 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_14_Pos    (14UL)                    /*!< MDR_PORTA PD: Driver_Pin_14 (Bit 14)                  */
#define MDR_PORTA_PD_Driver_Pin_14_Msk    (0x4000UL)                /*!< MDR_PORTA PD: Driver_Pin_14 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_15_Pos    (15UL)                    /*!< MDR_PORTA PD: Driver_Pin_15 (Bit 15)                  */
#define MDR_PORTA_PD_Driver_Pin_15_Msk    (0x8000UL)                /*!< MDR_PORTA PD: Driver_Pin_15 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Schmitt_Pin__Pos     (16UL)                    /*!< MDR_PORTA PD: Schmitt_Pin_ (Bit 16)                   */
#define MDR_PORTA_PD_Schmitt_Pin__Msk     (0x10000UL)               /*!< MDR_PORTA PD: Schmitt_Pin_ (Bitfield-Mask: 0x01)      */
/* ==========================================================  PWR  ========================================================== */
#define MDR_PORTA_PWR_Pin__Pos            (0UL)                     /*!< MDR_PORTA PWR: Pin_ (Bit 0)                           */
#define MDR_PORTA_PWR_Pin__Msk            (0x3UL)                   /*!< MDR_PORTA PWR: Pin_ (Bitfield-Mask: 0x03)             */
/* =========================================================  GFEN  ========================================================== */
#define MDR_PORTA_GFEN_Pin__Pos           (0UL)                     /*!< MDR_PORTA GFEN: Pin_ (Bit 0)                          */
#define MDR_PORTA_GFEN_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA GFEN: Pin_ (Bitfield-Mask: 0x01)            */
/* =========================================================  SETTX  ========================================================= */
#define MDR_PORTA_SETTX_Pin__Pos          (0UL)                     /*!< MDR_PORTA SETTX: Pin_ (Bit 0)                         */
#define MDR_PORTA_SETTX_Pin__Msk          (0x1UL)                   /*!< MDR_PORTA SETTX: Pin_ (Bitfield-Mask: 0x01)           */
/* =========================================================  CLRTX  ========================================================= */
#define MDR_PORTA_CLRTX_Pin__Pos          (0UL)                     /*!< MDR_PORTA CLRTX: Pin_ (Bit 0)                         */
#define MDR_PORTA_CLRTX_Pin__Msk          (0x1UL)                   /*!< MDR_PORTA CLRTX: Pin_ (Bitfield-Mask: 0x01)           */
/* =========================================================  RDTX  ========================================================== */
#define MDR_PORTA_RDTX_Pin__Pos           (0UL)                     /*!< MDR_PORTA RDTX: Pin_ (Bit 0)                          */
#define MDR_PORTA_RDTX_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA RDTX: Pin_ (Bitfield-Mask: 0x01)            */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CMD  ========================================================== */
/* ===============================================  MDR_EEPROM CMD CON [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_CON                                                        */
  MDR_EEPROM_CMD__CON__Normal Access   = 0,     /*!< Normal Access : Normal access to memory                                   */
  MDR_EEPROM_CMD__CON__Controller Access = 1,   /*!< Controller Access : Access to memory though registers                     */
} MDR_EEPROM_CMD__CON__Enum;

/* ===============================================  MDR_EEPROM CMD WR [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_WR                                                         */
  MDR_EEPROM_CMD__WR__Inactive         = 0,     /*!< Inactive : No write operation                                             */
  MDR_EEPROM_CMD__WR__Active           = 1,     /*!< Active : Write operation                                                  */
} MDR_EEPROM_CMD__WR__Enum;

/* ===============================================  MDR_EEPROM CMD RD [2..2]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_RD                                                         */
  MDR_EEPROM_CMD__RD__Inactive         = 0,     /*!< Inactive : No read operation                                              */
  MDR_EEPROM_CMD__RD__Active           = 1,     /*!< Active : Read operation                                                   */
} MDR_EEPROM_CMD__RD__Enum;

/* ==============================================  MDR_EEPROM CMD DELAY [3..5]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_DELAY                                                      */
  MDR_EEPROM_CMD__DELAY__le25MHz       = 0,     /*!< le25MHz : CPU freq is up to 25MHz                                         */
  MDR_EEPROM_CMD__DELAY__le50MHz       = 1,     /*!< le50MHz : CPU freq is up to 50MHz                                         */
  MDR_EEPROM_CMD__DELAY__le75MHz       = 2,     /*!< le75MHz : CPU freq is up to 75MHz                                         */
  MDR_EEPROM_CMD__DELAY__le100MHz      = 3,     /*!< le100MHz : CPU freq is up to 100MHz                                       */
  MDR_EEPROM_CMD__DELAY__le125MHz      = 4,     /*!< le125MHz : CPU freq is up to 125MHz                                       */
  MDR_EEPROM_CMD__DELAY__le150MHz      = 5,     /*!< le150MHz : CPU freq is up to 150MHz                                       */
  MDR_EEPROM_CMD__DELAY__le175MHz      = 6,     /*!< le175MHz : CPU freq is up to 175MHz                                       */
  MDR_EEPROM_CMD__DELAY__le200MHz      = 7,     /*!< le200MHz : CPU freq is up to 200MHz                                       */
} MDR_EEPROM_CMD__DELAY__Enum;

/* ===============================================  MDR_EEPROM CMD XE [6..6]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_XE                                                         */
  MDR_EEPROM_CMD__XE__Off              = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD__XE__On               = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD__XE__Enum;

/* ===============================================  MDR_EEPROM CMD YE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_YE                                                         */
  MDR_EEPROM_CMD_YE_Off                = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_YE_On                 = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_YE_Enum;

/* ===============================================  MDR_EEPROM CMD SE [8..8]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_SE                                                         */
  MDR_EEPROM_CMD_SE_Off                = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_SE_On                 = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_SE_Enum;

/* ==============================================  MDR_EEPROM CMD IFREN [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_IFREN                                                      */
  MDR_EEPROM_CMD__IFREN__Main          = 0,     /*!< Main : Main memory                                                        */
  MDR_EEPROM_CMD__IFREN__Info          = 1,     /*!< Info : Info memory                                                        */
} MDR_EEPROM_CMD__IFREN__Enum;

/* =============================================  MDR_EEPROM CMD ERASE [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_EEPROM_CMD_ERASE                                                      */
  MDR_EEPROM_CMD__ERASE__Inactive      = 0,     /*!< Inactive : No erase operation                                             */
  MDR_EEPROM_CMD__ERASE__Active        = 1,     /*!< Active : Erase operation                                                  */
} MDR_EEPROM_CMD__ERASE__Enum;

/* =============================================  MDR_EEPROM CMD MAS1 [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_MAS1                                                       */
  MDR_EEPROM_CMD_MAS1_Off              = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_MAS1_On               = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_MAS1_Enum;

/* =============================================  MDR_EEPROM CMD PROG [12..12]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_PROG                                                       */
  MDR_EEPROM_CMD__PROG__Inactive       = 0,     /*!< Inactive : No programm operation                                          */
  MDR_EEPROM_CMD__PROG__Active         = 1,     /*!< Active : Programm operation                                               */
} MDR_EEPROM_CMD__PROG__Enum;

/* =============================================  MDR_EEPROM CMD NVSTR [13..13]  ============================================= */
typedef enum {                                  /*!< MDR_EEPROM_CMD_NVSTR                                                      */
  MDR_EEPROM_CMD__NVSTR__Read          = 0,     /*!< Read : Read mode                                                          */
  MDR_EEPROM_CMD__NVSTR__Write         = 1,     /*!< Write : Programming or erase mode                                         */
} MDR_EEPROM_CMD__NVSTR__Enum;

/* =========================================================  ADDR  ========================================================== */
/* ==========================================================  DI  =========================================================== */
/* ==========================================================  DO  =========================================================== */
/* ==========================================================  KEY  ========================================================== */


/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* =====================================================  CLOCK_STATUS  ====================================================== */
/* =====================================  MDR_RST_CLOCK CLOCK_STATUS PLL_USB_RDY [0..0]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_PLL_USB_RDY                                    */
  MDR_RST__STATUS__PLL_USB_RDY__NotReady = 0,   /*!< NotReady : PLL not ready                                                  */
  MDR_RST__STATUS__PLL_USB_RDY__Ready  = 1,     /*!< Ready : PLL ready                                                         */
} MDR_RST__STATUS__PLL_USB_RDY__Enum;

/* =====================================  MDR_RST_CLOCK CLOCK_STATUS PLL_CPU_RDY [1..1]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY                                    */
  MDR_RST__STATUS__PLL_CPU_RDY__NotReady = 0,   /*!< NotReady : PLL not ready                                                  */
  MDR_RST__STATUS__PLL_CPU_RDY__Ready  = 1,     /*!< Ready : PLL ready                                                         */
} MDR_RST__STATUS__PLL_CPU_RDY__Enum;

/* =======================================  MDR_RST_CLOCK CLOCK_STATUS HSE_RDY [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY                                        */
  MDR_RST__STATUS__HSE_RDY__NotReady   = 0,     /*!< NotReady : HSE not ready                                                  */
  MDR_RST__STATUS__HSE_RDY__Ready      = 1,     /*!< Ready : HSE ready                                                         */
} MDR_RST__STATUS__HSE_RDY__Enum;

/* ======================================  MDR_RST_CLOCK CLOCK_STATUS HSE2_RDY [3..3]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_HSE2_RDY                                       */
  MDR_RST__STATUS__HSE2_RDY__NotReady  = 0,     /*!< NotReady : HSE2 not ready                                                 */
  MDR_RST__STATUS__HSE2_RDY__Ready     = 1,     /*!< Ready : HSE2 ready                                                        */
} MDR_RST__STATUS__HSE2_RDY__Enum;

/* ======================================================  PLL_CONTROL  ====================================================== */
/* ======================================  MDR_RST_CLOCK PLL_CONTROL PLL_USB_ON [0..0]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_ON                                      */
  MDR_RST__PLL__USB_EN__Off            = 0,     /*!< Off : PLL Off                                                             */
  MDR_RST__PLL__USB_EN__On             = 1,     /*!< On : PLL On                                                               */
} MDR_RST__PLL__USB_EN__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_USB_PLD [1..1]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_PLD                                     */
  MDR_RST__PLL__USB_PLD__RestartOff    = 0,     /*!< RestartOff : PLL restart inactive                                         */
  MDR_RST__PLL__USB_PLD__DoRestart     = 1,     /*!< DoRestart : PLL Do Restart                                                */
} MDR_RST__PLL__USB_PLD__Enum;

/* ======================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_ON [2..2]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON                                      */
  MDR_RST__PLL__CPU_EN__Off            = 0,     /*!< Off : PLL Off                                                             */
  MDR_RST__PLL__CPU_EN__On             = 1,     /*!< On : PLL On                                                               */
} MDR_RST__PLL__CPU_EN__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_PLD [3..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD                                     */
  MDR_RST__PLL__CPU_PLD__RestartOff    = 0,     /*!< RestartOff : PLL restart inactive                                         */
  MDR_RST__PLL__CPU_PLD__DoRestart     = 1,     /*!< DoRestart : PLL Do Restart                                                */
} MDR_RST__PLL__CPU_PLD__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_USB_MUL [4..7]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_USB_MUL                                     */
  MDR_RST__PLL__USB_MUL__x1            = 0,     /*!< x1 : PLL mul x1                                                           */
  MDR_RST__PLL__USB_MUL__x2            = 1,     /*!< x2 : PLL mul x2                                                           */
  MDR_RST__PLL__USB_MUL__x3            = 2,     /*!< x3 : PLL mul x3                                                           */
  MDR_RST__PLL__USB_MUL__x4            = 3,     /*!< x4 : PLL mul x4                                                           */
  MDR_RST__PLL__USB_MUL__x5            = 4,     /*!< x5 : PLL mul x5                                                           */
  MDR_RST__PLL__USB_MUL__x6            = 5,     /*!< x6 : PLL mul x6                                                           */
  MDR_RST__PLL__USB_MUL__x7            = 6,     /*!< x7 : PLL mul x7                                                           */
  MDR_RST__PLL__USB_MUL__x8            = 7,     /*!< x8 : PLL mul x8                                                           */
  MDR_RST__PLL__USB_MUL__x9            = 8,     /*!< x9 : PLL mul x9                                                           */
  MDR_RST__PLL__USB_MUL__x10           = 9,     /*!< x10 : PLL mul x10                                                         */
  MDR_RST__PLL__USB_MUL__x11           = 10,    /*!< x11 : PLL mul x11                                                         */
  MDR_RST__PLL__USB_MUL__x12           = 11,    /*!< x12 : PLL mul x12                                                         */
  MDR_RST__PLL__USB_MUL__x13           = 12,    /*!< x13 : PLL mul x13                                                         */
  MDR_RST__PLL__USB_MUL__x14           = 13,    /*!< x14 : PLL mul x14                                                         */
  MDR_RST__PLL__USB_MUL__x15           = 14,    /*!< x15 : PLL mul x15                                                         */
  MDR_RST__PLL__USB_MUL__x16           = 15,    /*!< x16 : PLL mul x16                                                         */
} MDR_RST__PLL__USB_MUL__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_MUL [8..11]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL                                     */
  MDR_RST__PLL__CPU_MUL__x1            = 0,     /*!< x1 : PLL mul x1                                                           */
  MDR_RST__PLL__CPU_MUL__x2            = 1,     /*!< x2 : PLL mul x2                                                           */
  MDR_RST__PLL__CPU_MUL__x3            = 2,     /*!< x3 : PLL mul x3                                                           */
  MDR_RST__PLL__CPU_MUL__x4            = 3,     /*!< x4 : PLL mul x4                                                           */
  MDR_RST__PLL__CPU_MUL__x5            = 4,     /*!< x5 : PLL mul x5                                                           */
  MDR_RST__PLL__CPU_MUL__x6            = 5,     /*!< x6 : PLL mul x6                                                           */
  MDR_RST__PLL__CPU_MUL__x7            = 6,     /*!< x7 : PLL mul x7                                                           */
  MDR_RST__PLL__CPU_MUL__x8            = 7,     /*!< x8 : PLL mul x8                                                           */
  MDR_RST__PLL__CPU_MUL__x9            = 8,     /*!< x9 : PLL mul x9                                                           */
  MDR_RST__PLL__CPU_MUL__x10           = 9,     /*!< x10 : PLL mul x10                                                         */
  MDR_RST__PLL__CPU_MUL__x11           = 10,    /*!< x11 : PLL mul x11                                                         */
  MDR_RST__PLL__CPU_MUL__x12           = 11,    /*!< x12 : PLL mul x12                                                         */
  MDR_RST__PLL__CPU_MUL__x13           = 12,    /*!< x13 : PLL mul x13                                                         */
  MDR_RST__PLL__CPU_MUL__x14           = 13,    /*!< x14 : PLL mul x14                                                         */
  MDR_RST__PLL__CPU_MUL__x15           = 14,    /*!< x15 : PLL mul x15                                                         */
  MDR_RST__PLL__CPU_MUL__x16           = 15,    /*!< x16 : PLL mul x16                                                         */
} MDR_RST__PLL__CPU_MUL__Enum;

/* ======================================================  HS_CONTROL  ======================================================= */
/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE_ON [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE_ON                                           */
  MDR_RST__HS__HSE_EN__Off             = 0,     /*!< Off : HSE Off                                                             */
  MDR_RST__HS__HSE_EN__On              = 1,     /*!< On : HSE On                                                               */
} MDR_RST__HS__HSE_EN__Enum;

/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE_BYP [1..1]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE_BYP                                          */
  MDR_RST__HS__HSE_BYP__Off            = 0,     /*!< Off : HSE forms Clock from external oscillator                            */
  MDR_RST__HS__HSE_BYP__On             = 1,     /*!< On : HSE passes Clock from external generator                             */
} MDR_RST__HS__HSE_BYP__Enum;

/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE2_ON [2..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE2_ON                                          */
  MDR_RST__HS__HSE2_EN__Off            = 0,     /*!< Off : HSE2 Off                                                            */
  MDR_RST__HS__HSE2_EN__On             = 1,     /*!< On : HSE2 On                                                              */
} MDR_RST__HS__HSE2_EN__Enum;

/* =======================================  MDR_RST_CLOCK HS_CONTROL HSE2_BYP [3..3]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE2_BYP                                         */
  MDR_RST__HS__HSE2_BYP__Off           = 0,     /*!< Off : HSE2 forms Clock from external oscillator                           */
  MDR_RST__HS__HSE2_BYP__On            = 1,     /*!< On : HSE2 passes Clock from external generator                            */
} MDR_RST__HS__HSE2_BYP__Enum;

/* =======================================================  CPU_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL                                        */
  MDR_RST__CPU__C1__HSI                = 0,     /*!< HSI : CPU_C1 output is HSI                                                */
  MDR_RST__CPU__C1__HSI/2              = 1,     /*!< HSI/2 : CPU_C1 output is HSI/2                                            */
  MDR_RST__CPU__C1__HSE                = 2,     /*!< HSE : CPU_C1 output is HSE                                                */
  MDR_RST__CPU__C1__HSE/2              = 3,     /*!< HSE/2 : CPU_C1 output is HSE/2                                            */
} MDR_RST__CPU__C1__Enum;

/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C2_SEL [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL                                        */
  MDR_RST__CPU__C2__CPU_C1             = 0,     /*!< CPU_C1 : Freq from CPU_C1 mux direct                                      */
  MDR_RST__CPU__C2__PLLCPUo            = 1,     /*!< PLLCPUo : Freq from CPU_C1 mux through PLL                                */
} MDR_RST__CPU__C2__Enum;

/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C3_SEL [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL                                        */
  MDR_RST__CPU__C3__div1_0             = 0,     /*!< div1_0 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_1             = 1,     /*!< div1_1 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_2             = 2,     /*!< div1_2 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_3             = 3,     /*!< div1_3 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_4             = 4,     /*!< div1_4 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_5             = 5,     /*!< div1_5 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_6             = 6,     /*!< div1_6 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_7             = 7,     /*!< div1_7 : div by 1                                                         */
  MDR_RST__CPU__C3__div2               = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST__CPU__C3__div4               = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST__CPU__C3__div8               = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST__CPU__C3__div16              = 11,    /*!< div16 : div by 16                                                         */
  MDR_RST__CPU__C3__div32              = 12,    /*!< div32 : div by 32                                                         */
  MDR_RST__CPU__C3__div64              = 13,    /*!< div64 : div by 64                                                         */
  MDR_RST__CPU__C3__div128             = 14,    /*!< div128 : div by 128                                                       */
  MDR_RST__CPU__C3__div256             = 15,    /*!< div256 : div by 256                                                       */
} MDR_RST__CPU__C3__Enum;

/* ========================================  MDR_RST_CLOCK CPU_CLOCK HCLK_SEL [8..9]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL                                          */
  MDR_RST__CPU__HCLK__HSI              = 0,     /*!< HSI : CPU clock is HSI                                                    */
  MDR_RST__CPU__HCLK__CPU_C3           = 1,     /*!< CPU_C3 : CPU clock is CPU_C3 output                                       */
  MDR_RST__CPU__HCLK__LSE              = 2,     /*!< LSE : CPU clock is LSE                                                    */
  MDR_RST__CPU__HCLK__LSI              = 3,     /*!< LSI : CPU clock is LSI                                                    */
} MDR_RST__CPU__HCLK__Enum;

/* =======================================================  USB_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK USB_CLOCK USB_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLOCK_USB_C1_SEL                                        */
  MDR_RST__USB__C1__HSI                = 0,     /*!< HSI : USB_C1 output is HSI                                                */
  MDR_RST__USB__C1__HSI/2              = 1,     /*!< HSI/2 : USB_C1 output is HSI/2                                            */
  MDR_RST__USB__C1__HSE                = 2,     /*!< HSE : USB_C1 output is HSE                                                */
  MDR_RST__USB__C1__HSE/2              = 3,     /*!< HSE/2 : USB_C1 output is HSE/2                                            */
} MDR_RST__USB__C1__Enum;

/* =======================================  MDR_RST_CLOCK USB_CLOCK USB_C2_SEL [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLOCK_USB_C2_SEL                                        */
  MDR_RST__USB__C2__USB_C1             = 0,     /*!< USB_C1 : Freq from CPU_C1 mux direct                                      */
  MDR_RST__USB__C2__PLLUSBo            = 1,     /*!< PLLUSBo : Freq from CPU_C1 mux through PLL_USB                            */
} MDR_RST__USB__C2__Enum;

/* =======================================  MDR_RST_CLOCK USB_CLOCK USB_C3_SEL [4..4]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLOCK_USB_C3_SEL                                        */
  MDR_RST__USB__C3__USB_C2             = 0,     /*!< USB_C2 : C3 Input is freq from C2                                         */
  MDR_RST__USB__C3__USB_C2_div2        = 1,     /*!< USB_C2_div2 : C3 Input is freq from C2/2                                  */
} MDR_RST__USB__C3__Enum;

/* =========================================  MDR_RST_CLOCK USB_CLOCK USB_EN [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_USB_CLOCK_USB_EN                                            */
  MDR_RST__USB__CLOCK__Off             = 0,     /*!< Off : Clock Disabled                                                      */
  MDR_RST__USB__CLOCK__On              = 1,     /*!< On : Clock Enabled                                                        */
} MDR_RST__USB__CLOCK__Enum;

/* =======================================================  ADC_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL                                        */
  MDR_RST__ADC__C1__CPU_C1             = 0,     /*!< CPU_C1 : ADC_C1 output is CPU_C1                                          */
  MDR_RST__ADC__C1__USB_C1             = 1,     /*!< USB_C1 : ADC_C1 output is USB_C1                                          */
  MDR_RST__ADC__C1__CPU_C2             = 2,     /*!< CPU_C2 : ADC_C1 output is CPU_C2                                          */
  MDR_RST__ADC__C1__USB_C2             = 3,     /*!< USB_C2 : ADC_C1 output is USB_C2                                          */
} MDR_RST__ADC__C1__Enum;

/* =======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C2_SEL [4..5]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C2_SEL                                        */
  MDR_RST__ADC__C2__LSE                = 0,     /*!< LSE : ADC_C2 output is LSE                                                */
  MDR_RST__ADC__C2__LSI                = 1,     /*!< LSI : ADC_C2 output is LSI                                                */
  MDR_RST__ADC__C2__ADC_C1             = 2,     /*!< ADC_C1 : ADC_C2 output is ADC_C1                                          */
  MDR_RST__ADC__C2__HSI_C1             = 3,     /*!< HSI_C1 : ADC_C2 output is HSI_C1                                          */
} MDR_RST__ADC__C2__Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C3_SEL [8..11]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL                                        */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_0 = 0,/*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_1 = 1,/*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_2 = 2,/*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_3 = 3,/*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_4 = 4,/*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_5 = 5,/*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_6 = 6,/*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_7 = 7,/*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div2 = 8,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div4 = 9,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div8 = 10, /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div16 = 11,/*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div32 = 12,/*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div64 = 13,/*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div128 = 14,/*!< div128 : div by 128                                                      */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div256 = 15,/*!< div256 : div by 256                                                      */
} MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK ADC_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN                                        */
  MDR_RST__ADC__CLK_EN__Off            = 0,     /*!< Off : ADC clock disabled                                                  */
  MDR_RST__ADC__CLK_EN__On             = 1,     /*!< On : ADC clock enabled                                                    */
} MDR_RST__ADC__CLK_EN__Enum;

/* =======================================================  RTC_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK RTC_CLOCK HSE_SEL [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_0 = 0,   /*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_1 = 1,   /*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_2 = 2,   /*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_3 = 3,   /*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_4 = 4,   /*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_5 = 5,   /*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_6 = 6,   /*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_7 = 7,   /*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div2 = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div4 = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div8 = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div16 = 11,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div32 = 12,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div64 = 13,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div128 = 14,  /*!< div128 : div by 128                                                       */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div256 = 15,  /*!< div256 : div by 256                                                       */
} MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Enum;

/* ========================================  MDR_RST_CLOCK RTC_CLOCK HSI_SEL [4..7]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_0 = 0,   /*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_1 = 1,   /*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_2 = 2,   /*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_3 = 3,   /*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_4 = 4,   /*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_5 = 5,   /*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_6 = 6,   /*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_7 = 7,   /*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div2 = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div4 = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div8 = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div16 = 11,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div32 = 12,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div64 = 13,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div128 = 14,  /*!< div128 : div by 128                                                       */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div256 = 15,  /*!< div256 : div by 256                                                       */
} MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Enum;

/* =======================================  MDR_RST_CLOCK RTC_CLOCK HSE_RTC_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN                                        */
  MDR_RST__RTC__HSE_RTC_CLOCK__Off     = 0,     /*!< Off : RTC HSE Clock Disabled                                              */
  MDR_RST__RTC__HSE_RTC_CLOCK__On      = 1,     /*!< On : RTC HSE Clock Enabled                                                */
} MDR_RST__RTC__HSE_RTC_CLOCK__Enum;

/* =======================================  MDR_RST_CLOCK RTC_CLOCK HSI_RTC_EN [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN                                        */
  MDR_RST__RTC__HSI_RTC_CLOCK__Off     = 0,     /*!< Off : RTC HSI Clock Disabled                                              */
  MDR_RST__RTC__HSI_RTC_CLOCK__On      = 1,     /*!< On : RTC HSI Clock Enabled                                                */
} MDR_RST__RTC__HSI_RTC_CLOCK__Enum;

/* =======================================================  PER_CLOCK  ======================================================= */
/* ======================================  MDR_RST_CLOCK PER_CLOCK CAN1_CLK_EN [0..0]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_CAN1_CLK_EN                                       */
  MDR_RST__PER__CAN1_CLOCK__Off        = 0,     /*!< Off : Clock Disabled                                                      */
  MDR_RST__PER__CAN1_CLOCK__On         = 1,     /*!< On : Clock Enabled                                                        */
} MDR_RST__PER__CAN1_CLOCK__Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK CAN2_CLK_EN [1..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_CAN2_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER_CLOCK USB_CLK_EN [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_USB_CLK_EN                                        */
  MDR_RST__PER__SSP_CLOCK__Off         = 0,     /*!< Off : Clock Disabled                                                      */
  MDR_RST__PER__SSP_CLOCK__On          = 1,     /*!< On : Clock Enabled                                                        */
} MDR_RST__PER__SSP_CLOCK__Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK EEPROM_CLK_EN [3..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_EEPROM_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER_CLOCK RST_CLK_EN [4..4]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_RST_CLK_EN_Enum;

/* =======================================  MDR_RST_CLOCK PER_CLOCK DMA_CLK_EN [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_DMA_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK UART1_CLK_EN [6..6]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_UART1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK UART2_CLK_EN [7..7]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_UART2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK SPI1_CLK_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_SPI1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK MIL1_CLK_EN [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_MIL1_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK MIL2_CLK_EN [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_MIL2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK PWR_CLK_EN [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PWR_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK WWDT_CLK_EN [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_WWDT_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK IWDT_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_IWDT_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER_CLOCK TIMER1_CLK_EN [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_TIMER1_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER_CLOCK TIMER2_CLK_EN [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_TIMER2_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER_CLOCK TIMER3_CLK_EN [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_TIMER3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK ADC_CLK_EN [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_ADC_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK DAC_CLK_EN [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_DAC_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER_CLOCK TIMER4_CLK_EN [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN                                     */
  MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_TIMER4_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK SPI2_CLK_EN [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_SPI2_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTA_CLK_EN [21..21]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTA_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTB_CLK_EN [22..22]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTB_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTC_CLK_EN [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTD_CLK_EN [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTD_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTE_CLK_EN [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTE_CLK_EN_Enum;

/* ===================================  MDR_RST_CLOCK PER_CLOCK ARINC_RX_CLK_EN [26..26]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN                                   */
  MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                    */
  MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_On = 1,/*!< On : Clock Enabled                                                       */
} MDR_RST_CLOCK_PER_CLOCK_ARINC_RX_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK BKP_CLK_EN [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_BKP_CLK_EN_Enum;

/* ===================================  MDR_RST_CLOCK PER_CLOCK ARINC_TX_CLK_EN [28..28]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN                                   */
  MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                    */
  MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_On = 1,/*!< On : Clock Enabled                                                       */
} MDR_RST_CLOCK_PER_CLOCK_ARINC_TX_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK PORTF_CLK_EN [29..29]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_PORTF_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER_CLOCK EBC_CLK_EN [30..30]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN                                        */
  MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_Off = 0,   /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_On = 1,    /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_EBC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER_CLOCK SPI3_CLK_EN [31..31]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN                                       */
  MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER_CLOCK_SPI3_CLK_EN_Enum;

/* =======================================================  CAN_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK CAN_CLOCK CAN1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN_CLOCK_CAN1_BRG                                          */
  MDR_RST__CAN1__BRG__div1             = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST__CAN1__BRG__div2             = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST__CAN1__BRG__div4             = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST__CAN1__BRG__div8             = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST__CAN1__BRG__div16            = 4,     /*!< div16 : div by 16                                                         */
  MDR_RST__CAN1__BRG__div32            = 5,     /*!< div32 : div by 32                                                         */
  MDR_RST__CAN1__BRG__div64            = 6,     /*!< div64 : div by 64                                                         */
  MDR_RST__CAN1__BRG__div128           = 7,     /*!< div128 : div by 128                                                       */
} MDR_RST__CAN1__BRG__Enum;

/* =======================================  MDR_RST_CLOCK CAN_CLOCK CAN2_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG                                          */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_CAN_CLOCK_CAN2_BRG_Enum;

/* =====================================  MDR_RST_CLOCK CAN_CLOCK CAN1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN_CLOCK_CAN1_CLK_EN                                       */
  MDR_RST__CAN__CAN1_CLK__Off          = 0,     /*!< Off : CAN1 Clock Disabled                                                 */
  MDR_RST__CAN__CAN1_CLK__On           = 1,     /*!< On : CAN1 Clock Enabled                                                   */
} MDR_RST__CAN__CAN1_CLK__Enum;

/* =====================================  MDR_RST_CLOCK CAN_CLOCK CAN2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN_CLOCK_CAN2_CLK_EN                                       */
  MDR_RST__CAN__CAN2_CLK__Off          = 0,     /*!< Off : CAN2 Clock Disabled                                                 */
  MDR_RST__CAN__CAN2_CLK__On           = 1,     /*!< On : CAN2 Clock Enabled                                                   */
} MDR_RST__CAN__CAN2_CLK__Enum;

/* =======================================================  TIM_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK TIM_CLOCK TIM1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG                                          */
  MDR_RST__TIM1__BRG__div1             = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST__TIM1__BRG__div2             = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST__TIM1__BRG__div4             = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST__TIM1__BRG__div8             = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST__TIM1__BRG__div16            = 4,     /*!< div16 : div by 16                                                         */
  MDR_RST__TIM1__BRG__div32            = 5,     /*!< div32 : div by 32                                                         */
  MDR_RST__TIM1__BRG__div64            = 6,     /*!< div64 : div by 64                                                         */
  MDR_RST__TIM1__BRG__div128           = 7,     /*!< div128 : div by 128                                                       */
} MDR_RST__TIM1__BRG__Enum;

/* =======================================  MDR_RST_CLOCK TIM_CLOCK TIM2_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG                                          */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Enum;

/* =======================================  MDR_RST_CLOCK TIM_CLOCK TIM3_BRG [16..18]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG                                          */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_TIM_CLOCK_TIM3_BRG_Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN                                       */
  MDR_RST__TIM__TIM1_CLK__Off          = 0,     /*!< Off : Timer1 Clock Disabled                                               */
  MDR_RST__TIM__TIM1_CLK__On           = 1,     /*!< On : Timer1 Clock Enabled                                                 */
} MDR_RST__TIM__TIM1_CLK__Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN                                       */
  MDR_RST__TIM__TIM2_CLK__Off          = 0,     /*!< Off : Timer2 Clock Disabled                                               */
  MDR_RST__TIM__TIM2_CLK__On           = 1,     /*!< On : Timer2 Clock Enabled                                                 */
} MDR_RST__TIM__TIM2_CLK__Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM3_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM3_CLK_EN                                       */
  MDR_RST__TIM__TIM3_CLK__Off          = 0,     /*!< Off : Timer3 Clock Disabled                                               */
  MDR_RST__TIM__TIM3_CLK__On           = 1,     /*!< On : Timer3 Clock Enabled                                                 */
} MDR_RST__TIM__TIM3_CLK__Enum;

/* ======================================================  UART_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK UART_CLOCK UART1_BRG [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART1_BRG                                        */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div1 = 0,  /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div2 = 1,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div4 = 2,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div8 = 3,  /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div16 = 4, /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div32 = 5, /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div64 = 6, /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div128 = 7,/*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Enum;

/* ======================================  MDR_RST_CLOCK UART_CLOCK UART2_BRG [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART2_BRG                                        */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div1 = 0,  /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div2 = 1,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div4 = 2,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div8 = 3,  /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div16 = 4, /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div32 = 5, /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div64 = 6, /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div128 = 7,/*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Enum;

/* ======================================  MDR_RST_CLOCK UART_CLOCK TIM4_BRG [16..18]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG                                         */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div1 = 0,   /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div2 = 1,   /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div4 = 2,   /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div8 = 3,   /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div16 = 4,  /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div32 = 5,  /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div64 = 6,  /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_div128 = 7, /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_TIM4_BRG_Enum;

/* ====================================  MDR_RST_CLOCK UART_CLOCK UART1_CLK_EN [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN                                     */
  MDR_RST__UART__UART1_CLK__Off        = 0,     /*!< Off : UART1 Clock Disabled                                                */
  MDR_RST__UART__UART1_CLK__On         = 1,     /*!< On : UART1 Clock Enabled                                                  */
} MDR_RST__UART__UART1_CLK__Enum;

/* ====================================  MDR_RST_CLOCK UART_CLOCK UART2_CLK_EN [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN                                     */
  MDR_RST__UART__UART2_CLK__Off        = 0,     /*!< Off : UART2 Clock Disabled                                                */
  MDR_RST__UART__UART2_CLK__On         = 1,     /*!< On : UART2 Clock Enabled                                                  */
} MDR_RST__UART__UART2_CLK__Enum;

/* =====================================  MDR_RST_CLOCK UART_CLOCK TIM4_CLK_EN [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_TIM4_CLK_EN                                      */
  MDR_RST__UART__TIM4_CLK__Off         = 0,     /*!< Off : Timer4 Clock Disabled                                               */
  MDR_RST__UART__TIM4_CLK__On          = 1,     /*!< On : Timer4 Clock Enabled                                                 */
} MDR_RST__UART__TIM4_CLK__Enum;

/* =======================================================  SSP_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK SSP_CLOCK SSP1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG                                          */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Enum;

/* =======================================  MDR_RST_CLOCK SSP_CLOCK SSP2_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG                                          */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_SSP_CLOCK_SSP2_BRG_Enum;

/* =======================================  MDR_RST_CLOCK SSP_CLOCK SSP3_BRG [16..18]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG                                          */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_SSP_CLOCK_SSP3_BRG_Enum;

/* =====================================  MDR_RST_CLOCK SSP_CLOCK SSP1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN                                       */
  MDR_RST__SSP__SSP1_CLK__Off          = 0,     /*!< Off : SSP1 Clock Disabled                                                 */
  MDR_RST__SSP__SSP1_CLK__On           = 1,     /*!< On : SSP1 Clock Enabled                                                   */
} MDR_RST__SSP__SSP1_CLK__Enum;

/* =====================================  MDR_RST_CLOCK SSP_CLOCK SSP2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP2_CLK_EN                                       */
  MDR_RST__SSP__SSP2_CLK__Off          = 0,     /*!< Off : SSP2 Clock Disabled                                                 */
  MDR_RST__SSP__SSP2_CLK__On           = 1,     /*!< On : SSP2 Clock Enabled                                                   */
} MDR_RST__SSP__SSP2_CLK__Enum;

/* =====================================  MDR_RST_CLOCK SSP_CLOCK SSP3_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP3_CLK_EN                                       */
  MDR_RST__SSP__SSP3_CLK__Off          = 0,     /*!< Off : SSP3 Clock Disabled                                                 */
  MDR_RST__SSP__SSP3_CLK__On           = 1,     /*!< On : SSP3 Clock Enabled                                                   */
} MDR_RST__SSP__SSP3_CLK__Enum;

/* =======================================================  ETH_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK ETH_CLOCK MIL_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div1 = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div2 = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div4 = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div8 = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div16 = 4,    /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div32 = 5,    /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div64 = 6,    /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_div128 = 7,   /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_ETH_CLOCK_MIL_BRG_Enum;

/* =======================================  MDR_RST_CLOCK ETH_CLOCK PHY_BRG [16..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div1 = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div2 = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div4 = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div8 = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div16 = 4,    /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div32 = 5,    /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div64 = 6,    /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_div128 = 7,   /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_ETH_CLOCK_PHY_BRG_Enum;

/* ======================================  MDR_RST_CLOCK ETH_CLOCK ETH_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_ETH_CLK_EN                                        */
  MDR_RST__ETH__MAC_CLK__Off           = 0,     /*!< Off : MAC Clock Disabled                                                  */
  MDR_RST__ETH__MAC_CLK__On            = 1,     /*!< On : MAC Clock Enabled                                                    */
} MDR_RST__ETH__MAC_CLK__Enum;

/* ======================================  MDR_RST_CLOCK ETH_CLOCK MIL_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_MIL_CLK_EN                                        */
  MDR_RST__ETH__MIL_CLK__Off           = 0,     /*!< Off : MIL Clock Disabled                                                  */
  MDR_RST__ETH__MIL_CLK__On            = 1,     /*!< On : MIL Clock Enabled                                                    */
} MDR_RST__ETH__MIL_CLK__Enum;

/* ========================================  MDR_RST_CLOCK ETH_CLOCK SLEEP [26..26]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_SLEEP                                             */
  MDR_RST__ETH__SLEEP__Off             = 0,     /*!< Off : Normal Mode                                                         */
  MDR_RST__ETH__SLEEP__GoSLEEP         = 1,     /*!< GoSLEEP : Go to SLEEP                                                     */
} MDR_RST__ETH__SLEEP__Enum;

/* ======================================  MDR_RST_CLOCK ETH_CLOCK PHY_CLK_EN [27..27]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_EN                                        */
  MDR_RST__ETH__PHY_CLK__Off           = 0,     /*!< Off : MIL Clock Disabled                                                  */
  MDR_RST__ETH__PHY_CLK__On            = 1,     /*!< On : MIL Clock Enabled                                                    */
} MDR_RST__ETH__PHY_CLK__Enum;

/* =====================================  MDR_RST_CLOCK ETH_CLOCK PHY_CLK_SEL [28..29]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLOCK_PHY_CLK_SEL                                       */
  MDR_RST__ETH__PHY_SEL__HSI           = 0,     /*!< HSI : PHY Clock from HSI                                                  */
  MDR_RST__ETH__PHY_SEL__HSE           = 1,     /*!< HSE : PHY Clock from HSE                                                  */
  MDR_RST__ETH__PHY_SEL__PLLCPUo       = 2,     /*!< PLLCPUo : PHY Clock from PLLCPUo                                          */
  MDR_RST__ETH__PHY_SEL__HSE2          = 3,     /*!< HSE2 : PHY Clock from HSE2                                                */
} MDR_RST__ETH__PHY_SEL__Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_DMA                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
/* =============================================  MDR_DMA STATUS Enable [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_DMA_STATUS_Enable                                                     */
  MDR_DMA_STATUS_Enable_Disabled       = 0,     /*!< Disabled : Block inactive                                                 */
  MDR_DMA_STATUS_Enable_Enabled        = 1,     /*!< Enabled : Block active                                                    */
} MDR_DMA_STATUS_Enable_Enum;

/* ==============================================  MDR_DMA STATUS State [4..7]  ============================================== */
typedef enum {                                  /*!< MDR_DMA_STATUS_State                                                      */
  MDR_DMA_STATUS_State_Idle            = 0,     /*!< Idle : Idle state                                                         */
  MDR_DMA_STATUS_State_RD_Ctrl         = 1,     /*!< RD_Ctrl : Reading channel controller data                                 */
  MDR_DMA_STATUS_State_RD_pSrc         = 2,     /*!< RD_pSrc : Reading source data end pointer                                 */
  MDR_DMA_STATUS_State_RD_pDest        = 3,     /*!< RD_pDest : Reading destination data end pointer                           */
  MDR_DMA_STATUS_State_RD_Data         = 4,     /*!< RD_Data : Reading source data                                             */
  MDR_DMA_STATUS_State_WR_Data         = 5,     /*!< WR_Data : writing destination data                                        */
  MDR_DMA_STATUS_State_Wait_Clr        = 6,     /*!< Wait_Clr : Waiting for DMA request to clear                               */
  MDR_DMA_STATUS_State_WR_Ctrl         = 7,     /*!< WR_Ctrl : Writing channel controller data                                 */
  MDR_DMA_STATUS_State_Stalled         = 8,     /*!< Stalled : Stalled transfer                                                */
  MDR_DMA_STATUS_State_Done            = 9,     /*!< Done : Done transfer                                                      */
  MDR_DMA_STATUS_State_ScatGath        = 10,    /*!< ScatGath : scatter-gather transition                                      */
} MDR_DMA_STATUS_State_Enum;

/* =========================================  MDR_DMA STATUS Chnls_minus1 [16..20]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_STATUS_Chnls_minus1                                               */
  MDR_DMA_STATUS_Chnls_minus1_1_channels = 0,   /*!< 1_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_2_channels = 1,   /*!< 2_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_3_channels = 2,   /*!< 3_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_4_channels = 3,   /*!< 4_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_5_channels = 4,   /*!< 5_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_6_channels = 5,   /*!< 6_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_7_channels = 6,   /*!< 7_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_8_channels = 7,   /*!< 8_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_9_channels = 8,   /*!< 9_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_10_channels = 9,  /*!< 10_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_11_channels = 10, /*!< 11_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_12_channels = 11, /*!< 12_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_13_channels = 12, /*!< 13_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_14_channels = 13, /*!< 14_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_15_channels = 14, /*!< 15_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_16_channels = 15, /*!< 16_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_17_channels = 16, /*!< 17_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_18_channels = 17, /*!< 18_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_19_channels = 18, /*!< 19_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_20_channels = 19, /*!< 20_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_21_channels = 20, /*!< 21_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_22_channels = 21, /*!< 22_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_23_channels = 22, /*!< 23_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_24_channels = 23, /*!< 24_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_25_channels = 24, /*!< 25_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_26_channels = 25, /*!< 26_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_27_channels = 26, /*!< 27_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_28_channels = 27, /*!< 28_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_29_channels = 28, /*!< 29_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_30_channels = 29, /*!< 30_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_31_channels = 30, /*!< 31_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_32_channels = 31, /*!< 32_channels : Channels Count                                              */
} MDR_DMA_STATUS_Chnls_minus1_Enum;

/* ==========================================  MDR_DMA STATUS test_status [28..28]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_STATUS_test_status                                                */
  MDR_DMA_STATUS_test_status_Unavailable = 0,   /*!< Unavailable : Test logic unavailable                                      */
  MDR_DMA_STATUS_test_status_Available = 1,     /*!< Available : Test logic available                                          */
} MDR_DMA_STATUS_test_status_Enum;

/* ==========================================================  CFG  ========================================================== */
/* ===============================================  MDR_DMA CFG Enable [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_DMA_CFG_Enable                                                        */
  MDR_DMA_CFG_Enable_Disabled          = 0,     /*!< Disabled : Block inactive                                                 */
  MDR_DMA_CFG_Enable_Enabled           = 1,     /*!< Enabled : Block active                                                    */
} MDR_DMA_CFG_Enable_Enum;

/* =============================================  MDR_DMA CFG Privileged [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_DMA_CFG_Privileged                                                    */
  MDR_DMA_CFG_Privileged_Off           = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CFG_Privileged_On            = 1,     /*!< On : Active                                                               */
} MDR_DMA_CFG_Privileged_Enum;

/* =============================================  MDR_DMA CFG Bufferable [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_DMA_CFG_Bufferable                                                    */
  MDR_DMA_CFG_Bufferable_Off           = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CFG_Bufferable_On            = 1,     /*!< On : Active                                                               */
} MDR_DMA_CFG_Bufferable_Enum;

/* ==============================================  MDR_DMA CFG Cachable [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_DMA_CFG_Cachable                                                      */
  MDR_DMA_CFG_Cachable_Off             = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CFG_Cachable_On              = 1,     /*!< On : Active                                                               */
} MDR_DMA_CFG_Cachable_Enum;

/* =====================================================  CTRL_BASE_PTR  ===================================================== */
/* ===================================================  ALT_CTRL_BASE_PTR  =================================================== */
/* ===================================================  WAITONREQ_STATUS  ==================================================== */
/* ==========================================  MDR_DMA WAITONREQ_STATUS Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_WAITONREQ_STATUS_Ch_                                              */
  MDR_DMA_WAITONREQ_STATUS_Ch__Off     = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_WAITONREQ_STATUS_Ch__On      = 1,     /*!< On : Active                                                               */
} MDR_DMA_WAITONREQ_STATUS_Ch__Enum;

/* ====================================================  CHNL_SW_REQUEST  ==================================================== */
/* ==========================================  MDR_DMA CHNL_SW_REQUEST Ch_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_SW_REQUEST_Ch_                                               */
  MDR_DMA_CHNL_SW_REQUEST_Ch__Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_SW_REQUEST_Ch__On       = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_SW_REQUEST_Ch__Enum;

/* ===================================================  CHNL_USEBURST_SET  =================================================== */
/* =========================================  MDR_DMA CHNL_USEBURST_SET Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_USEBURST_SET_Ch_                                             */
  MDR_DMA_CHNL_USEBURST_SET_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_USEBURST_SET_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_USEBURST_SET_Ch__Enum;

/* ===================================================  CHNL_USEBURST_CLR  =================================================== */
/* =========================================  MDR_DMA CHNL_USEBURST_CLR Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_USEBURST_CLR_Ch_                                             */
  MDR_DMA_CHNL_USEBURST_CLR_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_USEBURST_CLR_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_USEBURST_CLR_Ch__Enum;

/* ===================================================  CHNL_REQ_MASK_SET  =================================================== */
/* =========================================  MDR_DMA CHNL_REQ_MASK_SET Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_REQ_MASK_SET_Ch_                                             */
  MDR_DMA_CHNL_REQ_MASK_SET_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_REQ_MASK_SET_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_REQ_MASK_SET_Ch__Enum;

/* ===================================================  CHNL_REQ_MASK_CLR  =================================================== */
/* =========================================  MDR_DMA CHNL_REQ_MASK_CLR Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_REQ_MASK_CLR_Ch_                                             */
  MDR_DMA_CHNL_REQ_MASK_CLR_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_REQ_MASK_CLR_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_REQ_MASK_CLR_Ch__Enum;

/* ====================================================  CHNL_ENABLE_SET  ==================================================== */
/* ==========================================  MDR_DMA CHNL_ENABLE_SET Ch_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_ENABLE_SET_Ch_                                               */
  MDR_DMA_CHNL_ENABLE_SET_Ch__Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_ENABLE_SET_Ch__On       = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_ENABLE_SET_Ch__Enum;

/* ====================================================  CHNL_ENABLE_CLR  ==================================================== */
/* ==========================================  MDR_DMA CHNL_ENABLE_CLR Ch_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_ENABLE_CLR_Ch_                                               */
  MDR_DMA_CHNL_ENABLE_CLR_Ch__Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_ENABLE_CLR_Ch__On       = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_ENABLE_CLR_Ch__Enum;

/* ===================================================  CHNL_PRI_ALT_SET  ==================================================== */
/* ==========================================  MDR_DMA CHNL_PRI_ALT_SET Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_PRI_ALT_SET_Ch_                                              */
  MDR_DMA_CHNL_PRI_ALT_SET_Ch__Off     = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_PRI_ALT_SET_Ch__On      = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_PRI_ALT_SET_Ch__Enum;

/* ===================================================  CHNL_PRI_ALT_CLR  ==================================================== */
/* ==========================================  MDR_DMA CHNL_PRI_ALT_CLR Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_PRI_ALT_CLR_Ch_                                              */
  MDR_DMA_CHNL_PRI_ALT_CLR_Ch__Off     = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_PRI_ALT_CLR_Ch__On      = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_PRI_ALT_CLR_Ch__Enum;

/* ===================================================  CHNL_PRIORITY_SET  =================================================== */
/* =========================================  MDR_DMA CHNL_PRIORITY_SET Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_PRIORITY_SET_Ch_                                             */
  MDR_DMA_CHNL_PRIORITY_SET_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_PRIORITY_SET_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_PRIORITY_SET_Ch__Enum;

/* ===================================================  CHNL_PRIORITY_CLR  =================================================== */
/* =========================================  MDR_DMA CHNL_PRIORITY_CLR Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_PRIORITY_CLR_Ch_                                             */
  MDR_DMA_CHNL_PRIORITY_CLR_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_PRIORITY_CLR_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_PRIORITY_CLR_Ch__Enum;

/* ========================================================  ERR_CLR  ======================================================== */
/* ==============================================  MDR_DMA ERR_CLR Ch_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_DMA_ERR_CLR_Ch_                                                       */
  MDR_DMA_ERR_CLR_Ch__Off              = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_ERR_CLR_Ch__On               = 1,     /*!< On : Active                                                               */
} MDR_DMA_ERR_CLR_Ch__Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_Power                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  PVDCS  ========================================================= */
/* =============================================  MDR_Power PVDCS PVDEN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_Power_PVDCS_PVDEN                                                     */
  MDR_Power_PVDCS_PVDEN_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_Power_PVDCS_PVDEN_On             = 1,     /*!< On : Enabled                                                              */
} MDR_Power_PVDCS_PVDEN_Enum;

/* ==============================================  MDR_Power PVDCS PBLS [1..2]  ============================================== */
typedef enum {                                  /*!< MDR_Power_PVDCS_PBLS                                                      */
  MDR_Power_PVDCS_PBLS_1v8             = 0,     /*!< 1v8 : Level of 1.8 volts                                                  */
  MDR_Power_PVDCS_PBLS_2v2             = 1,     /*!< 2v2 : Level of 2.2 volts                                                  */
  MDR_Power_PVDCS_PBLS_2v6             = 2,     /*!< 2v6 : Level of 2.6 volts                                                  */
  MDR_Power_PVDCS_PBLS_3v0             = 3,     /*!< 3v0 : Level of 3.0 volts                                                  */
} MDR_Power_PVDCS_PBLS_Enum;

/* ==============================================  MDR_Power PVDCS PLS [3..5]  =============================================== */
typedef enum {                                  /*!< MDR_Power_PVDCS_PLS                                                       */
  MDR_Power_PVDCS_PLS_2v0              = 0,     /*!< 2v0 : Level of 2.0 volts                                                  */
  MDR_Power_PVDCS_PLS_2v2              = 1,     /*!< 2v2 : Level of 2.2 volts                                                  */
  MDR_Power_PVDCS_PLS_2v4              = 2,     /*!< 2v4 : Level of 2.4 volts                                                  */
  MDR_Power_PVDCS_PLS_2v6              = 3,     /*!< 2v6 : Level of 2.6 volts                                                  */
  MDR_Power_PVDCS_PLS_2v8              = 4,     /*!< 2v8 : Level of 2.8 volts                                                  */
  MDR_Power_PVDCS_PLS_3v0              = 5,     /*!< 3v0 : Level of 3.0 volts                                                  */
  MDR_Power_PVDCS_PLS_3v2              = 6,     /*!< 3v2 : Level of 3.2 volts                                                  */
  MDR_Power_PVDCS_PLS_3v4              = 7,     /*!< 3v4 : Level of 3.4 volts                                                  */
} MDR_Power_PVDCS_PLS_Enum;

/* ==============================================  MDR_Power PVDCS PVBD [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_Power_PVDCS_PVBD                                                      */
  MDR_Power_PVDCS_PVBD_Inactive        = 0,     /*!< Inactive : No Event                                                       */
  MDR_Power_PVDCS_PVBD_Active          = 1,     /*!< Active : Event is active                                                  */
} MDR_Power_PVDCS_PVBD_Enum;

/* ==============================================  MDR_Power PVDCS PVD [7..7]  =============================================== */
typedef enum {                                  /*!< MDR_Power_PVDCS_PVD                                                       */
  MDR_Power_PVDCS_PVD_Inactive         = 0,     /*!< Inactive : No Event                                                       */
  MDR_Power_PVDCS_PVD_Active           = 1,     /*!< Active : Event is active                                                  */
} MDR_Power_PVDCS_PVD_Enum;

/* =============================================  MDR_Power PVDCS IEPVBD [8..8]  ============================================= */
typedef enum {                                  /*!< MDR_Power_PVDCS_IEPVBD                                                    */
  MDR_Power_PVDCS_IEPVBD_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_Power_PVDCS_IEPVBD_On            = 1,     /*!< On : Enabled                                                              */
} MDR_Power_PVDCS_IEPVBD_Enum;

/* =============================================  MDR_Power PVDCS IEPVD [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_Power_PVDCS_IEPVD                                                     */
  MDR_Power_PVDCS_IEPVD_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_Power_PVDCS_IEPVD_On             = 1,     /*!< On : Enabled                                                              */
} MDR_Power_PVDCS_IEPVD_Enum;

/* =============================================  MDR_Power PVDCS INVB [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_Power_PVDCS_INVB                                                      */
  MDR_Power_PVDCS_INVB_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_Power_PVDCS_INVB_On              = 1,     /*!< On : Enabled                                                              */
} MDR_Power_PVDCS_INVB_Enum;

/* =============================================  MDR_Power PVDCS INV [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_Power_PVDCS_INV                                                       */
  MDR_Power_PVDCS_INV_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_Power_PVDCS_INV_On               = 1,     /*!< On : Enabled                                                              */
} MDR_Power_PVDCS_INV_Enum;

/* ============================================  MDR_Power PVDCS PVDBEN [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_Power_PVDCS_PVDBEN                                                    */
  MDR_Power_PVDCS_PVDBEN_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_Power_PVDCS_PVDBEN_On            = 1,     /*!< On : Enabled                                                              */
} MDR_Power_PVDCS_PVDBEN_Enum;

/* ========================================================  ResReg  ========================================================= */


/* =========================================================================================================================== */
/* ================                                         MDR_WWDT                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ================================================  MDR_WWDT CR WDGA [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_WWDT_CR_WDGA                                                          */
  MDR_WWDG_EN__Off                     = 0,     /*!< Off : Disabled                                                            */
  MDR_WWDG_EN__On                      = 1,     /*!< On : Enabled                                                              */
} MDR_WWDG_EN__Enum;

/* ==========================================================  CFR  ========================================================== */
/* ===============================================  MDR_WWDT CFR WGTB [7..8]  ================================================ */
typedef enum {                                  /*!< MDR_WWDT_CFR_WGTB                                                         */
  MDR_CFR_WGTB___div1                  = 0,     /*!< div1 : CLK = LSI/4096/1                                                   */
  MDR_CFR_WGTB___div2                  = 1,     /*!< div2 : CLK = LSI/4096/2                                                   */
  MDR_CFR_WGTB___div4                  = 2,     /*!< div4 : CLK = LSI/4096/4                                                   */
  MDR_CFR_WGTB___div8                  = 3,     /*!< div8 : CLK = LSI/4096/8                                                   */
} MDR_CFR_WGTB___Enum;

/* ================================================  MDR_WWDT CFR EWI [9..9]  ================================================ */
typedef enum {                                  /*!< MDR_WWDT_CFR_EWI                                                          */
  MDR_CFR_EWI___Off                    = 0,     /*!< Off : Disabled IRQ on T=0x40                                              */
  MDR_CFR_EWI___On                     = 1,     /*!< On : Enabled IRQ on T=0x40                                                */
} MDR_CFR_EWI___Enum;

/* ==========================================================  SR  =========================================================== */
/* ================================================  MDR_WWDT SR EWIF [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_WWDT_SR_EWIF                                                          */
  MDR_SR_EWIF___Off                    = 0,     /*!< Off : Event Off                                                           */
  MDR_SR_EWIF___Onn                    = 1,     /*!< Onn : Event On                                                            */
} MDR_SR_EWIF___Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_IWDT                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  KR  =========================================================== */
/* ==========================================================  PR  =========================================================== */
/* =================================================  MDR_IWDT PR PR [0..2]  ================================================= */
typedef enum {                                  /*!< MDR_IWDT_PR_PR                                                            */
  MDR_IWDT_PR___div4                   = 0,     /*!< div4 : LSI div 4                                                          */
  MDR_IWDT_PR___div8                   = 1,     /*!< div8 : LSI div 8                                                          */
  MDR_IWDT_PR___div16                  = 2,     /*!< div16 : LSI div 16                                                        */
  MDR_IWDT_PR___div32                  = 3,     /*!< div32 : LSI div 32                                                        */
  MDR_IWDT_PR___div64                  = 4,     /*!< div64 : LSI div 64                                                        */
  MDR_IWDT_PR___div128                 = 5,     /*!< div128 : LSI div 128                                                      */
  MDR_IWDT_PR___div256                 = 6,     /*!< div256 : LSI div 256                                                      */
  MDR_IWDT_PR___div256_1               = 7,     /*!< div256_1 : LSI div 256                                                    */
} MDR_IWDT_PR___Enum;

/* ==========================================================  RLR  ========================================================== */
/* ==========================================================  SR  =========================================================== */
/* ================================================  MDR_IWDT SR PVU [0..0]  ================================================= */
typedef enum {                                  /*!< MDR_IWDT_SR_PVU                                                           */
  MDR_IWDT_PVU___Ready                 = 0,     /*!< Ready : PR ready for write                                                */
  MDR_IWDT_PVU___Busy                  = 1,     /*!< Busy : PR busy                                                            */
} MDR_IWDT_PVU___Enum;

/* ================================================  MDR_IWDT SR RVU [1..1]  ================================================= */
typedef enum {                                  /*!< MDR_IWDT_SR_RVU                                                           */
  MDR_IWDT_RVU___Ready                 = 0,     /*!< Ready : PRL ready for write                                               */
  MDR_IWDT_RVU___Busy                  = 1,     /*!< Busy : PRL busy                                                           */
} MDR_IWDT_RVU___Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  ADC1_Cfg  ======================================================== */
/* =============================================  MDR_ADC ADC1_Cfg ADON [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_ADON                                                     */
  MDR_ADC_ADC1_Cfg_ADON_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADC_ADC1_Cfg_ADON_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADC_ADC1_Cfg_ADON_Enum;

/* ==============================================  MDR_ADC ADC1_Cfg GO [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_GO                                                       */
  MDR_ADC_ADC1_Cfg_GO_Inactive         = 0,     /*!< Inactive : Autoclear to zero after start                                  */
  MDR_ADC_ADC1_Cfg_GO_Start            = 1,     /*!< Start : Start measurement                                                 */
} MDR_ADC_ADC1_Cfg_GO_Enum;

/* =============================================  MDR_ADC ADC1_Cfg CLKS [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CLKS                                                     */
  MDR_ADC_ADC1_Cfg_CLKS_CPU_Clock      = 0,     /*!< CPU_Clock : CPU_Clock used                                                */
  MDR_ADC_ADC1_Cfg_CLKS_ADC_Clock      = 1,     /*!< ADC_Clock : ADC_Clock used                                                */
} MDR_ADC_ADC1_Cfg_CLKS_Enum;

/* ============================================  MDR_ADC ADC1_Cfg SAMPLE [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SAMPLE                                                   */
  MDR_ADC_ADC1_Cfg_SAMPLE_Single       = 0,     /*!< Single : Single measurement by GO                                         */
  MDR_ADC_ADC1_Cfg_SAMPLE_Continuouse  = 1,     /*!< Continuouse : Continuous measurement, until stop by ADON                  */
} MDR_ADC_ADC1_Cfg_SAMPLE_Enum;

/* ==============================================  MDR_ADC ADC1_Cfg CHS [4..8]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CHS                                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_0_RefP  = 0,     /*!< Channel_0_RefP : Signal on PD7, Ref+                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_1_RefN  = 1,     /*!< Channel_1_RefN : Signal on PD8, Ref-                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_2       = 2,     /*!< Channel_2 : Signal on PD9                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_3       = 3,     /*!< Channel_3 : Signal on PD10                                                */
  MDR_ADC_ADC1_Cfg_CHS_Channel_4       = 4,     /*!< Channel_4 : Signal on PD11                                                */
  MDR_ADC_ADC1_Cfg_CHS_Channel_5       = 5,     /*!< Channel_5 : Signal on PD12                                                */
  MDR_ADC_ADC1_Cfg_CHS_Channel_6       = 6,     /*!< Channel_6 : Signal on PD13                                                */
  MDR_ADC_ADC1_Cfg_CHS_Channel_7       = 7,     /*!< Channel_7 : Signal on PD14                                                */
  MDR_ADC_ADC1_Cfg_CHS_TS_VRef_1.23    = 30,    /*!< TS_VRef_1.23 : Signal from Thermosensor                                   */
  MDR_ADC_ADC1_Cfg_CHS_TS_Temperature  = 31,    /*!< TS_Temperature : Signal from Thermosensor                                 */
} MDR_ADC_ADC1_Cfg_CHS_Enum;

/* =============================================  MDR_ADC ADC1_Cfg CHCH [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CHCH                                                     */
  MDR_ADC_ADC1_Cfg_CHCH_Disable        = 0,     /*!< Disable : Measure only CHS channel                                        */
  MDR_ADC_ADC1_Cfg_CHCH_Enable         = 1,     /*!< Enable : Measure channels selected in reg CHSEL                           */
} MDR_ADC_ADC1_Cfg_CHCH_Enum;

/* ============================================  MDR_ADC ADC1_Cfg RGNC [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_RGNC                                                     */
  MDR_ADC_ADC1_Cfg_RGNC_Disable        = 0,     /*!< Disable : Flag STATUSx.AWOIFEN inactive                                   */
  MDR_ADC_ADC1_Cfg_RGNC_Enable         = 1,     /*!< Enable : Flag STATUSx.AWOIFEN enable                                      */
} MDR_ADC_ADC1_Cfg_RGNC_Enum;

/* ============================================  MDR_ADC ADC1_Cfg M_REF [11..11]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_M_REF                                                    */
  MDR_ADC_ADC1_Cfg_M_REF_Internal      = 0,     /*!< Internal : Signal in [GND..AUcc]                                          */
  MDR_ADC_ADC1_Cfg_M_REF_External      = 1,     /*!< External : Signal in [ADC_Ref-..ADC_Ref+]                                 */
} MDR_ADC_ADC1_Cfg_M_REF_Enum;

/* ===========================================  MDR_ADC ADC1_Cfg DIV_CLK [12..15]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_DIV_CLK                                                  */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_1       = 0,     /*!< div_1 : CLK = CPU_CLK                                                     */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_2       = 1,     /*!< div_2 : CLK = CPU_CLK/2                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_4       = 2,     /*!< div_4 : CLK = CPU_CLK/4                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_8       = 3,     /*!< div_8 : CLK = CPU_CLK/8                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_16      = 4,     /*!< div_16 : CLK = CPU_CLK/16                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_32      = 5,     /*!< div_32 : CLK = CPU_CLK/32                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_64      = 6,     /*!< div_64 : CLK = CPU_CLK/64                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_128     = 7,     /*!< div_128 : CLK = CPU_CLK/128                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_256     = 8,     /*!< div_256 : CLK = CPU_CLK/256                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_512     = 9,     /*!< div_512 : CLK = CPU_CLK/512                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_1024    = 10,    /*!< div_1024 : CLK = CPU_CLK/1024                                             */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_2048    = 11,    /*!< div_2048 : CLK = CPU_CLK/2048                                             */
} MDR_ADC_ADC1_Cfg_DIV_CLK_Enum;

/* ============================================  MDR_ADC ADC1_Cfg TS_EN [17..17]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_TS_EN                                                    */
  MDR_ADC_ADC1_Cfg_TS_EN_Disable       = 0,     /*!< Disable : Thermosensor power off                                          */
  MDR_ADC_ADC1_Cfg_TS_EN_Enable        = 1,     /*!< Enable : Thermosensor power on                                            */
} MDR_ADC_ADC1_Cfg_TS_EN_Enum;

/* =========================================  MDR_ADC ADC1_Cfg TS_BUFF_EN [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_TS_BUFF_EN                                               */
  MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Disable  = 0,     /*!< Disable : Thermosensor buffer disabled                                    */
  MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Enable   = 1,     /*!< Enable : Thermosensor buffer enabled                                      */
} MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Enum;

/* ===========================================  MDR_ADC ADC1_Cfg SEL_TS [19..19]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SEL_TS                                                   */
  MDR_ADC_ADC1_Cfg_SEL_TS_Disable      = 0,     /*!< Disable : Channel 31 signal is undefined                                  */
  MDR_ADC_ADC1_Cfg_SEL_TS_Selected     = 1,     /*!< Selected : Channel 31 signal is temperature                               */
} MDR_ADC_ADC1_Cfg_SEL_TS_Enum;

/* ==========================================  MDR_ADC ADC1_Cfg SEL_VREF [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SEL_VREF                                                 */
  MDR_ADC_ADC1_Cfg_SEL_VREF_Disable    = 0,     /*!< Disable : Channel 30 signal is undefined                                  */
  MDR_ADC_ADC1_Cfg_SEL_VREF_Selected   = 1,     /*!< Selected : Channel 30 signal is VRef                                      */
} MDR_ADC_ADC1_Cfg_SEL_VREF_Enum;

/* ==========================================  MDR_ADC ADC1_Cfg Delay_GO [25..27]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_Delay_GO                                                 */
  MDR_ADC_ADC1_Cfg_Delay_GO_1          = 0,     /*!< 1 : 1 period of CPU_CLK                                                   */
  MDR_ADC_ADC1_Cfg_Delay_GO_2          = 1,     /*!< 2 : 2 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_3          = 2,     /*!< 3 : 3 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_4          = 3,     /*!< 4 : 4 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_5          = 4,     /*!< 5 : 5 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_6          = 5,     /*!< 6 : 6 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_7          = 6,     /*!< 7 : 7 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_8          = 7,     /*!< 8 : 8 periods of CPU_CLK                                                  */
} MDR_ADC_ADC1_Cfg_Delay_GO_Enum;

/* =======================================================  ADC2_Cfg  ======================================================== */
/* ===========================================  MDR_ADC ADC2_Cfg ADC1_OP [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC2_Cfg_ADC1_OP                                                  */
  MDR_ADC_ADC2_Cfg_ADC1_OP_Own         = 0,     /*!< Own : Own setpoint Vref                                                   */
  MDR_ADC_ADC2_Cfg_ADC1_OP_Thermosensor = 1,    /*!< Thermosensor : Setpoint Vref from Thermosensor                            */
} MDR_ADC_ADC2_Cfg_ADC1_OP_Enum;

/* =====================================================  ADC1_H_Level  ====================================================== */
/* =====================================================  ADC1_L_Level  ====================================================== */
/* ======================================================  ADC1_RESULT  ====================================================== */
/* =========================================  MDR_ADC ADC1_RESULT Channel [16..20]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_RESULT_Channel                                               */
  MDR_ADC_ADC1_RESULT_Channel_Channel_0_RefP = 0,/*!< Channel_0_RefP : Signal on PD7, Ref+                                     */
  MDR_ADC_ADC1_RESULT_Channel_Channel_1_RefN = 1,/*!< Channel_1_RefN : Signal on PD8, Ref-                                     */
  MDR_ADC_ADC1_RESULT_Channel_Channel_2 = 2,    /*!< Channel_2 : Signal on PD9                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_3 = 3,    /*!< Channel_3 : Signal on PD10                                                */
  MDR_ADC_ADC1_RESULT_Channel_Channel_4 = 4,    /*!< Channel_4 : Signal on PD11                                                */
  MDR_ADC_ADC1_RESULT_Channel_Channel_5 = 5,    /*!< Channel_5 : Signal on PD12                                                */
  MDR_ADC_ADC1_RESULT_Channel_Channel_6 = 6,    /*!< Channel_6 : Signal on PD13                                                */
  MDR_ADC_ADC1_RESULT_Channel_Channel_7 = 7,    /*!< Channel_7 : Signal on PD14                                                */
  MDR_ADC_ADC1_RESULT_Channel_TS_VRef_1.23 = 30,/*!< TS_VRef_1.23 : Signal from Thermosensor                                   */
  MDR_ADC_ADC1_RESULT_Channel_TS_Temperature = 31,/*!< TS_Temperature : Signal from Thermosensor                               */
} MDR_ADC_ADC1_RESULT_Channel_Enum;

/* ======================================================  ADC1_STATUS  ====================================================== */
/* =========================================  MDR_ADC ADC1_STATUS Overwrite [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_Overwrite                                             */
  MDR_ADC_ADC1_STATUS_Overwrite_Normal = 0,     /*!< Normal : No overwritten occure                                            */
  MDR_ADC_ADC1_STATUS_Overwrite_Overwrite = 1,  /*!< Overwrite : Result overwritten                                            */
} MDR_ADC_ADC1_STATUS_Overwrite_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS AWOIFEN [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_AWOIFEN                                               */
  MDR_ADC_ADC1_STATUS_AWOIFEN_InRange  = 0,     /*!< InRange : Signal in range                                                 */
  MDR_ADC_ADC1_STATUS_AWOIFEN_OutOfRange = 1,   /*!< OutOfRange : Signal is out of range                                       */
} MDR_ADC_ADC1_STATUS_AWOIFEN_Enum;

/* ===========================================  MDR_ADC ADC1_STATUS EOCIF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_EOCIF                                                 */
  MDR_ADC_ADC1_STATUS_EOCIF_NoResult   = 0,     /*!< NoResult : Result is not ready                                            */
  MDR_ADC_ADC1_STATUS_EOCIF_Ready      = 1,     /*!< Ready : Signal is ready to read                                           */
} MDR_ADC_ADC1_STATUS_EOCIF_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS AWOIF_IE [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_AWOIF_IE                                              */
  MDR_ADC_ADC1_STATUS_AWOIF_IE_Disable = 0,     /*!< Disable : IRQ Disable                                                     */
  MDR_ADC_ADC1_STATUS_AWOIF_IE_Enable  = 1,     /*!< Enable : IRQ Enable                                                       */
} MDR_ADC_ADC1_STATUS_AWOIF_IE_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS EOCIF_EN [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_EOCIF_EN                                              */
  MDR_ADC_ADC1_STATUS_EOCIF_EN_Disable = 0,     /*!< Disable : IRQ Disable                                                     */
  MDR_ADC_ADC1_STATUS_EOCIF_EN_Enable  = 1,     /*!< Enable : IRQ Enable                                                       */
} MDR_ADC_ADC1_STATUS_EOCIF_EN_Enum;

/* ======================================================  ADC1_CHSEL  ======================================================= */
/* ==========================================  MDR_ADC ADC1_CHSEL Channel_0 [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_0                                              */
  MDR_ADC_ADC1_CHSEL_Channel_0_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_0_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_0_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_1 [1..1]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_1                                              */
  MDR_ADC_ADC1_CHSEL_Channel_1_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_1_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_1_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_2 [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_2                                              */
  MDR_ADC_ADC1_CHSEL_Channel_2_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_2_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_2_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_3 [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_3                                              */
  MDR_ADC_ADC1_CHSEL_Channel_3_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_3_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_3_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_4 [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_4                                              */
  MDR_ADC_ADC1_CHSEL_Channel_4_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_4_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_4_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_5 [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_5                                              */
  MDR_ADC_ADC1_CHSEL_Channel_5_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_5_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_5_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_6 [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_6                                              */
  MDR_ADC_ADC1_CHSEL_Channel_6_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_6_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_6_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_7 [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_7                                              */
  MDR_ADC_ADC1_CHSEL_Channel_7_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_7_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_7_Enum;

/* ========================================  MDR_ADC ADC1_CHSEL Channel_30 [30..30]  ========================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_30                                             */
  MDR_ADC_ADC1_CHSEL_Channel_30_Off    = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_30_Selected = 1,   /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_30_Enum;

/* ========================================  MDR_ADC ADC1_CHSEL Channel_31 [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_31                                             */
  MDR_ADC_ADC1_CHSEL_Channel_31_Off    = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_31_Selected = 1,   /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_31_Enum;

/* =======================================================  ADC1_TRIM  ======================================================= */
/* ===========================================  MDR_ADC ADC1_TRIM TS_Trim [1..5]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_TRIM_TS_Trim                                                 */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v23  = 0,     /*!< Vref_1v23 : 1.23V typically                                               */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v213 = 1,     /*!< Vref_1v213 : 1.213V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v211 = 2,     /*!< Vref_1v211 : 1.211V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v208 = 3,     /*!< Vref_1v208 : 1.208V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v206 = 4,     /*!< Vref_1v206 : 1.206V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v203 = 5,     /*!< Vref_1v203 : 1.203V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v200 = 6,     /*!< Vref_1v200 : 1.200V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v197 = 7,     /*!< Vref_1v197 : 1.197V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v193 = 8,     /*!< Vref_1v193 : 1.193V typically                                             */
} MDR_ADC_ADC1_TRIM_TS_Trim_Enum;

/* =========================================  MDR_ADC ADC1_TRIM SEL_VREF_BUF [6..6]  ========================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_TRIM_SEL_VREF_BUF                                            */
  MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Disable = 0,   /*!< Disable : Channel 30 signal is undefined                                  */
  MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Selected = 1,  /*!< Selected : Channel 30 signal is VRef_Buf                                  */
} MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  REG_00  ========================================================= */
/* ========================================================  REG_01  ========================================================= */
/* ========================================================  REG_02  ========================================================= */
/* ========================================================  REG_03  ========================================================= */
/* ========================================================  REG_04  ========================================================= */
/* ========================================================  REG_05  ========================================================= */
/* ========================================================  REG_06  ========================================================= */
/* ========================================================  REG_07  ========================================================= */
/* ========================================================  REG_08  ========================================================= */
/* ========================================================  REG_09  ========================================================= */
/* ========================================================  REG_0A  ========================================================= */
/* ========================================================  REG_0B  ========================================================= */
/* ========================================================  REG_0C  ========================================================= */
/* ========================================================  REG_0D  ========================================================= */
/* ========================================================  REG_0E  ========================================================= */
/* ===============================================  MDR_BKP REG_0E LOW [0..2]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_LOW                                                        */
  MDR_BKP_0E__LOW__10MHz               = 0,     /*!< 10MHz : CPU Clock less then 10MHz                                         */
  MDR_BKP_0E__LOW__200KHz              = 1,     /*!< 200KHz : CPU Clock less then 200KHz                                       */
  MDR_BKP_0E__LOW__500KHz              = 2,     /*!< 500KHz : CPU Clock less then 500KHz                                       */
  MDR_BKP_0E__LOW__1MHz                = 3,     /*!< 1MHz : CPU Clock less then 1MHz                                           */
  MDR_BKP_0E__LOW__GensOffz            = 4,     /*!< GensOffz : Generators Off                                                 */
  MDR_BKP_0E__LOW__40MHz               = 5,     /*!< 40MHz : CPU Clock less then 40MHz                                         */
  MDR_BKP_0E__LOW__80MHz               = 6,     /*!< 80MHz : CPU Clock less then 80MHz                                         */
  MDR_BKP_0E__LOW__above_80MHz         = 7,     /*!< above_80MHz : CPU Clock above 10MHz                                       */
} MDR_BKP_0E__LOW__Enum;

/* ============================================  MDR_BKP REG_0E SelectRI [3..5]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0E_SelectRI                                                   */
  MDR_BKP_0E__SelRI__10MHz             = 0,     /*!< 10MHz : Additional I ~ 300uA                                              */
  MDR_BKP_0E__SelRI__200KHz            = 1,     /*!< 200KHz : Additional I ~ 6.6uA                                             */
  MDR_BKP_0E__SelRI__500KHz            = 2,     /*!< 500KHz : Additional I ~ 20A                                               */
  MDR_BKP_0E__SelRI__1MHz              = 3,     /*!< 1MHz : Additional I ~ 80uA                                                */
  MDR_BKP_0E__SelRI__GensOffz          = 4,     /*!< GensOffz : Additional I ~ 2uA                                             */
  MDR_BKP_0E__SelRI__40MHz             = 5,     /*!< 40MHz : Additional I ~ 900uA                                              */
  MDR_BKP_0E__SelRI__80MHz             = 6,     /*!< 80MHz : Additional I ~ 4.4mA                                              */
  MDR_BKP_0E__SelRI__above_80MHz       = 7,     /*!< above_80MHz : Additional I ~ 19mA                                         */
} MDR_BKP_0E__SelRI__Enum;

/* ===========================================  MDR_BKP REG_0E StandAlone [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0E_StandAlone                                                 */
  MDR_BKP_0E__StandAlone__Disable      = 0,     /*!< Disable : Microcontroller mode                                            */
  MDR_BKP_0E__StandAlone__Enable       = 1,     /*!< Enable : Switch to interface IC                                           */
} MDR_BKP_0E__StandAlone__Enum;

/* ===========================================  MDR_BKP REG_0E Trim_dDUcc [8..10]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Trim_dDUcc                                                 */
  MDR_BKP_0E__dDUcc__+0.1              = 0,     /*!< +0.1 : DUcc += 0.1 V                                                      */
  MDR_BKP_0E__dDUcc__+0.06             = 1,     /*!< +0.06 : DUcc += 0.06 V                                                    */
  MDR_BKP_0E__dDUcc__+0.04             = 2,     /*!< +0.04 : DUcc += 0.04 V                                                    */
  MDR_BKP_0E__dDUcc__+0.01             = 3,     /*!< +0.01 : DUcc += 0.01 V                                                    */
  MDR_BKP_0E__dDUcc__-0.01             = 4,     /*!< -0.01 : DUcc -= 0.01 V                                                    */
  MDR_BKP_0E__dDUcc__-0.04             = 5,     /*!< -0.04 : DUcc -= 0.04 V                                                    */
  MDR_BKP_0E__dDUcc__-0.6              = 6,     /*!< -0.6 : DUcc -= 0.06 V                                                     */
  MDR_BKP_0E__dDUcc__-0.1              = 7,     /*!< -0.1 : DUcc -= 0.1 V                                                      */
} MDR_BKP_0E__dDUcc__Enum;

/* =============================================  MDR_BKP REG_0E FPOR [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_FPOR                                                       */
  MDR_BKP_0E__FPOR__Low                = 0,     /*!< Low : No Bootloader                                                       */
  MDR_BKP_0E__FPOR__High               = 1,     /*!< High : Bootloader completed                                               */
} MDR_BKP_0E__FPOR__Enum;

/* ===========================================  MDR_BKP REG_0E Trim_DUcc [12..13]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Trim_DUcc                                                  */
  MDR_BKP_0E__DUcc__1.8                = 0,     /*!< 1.8 : DUcc = 1.8 V                                                        */
  MDR_BKP_0E__DUcc__1.6                = 1,     /*!< 1.6 : DUcc = 1.6 V                                                        */
  MDR_BKP_0E__DUcc__1.4                = 2,     /*!< 1.4 : DUcc = 1.4 V                                                        */
  MDR_BKP_0E__DUcc__1.2                = 3,     /*!< 1.2 : DUcc = 1.2 V                                                        */
} MDR_BKP_0E__DUcc__Enum;

/* ============================================  MDR_BKP REG_0E I_LimEn [15..15]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0E_I_LimEn                                                    */
  MDR_BKP_0E__Ilim__Disable            = 0,     /*!< Disable : Disabled                                                        */
  MDR_BKP_0E__Ilim__Enable             = 1,     /*!< Enable : Enabled                                                          */
} MDR_BKP_0E__Ilim__Enum;

/* ========================================================  REG_0F  ========================================================= */
/* =============================================  MDR_BKP REG_0F LSE_ON [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_ON                                                     */
  MDR_RTC__LSE_ON__Off                 = 0,     /*!< Off : Disable state                                                       */
  MDR_RTC__LSE_ON__On                  = 1,     /*!< On : Enable state                                                         */
} MDR_RTC__LSE_ON__Enum;

/* =============================================  MDR_BKP REG_0F LSE_BYP [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_BYP                                                    */
  MDR_RTC__LSE_BYP__Off                = 0,     /*!< Off : Use for external resonator                                          */
  MDR_RTC__LSE_BYP__On                 = 1,     /*!< On : Use for external generator                                           */
} MDR_RTC__LSE_BYP__Enum;

/* =============================================  MDR_BKP REG_0F RTC_SEL [2..3]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_SEL                                                    */
  MDR_BKP_REG_0F_RTC_SEL_LSI           = 0,     /*!< LSI : RTC use LSI clock                                                   */
  MDR_BKP_REG_0F_RTC_SEL_LSE           = 1,     /*!< LSE : RTC use LSE clock                                                   */
  MDR_BKP_REG_0F_RTC_SEL_HSIRTC        = 2,     /*!< HSIRTC : RTC use HSIRTC clock                                             */
  MDR_BKP_REG_0F_RTC_SEL_HSERTC        = 3,     /*!< HSERTC : RTC use HSERTC clock                                             */
} MDR_BKP_REG_0F_RTC_SEL_Enum;

/* =============================================  MDR_BKP REG_0F RTC_EN [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_EN                                                     */
  MDR_BKP_REG_0F_RTC_EN_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_RTC_EN_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_RTC_EN_Enum;

/* ============================================  MDR_BKP REG_0F LSE_RDY [13..13]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_RDY                                                    */
  MDR_BKP_REG_0F_LSE_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_LSE_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_LSE_RDY_Enum;

/* ============================================  MDR_BKP REG_0F LSI_ON [15..15]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_ON                                                     */
  MDR_BKP_REG_0F_LSI_ON_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_LSI_ON_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_LSI_ON_Enum;

/* ===========================================  MDR_BKP REG_0F LSI_TRIM [16..20]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_TRIM                                                   */
  MDR_BKP_REG_0F_LSI_TRIM_69KHz        = 0,     /*!< 69KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_65KHz        = 1,     /*!< 65KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_60KHz        = 2,     /*!< 60KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_58KHz        = 3,     /*!< 58KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_52KHz        = 4,     /*!< 52KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_50KHz        = 5,     /*!< 50KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_49KHz        = 6,     /*!< 49KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_45KHz        = 7,     /*!< 45KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_44KHz        = 8,     /*!< 44KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_42KHz        = 9,     /*!< 42KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_40KHz        = 10,    /*!< 40KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_39KHz        = 11,    /*!< 39KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_37KHz        = 12,    /*!< 37KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_36KHz        = 13,    /*!< 36KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_35KHz        = 14,    /*!< 35KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_33KHz        = 15,    /*!< 33KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_32KHz        = 16,    /*!< 32KHz : LSI frequency tuner                                               */
} MDR_BKP_REG_0F_LSI_TRIM_Enum;

/* ============================================  MDR_BKP REG_0F LSI_RDY [21..21]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_RDY                                                    */
  MDR_BKP_REG_0F_LSI_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_LSI_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_LSI_RDY_Enum;

/* ============================================  MDR_BKP REG_0F HSI_ON [22..22]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_HSI_ON                                                     */
  MDR_BKP_REG_0F_HSI_ON_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_HSI_ON_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_HSI_ON_Enum;

/* ============================================  MDR_BKP REG_0F HSI_RDY [23..23]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_HSI_RDY                                                    */
  MDR_BKP_REG_0F_HSI_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_HSI_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_HSI_RDY_Enum;

/* ============================================  MDR_BKP REG_0F Standby [30..30]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_Standby                                                    */
  MDR_BKP_REG_0F_Standby_Disable       = 0,     /*!< Disable : Normal mode, DUcc is On                                         */
  MDR_BKP_REG_0F_Standby_Enable        = 1,     /*!< Enable : Standby mode, DUcc is Off                                        */
} MDR_BKP_REG_0F_Standby_Enum;

/* ===========================================  MDR_BKP REG_0F RTC_RESET [31..31]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_RESET                                                  */
  MDR_BKP_REG_0F_RTC_RESET_Active      = 0,     /*!< Active : RTC active state                                                 */
  MDR_BKP_REG_0F_RTC_RESET_Reset       = 1,     /*!< Reset : RTC in Reset state                                                */
} MDR_BKP_REG_0F_RTC_RESET_Enum;

/* ========================================================  RTC_CNT  ======================================================== */
/* ========================================================  RTC_DIV  ======================================================== */
/* ========================================================  RTC_PRL  ======================================================== */
/* =======================================================  RTC_ALRM  ======================================================== */
/* ========================================================  RTC_CS  ========================================================= */
/* ===============================================  MDR_BKP RTC_CS OWF [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_OWF                                                        */
  MDR_BKP_RTC_CS_OWF_Off               = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_OWF_On                = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_OWF_Enum;

/* ==============================================  MDR_BKP RTC_CS SECF [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_SECF                                                       */
  MDR_BKP_RTC_CS_SECF_Off              = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_SECF_On               = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_SECF_Enum;

/* ==============================================  MDR_BKP RTC_CS ALRF [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_ALRF                                                       */
  MDR_BKP_RTC_CS_ALRF_Off              = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_ALRF_On               = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_ALRF_Enum;

/* =============================================  MDR_BKP RTC_CS OWF_IE [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_OWF_IE                                                     */
  MDR_BKP_RTC_CS_OWF_IE_Off            = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_OWF_IE_On             = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_OWF_IE_Enum;

/* =============================================  MDR_BKP RTC_CS SECF_IE [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_SECF_IE                                                    */
  MDR_BKP_RTC_CS_SECF_IE_Off           = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_SECF_IE_On            = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_SECF_IE_Enum;

/* =============================================  MDR_BKP RTC_CS ALRF_IE [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_ALRF_IE                                                    */
  MDR_BKP_RTC_CS_ALRF_IE_Off           = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_ALRF_IE_On            = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_ALRF_IE_Enum;

/* ===============================================  MDR_BKP RTC_CS WEC [6..6]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_WEC                                                        */
  MDR_BKP_RTC_CS_WEC_Ready             = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_WEC_Busy              = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_WEC_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
/* ================================================  MDR_UART1 DR FE [8..8]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_DR_FE                                                           */
  MDR_UART1_DR_FE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_FE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_FE_Enum;

/* ================================================  MDR_UART1 DR PE [9..9]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_DR_PE                                                           */
  MDR_UART1_DR_PE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_PE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_PE_Enum;

/* ===============================================  MDR_UART1 DR BE [10..10]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_DR_BE                                                           */
  MDR_UART1_DR_BE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_BE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_BE_Enum;

/* ===============================================  MDR_UART1 DR OE [11..11]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_DR_OE                                                           */
  MDR_UART1_DR_OE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_OE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_OE_Enum;

/* ========================================================  RSR_ECR  ======================================================== */
/* ==============================================  MDR_UART1 RSR_ECR FE [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_FE                                                      */
  MDR_UART1_RSR_ECR_FE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_FE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_FE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR PE [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_PE                                                      */
  MDR_UART1_RSR_ECR_PE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_PE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_PE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR BE [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_BE                                                      */
  MDR_UART1_RSR_ECR_BE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_BE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_BE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR OE [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_OE                                                      */
  MDR_UART1_RSR_ECR_OE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_OE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_OE_Enum;

/* ==========================================================  FR  =========================================================== */
/* ================================================  MDR_UART1 FR CTS [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_CTS                                                          */
  MDR_UART1_FR_CTS_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_CTS_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_CTS_Enum;

/* ================================================  MDR_UART1 FR DSR [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_DSR                                                          */
  MDR_UART1_FR_DSR_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_DSR_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_DSR_Enum;

/* ================================================  MDR_UART1 FR DCD [2..2]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_DCD                                                          */
  MDR_UART1_FR_DCD_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_DCD_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_DCD_Enum;

/* ===============================================  MDR_UART1 FR BUSY [3..3]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_BUSY                                                         */
  MDR_UART1_FR_BUSY_Off                = 0,     /*!< Off : Inactive                                                            */
  MDR_UART1_FR_BUSY_On                 = 1,     /*!< On : Active                                                               */
} MDR_UART1_FR_BUSY_Enum;

/* ===============================================  MDR_UART1 FR RXFE [4..4]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_RXFE                                                         */
  MDR_UART1_FR_RXFE_Inactive           = 0,     /*!< Inactive : FIFO not Empty                                                 */
  MDR_UART1_FR_RXFE_Empty              = 1,     /*!< Empty : FIFO Empty                                                        */
} MDR_UART1_FR_RXFE_Enum;

/* ===============================================  MDR_UART1 FR TXFF [5..5]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_TXFF                                                         */
  MDR_UART1_FR_TXFF_Inactive           = 0,     /*!< Inactive : FIFO not Full                                                  */
  MDR_UART1_FR_TXFF_Full               = 1,     /*!< Full : FIFO Full                                                          */
} MDR_UART1_FR_TXFF_Enum;

/* ===============================================  MDR_UART1 FR RXFF [6..6]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_RXFF                                                         */
  MDR_UART1_FR_RXFF_Inactive           = 0,     /*!< Inactive : FIFO not Full                                                  */
  MDR_UART1_FR_RXFF_Full               = 1,     /*!< Full : FIFO Full                                                          */
} MDR_UART1_FR_RXFF_Enum;

/* ===============================================  MDR_UART1 FR TXFE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_TXFE                                                         */
  MDR_UART1_FR_TXFE_Inactive           = 0,     /*!< Inactive : FIFO not Empty                                                 */
  MDR_UART1_FR_TXFE_Empty              = 1,     /*!< Empty : FIFO Empty                                                        */
} MDR_UART1_FR_TXFE_Enum;

/* ================================================  MDR_UART1 FR RI [8..8]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_FR_RI                                                           */
  MDR_UART1_FR_RI_Inactive             = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_RI_Active               = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_RI_Enum;

/* =========================================================  ILPR  ========================================================== */
/* =========================================================  IBRD  ========================================================== */
/* =========================================================  FBRD  ========================================================== */
/* =========================================================  LCR_H  ========================================================= */
/* ==============================================  MDR_UART1 LCR_H BRK [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_BRK                                                       */
  MDR_UART1_LCR_H_BRK_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_BRK_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_BRK_Enum;

/* ==============================================  MDR_UART1 LCR_H PEN [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_PEN                                                       */
  MDR_UART1_LCR_H_PEN_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_PEN_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_PEN_Enum;

/* ==============================================  MDR_UART1 LCR_H EPS [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_EPS                                                       */
  MDR_UART1_LCR_H_EPS_Odd              = 0,     /*!< Odd : Odd parity bit                                                      */
  MDR_UART1_LCR_H_EPS_Even             = 1,     /*!< Even : Even parity bit                                                    */
} MDR_UART1_LCR_H_EPS_Enum;

/* ==============================================  MDR_UART1 LCR_H STP2 [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_STP2                                                      */
  MDR_UART1_LCR_H_STP2_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_STP2_On              = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_STP2_Enum;

/* ==============================================  MDR_UART1 LCR_H FEN [4..4]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_FEN                                                       */
  MDR_UART1_LCR_H_FEN_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_FEN_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_FEN_Enum;

/* ==============================================  MDR_UART1 LCR_H WLEN [5..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_WLEN                                                      */
  MDR_UART1_LCR_H_WLEN_bit_5           = 0,     /*!< bit_5 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_6           = 1,     /*!< bit_6 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_7           = 2,     /*!< bit_7 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_8           = 3,     /*!< bit_8 : Word bits length                                                  */
} MDR_UART1_LCR_H_WLEN_Enum;

/* ==============================================  MDR_UART1 LCR_H SPS [7..7]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_SPS                                                       */
  MDR_UART1_LCR_H_SPS_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_SPS_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_SPS_Enum;

/* ==========================================================  CR  =========================================================== */
/* ================================================  MDR_UART1 CR EN [0..0]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_CR_EN                                                           */
  MDR_UART1_CR_EN_Off                  = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_EN_On                   = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_EN_Enum;

/* ===============================================  MDR_UART1 CR SIREN [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_SIREN                                                        */
  MDR_UART1_CR_SIREN_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_SIREN_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_SIREN_Enum;

/* ===============================================  MDR_UART1 CR SIRLP [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_SIRLP                                                        */
  MDR_UART1_CR_SIRLP_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_SIRLP_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_SIRLP_Enum;

/* ================================================  MDR_UART1 CR LBE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_LBE                                                          */
  MDR_UART1_CR_LBE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_LBE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_LBE_Enum;

/* ================================================  MDR_UART1 CR TXE [8..8]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_TXE                                                          */
  MDR_UART1_CR_TXE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_TXE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_TXE_Enum;

/* ================================================  MDR_UART1 CR RXE [9..9]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_RXE                                                          */
  MDR_UART1_CR_RXE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_RXE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_RXE_Enum;

/* ===============================================  MDR_UART1 CR DTR [10..10]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_DTR                                                          */
  MDR_UART1_CR_DTR_Inactive            = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_DTR_Active              = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_DTR_Enum;

/* ===============================================  MDR_UART1 CR RTS [11..11]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_RTS                                                          */
  MDR_UART1_CR_RTS_Inactive            = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_RTS_Active              = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_RTS_Enum;

/* ==============================================  MDR_UART1 CR Out1 [12..12]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_Out1                                                         */
  MDR_UART1_CR_Out1_Inactive           = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_Out1_Active             = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_Out1_Enum;

/* ==============================================  MDR_UART1 CR Out2 [13..13]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_Out2                                                         */
  MDR_UART1_CR_Out2_Inactive           = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_Out2_Active             = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_Out2_Enum;

/* ==============================================  MDR_UART1 CR RTSEn [14..14]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_RTSEn                                                        */
  MDR_UART1_CR_RTSEn_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_RTSEn_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_RTSEn_Enum;

/* ==============================================  MDR_UART1 CR CTSEn [15..15]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_CTSEn                                                        */
  MDR_UART1_CR_CTSEn_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_CTSEn_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_CTSEn_Enum;

/* =========================================================  IFLS  ========================================================== */
/* ============================================  MDR_UART1 IFLS TXIFLSES [0..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IFLS_TXIFLSES                                                   */
  MDR_UART1_IFLS_TXIFLSES_Words_le4    = 0,     /*!< Words_le4 : Less or Equal words in FIFO_TX                                */
  MDR_UART1_IFLS_TXIFLSES_Words_le8    = 1,     /*!< Words_le8 : Less or Equal words in FIFO_TX                                */
  MDR_UART1_IFLS_TXIFLSES_Words_le16   = 2,     /*!< Words_le16 : Less or Equal words in FIFO_TX                               */
  MDR_UART1_IFLS_TXIFLSES_Words_le24   = 3,     /*!< Words_le24 : Less or Equal words in FIFO_TX                               */
  MDR_UART1_IFLS_TXIFLSES_Words_le32   = 4,     /*!< Words_le32 : Less or Equal words in FIFO_TX                               */
} MDR_UART1_IFLS_TXIFLSES_Enum;

/* ============================================  MDR_UART1 IFLS RXIFLSES [3..5]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IFLS_RXIFLSES                                                   */
  MDR_UART1_IFLS_RXIFLSES_Words_ge4    = 0,     /*!< Words_ge4 : Greater or Equal words in FIFO_RX                             */
  MDR_UART1_IFLS_RXIFLSES_Words_ge8    = 1,     /*!< Words_ge8 : Greater or Equal words in FIFO_RX                             */
  MDR_UART1_IFLS_RXIFLSES_Words_ge16   = 2,     /*!< Words_ge16 : Greater or Equal words in FIFO_RX                            */
  MDR_UART1_IFLS_RXIFLSES_Words_ge24   = 3,     /*!< Words_ge24 : Greater or Equal words in FIFO_RX                            */
  MDR_UART1_IFLS_RXIFLSES_Words_ge32   = 4,     /*!< Words_ge32 : Greater or Equal words in FIFO_RX                            */
} MDR_UART1_IFLS_RXIFLSES_Enum;

/* =========================================================  IMSC  ========================================================== */
/* =============================================  MDR_UART1 IMSC RIM_IM [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RIM_IM                                                     */
  MDR_UART1_IMSC_RIM_IM_Off            = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RIM_IM_On             = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RIM_IM_Enum;

/* =============================================  MDR_UART1 IMSC STCM_IM [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_STCM_IM                                                    */
  MDR_UART1_IMSC_STCM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_STCM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_STCM_IM_Enum;

/* =============================================  MDR_UART1 IMSC DCDM_IM [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_DCDM_IM                                                    */
  MDR_UART1_IMSC_DCDM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_DCDM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_DCDM_IM_Enum;

/* =============================================  MDR_UART1 IMSC DSRM_IM [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_DSRM_IM                                                    */
  MDR_UART1_IMSC_DSRM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_DSRM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_DSRM_IM_Enum;

/* ==============================================  MDR_UART1 IMSC RX_IM [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RX_IM                                                      */
  MDR_UART1_IMSC_RX_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RX_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RX_IM_Enum;

/* ==============================================  MDR_UART1 IMSC TX_IM [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_TX_IM                                                      */
  MDR_UART1_IMSC_TX_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_TX_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_TX_IM_Enum;

/* ==============================================  MDR_UART1 IMSC RT_IM [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RT_IM                                                      */
  MDR_UART1_IMSC_RT_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RT_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RT_IM_Enum;

/* ==============================================  MDR_UART1 IMSC FE_IM [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_FE_IM                                                      */
  MDR_UART1_IMSC_FE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_FE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_FE_IM_Enum;

/* ==============================================  MDR_UART1 IMSC PE_IM [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_PE_IM                                                      */
  MDR_UART1_IMSC_PE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_PE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_PE_IM_Enum;

/* ==============================================  MDR_UART1 IMSC BE_IM [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_BE_IM                                                      */
  MDR_UART1_IMSC_BE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_BE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_BE_IM_Enum;

/* =============================================  MDR_UART1 IMSC OE_IM [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_OE_IM                                                      */
  MDR_UART1_IMSC_OE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_OE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_OE_IM_Enum;

/* ==========================================================  RIS  ========================================================== */
/* =============================================  MDR_UART1 RIS RIM_RIS [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RIM_RIS                                                     */
  MDR_UART1_RIS_RIM_RIS_Off            = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RIM_RIS_On             = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RIM_RIS_Enum;

/* =============================================  MDR_UART1 RIS STCM_RIS [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_STCM_RIS                                                    */
  MDR_UART1_RIS_STCM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_STCM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_STCM_RIS_Enum;

/* =============================================  MDR_UART1 RIS DCDM_RIS [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_DCDM_RIS                                                    */
  MDR_UART1_RIS_DCDM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_DCDM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_DCDM_RIS_Enum;

/* =============================================  MDR_UART1 RIS DSRM_RIS [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_DSRM_RIS                                                    */
  MDR_UART1_RIS_DSRM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_DSRM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_DSRM_RIS_Enum;

/* ==============================================  MDR_UART1 RIS RX_RIS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RX_RIS                                                      */
  MDR_UART1_RIS_RX_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RX_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RX_RIS_Enum;

/* ==============================================  MDR_UART1 RIS TX_RIS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_TX_RIS                                                      */
  MDR_UART1_RIS_TX_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_TX_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_TX_RIS_Enum;

/* ==============================================  MDR_UART1 RIS RT_RIS [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RT_RIS                                                      */
  MDR_UART1_RIS_RT_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RT_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RT_RIS_Enum;

/* ==============================================  MDR_UART1 RIS FE_RIS [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_FE_RIS                                                      */
  MDR_UART1_RIS_FE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_FE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_FE_RIS_Enum;

/* ==============================================  MDR_UART1 RIS PE_RIS [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_PE_RIS                                                      */
  MDR_UART1_RIS_PE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_PE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_PE_RIS_Enum;

/* ==============================================  MDR_UART1 RIS BE_RIS [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_BE_RIS                                                      */
  MDR_UART1_RIS_BE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_BE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_BE_RIS_Enum;

/* =============================================  MDR_UART1 RIS OE_RIS [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_OE_RIS                                                      */
  MDR_UART1_RIS_OE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_OE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_OE_RIS_Enum;

/* ==========================================================  MIS  ========================================================== */
/* =============================================  MDR_UART1 MIS RIM_MIS [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RIM_MIS                                                     */
  MDR_UART1_MIS_RIM_MIS_Off            = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RIM_MIS_On             = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RIM_MIS_Enum;

/* =============================================  MDR_UART1 MIS STCM_MIS [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_STCM_MIS                                                    */
  MDR_UART1_MIS_STCM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_STCM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_STCM_MIS_Enum;

/* =============================================  MDR_UART1 MIS DCDM_MIS [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_DCDM_MIS                                                    */
  MDR_UART1_MIS_DCDM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_DCDM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_DCDM_MIS_Enum;

/* =============================================  MDR_UART1 MIS DSRM_MIS [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_DSRM_MIS                                                    */
  MDR_UART1_MIS_DSRM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_DSRM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_DSRM_MIS_Enum;

/* ==============================================  MDR_UART1 MIS RX_MIS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RX_MIS                                                      */
  MDR_UART1_MIS_RX_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RX_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RX_MIS_Enum;

/* ==============================================  MDR_UART1 MIS TX_MIS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_TX_MIS                                                      */
  MDR_UART1_MIS_TX_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_TX_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_TX_MIS_Enum;

/* ==============================================  MDR_UART1 MIS RT_MIS [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RT_MIS                                                      */
  MDR_UART1_MIS_RT_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RT_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RT_MIS_Enum;

/* ==============================================  MDR_UART1 MIS FE_MIS [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_FE_MIS                                                      */
  MDR_UART1_MIS_FE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_FE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_FE_MIS_Enum;

/* ==============================================  MDR_UART1 MIS PE_MIS [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_PE_MIS                                                      */
  MDR_UART1_MIS_PE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_PE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_PE_MIS_Enum;

/* ==============================================  MDR_UART1 MIS BE_MIS [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_BE_MIS                                                      */
  MDR_UART1_MIS_BE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_BE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_BE_MIS_Enum;

/* =============================================  MDR_UART1 MIS OE_MIS [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_OE_MIS                                                      */
  MDR_UART1_MIS_OE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_OE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_OE_MIS_Enum;

/* ==========================================================  ICR  ========================================================== */
/* ==============================================  MDR_UART1 ICR RIM_IC [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RIM_IC                                                      */
  MDR_UART1_ICR_RIM_IC_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RIM_IC_Clear           = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RIM_IC_Enum;

/* =============================================  MDR_UART1 ICR STCM_IC [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_STCM_IC                                                     */
  MDR_UART1_ICR_STCM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_STCM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_STCM_IC_Enum;

/* =============================================  MDR_UART1 ICR DCDM_IC [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_DCDM_IC                                                     */
  MDR_UART1_ICR_DCDM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_DCDM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_DCDM_IC_Enum;

/* =============================================  MDR_UART1 ICR DSRM_IC [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_DSRM_IC                                                     */
  MDR_UART1_ICR_DSRM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_DSRM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_DSRM_IC_Enum;

/* ==============================================  MDR_UART1 ICR RX_IC [4..4]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RX_IC                                                       */
  MDR_UART1_ICR_RX_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RX_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RX_IC_Enum;

/* ==============================================  MDR_UART1 ICR TX_IC [5..5]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_TX_IC                                                       */
  MDR_UART1_ICR_TX_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_TX_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_TX_IC_Enum;

/* ==============================================  MDR_UART1 ICR RT_IC [6..6]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RT_IC                                                       */
  MDR_UART1_ICR_RT_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RT_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RT_IC_Enum;

/* ==============================================  MDR_UART1 ICR FE_IC [7..7]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_FE_IC                                                       */
  MDR_UART1_ICR_FE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_FE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_FE_IC_Enum;

/* ==============================================  MDR_UART1 ICR PE_IC [8..8]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_PE_IC                                                       */
  MDR_UART1_ICR_PE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_PE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_PE_IC_Enum;

/* ==============================================  MDR_UART1 ICR BE_IC [9..9]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_BE_IC                                                       */
  MDR_UART1_ICR_BE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_BE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_BE_IC_Enum;

/* =============================================  MDR_UART1 ICR OE_IC [10..10]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_OE_IC                                                       */
  MDR_UART1_ICR_OE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_OE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_OE_IC_Enum;

/* =========================================================  DMACR  ========================================================= */
/* =============================================  MDR_UART1 DMACR RXDMAE [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_DMACR_RXDMAE                                                    */
  MDR_UART1_DMACR_RXDMAE_Disabled      = 0,     /*!< Disabled : DMA disabled                                                   */
  MDR_UART1_DMACR_RXDMAE_Enabled       = 1,     /*!< Enabled : DMA enabled                                                     */
} MDR_UART1_DMACR_RXDMAE_Enum;

/* =============================================  MDR_UART1 DMACR TXDMAE [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_DMACR_TXDMAE                                                    */
  MDR_UART1_DMACR_TXDMAE_Disabled      = 0,     /*!< Disabled : DMA disabled                                                   */
  MDR_UART1_DMACR_TXDMAE_Enabled       = 1,     /*!< Enabled : DMA enabled                                                     */
} MDR_UART1_DMACR_TXDMAE_Enum;

/* ============================================  MDR_UART1 DMACR DMAonErr [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_UART1_DMACR_DMAonErr                                                  */
  MDR_UART1_DMACR_DMAonErr_IgnoreError = 0,     /*!< IgnoreError : Ignore Errors                                               */
  MDR_UART1_DMACR_DMAonErr_StopOnError = 1,     /*!< StopOnError : SReq and Req disable on Error                               */
} MDR_UART1_DMACR_DMAonErr_Enum;

/* ==========================================================  TCR  ========================================================== */
/* ===============================================  MDR_UART1 TCR ITEN [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_TCR_ITEN                                                        */
  MDR_UART1_TCR_ITEN_Disabled          = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_ITEN_Enabled           = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_ITEN_Enum;

/* =============================================  MDR_UART1 TCR TestFIFO [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_TCR_TestFIFO                                                    */
  MDR_UART1_TCR_TestFIFO_Disabled      = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_TestFIFO_Enabled       = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_TestFIFO_Enum;

/* =============================================  MDR_UART1 TCR SIRTest [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_TCR_SIRTest                                                     */
  MDR_UART1_TCR_SIRTest_Disabled       = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_SIRTest_Enabled        = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_SIRTest_Enum;



/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CNT  ========================================================== */
/* ==========================================================  PSG  ========================================================== */
/* ==========================================================  ARR  ========================================================== */
/* =========================================================  CNTRL  ========================================================= */
/* ============================================  MDR_TIMER1 CNTRL CNT_EN [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_CNT_EN                                                   */
  MDR_TIMER1_CNTRL_CNT_EN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CNTRL_CNT_EN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CNTRL_CNT_EN_Enum;

/* ============================================  MDR_TIMER1 CNTRL ARRB_EN [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_ARRB_EN                                                  */
  MDR_TIMER1_CNTRL_ARRB_EN_Immediately = 0,     /*!< Immediately : Immediately update                                          */
  MDR_TIMER1_CNTRL_ARRB_EN_OnCompleted = 1,     /*!< OnCompleted : Update ARR when active period of CNT finished               */
} MDR_TIMER1_CNTRL_ARRB_EN_Enum;

/* ============================================  MDR_TIMER1 CNTRL WR_CMPL [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_WR_CMPL                                                  */
  MDR_TIMER1_CNTRL_WR_CMPL_Ready       = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CNTRL_WR_CMPL_BUSY        = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CNTRL_WR_CMPL_Enum;

/* ==============================================  MDR_TIMER1 CNTRL DIR [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_DIR                                                      */
  MDR_TIMER1_CNTRL_DIR_UP              = 0,     /*!< UP : CNT counts from 0 to ARR                                             */
  MDR_TIMER1_CNTRL_DIR_DOWN            = 1,     /*!< DOWN : CNT counts from ARR to 0                                           */
} MDR_TIMER1_CNTRL_DIR_Enum;

/* =============================================  MDR_TIMER1 CNTRL FDTS [4..5]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_FDTS                                                     */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div1   = 0,     /*!< TIM_CLK_div1 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div2   = 1,     /*!< TIM_CLK_div2 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div4   = 2,     /*!< TIM_CLK_div4 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div8   = 3,     /*!< TIM_CLK_div8 : TIM_Clock to FDTS scale                                    */
} MDR_TIMER1_CNTRL_FDTS_Enum;

/* ===========================================  MDR_TIMER1 CNTRL CNT_MODE [6..7]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_CNT_MODE                                                 */
  MDR_TIMER1_CNTRL_CNT_MODE_DIR_TIM_CLK = 0,    /*!< DIR_TIM_CLK : Count TIM_Clock pulses with DIR direction                   */
  MDR_TIMER1_CNTRL_CNT_MODE_UpDown_TIM_CLK = 1, /*!< UpDown_TIM_CLK : Count TIM_Clock pulses UP and Down                       */
  MDR_TIMER1_CNTRL_CNT_MODE_DIR_ExtEvents = 2,  /*!< DIR_ExtEvents : Count External Events with DIR direction                  */
} MDR_TIMER1_CNTRL_CNT_MODE_Enum;

/* ==========================================  MDR_TIMER1 CNTRL EVENT_SEL [8..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_EVENT_SEL                                                */
  MDR_TIMER1_CNTRL_EVENT_SEL_Rise_TIM_CLK = 0,  /*!< Rise_TIM_CLK : CNT counts from 0 to ARR                                   */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM1 = 1,/*!< CNT_eq_ARR_TIM1 : CNT gets ARR in Timer1                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM2 = 2,/*!< CNT_eq_ARR_TIM2 : CNT gets ARR in Timer2                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM3 = 3,/*!< CNT_eq_ARR_TIM3 : CNT gets ARR in Timer3                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch1 = 4,     /*!< Event_Ch1 : Event in Channel1                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch2 = 5,     /*!< Event_Ch2 : Event in Channel2                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch3 = 6,     /*!< Event_Ch3 : Event in Channel3                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch4 = 7,     /*!< Event_Ch4 : Event in Channel4                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Rise_ETR  = 8,     /*!< Rise_ETR : Rise front in ETR pin                                          */
  MDR_TIMER1_CNTRL_EVENT_SEL_Fall_ETR  = 9,     /*!< Fall_ETR : Fall front in ETR pin                                          */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM4 = 10,/*!< CNT_eq_ARR_TIM4 : CNT gets ARR in Timer4                                */
} MDR_TIMER1_CNTRL_EVENT_SEL_Enum;

/* =========================================================  CCR1  ========================================================== */
/* =========================================================  CCR2  ========================================================== */
/* =========================================================  CCR3  ========================================================== */
/* =========================================================  CCR4  ========================================================== */
/* =======================================================  CH1_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH1_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Rise_NextNextCH = 3,/*!< Rise_NextNextCH : Capture Event Select                                   */
} MDR_TIMER1_CH1_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH1_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH1_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH1_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH1_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH1_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_ETREN                                                */
  MDR_TIMER1_CH1_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH1_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH1_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH1_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH1_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH1_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH1_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH2_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH2_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Rise_NextNextCH = 3,/*!< Rise_NextNextCH : Capture Event Select                                   */
} MDR_TIMER1_CH2_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH2_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH2_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH2_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH2_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH2_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_ETREN                                                */
  MDR_TIMER1_CH2_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH2_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH2_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH2_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH2_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH2_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH2_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH3_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH3_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Rise_NextNextCH = 3,/*!< Rise_NextNextCH : Capture Event Select                                   */
} MDR_TIMER1_CH3_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH3_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH3_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH3_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH3_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH3_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_ETREN                                                */
  MDR_TIMER1_CH3_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH3_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH3_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH3_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH3_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH3_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH3_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH4_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH4_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Rise_NextNextCH = 3,/*!< Rise_NextNextCH : Capture Event Select                                   */
} MDR_TIMER1_CH4_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH4_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH4_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH4_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH4_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH4_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_ETREN                                                */
  MDR_TIMER1_CH4_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH4_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH4_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH4_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH4_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH4_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH4_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Enum;

/* ======================================================  CH1_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH1_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH1_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_SelO                                                */
  MDR_TIMER1_CH1_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH1_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH1_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH1_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH1_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH1_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH1_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH1_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH1_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH1_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH1_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH1_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH1_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH1_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NInv                                                */
  MDR_TIMER1_CH1_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH1_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH1_CNTRL1_NInv_Enum;

/* ======================================================  CH2_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH2_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH2_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_SelO                                                */
  MDR_TIMER1_CH2_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH2_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH2_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH2_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH2_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH2_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH2_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH2_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH2_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH2_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH2_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH2_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH2_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH2_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NInv                                                */
  MDR_TIMER1_CH2_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH2_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH2_CNTRL1_NInv_Enum;

/* ======================================================  CH3_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH3_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH3_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_SelO                                                */
  MDR_TIMER1_CH3_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH3_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH3_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH3_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH3_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH3_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH3_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH3_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH3_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH3_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH3_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH3_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH3_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH3_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NInv                                                */
  MDR_TIMER1_CH3_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH3_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH3_CNTRL1_NInv_Enum;

/* ======================================================  CH4_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH4_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH4_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_SelO                                                */
  MDR_TIMER1_CH4_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH4_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH4_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH4_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH4_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH4_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH4_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH4_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH4_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH4_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH4_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH4_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH4_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH4_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NInv                                                */
  MDR_TIMER1_CH4_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH4_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH4_CNTRL1_NInv_Enum;

/* ========================================================  CH1_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH1_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_DTG_DTG                                                    */
  MDR_TIMER1_CH1_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH1_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH1_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_DTG_EDTS                                                   */
  MDR_TIMER1_CH1_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH1_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH1_DTG_EDTS_Enum;

/* ========================================================  CH2_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH2_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_DTG_DTG                                                    */
  MDR_TIMER1_CH2_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH2_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH2_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_DTG_EDTS                                                   */
  MDR_TIMER1_CH2_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH2_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH2_DTG_EDTS_Enum;

/* ========================================================  CH3_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH3_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_DTG_DTG                                                    */
  MDR_TIMER1_CH3_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH3_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH3_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_DTG_EDTS                                                   */
  MDR_TIMER1_CH3_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH3_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH3_DTG_EDTS_Enum;

/* ========================================================  CH4_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH4_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_DTG_DTG                                                    */
  MDR_TIMER1_CH4_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH4_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH4_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_DTG_EDTS                                                   */
  MDR_TIMER1_CH4_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH4_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH4_DTG_EDTS_Enum;

/* =====================================================  BRKETR_CNTRL  ====================================================== */
/* ========================================  MDR_TIMER1 BRKETR_CNTRL BRK_INV [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_BRK_INV                                           */
  MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Normal = 0,   /*!< Normal : Signal Not Inverted                                              */
  MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Invert = 1,   /*!< Invert : Signal Inverted                                                  */
} MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Enum;

/* ========================================  MDR_TIMER1 BRKETR_CNTRL ETR_INV [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_INV                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Normal = 0,   /*!< Normal : Signal Not Inverted                                              */
  MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Invert = 1,   /*!< Invert : Signal Inverted                                                  */
} MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Enum;

/* ========================================  MDR_TIMER1 BRKETR_CNTRL ETR_PSC [2..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_PSC                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div1 = 0,     /*!< div1 : No prescaler                                                       */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div2 = 1,     /*!< div2 : Reduce freq by 2                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div4 = 2,     /*!< div4 : Reduce freq by 4                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div8 = 3,     /*!< div8 : Reduce freq by 8                                                   */
} MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Enum;

/* =======================================  MDR_TIMER1 BRKETR_CNTRL ETR_Filter [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_Filter                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_TIM_CLK = 0,/*!< TIM_CLK : Filter Value                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_2_TIM_CLK = 1,/*!< 2_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_4_TIM_CLK = 2,/*!< 4_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_TIM_CLK = 3,/*!< 8_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div2 = 4,/*!< 6_FDTS_div2 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div2 = 5,/*!< 8_FDTS_div2 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div4 = 6,/*!< 6_FDTS_div4 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div4 = 7,/*!< 8_FDTS_div4 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div8 = 8,/*!< 6_FDTS_div8 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div8 = 9,/*!< 8_FDTS_div8 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                        */
} MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ===========================================  MDR_TIMER1 STATUS CNT_ZERO [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CNT_ZERO                                                */
  MDR_TIMER1_STATUS_CNT_ZERO_Off       = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CNT_ZERO_On        = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CNT_ZERO_Enum;

/* ===========================================  MDR_TIMER1 STATUS CNT_ARR [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CNT_ARR                                                 */
  MDR_TIMER1_STATUS_CNT_ARR_Off        = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CNT_ARR_On         = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CNT_ARR_Enum;

/* ============================================  MDR_TIMER1 STATUS ETR_RE [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_ETR_RE                                                  */
  MDR_TIMER1_STATUS_ETR_RE_Off         = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_ETR_RE_On          = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_ETR_RE_Enum;

/* ============================================  MDR_TIMER1 STATUS ETR_FE [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_ETR_FE                                                  */
  MDR_TIMER1_STATUS_ETR_FE_Off         = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_ETR_FE_On          = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_ETR_FE_Enum;

/* =============================================  MDR_TIMER1 STATUS BRK [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_BRK                                                     */
  MDR_TIMER1_STATUS_BRK_Off            = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_BRK_On             = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_BRK_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH1 [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH1                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH1_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH1_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH2 [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH2                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH2_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH2_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH3 [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH3                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH3_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH3_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH4 [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH4                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH4_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH4_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH4_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_REF_CH1 [9..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH1                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH1_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH1_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH2 [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH2                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH2_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH2_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH3 [11..11]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH3                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH3_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH3_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH4 [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH4                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH4_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH4_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH4_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH1 [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH1                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH1_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH1_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH2 [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH2                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH2_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH2_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH3 [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH3                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH3_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH3_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH4 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH4                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH4_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH4_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH4_Enum;

/* ==========================================================  IE  =========================================================== */
/* ===========================================  MDR_TIMER1 IE CNT_ZERO_IE [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_IE_CNT_ZERO_IE                                                 */
  MDR_TIMER1_IE_CNT_ZERO_IE_Off        = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CNT_ZERO_IE_On         = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CNT_ZERO_IE_Enum;

/* ============================================  MDR_TIMER1 IE CNT_ARR_IE [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_IE_CNT_ARR_IE                                                  */
  MDR_TIMER1_IE_CNT_ARR_IE_Off         = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CNT_ARR_IE_On          = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CNT_ARR_IE_Enum;

/* ============================================  MDR_TIMER1 IE ETR_RE_IE [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_ETR_RE_IE                                                   */
  MDR_TIMER1_IE_ETR_RE_IE_Off          = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_ETR_RE_IE_On           = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_ETR_RE_IE_Enum;

/* ============================================  MDR_TIMER1 IE ETR_FE_IE [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_ETR_FE_IE                                                   */
  MDR_TIMER1_IE_ETR_FE_IE_Off          = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_ETR_FE_IE_On           = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_ETR_FE_IE_Enum;

/* ==============================================  MDR_TIMER1 IE BRK_IE [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_BRK_IE                                                      */
  MDR_TIMER1_IE_BRK_IE_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_BRK_IE_On              = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_BRK_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH1_IE [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH1_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH1_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH1_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH1_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH2_IE [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH2_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH2_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH2_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH2_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH3_IE [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH3_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH3_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH3_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH3_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH4_IE [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH4_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH4_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH4_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH4_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_REF_CH1_IE [9..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH1_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH1_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH1_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH1_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH2_IE [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH2_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH2_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH2_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH2_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH3_IE [11..11]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH3_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH3_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH3_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH3_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH4_IE [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH4_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH4_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH4_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH4_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH1_IE [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH1_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH1_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH2_IE [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH2_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH2_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH3_IE [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH3_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH3_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH4_IE [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH4_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH4_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Enum;

/* ========================================================  DMA_RE  ========================================================= */
/* ========================================  MDR_TIMER1 DMA_RE CNT_ZERO_DMAE [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE                                           */
  MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CNT_ARR_DMAE                                            */
  MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE ETR_RE_DMAE [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_ETR_RE_DMAE                                             */
  MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_ETR_RE_DMAE_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE ETR_FE_DMAE [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_ETR_FE_DMAE                                             */
  MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_ETR_FE_DMAE_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Enum;

/* ===========================================  MDR_TIMER1 DMA_RE BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_BRK_DMAE                                                */
  MDR_TIMER1_DMA_RE_BRK_DMAE_Off       = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_BRK_DMAE_On        = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_BRK_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH1_DMAE [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH2_DMAE [14..14]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH3_DMAE [15..15]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH4_DMAE [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Enum;

/* ======================================================  CH1_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Fall_NextCH = 2, /*!< Fall_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Fall_NextNextCH = 3,/*!< Fall_NextNextCH : Capture Event Select                                 */
} MDR_TIMER1_CH1_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH1_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH1_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH1_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH1_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH1_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH1_CNTRL2_CCRRLD_Enum;

/* =======================================  MDR_TIMER1 CH1_CNTRL2 CAP_CCR_Fix [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix                                         */
  MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_Off = 0,    /*!< Off : Inactive                                                            */
  MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_On = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_Enum;

/* ======================================================  CH2_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Fall_NextCH = 2, /*!< Fall_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Fall_NextNextCH = 3,/*!< Fall_NextNextCH : Capture Event Select                                 */
} MDR_TIMER1_CH2_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH2_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH2_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH2_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH2_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH2_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH2_CNTRL2_CCRRLD_Enum;

/* =======================================  MDR_TIMER1 CH2_CNTRL2 CAP_CCR_Fix [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix                                         */
  MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_Off = 0,    /*!< Off : Inactive                                                            */
  MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_On = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_Enum;

/* ======================================================  CH3_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Fall_NextCH = 2, /*!< Fall_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Fall_NextNextCH = 3,/*!< Fall_NextNextCH : Capture Event Select                                 */
} MDR_TIMER1_CH3_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH3_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH3_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH3_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH3_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH3_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH3_CNTRL2_CCRRLD_Enum;

/* =======================================  MDR_TIMER1 CH3_CNTRL2 CAP_CCR_Fix [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix                                         */
  MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_Off = 0,    /*!< Off : Inactive                                                            */
  MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_On = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_Enum;

/* ======================================================  CH4_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Fall_NextCH = 2, /*!< Fall_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Fall_NextNextCH = 3,/*!< Fall_NextNextCH : Capture Event Select                                 */
} MDR_TIMER1_CH4_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH4_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH4_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH4_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH4_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH4_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH4_CNTRL2_CCRRLD_Enum;

/* =======================================  MDR_TIMER1 CH4_CNTRL2 CAP_CCR_Fix [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix                                         */
  MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_Off = 0,    /*!< Off : Inactive                                                            */
  MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_On = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_Enum;

/* =========================================================  CCR11  ========================================================= */
/* =========================================================  CCR21  ========================================================= */
/* =========================================================  CCR31  ========================================================= */
/* =========================================================  CCR41  ========================================================= */
/* ========================================================  DMA_RE1  ======================================================== */
/* ========================================  MDR_TIMER1 DMA_RE1 CNT_ZERO_DMAE [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE                                          */
  MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_Off = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_On  = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_Enum;

/* ========================================  MDR_TIMER1 DMA_RE1 CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE                                           */
  MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE1 ETR_RE_DMAE [2..2]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_ETR_RE_DMAE                                            */
  MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE1 ETR_FE_DMAE [3..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_ETR_FE_DMAE                                            */
  MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_Enum;

/* ==========================================  MDR_TIMER1 DMA_RE1 BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_BRK_DMAE                                               */
  MDR_TIMER1_DMA_RE1_BRK_DMAE_Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_BRK_DMAE_On       = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_BRK_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR1_CAP_CH1_DMAE [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE                                      */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR1_CAP_CH2_DMAE [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE                                      */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR1_CAP_CH3_DMAE [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE                                      */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR1_CAP_CH4_DMAE [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE                                      */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_Enum;

/* ========================================================  DMA_RE2  ======================================================== */
/* ========================================  MDR_TIMER1 DMA_RE2 CNT_ZERO_DMAE [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE                                          */
  MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_Off = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_On  = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_Enum;

/* ========================================  MDR_TIMER1 DMA_RE2 CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE                                           */
  MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE2 ETR_RE_DMAE [2..2]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_ETR_RE_DMAE                                            */
  MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE2 ETR_FE_DMAE [3..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_ETR_FE_DMAE                                            */
  MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_Enum;

/* ==========================================  MDR_TIMER1 DMA_RE2 BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_BRK_DMAE                                               */
  MDR_TIMER1_DMA_RE2_BRK_DMAE_Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_BRK_DMAE_On       = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_BRK_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR1_CAP_CH1_DMAE [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE                                      */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR1_CAP_CH2_DMAE [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE                                      */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR1_CAP_CH3_DMAE [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE                                      */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR1_CAP_CH4_DMAE [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE                                      */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_Enum;

/* ========================================================  DMA_RE3  ======================================================== */
/* ========================================  MDR_TIMER1 DMA_RE3 CNT_ZERO_DMAE [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE                                          */
  MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_Off = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_On  = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_Enum;

/* ========================================  MDR_TIMER1 DMA_RE3 CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE                                           */
  MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE3 ETR_RE_DMAE [2..2]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_ETR_RE_DMAE                                            */
  MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE3 ETR_FE_DMAE [3..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_ETR_FE_DMAE                                            */
  MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_Enum;

/* ==========================================  MDR_TIMER1 DMA_RE3 BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_BRK_DMAE                                               */
  MDR_TIMER1_DMA_RE3_BRK_DMAE_Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_BRK_DMAE_On       = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_BRK_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR1_CAP_CH1_DMAE [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE                                      */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR1_CAP_CH2_DMAE [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE                                      */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR1_CAP_CH3_DMAE [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE                                      */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR1_CAP_CH4_DMAE [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE                                      */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_Enum;

/* ========================================================  DMA_RE4  ======================================================== */
/* ========================================  MDR_TIMER1 DMA_RE4 CNT_ZERO_DMAE [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE                                          */
  MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_Off = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_On  = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_Enum;

/* ========================================  MDR_TIMER1 DMA_RE4 CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE                                           */
  MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE4 ETR_RE_DMAE [2..2]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_ETR_RE_DMAE                                            */
  MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE4 ETR_FE_DMAE [3..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_ETR_FE_DMAE                                            */
  MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_Enum;

/* ==========================================  MDR_TIMER1 DMA_RE4 BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_BRK_DMAE                                               */
  MDR_TIMER1_DMA_RE4_BRK_DMAE_Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_BRK_DMAE_On       = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_BRK_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR1_CAP_CH1_DMAE [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE                                      */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR1_CAP_CH2_DMAE [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE                                      */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR1_CAP_CH3_DMAE [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE                                      */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR1_CAP_CH4_DMAE [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE                                      */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_SSP1                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
/* ================================================  MDR_SSP1 CR0 DSS [0..3]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR0_DSS                                                          */
  MDR_SSP1_CR0_DSS_bits_4              = 3,     /*!< bits_4 : Word of 4 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_5              = 4,     /*!< bits_5 : Word of 5 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_6              = 5,     /*!< bits_6 : Word of 6 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_7              = 6,     /*!< bits_7 : Word of 7 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_8              = 7,     /*!< bits_8 : Word of 8 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_9              = 8,     /*!< bits_9 : Word of 9 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_10             = 9,     /*!< bits_10 : Word of 10 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_11             = 10,    /*!< bits_11 : Word of 11 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_12             = 11,    /*!< bits_12 : Word of 12 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_13             = 12,    /*!< bits_13 : Word of 13 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_14             = 13,    /*!< bits_14 : Word of 14 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_15             = 14,    /*!< bits_15 : Word of 15 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_16             = 15,    /*!< bits_16 : Word of 16 bits                                                 */
} MDR_SSP1_CR0_DSS_Enum;

/* ================================================  MDR_SSP1 CR0 FRF [4..5]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR0_FRF                                                          */
  MDR_SSP1_CR0_FRF_SPI                 = 0,     /*!< SPI : Motorola SPI protocol                                               */
  MDR_SSP1_CR0_FRF_SSI                 = 1,     /*!< SSI : Texas Instruments SSI protocol                                      */
  MDR_SSP1_CR0_FRF_Microwire           = 2,     /*!< Microwire : National Semiconductor Microwire protocol                     */
} MDR_SSP1_CR0_FRF_Enum;

/* ================================================  MDR_SSP1 CR0 SPO [6..6]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR0_SPO                                                          */
  MDR_SSP1_CR0_SPO_Idle_Low            = 0,     /*!< Idle_Low : Idle state is Low                                              */
  MDR_SSP1_CR0_SPO_Idle_High           = 1,     /*!< Idle_High : Idle state is High                                            */
} MDR_SSP1_CR0_SPO_Enum;

/* ================================================  MDR_SSP1 CR0 SPH [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR0_SPH                                                          */
  MDR_SSP1_CR0_SPH_Leading             = 0,     /*!< Leading : Capture data on leading edge                                    */
  MDR_SSP1_CR0_SPH_Trailing            = 1,     /*!< Trailing : Capture data on trailing edge                                  */
} MDR_SSP1_CR0_SPH_Enum;

/* ==========================================================  CR1  ========================================================== */
/* ================================================  MDR_SSP1 CR1 LBM [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR1_LBM                                                          */
  MDR_SSP1_CR1_LBM_Normal              = 0,     /*!< Normal : Normal operation                                                 */
  MDR_SSP1_CR1_LBM_LoopBack            = 1,     /*!< LoopBack : TX send to RX test mode                                        */
} MDR_SSP1_CR1_LBM_Enum;

/* ================================================  MDR_SSP1 CR1 SSE [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR1_SSE                                                          */
  MDR_SSP1_CR1_SSE_Off                 = 0,     /*!< Off : SSP Disable                                                         */
  MDR_SSP1_CR1_SSE_On                  = 1,     /*!< On : SSP Enable                                                           */
} MDR_SSP1_CR1_SSE_Enum;

/* ================================================  MDR_SSP1 CR1 MS [2..2]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_CR1_MS                                                           */
  MDR_SSP1_CR1_MS_Master               = 0,     /*!< Master : Master Mode                                                      */
  MDR_SSP1_CR1_MS_Slave                = 1,     /*!< Slave : Slave Mode                                                        */
} MDR_SSP1_CR1_MS_Enum;

/* ================================================  MDR_SSP1 CR1 SOD [3..3]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR1_SOD                                                          */
  MDR_SSP1_CR1_SOD_SlaveTxEna          = 0,     /*!< SlaveTxEna : Slave mode transmit enable                                   */
  MDR_SSP1_CR1_SOD_SlaveTxDis          = 1,     /*!< SlaveTxDis : Slave mode transmit disable                                  */
} MDR_SSP1_CR1_SOD_Enum;

/* ==========================================================  DR  =========================================================== */
/* ==========================================================  SR  =========================================================== */
/* ================================================  MDR_SSP1 SR TFE [0..0]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_TFE                                                           */
  MDR_SSP1_SR_TFE_TX_NotEmpty          = 0,     /*!< TX_NotEmpty : FIFO_TX is Not Empty                                        */
  MDR_SSP1_SR_TFE_TX_Empty             = 1,     /*!< TX_Empty : FIFO_TX is Empty                                               */
} MDR_SSP1_SR_TFE_Enum;

/* ================================================  MDR_SSP1 SR TNF [1..1]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_TNF                                                           */
  MDR_SSP1_SR_TNF_TX_Full              = 0,     /*!< TX_Full : FIFO_TX is Full                                                 */
  MDR_SSP1_SR_TNF_TX_NotFull           = 1,     /*!< TX_NotFull : FIFO_TX is Not Full                                          */
} MDR_SSP1_SR_TNF_Enum;

/* ================================================  MDR_SSP1 SR RNE [2..2]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_RNE                                                           */
  MDR_SSP1_SR_RNE_RX_NotEmpty          = 0,     /*!< RX_NotEmpty : FIFO_RX is Empty                                            */
  MDR_SSP1_SR_RNE_RX_Empty             = 1,     /*!< RX_Empty : FIFO_RX is Not Empty                                           */
} MDR_SSP1_SR_RNE_Enum;

/* ================================================  MDR_SSP1 SR RFF [3..3]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_RFF                                                           */
  MDR_SSP1_SR_RFF_RX_NotFull           = 0,     /*!< RX_NotFull : FIFO_RX is Not Full                                          */
  MDR_SSP1_SR_RFF_RX_Full              = 1,     /*!< RX_Full : FIFO_RX is Full                                                 */
} MDR_SSP1_SR_RFF_Enum;

/* ================================================  MDR_SSP1 SR BSY [4..4]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_BSY                                                           */
  MDR_SSP1_SR_BSY_Idle                 = 0,     /*!< Idle : FIFO_RX is Not Full                                                */
  MDR_SSP1_SR_BSY_Busy                 = 1,     /*!< Busy : Transfering                                                        */
} MDR_SSP1_SR_BSY_Enum;

/* =========================================================  CPSR  ========================================================== */
/* =========================================================  IMSC  ========================================================== */
/* ==============================================  MDR_SSP1 IMSC RORIM [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_IMSC_RORIM                                                       */
  MDR_SSP1_IMSC_RORIM_NoEvent          = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_IMSC_RORIM_RX_Overrun       = 1,     /*!< RX_Overrun : Flag Active                                                  */
} MDR_SSP1_IMSC_RORIM_Enum;

/* ===============================================  MDR_SSP1 IMSC RTIM [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_IMSC_RTIM                                                        */
  MDR_SSP1_IMSC_RTIM_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_IMSC_RTIM_RX_Timeout        = 1,     /*!< RX_Timeout : Flag Active                                                  */
} MDR_SSP1_IMSC_RTIM_Enum;

/* ===============================================  MDR_SSP1 IMSC RXIM [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_IMSC_RXIM                                                        */
  MDR_SSP1_IMSC_RXIM_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_IMSC_RXIM_RX_HalfFull       = 1,     /*!< RX_HalfFull : Flag Active                                                 */
} MDR_SSP1_IMSC_RXIM_Enum;

/* ===============================================  MDR_SSP1 IMSC TXIM [3..3]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_IMSC_TXIM                                                        */
  MDR_SSP1_IMSC_TXIM_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_IMSC_TXIM_TX_HalfEmpty      = 1,     /*!< TX_HalfEmpty : Flag Active                                                */
} MDR_SSP1_IMSC_TXIM_Enum;

/* ==========================================================  RIS  ========================================================== */
/* ==============================================  MDR_SSP1 RIS RORRIS [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_RIS_RORRIS                                                       */
  MDR_SSP1_RIS_RORRIS_NoEvent          = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_RIS_RORRIS_RX_Overrun       = 1,     /*!< RX_Overrun : Flag Active                                                  */
} MDR_SSP1_RIS_RORRIS_Enum;

/* ===============================================  MDR_SSP1 RIS RTRIS [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_RIS_RTRIS                                                        */
  MDR_SSP1_RIS_RTRIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_RIS_RTRIS_RX_Timeout        = 1,     /*!< RX_Timeout : Flag Active                                                  */
} MDR_SSP1_RIS_RTRIS_Enum;

/* ===============================================  MDR_SSP1 RIS RXRIS [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_RIS_RXRIS                                                        */
  MDR_SSP1_RIS_RXRIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_RIS_RXRIS_RX_HalfFull       = 1,     /*!< RX_HalfFull : Flag Active                                                 */
} MDR_SSP1_RIS_RXRIS_Enum;

/* ===============================================  MDR_SSP1 RIS TXRIS [3..3]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_RIS_TXRIS                                                        */
  MDR_SSP1_RIS_TXRIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_RIS_TXRIS_TX_HalfEmpty      = 1,     /*!< TX_HalfEmpty : Flag Active                                                */
} MDR_SSP1_RIS_TXRIS_Enum;

/* ==========================================================  MIS  ========================================================== */
/* ==============================================  MDR_SSP1 MIS RORMIS [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_MIS_RORMIS                                                       */
  MDR_SSP1_MIS_RORMIS_NoEvent          = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_MIS_RORMIS_RX_Overrun       = 1,     /*!< RX_Overrun : Flag Active                                                  */
} MDR_SSP1_MIS_RORMIS_Enum;

/* ===============================================  MDR_SSP1 MIS RTMIS [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_MIS_RTMIS                                                        */
  MDR_SSP1_MIS_RTMIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_MIS_RTMIS_RX_Timeout        = 1,     /*!< RX_Timeout : Flag Active                                                  */
} MDR_SSP1_MIS_RTMIS_Enum;

/* ===============================================  MDR_SSP1 MIS RXMIS [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_MIS_RXMIS                                                        */
  MDR_SSP1_MIS_RXMIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_MIS_RXMIS_RX_HalfFull       = 1,     /*!< RX_HalfFull : Flag Active                                                 */
} MDR_SSP1_MIS_RXMIS_Enum;

/* ===============================================  MDR_SSP1 MIS TXMIS [3..3]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_MIS_TXMIS                                                        */
  MDR_SSP1_MIS_TXMIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_MIS_TXMIS_TX_HalfEmpty      = 1,     /*!< TX_HalfEmpty : Flag Active                                                */
} MDR_SSP1_MIS_TXMIS_Enum;

/* ==========================================================  ICR  ========================================================== */
/* ===============================================  MDR_SSP1 ICR RORIC [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_ICR_RORIC                                                        */
  MDR_SSP1_ICR_RORIC_Inactive          = 0,     /*!< Inactive : No action                                                      */
  MDR_SSP1_ICR_RORIC_Clear             = 1,     /*!< Clear : Clear Flag                                                        */
} MDR_SSP1_ICR_RORIC_Enum;

/* ===============================================  MDR_SSP1 ICR RTIC [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_ICR_RTIC                                                         */
  MDR_SSP1_ICR_RTIC_Inactive           = 0,     /*!< Inactive : No action                                                      */
  MDR_SSP1_ICR_RTIC_Clear              = 1,     /*!< Clear : Clear Flag                                                        */
} MDR_SSP1_ICR_RTIC_Enum;

/* =========================================================  DMACR  ========================================================= */
/* =============================================  MDR_SSP1 DMACR RXDMAE [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_SSP1_DMACR_RXDMAE                                                     */
  MDR_SSP1_DMACR_RXDMAE_Disable        = 0,     /*!< Disable : Disable DMA                                                     */
  MDR_SSP1_DMACR_RXDMAE_Enable         = 1,     /*!< Enable : Enable DMA                                                       */
} MDR_SSP1_DMACR_RXDMAE_Enum;

/* =============================================  MDR_SSP1 DMACR TXDMAE [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_SSP1_DMACR_TXDMAE                                                     */
  MDR_SSP1_DMACR_TXDMAE_Disable        = 0,     /*!< Disable : Disable DMA                                                     */
  MDR_SSP1_DMACR_TXDMAE_Enable         = 1,     /*!< Enable : Enable DMA                                                       */
} MDR_SSP1_DMACR_TXDMAE_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  RXTX  ========================================================== */
/* ==============================================  MDR_PORTA RXTX Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Pin_                                                       */
  MDR_GPIO__PIN_DATA__Low              = 0,     /*!< Low : LOW Level Voltage                                                   */
  MDR_GPIO__PIN_DATA__High             = 1,     /*!< High : HIGH Level Voltage                                                 */
} MDR_GPIO__PIN_DATA__Enum;

/* ==========================================================  OE  =========================================================== */
/* ===============================================  MDR_PORTA OE Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_OE_Pin_                                                         */
  MDR_GPIO__PIN_DIR__IN                = 0,     /*!< IN : Input pin                                                            */
  MDR_GPIO__PIN_DIR__OUT               = 1,     /*!< OUT : Output pin                                                          */
} MDR_GPIO__PIN_DIR__Enum;

/* =========================================================  FUNC  ========================================================== */
/* ==============================================  MDR_PORTA FUNC Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC_Pin_                                                       */
  MDR_GPIO__PIN_FUNC__Port             = 0,     /*!< Port : RXTX defined pin                                                   */
  MDR_GPIO__PIN_FUNC__Main             = 1,     /*!< Main : Main Periph defined pin                                            */
  MDR_GPIO__PIN_FUNC__Alter            = 2,     /*!< Alter : Alter Periph defined pin                                          */
  MDR_GPIO__PIN_FUNC__Override         = 3,     /*!< Override : Override Periph defined pin                                    */
} MDR_GPIO__PIN_FUNC__Enum;

/* ========================================================  ANALOG  ========================================================= */
/* =============================================  MDR_PORTA ANALOG Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Pin_                                                     */
  MDR_GPIO__PIN_DIGIT__Analog          = 0,     /*!< Analog : Pin works with Analog signal                                     */
  MDR_GPIO__PIN_DIGIT__Digital         = 1,     /*!< Digital : Pin works with Digital signal                                   */
} MDR_GPIO__PIN_DIGIT__Enum;

/* =========================================================  PULL  ========================================================== */
/* ===========================================  MDR_PORTA PULL Down_Pin_0 [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_0                                                 */
  MDR_GPIO__PIN_DOWN__Off              = 0,     /*!< Off : No pull selected                                                    */
  MDR_GPIO__PIN_DOWN__DOWN             = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_GPIO__PIN_DOWN__Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_1 [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_1                                                 */
  MDR_PORTA_PULL_Down_Pin_1_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_1_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_1_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_2 [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_2                                                 */
  MDR_PORTA_PULL_Down_Pin_2_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_2_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_2_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_3 [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_3                                                 */
  MDR_PORTA_PULL_Down_Pin_3_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_3_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_3_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_4 [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_4                                                 */
  MDR_PORTA_PULL_Down_Pin_4_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_4_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_4_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_5 [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_5                                                 */
  MDR_PORTA_PULL_Down_Pin_5_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_5_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_5_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_6 [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_6                                                 */
  MDR_PORTA_PULL_Down_Pin_6_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_6_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_6_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_7 [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_7                                                 */
  MDR_PORTA_PULL_Down_Pin_7_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_7_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_7_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_8 [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_8                                                 */
  MDR_PORTA_PULL_Down_Pin_8_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_8_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_8_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_9 [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_9                                                 */
  MDR_PORTA_PULL_Down_Pin_9_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_9_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_9_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_10 [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_10                                                */
  MDR_PORTA_PULL_Down_Pin_10_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_10_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_10_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_11 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_11                                                */
  MDR_PORTA_PULL_Down_Pin_11_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_11_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_11_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_12 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_12                                                */
  MDR_PORTA_PULL_Down_Pin_12_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_12_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_12_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_13 [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_13                                                */
  MDR_PORTA_PULL_Down_Pin_13_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_13_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_13_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_14 [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_14                                                */
  MDR_PORTA_PULL_Down_Pin_14_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_14_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_14_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_15 [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_15                                                */
  MDR_PORTA_PULL_Down_Pin_15_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_15_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_15_Enum;

/* ============================================  MDR_PORTA PULL UP_Pin_ [16..16]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_UP_Pin_                                                    */
  MDR_PORTA_PULL_UP_Pin__Off           = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_UP_Pin__UP            = 1,     /*!< UP : Pin pulled up to Ucc                                                 */
} MDR_PORTA_PULL_UP_Pin__Enum;

/* ==========================================================  PD  =========================================================== */
/* ===========================================  MDR_PORTA PD Driver_Pin_0 [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_0                                                 */
  MDR_GPIO__PIN_DRIVER__Driver         = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_GPIO__PIN_DRIVER__OpenDrain      = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_GPIO__PIN_DRIVER__Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_1 [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_1                                                 */
  MDR_PORTA_PD_Driver_Pin_1_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_1_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_1_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_2 [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_2                                                 */
  MDR_PORTA_PD_Driver_Pin_2_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_2_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_2_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_3 [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_3                                                 */
  MDR_PORTA_PD_Driver_Pin_3_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_3_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_3_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_4 [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_4                                                 */
  MDR_PORTA_PD_Driver_Pin_4_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_4_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_4_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_5 [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_5                                                 */
  MDR_PORTA_PD_Driver_Pin_5_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_5_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_5_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_6 [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_6                                                 */
  MDR_PORTA_PD_Driver_Pin_6_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_6_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_6_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_7 [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_7                                                 */
  MDR_PORTA_PD_Driver_Pin_7_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_7_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_7_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_8 [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_8                                                 */
  MDR_PORTA_PD_Driver_Pin_8_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_8_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_8_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_9 [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_9                                                 */
  MDR_PORTA_PD_Driver_Pin_9_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_9_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_9_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_10 [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_10                                                */
  MDR_PORTA_PD_Driver_Pin_10_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_10_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_10_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_11 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_11                                                */
  MDR_PORTA_PD_Driver_Pin_11_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_11_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_11_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_12 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_12                                                */
  MDR_PORTA_PD_Driver_Pin_12_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_12_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_12_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_13 [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_13                                                */
  MDR_PORTA_PD_Driver_Pin_13_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_13_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_13_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_14 [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_14                                                */
  MDR_PORTA_PD_Driver_Pin_14_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_14_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_14_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_15 [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_15                                                */
  MDR_PORTA_PD_Driver_Pin_15_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_15_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_15_Enum;

/* ==========================================  MDR_PORTA PD Schmitt_Pin_ [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Schmitt_Pin_                                                 */
  MDR_GPIO__PIN_SHMITT__Off            = 0,     /*!< Off : Schmitt 200mv                                                       */
  MDR_GPIO__PIN_SHMITT__On             = 1,     /*!< On : Schmitt 400mv                                                        */
} MDR_GPIO__PIN_SHMITT__Enum;

/* ==========================================================  PWR  ========================================================== */
/* ===============================================  MDR_PORTA PWR Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_PWR_Pin_                                                        */
  MDR_GPIO__PIN_PWR__Off               = 0,     /*!< Off : Level switch disabled                                               */
  MDR_GPIO__PIN_PWR__Slow              = 1,     /*!< Slow : Levels switch rate about 100ns                                     */
  MDR_GPIO__PIN_PWR__Fast              = 2,     /*!< Fast : Levels switch rate about 20ns                                      */
  MDR_GPIO__PIN_PWR__MaxFast           = 3,     /*!< MaxFast : Levels switch rate about 10ns                                   */
} MDR_GPIO__PIN_PWR__Enum;

/* =========================================================  GFEN  ========================================================== */
/* ==============================================  MDR_PORTA GFEN Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_GFEN_Pin_                                                       */
  MDR_GPIO__PIN_GFEN__Off              = 0,     /*!< Off : Filter Off                                                          */
  MDR_GPIO__PIN_GFEN__On               = 1,     /*!< On : Filter pulses less then 10 ns                                        */
} MDR_GPIO__PIN_GFEN__Enum;

/* =========================================================  SETTX  ========================================================= */
/* ==============================================  MDR_PORTA SETTX Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_SETTX_Pin_                                                      */
  MDR_GPIO__PIN_SETTX__Inactive        = 0,     /*!< Inactive : Do nothing                                                     */
  MDR_GPIO__PIN_SETTX__Selected        = 1,     /*!< Selected : Set High level to pin with reg RXTX                            */
} MDR_GPIO__PIN_SETTX__Enum;

/* =========================================================  CLRTX  ========================================================= */
/* ==============================================  MDR_PORTA CLRTX Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_CLRTX_Pin_                                                      */
  MDR_GPIO__PIN_CLRTX__Inactive        = 0,     /*!< Inactive : Do nothing                                                     */
  MDR_GPIO__PIN_CLRTX__Selected        = 1,     /*!< Selected : Set Low level to pin with reg RXTX                             */
} MDR_GPIO__PIN_CLRTX__Enum;

/* =========================================================  RDTX  ========================================================== */
/* ==============================================  MDR_PORTA RDTX Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_RDTX_Pin_                                                       */
  MDR_GPIO__PIN_RDTX__Low              = 0,     /*!< Low : LOW Level Voltage                                                   */
  MDR_GPIO__PIN_RDTX__High             = 1,     /*!< High : HIGH Level Voltage                                                 */
} MDR_GPIO__PIN_RDTX__Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* MDR1986VE1_H */


/** @} */ /* End of group MDR1986VE1 */

/** @} */ /* End of group Milandr */
