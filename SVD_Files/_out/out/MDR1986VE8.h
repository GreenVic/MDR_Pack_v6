/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     MDR1986VE8.h
 * @brief    CMSIS HeaderFile
 * @version  2.0
 * @date     04. December 2019
 * @note     Generated by SVDConv V3.3.18 on Wednesday, 04.12.2019 13:56:53
 *           from File '../_src/MDR1986VE8.svd',
 *           last modified on Wednesday, 04.12.2019 10:53:02
 */



/** @addtogroup Milandr
  * @{
  */


/** @addtogroup MDR1986VE8
  * @{
  */


#ifndef MDR1986VE8_H
#define MDR1986VE8_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  MDR1986VE8 Specific Interrupt Numbers  ========================================= */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM4_REV                 0x0000U       /*!< CM4 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  1        /*!< MPU present or not                                                        */
#define __FPU_PRESENT                  1        /*!< FPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm4.h"                           /*!< ARM Cortex-M4 processor and core peripherals                              */
#include "system_MDR1986VE8.h"                  /*!< MDR1986VE8 System                                                         */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief MDR_CAN1_BUF [BUF] (TX or RX buffer control)
  */
typedef struct {
  union {
    __IOM uint32_t ID;                          /*!< (@ 0x00000000) packet ID                                                  */
    
    struct {
      __IOM uint32_t EID        : 18;           /*!< [17..0] Extended frame ID                                                 */
      __IOM uint32_t SID        : 11;           /*!< [28..18] Standard frame ID                                                */
    } ID_b;
  } ;
  
  union {
    __IOM uint32_t DLC;                         /*!< (@ 0x00000004) ControlField                                               */
    
    struct {
      __IOM uint32_t DLC        : 4;            /*!< [3..0] Data Length Code                                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t RTR        : 1;            /*!< [8..8] Remote transmission Request                                        */
      __IOM uint32_t R1         : 1;            /*!< [9..9] Reserved bit R1                                                    */
      __IOM uint32_t R0         : 1;            /*!< [10..10] Reserved bit R0                                                  */
      __IOM uint32_t SRR        : 1;            /*!< [11..11] Substitute Remote Request                                        */
      __IOM uint32_t IDE        : 1;            /*!< [12..12] Frame format                                                     */
    } DLC_b;
  } ;
  
  union {
    __IOM uint32_t DATAL;                       /*!< (@ 0x00000008) Byte[4]..Byte[7]                                           */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Byte 0                                                             */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Byte 1                                                            */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Byte 2                                                           */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Byte 3                                                           */
    } DATAL_b;
  } ;
  
  union {
    __IOM uint32_t DATAH;                       /*!< (@ 0x0000000C) [4]..Byte[7]                                               */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Byte 0                                                             */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Byte 1                                                            */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Byte 2                                                           */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Byte 3                                                           */
    } DATAH_b;
  } ;
} MDR_CAN1_BUF_Type;                            /*!< Size = 16 (0x10)                                                          */


/**
  * @brief MDR_CAN1_FILTER [FILTER] (Buffer Receive Filters)
  */
typedef struct {
  __IOM uint32_t  MASK;                         /*!< (@ 0x00000000) MASK for receiver ID                                       */
  __IOM uint32_t  FILTER;                       /*!< (@ 0x00000004) FILTER for receiver ID                                     */
} MDR_CAN1_FILTER_Type;                         /*!< Size = 8 (0x8)                                                            */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLock Control (MDR_RST_CLOCK)
  */

typedef struct {                                /*!< (@ 0x40000000) MDR_RST_CLOCK Structure                                    */
  
  union {
    __IOM uint32_t KEY;                         /*!< (@ 0x00000000) Clock Unlock Register                                      */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Reg value                                                         */
    } KEY_b;
  } ;
  
  union {
    __IOM uint32_t MAX_CLK;                     /*!< (@ 0x00000004) MAX_CLK Select Register                                    */
    
    struct {
      __IOM uint32_t Select     : 4;            /*!< [3..0] Select MAX_CLOCK source                                            */
    } MAX_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CLK;                     /*!< (@ 0x00000008) CPU_CLK Register                                           */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] CPU_CLock div from MAX_CLOCK                                      */
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } CPU_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PER0_CLK;                    /*!< (@ 0x0000000C) Periph0 Clock Enable Register                              */
    
    struct {
      __IM  uint32_t            : 13;
      __IOM uint32_t PortA_CLK_EN : 1;          /*!< [13..13] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortB_CLK_EN : 1;          /*!< [14..14] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortC_CLK_EN : 1;          /*!< [15..15] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortD_CLK_EN : 1;          /*!< [16..16] GPIO Port Clock Enable                                           */
      __IOM uint32_t PortE_CLK_EN : 1;          /*!< [17..17] GPIO Port Clock Enable                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t SPW1_CLK_EN : 1;           /*!< [21..21] SPW1 Clock Enable                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIM1_CLK_EN : 1;           /*!< [23..23] TIM1 Clock Enable                                                */
      __IOM uint32_t TIM2_CLK_EN : 1;           /*!< [24..24] TIM2 Clock Enable                                                */
      __IOM uint32_t TIM3_CLK_EN : 1;           /*!< [25..25] TIM3 Clock Enable                                                */
      __IOM uint32_t TIM4_CLK_EN : 1;           /*!< [26..26] TIM4 Clock Enable                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t CAN1_CLK_EN : 1;           /*!< [29..29] CAN1 Clock Enable                                                */
    } PER0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PER1_CLK;                    /*!< (@ 0x00000010) Periph1 Clock Enable Register                              */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t SSP1_CLK_EN : 1;           /*!< [2..2] SSP1 Clock Enable                                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [6..6] UART1 Clock Enable                                                 */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [7..7] UART2 Clock Enable                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t ARINK_RX_CLK_EN : 1;       /*!< [11..11] ARINK_RX Clock Enable                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t ARINK_TX_CLK_EN : 1;       /*!< [13..13] ARINK_TX Clock Enable                                            */
      __IM  uint32_t            : 5;
      __IOM uint32_t MIL1_CLK_EN : 1;           /*!< [19..19] MIL1 Clock Enable                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t MIL2_CLK_EN : 1;           /*!< [21..21] MIL2 Clock Enable                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t ADC1_CLK_EN : 1;           /*!< [23..23] ADC1 Clock Enable                                                */
      __IOM uint32_t ADC2_CLK_EN : 1;           /*!< [24..24] ADC2 Clock Enable                                                */
      __IOM uint32_t DAC1_CLK_EN : 1;           /*!< [25..25] DAC1 Clock Enable                                                */
      __IOM uint32_t DAC2_CLK_EN : 1;           /*!< [26..26] DAC2 Clock Enable                                                */
    } PER1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK0;                    /*!< (@ 0x00000014) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } CPU_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK1;                    /*!< (@ 0x00000018) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG1  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG3  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } CPU_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CHK2;                    /*!< (@ 0x0000001C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } CPU_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t CPU_STAT;                    /*!< (@ 0x00000020) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
    } CPU_STAT_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CLK;                     /*!< (@ 0x00000024) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } LSI_CLK_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK0;                    /*!< (@ 0x00000028) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } LSI_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK1;                    /*!< (@ 0x0000002C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG1  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG3  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } LSI_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t LSI_CHK2;                    /*!< (@ 0x00000030) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } LSI_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t LSI_STAT;                    /*!< (@ 0x00000034) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } LSI_STAT_b;
  } ;
  
  union {
    __IOM uint32_t HSI_STAT;                    /*!< (@ 0x00000038) HSI Status Register                                        */
    
    struct {
      __IM  uint32_t            : 20;
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } HSI_STAT_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CLK;                     /*!< (@ 0x0000003C) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
    } LSE_CLK_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK0;                    /*!< (@ 0x00000040) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } LSE_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK1;                    /*!< (@ 0x00000044) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG1  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG3  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } LSE_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t LSE_CHK2;                    /*!< (@ 0x00000048) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } LSE_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t LSE_STAT;                    /*!< (@ 0x0000004C) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } LSE_STAT_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CLK;                    /*!< (@ 0x00000050) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t HSE_ON     : 1;            /*!< [27..27] Generator Enable                                                 */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [28..28] ByPass Mode                                                      */
      __IOM uint32_t FILTER_EN  : 1;            /*!< [29..29] Filter Enable                                                    */
    } HSE0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK0;                   /*!< (@ 0x00000054) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } HSE0_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK1;                   /*!< (@ 0x00000058) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG1  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG3  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE0_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_CHK2;                   /*!< (@ 0x0000005C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } HSE0_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t HSE0_STAT;                   /*!< (@ 0x00000060) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } HSE0_STAT_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CLK;                    /*!< (@ 0x00000064) Clock Contorl Register                                     */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t HSE_ON     : 1;            /*!< [27..27] Generator Enable                                                 */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [28..28] ByPass Mode                                                      */
      __IOM uint32_t FILTER_EN  : 1;            /*!< [29..29] Filter Enable                                                    */
    } HSE1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK0;                   /*!< (@ 0x00000068) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } HSE1_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK1;                   /*!< (@ 0x0000006C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG1  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG3  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } HSE1_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_CHK2;                   /*!< (@ 0x00000070) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } HSE1_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t HSE1_STAT;                   /*!< (@ 0x00000074) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } HSE1_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CLK;                    /*!< (@ 0x00000078) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 4;            /*!< [3..0] PLL Freq divider                                                   */
      __IOM uint32_t DV         : 1;            /*!< [4..4] PLL Output Divider                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t PLL_N      : 7;            /*!< [14..8] PLL Freq multiplier                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t PLL_ON     : 1;            /*!< [27..27] PLL Enable                                                       */
      __IOM uint32_t PLL_RLD    : 1;            /*!< [28..28] PLL Reload                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [31..29] Select PLL Input                                                 */
    } PLL0_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK0;                   /*!< (@ 0x0000007C) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } PLL0_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK1;                   /*!< (@ 0x00000080) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG1  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG3  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL0_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_CHK2;                   /*!< (@ 0x00000084) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL0_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL0_STAT;                   /*!< (@ 0x00000088) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL0_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CLK;                    /*!< (@ 0x0000008C) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 4;            /*!< [3..0] PLL Freq divider                                                   */
      __IOM uint32_t DV         : 1;            /*!< [4..4] PLL Output Divider                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t PLL_N      : 7;            /*!< [14..8] PLL Freq multiplier                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t PLL_ON     : 1;            /*!< [27..27] PLL Enable                                                       */
      __IOM uint32_t PLL_RLD    : 1;            /*!< [28..28] PLL Reload                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [31..29] Select PLL Input                                                 */
    } PLL1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK0;                   /*!< (@ 0x00000090) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } PLL1_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK1;                   /*!< (@ 0x00000094) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG1  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG3  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL1_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_CHK2;                   /*!< (@ 0x00000098) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL1_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL1_STAT;                   /*!< (@ 0x0000009C) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL1_STAT_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CLK;                    /*!< (@ 0x000000A0) PLL0 Control                                               */
    
    struct {
      __IOM uint32_t PLL_Q      : 4;            /*!< [3..0] PLL Freq divider                                                   */
      __IOM uint32_t DV         : 1;            /*!< [4..4] PLL Output Divider                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t PLL_N      : 7;            /*!< [14..8] PLL Freq multiplier                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t EN_CHK_EVENT0 : 1;         /*!< [16..16] Go to HSI on lose active clock                                   */
      __IOM uint32_t EN_CHK_EVENT1 : 1;         /*!< [17..17] Go to HSI if active clock is low                                 */
      __IOM uint32_t EN_CHK_EVENT2 : 1;         /*!< [18..18] Go to HSI if active clock is High                                */
      __IOM uint32_t EN_CHK_EVENT3 : 1;         /*!< [19..19] Go to HSI if active clock is Highest                             */
      __IOM uint32_t EN_CHK     : 1;            /*!< [20..20] Clock Checker enable                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG0 : 1;    /*!< [21..21] Clear Min Freq level                                             */
      __IOM uint32_t CLR_CHK_SHIFT_REG1 : 1;    /*!< [22..22] Clear Max Freq level                                             */
      __IOM uint32_t CLR_CHK_EVENT0 : 1;        /*!< [23..23] Clear no freq event                                              */
      __IOM uint32_t CLR_CHK_EVENT1 : 1;        /*!< [24..24] Clear low freq event                                             */
      __IOM uint32_t CLR_CHK_EVENT2 : 1;        /*!< [25..25] Clear high freq event                                            */
      __IOM uint32_t CLR_CHK_EVENT3 : 1;        /*!< [26..26] Clear highest freq event                                         */
      __IOM uint32_t PLL_ON     : 1;            /*!< [27..27] PLL Enable                                                       */
      __IOM uint32_t PLL_RLD    : 1;            /*!< [28..28] PLL Reload                                                       */
      __IOM uint32_t SELECT     : 3;            /*!< [31..29] Select PLL Input                                                 */
    } PLL2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK0;                   /*!< (@ 0x000000A4) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG2  : 16;           /*!< [15..0] FreqRef Prescaller for Slow                                       */
      __IOM uint32_t PRES_REG0  : 16;           /*!< [31..16] FreqRef Prescaller for Fast                                      */
    } PLL2_CHK0_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK1;                   /*!< (@ 0x000000A8) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t PRES_REG1  : 16;           /*!< [15..0] Clock Prescaller for Fast                                         */
      __IOM uint32_t PRES_REG3  : 16;           /*!< [31..16] Clock Prescaller for Slow                                        */
    } PLL2_CHK1_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_CHK2;                   /*!< (@ 0x000000AC) Clock Checker Register                                     */
    
    struct {
      __IOM uint32_t BASE_REG0  : 8;            /*!< [7..0] Min factor for SLOWEST                                             */
      __IOM uint32_t BASE_REG1  : 8;            /*!< [15..8] Min factor for SLOW                                               */
      __IOM uint32_t BASE_REG2  : 8;            /*!< [23..16] Max factor for FAST                                              */
      __IOM uint32_t BASE_REG3  : 8;            /*!< [31..24] Max factor for FASTEST                                           */
    } PLL2_CHK2_b;
  } ;
  
  union {
    __IOM uint32_t PLL2_STAT;                   /*!< (@ 0x000000B0) Clock Status Register                                      */
    
    struct {
      __IOM uint32_t MAX_CLK_SHIFT_REG0 : 8;    /*!< [7..0] Max factor detected for SLOW                                       */
      __IOM uint32_t MAX_CLK_SHIFT_REG1 : 8;    /*!< [15..8] Max factor detected for FAST                                      */
      __IOM uint32_t EVENT0     : 1;            /*!< [16..16] Event SLOWEST                                                    */
      __IOM uint32_t EVENT1     : 1;            /*!< [17..17] Event SLOW                                                       */
      __IOM uint32_t EVENT2     : 1;            /*!< [18..18] Event FAST                                                       */
      __IOM uint32_t EVENT3     : 1;            /*!< [19..19] Event FASTEST                                                    */
      __IOM uint32_t READY      : 1;            /*!< [20..20] Clock Ready                                                      */
    } PLL2_STAT_b;
  } ;
  __IM  uint32_t  RESERVED[25];
  
  union {
    __IOM uint32_t CAN1_CLK;                    /*!< (@ 0x00000118) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } CAN1_CLK_b;
  } ;
  __IM  uint32_t  RESERVED1[5];
  
  union {
    __IOM uint32_t TIM1_CLK;                    /*!< (@ 0x00000130) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM2_CLK;                    /*!< (@ 0x00000134) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM3_CLK;                    /*!< (@ 0x00000138) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM3_CLK_b;
  } ;
  
  union {
    __IOM uint32_t TIM4_CLK;                    /*!< (@ 0x0000013C) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } TIM4_CLK_b;
  } ;
  __IM  uint32_t  RESERVED2[12];
  
  union {
    __IOM uint32_t ETH_CLK;                     /*!< (@ 0x00000170) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } ETH_CLK_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t SPW1_CLK;                    /*!< (@ 0x00000178) Sync Clock Control                                         */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] MAX_Clock Div to PeriphClock                                      */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
    } SPW1_CLK_b;
  } ;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t UART1_CLK;                   /*!< (@ 0x00000188) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } UART1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t UART2_CLK;                   /*!< (@ 0x0000018C) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } UART2_CLK_b;
  } ;
  __IM  uint32_t  RESERVED5[4];
  
  union {
    __IOM uint32_t SSP1_CLK;                    /*!< (@ 0x000001A0) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } SSP1_CLK_b;
  } ;
  __IM  uint32_t  RESERVED6[6];
  
  union {
    __IOM uint32_t ADC1_CLK;                    /*!< (@ 0x000001BC) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } ADC1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t ADC2_CLK;                    /*!< (@ 0x000001C0) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } ADC2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t DAC1_CLK;                    /*!< (@ 0x000001C4) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } DAC1_CLK_b;
  } ;
  
  union {
    __IOM uint32_t DAC2_CLK;                    /*!< (@ 0x000001C8) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } DAC2_CLK_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CLK;                     /*!< (@ 0x000001CC) Async Clock Control                                        */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Div to PeriphClock                                                */
      __IOM uint32_t CLK_EN     : 1;            /*!< [16..16] PeriphClock Enable                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t SELECT     : 4;            /*!< [31..28] PeriphClock Enable                                               */
    } RTC_CLK_b;
  } ;
} MDR_RST_CLOCK_Type;                           /*!< Size = 464 (0x1d0)                                                        */



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup and RTC Control (MDR_BKP)
  */

typedef struct {                                /*!< (@ 0x40001000) MDR_BKP Structure                                          */
  __IOM uint32_t  REG[60];                      /*!< (@ 0x00000000) User backup registers                                      */
  __IOM uint32_t  KEY;                          /*!< (@ 0x000000F0) Unlock BKP and RTC Registers                               */
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t REG_60_TMR0;                 /*!< (@ 0x00000100) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t S_UccReset : 1;            /*!< [8..8] Reset by Ucc                                                       */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [9..9] Reset by RSTn0 signal                                              */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [10..10] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [11..11] Reset from WDT                                                   */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [12..12] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_OVRSTn   : 1;            /*!< [13..13] Reset by Ucc > U_over (5.75V)                                    */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [14..14] Reset by software                                                */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [15..15] Disable JTAG                                                     */
      __IOM uint32_t LimEn_LDO_DUcc0 : 1;       /*!< [16..16] Enable limit for DUcc0 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc1 : 1;       /*!< [17..17] Enable limit for DUcc1 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc2 : 1;       /*!< [18..18] Enable limit for DUcc2 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc3 : 1;       /*!< [19..19] Enable limit for DUcc3 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_BUcc : 1;        /*!< [20..20] Enable limit for DUcc_Bat (~50mA)                                */
      __IOM uint32_t LimEn_LDO_PLL : 1;         /*!< [21..21] Enable limit for DUcc_PLL (~50mA)                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IOM uint32_t PORSTn_En  : 1;            /*!< [28..28] Enable reset by Ucc > U_POR (2.5V)                               */
      __IOM uint32_t OVRSTn_En  : 1;            /*!< [29..29] Enable reset by Ucc > U_over (5.75V)                             */
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR0;                 /*!< (@ 0x00000104) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t LDO0_SRILow : 3;           /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO0_Trim  : 3;            /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO0_En    : 1;            /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO0_RDY   : 1;            /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO1_SRILow : 3;           /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO1_Trim  : 3;            /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO1_En    : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO1_RDY   : 1;            /*!< [15..15] LDO Ready                                                        */
      __IOM uint32_t LDO2_SRILow : 3;           /*!< [18..16] LDO Power adjustment                                             */
      __IOM uint32_t LDO2_Trim  : 3;            /*!< [21..19] LDO voltage tuning                                               */
      __IOM uint32_t LDO2_En    : 1;            /*!< [22..22] LDO Enable                                                       */
      __IOM uint32_t LDO2_RDY   : 1;            /*!< [23..23] LDO Ready                                                        */
      __IOM uint32_t LDO3_SRILow : 3;           /*!< [26..24] LDO Power adjustment                                             */
      __IOM uint32_t LDO3_Trim  : 3;            /*!< [29..27] LDO voltage tuning                                               */
      __IOM uint32_t LDO3_En    : 1;            /*!< [30..30] LDO Enable                                                       */
      __IOM uint32_t LDO3_RDY   : 1;            /*!< [31..31] LDO Ready                                                        */
    } REG_61_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR0;                 /*!< (@ 0x00000108) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t LDO_BUcc_SRILow : 3;       /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO_BUcc_Trim : 3;         /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO_BUcc_En : 1;           /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO_BUcc_RDY : 1;          /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO_PLL_SRILow : 3;        /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO_PLL_Trim : 3;          /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO_PLL_En : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO_PLL_RDY : 1;           /*!< [15..15] LDO Ready                                                        */
      __IM  uint32_t TrimR      : 9;            /*!< [24..16] Do not change                                                    */
      __IM  uint32_t            : 3;
      __IM  uint32_t Trim_Ref   : 3;            /*!< [30..28] Do not change                                                    */
    } REG_62_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR0;                 /*!< (@ 0x0000010C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_On     : 1;            /*!< [0..0] LSE Enable                                                         */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE Bypass                                                         */
      __IOM uint32_t RTC_Sel    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_En     : 1;            /*!< [4..4] RTC Enable                                                         */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [12..5] RTC pass counts                                                   */
      __IOM uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE Ready                                                        */
      __IOM uint32_t LSE_FilterEn : 1;          /*!< [14..14] LSE Filter Enable                                                */
      __IOM uint32_t LSI_On     : 1;            /*!< [15..15] LSI Enable                                                       */
      __IOM uint32_t LSI_Trim   : 5;            /*!< [20..16] LSI Trim freq                                                    */
      __IOM uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI Ready                                                        */
      __IOM uint32_t HSI_On     : 1;            /*!< [22..22] HSI Enable                                                       */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI Ready                                                        */
      __IOM uint32_t HSI_Trim   : 6;            /*!< [29..24] HSI trim freq                                                    */
      __IOM uint32_t STANDBY    : 1;            /*!< [30..30] Go Standby mode                                                  */
      __IOM uint32_t RTC_RST    : 1;            /*!< [31..31] RTC Reset                                                        */
    } REG_63_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t REG_60_TMR1;                 /*!< (@ 0x00000110) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t S_UccReset : 1;            /*!< [8..8] Reset by Ucc                                                       */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [9..9] Reset by RSTn0 signal                                              */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [10..10] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [11..11] Reset from WDT                                                   */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [12..12] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_OVRSTn   : 1;            /*!< [13..13] Reset by Ucc > U_over (5.75V)                                    */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [14..14] Reset by software                                                */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [15..15] Disable JTAG                                                     */
      __IOM uint32_t LimEn_LDO_DUcc0 : 1;       /*!< [16..16] Enable limit for DUcc0 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc1 : 1;       /*!< [17..17] Enable limit for DUcc1 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc2 : 1;       /*!< [18..18] Enable limit for DUcc2 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc3 : 1;       /*!< [19..19] Enable limit for DUcc3 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_BUcc : 1;        /*!< [20..20] Enable limit for DUcc_Bat (~50mA)                                */
      __IOM uint32_t LimEn_LDO_PLL : 1;         /*!< [21..21] Enable limit for DUcc_PLL (~50mA)                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IOM uint32_t PORSTn_En  : 1;            /*!< [28..28] Enable reset by Ucc > U_POR (2.5V)                               */
      __IOM uint32_t OVRSTn_En  : 1;            /*!< [29..29] Enable reset by Ucc > U_over (5.75V)                             */
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR1;                 /*!< (@ 0x00000114) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t LDO0_SRILow : 3;           /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO0_Trim  : 3;            /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO0_En    : 1;            /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO0_RDY   : 1;            /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO1_SRILow : 3;           /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO1_Trim  : 3;            /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO1_En    : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO1_RDY   : 1;            /*!< [15..15] LDO Ready                                                        */
      __IOM uint32_t LDO2_SRILow : 3;           /*!< [18..16] LDO Power adjustment                                             */
      __IOM uint32_t LDO2_Trim  : 3;            /*!< [21..19] LDO voltage tuning                                               */
      __IOM uint32_t LDO2_En    : 1;            /*!< [22..22] LDO Enable                                                       */
      __IOM uint32_t LDO2_RDY   : 1;            /*!< [23..23] LDO Ready                                                        */
      __IOM uint32_t LDO3_SRILow : 3;           /*!< [26..24] LDO Power adjustment                                             */
      __IOM uint32_t LDO3_Trim  : 3;            /*!< [29..27] LDO voltage tuning                                               */
      __IOM uint32_t LDO3_En    : 1;            /*!< [30..30] LDO Enable                                                       */
      __IOM uint32_t LDO3_RDY   : 1;            /*!< [31..31] LDO Ready                                                        */
    } REG_61_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR1;                 /*!< (@ 0x00000118) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t LDO_BUcc_SRILow : 3;       /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO_BUcc_Trim : 3;         /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO_BUcc_En : 1;           /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO_BUcc_RDY : 1;          /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO_PLL_SRILow : 3;        /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO_PLL_Trim : 3;          /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO_PLL_En : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO_PLL_RDY : 1;           /*!< [15..15] LDO Ready                                                        */
      __IM  uint32_t TrimR      : 9;            /*!< [24..16] Do not change                                                    */
      __IM  uint32_t            : 3;
      __IM  uint32_t Trim_Ref   : 3;            /*!< [30..28] Do not change                                                    */
    } REG_62_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR1;                 /*!< (@ 0x0000011C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_On     : 1;            /*!< [0..0] LSE Enable                                                         */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE Bypass                                                         */
      __IOM uint32_t RTC_Sel    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_En     : 1;            /*!< [4..4] RTC Enable                                                         */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [12..5] RTC pass counts                                                   */
      __IOM uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE Ready                                                        */
      __IOM uint32_t LSE_FilterEn : 1;          /*!< [14..14] LSE Filter Enable                                                */
      __IOM uint32_t LSI_On     : 1;            /*!< [15..15] LSI Enable                                                       */
      __IOM uint32_t LSI_Trim   : 5;            /*!< [20..16] LSI Trim freq                                                    */
      __IOM uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI Ready                                                        */
      __IOM uint32_t HSI_On     : 1;            /*!< [22..22] HSI Enable                                                       */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI Ready                                                        */
      __IOM uint32_t HSI_Trim   : 6;            /*!< [29..24] HSI trim freq                                                    */
      __IOM uint32_t STANDBY    : 1;            /*!< [30..30] Go Standby mode                                                  */
      __IOM uint32_t RTC_RST    : 1;            /*!< [31..31] RTC Reset                                                        */
    } REG_63_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t REG_60_TMR2;                 /*!< (@ 0x00000120) REG60 Control register                                     */
    
    struct {
      __IOM uint32_t MODE       : 7;            /*!< [6..0] Boot Mode                                                          */
      __IOM uint32_t FPOR       : 1;            /*!< [7..7] Bootloader completed                                               */
      __IOM uint32_t S_UccReset : 1;            /*!< [8..8] Reset by Ucc                                                       */
      __IOM uint32_t S_RSTn0    : 1;            /*!< [9..9] Reset by RSTn0 signal                                              */
      __IOM uint32_t S_FT_Reset : 1;            /*!< [10..10] Reset from FT_CNTR                                               */
      __IOM uint32_t S_WDT_Reset : 1;           /*!< [11..11] Reset from WDT                                                   */
      __IOM uint32_t S_RSTn1    : 1;            /*!< [12..12] Reset by RSTn1 signal                                            */
      __IOM uint32_t S_OVRSTn   : 1;            /*!< [13..13] Reset by Ucc > U_over (5.75V)                                    */
      __IOM uint32_t S_SYSRSTn  : 1;            /*!< [14..14] Reset by software                                                */
      __IOM uint32_t JTAG_Enable : 1;           /*!< [15..15] Disable JTAG                                                     */
      __IOM uint32_t LimEn_LDO_DUcc0 : 1;       /*!< [16..16] Enable limit for DUcc0 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc1 : 1;       /*!< [17..17] Enable limit for DUcc1 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc2 : 1;       /*!< [18..18] Enable limit for DUcc2 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_DUcc3 : 1;       /*!< [19..19] Enable limit for DUcc3 (~300mA)                                  */
      __IOM uint32_t LimEn_LDO_BUcc : 1;        /*!< [20..20] Enable limit for DUcc_Bat (~50mA)                                */
      __IOM uint32_t LimEn_LDO_PLL : 1;         /*!< [21..21] Enable limit for DUcc_PLL (~50mA)                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERR_REG60x : 1;            /*!< [25..25] Fault in REG_60x                                                 */
      __IOM uint32_t ERR_REG61x_62x : 1;        /*!< [26..26] Fault in REG_61x or REG_62x                                      */
      __IOM uint32_t ERR_REG63x : 1;            /*!< [27..27] Fault in REG_63x                                                 */
      __IOM uint32_t PORSTn_En  : 1;            /*!< [28..28] Enable reset by Ucc > U_POR (2.5V)                               */
      __IOM uint32_t OVRSTn_En  : 1;            /*!< [29..29] Enable reset by Ucc > U_over (5.75V)                             */
      __IOM uint32_t CLR_ERR    : 1;            /*!< [30..30] Clear Errors of REG_60x - 63x                                    */
      __IOM uint32_t ERR_IRQ_EN : 1;            /*!< [31..31] Enable BKP_IRQn on Errors                                        */
    } REG_60_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_61_TMR2;                 /*!< (@ 0x00000124) REG61 Control register                                     */
    
    struct {
      __IOM uint32_t LDO0_SRILow : 3;           /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO0_Trim  : 3;            /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO0_En    : 1;            /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO0_RDY   : 1;            /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO1_SRILow : 3;           /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO1_Trim  : 3;            /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO1_En    : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO1_RDY   : 1;            /*!< [15..15] LDO Ready                                                        */
      __IOM uint32_t LDO2_SRILow : 3;           /*!< [18..16] LDO Power adjustment                                             */
      __IOM uint32_t LDO2_Trim  : 3;            /*!< [21..19] LDO voltage tuning                                               */
      __IOM uint32_t LDO2_En    : 1;            /*!< [22..22] LDO Enable                                                       */
      __IOM uint32_t LDO2_RDY   : 1;            /*!< [23..23] LDO Ready                                                        */
      __IOM uint32_t LDO3_SRILow : 3;           /*!< [26..24] LDO Power adjustment                                             */
      __IOM uint32_t LDO3_Trim  : 3;            /*!< [29..27] LDO voltage tuning                                               */
      __IOM uint32_t LDO3_En    : 1;            /*!< [30..30] LDO Enable                                                       */
      __IOM uint32_t LDO3_RDY   : 1;            /*!< [31..31] LDO Ready                                                        */
    } REG_61_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_62_TMR2;                 /*!< (@ 0x00000128) REG62 Control register                                     */
    
    struct {
      __IOM uint32_t LDO_BUcc_SRILow : 3;       /*!< [2..0] LDO Power adjustment                                               */
      __IOM uint32_t LDO_BUcc_Trim : 3;         /*!< [5..3] LDO voltage tuning                                                 */
      __IOM uint32_t LDO_BUcc_En : 1;           /*!< [6..6] LDO Enable                                                         */
      __IOM uint32_t LDO_BUcc_RDY : 1;          /*!< [7..7] LDO Ready                                                          */
      __IOM uint32_t LDO_PLL_SRILow : 3;        /*!< [10..8] LDO Power adjustment                                              */
      __IOM uint32_t LDO_PLL_Trim : 3;          /*!< [13..11] LDO voltage tuning                                               */
      __IOM uint32_t LDO_PLL_En : 1;            /*!< [14..14] LDO Enable                                                       */
      __IOM uint32_t LDO_PLL_RDY : 1;           /*!< [15..15] LDO Ready                                                        */
      __IM  uint32_t TrimR      : 9;            /*!< [24..16] Do not change                                                    */
      __IM  uint32_t            : 3;
      __IM  uint32_t Trim_Ref   : 3;            /*!< [30..28] Do not change                                                    */
    } REG_62_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t REG_63_TMR2;                 /*!< (@ 0x0000012C) REG63 Control register                                     */
    
    struct {
      __IOM uint32_t LSE_On     : 1;            /*!< [0..0] LSE Enable                                                         */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE Bypass                                                         */
      __IOM uint32_t RTC_Sel    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_En     : 1;            /*!< [4..4] RTC Enable                                                         */
      __IOM uint32_t RTC_Cal    : 8;            /*!< [12..5] RTC pass counts                                                   */
      __IOM uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE Ready                                                        */
      __IOM uint32_t LSE_FilterEn : 1;          /*!< [14..14] LSE Filter Enable                                                */
      __IOM uint32_t LSI_On     : 1;            /*!< [15..15] LSI Enable                                                       */
      __IOM uint32_t LSI_Trim   : 5;            /*!< [20..16] LSI Trim freq                                                    */
      __IOM uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI Ready                                                        */
      __IOM uint32_t HSI_On     : 1;            /*!< [22..22] HSI Enable                                                       */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI Ready                                                        */
      __IOM uint32_t HSI_Trim   : 6;            /*!< [29..24] HSI trim freq                                                    */
      __IOM uint32_t STANDBY    : 1;            /*!< [30..30] Go Standby mode                                                  */
      __IOM uint32_t RTC_RST    : 1;            /*!< [31..31] RTC Reset                                                        */
    } REG_63_TMR2_b;
  } ;
  __IOM uint32_t  RTC_CNT_TMR0;                 /*!< (@ 0x00000130) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR0;                /*!< (@ 0x00000134) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR0;                /*!< (@ 0x00000138) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR0;               /*!< (@ 0x0000013C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR0_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR0;                 /*!< (@ 0x00000140) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR0_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  RTC_CNT_TMR1;                 /*!< (@ 0x00000150) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR1;                /*!< (@ 0x00000154) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR1;                /*!< (@ 0x00000158) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR1;               /*!< (@ 0x0000015C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR1_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR1;                 /*!< (@ 0x00000160) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR1_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  RTC_CNT_TMR2;                 /*!< (@ 0x00000170) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV_TMR2;                /*!< (@ 0x00000174) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL_TMR2;                /*!< (@ 0x00000178) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM_TMR2;               /*!< (@ 0x0000017C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_TMR2_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS_TMR2;                 /*!< (@ 0x00000180) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
      __IOM uint32_t CLR_ERRx   : 1;            /*!< [7..7] Clear Errors                                                       */
      __IOM uint32_t ERR_CNT    : 1;            /*!< [8..8] CNTx mistmatches                                                   */
      __IOM uint32_t ERR_DIV    : 1;            /*!< [9..9] DIVx mistmatches                                                   */
      __IOM uint32_t ERR_CM     : 1;            /*!< [10..10] Clock RTC too high                                               */
      __IOM uint32_t ERR_CC     : 1;            /*!< [11..11] Clock RTC too low                                                */
      __IOM uint32_t ERR_CNTx   : 1;            /*!< [12..12] Self channel CNT fault                                           */
      __IOM uint32_t ERR_DIVx   : 1;            /*!< [13..13] Self channel DIV fault                                           */
      __IOM uint32_t ERR_CMx    : 1;            /*!< [14..14] Self channel clock fault                                         */
      __IOM uint32_t ERR_IE     : 1;            /*!< [15..15] Enable IRQ on RTC faults                                         */
    } RTC_CS_TMR2_b;
  } ;
} MDR_BKP_Type;                                 /*!< Size = 388 (0x184)                                                        */



/* =========================================================================================================================== */
/* ================                                          MDR_OTP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief OTP Memory Control (MDR_OTP)
  */

typedef struct {                                /*!< (@ 0x40006000) MDR_OTP Structure                                          */
  __IOM uint32_t  KEY;                          /*!< (@ 0x00000000) Unlock block register                                      */
  
  union {
    __IOM uint32_t CNTR;                        /*!< (@ 0x00000004) Control register                                           */
    
    struct {
      __IOM uint32_t WAITCYCL   : 4;            /*!< [3..0] OTP Access Delay                                                   */
      __IOM uint32_t REG_ACCESS : 1;            /*!< [4..4] OTP Access Delay                                                   */
      __IOM uint32_t SE         : 1;            /*!< [5..5] OTP Read enable                                                    */
      __IOM uint32_t PE         : 1;            /*!< [6..6] OTP Programming enable                                             */
      __IM  uint32_t            : 9;
      __IOM uint32_t WECC       : 8;            /*!< [23..16] ECC for write with WDATA                                         */
      __IOM uint32_t RECC       : 8;            /*!< [31..24] ECC after read with RDATA                                        */
    } CNTR_b;
  } ;
  __IOM uint32_t  ADR;                          /*!< (@ 0x00000008) Access address                                             */
  __IOM uint32_t  WDATA;                        /*!< (@ 0x0000000C) Data to write                                              */
  __IOM uint32_t  RDATA;                        /*!< (@ 0x00000010) Read out data                                              */
  
  union {
    __IOM uint32_t ECCCS;                       /*!< (@ 0x00000014) Control-Status Register                                    */
    
    struct {
      __IOM uint32_t SECC       : 1;            /*!< [0..0] SingleError flag                                                   */
      __IOM uint32_t DECC       : 1;            /*!< [1..1] DoubleError flag                                                   */
      __IOM uint32_t SECC_IE    : 1;            /*!< [2..2] SingleError IRQ Enable                                             */
      __IOM uint32_t DECC_IE    : 1;            /*!< [3..3] DoubleError IRQ Enable                                             */
      __IOM uint32_t FIX_SECC   : 1;            /*!< [4..4] Log SE to ECCADR, ECCDATA, ECCECC                                  */
      __IOM uint32_t FIX_DECC   : 1;            /*!< [5..5] Log DE to ECCADR, ECCDATA, ECCECC                                  */
      __IOM uint32_t CLR_SECNT  : 1;            /*!< [6..6] Clear SE counter                                                   */
      __IOM uint32_t CLR_DECNT  : 1;            /*!< [7..7] Clear DE counter                                                   */
      __IOM uint32_t ECC_DECNT  : 8;            /*!< [15..8] DE Events Counter                                                 */
      __IOM uint32_t ECC_SECNT  : 16;           /*!< [31..16] SE Events Counter                                                */
    } ECCCS_b;
  } ;
  __IOM uint32_t  ECCADR;                       /*!< (@ 0x00000018) Last error address without correction                      */
  __IOM uint32_t  ECCDATA;                      /*!< (@ 0x0000001C) Last error data without correction                         */
  __IOM uint32_t  ECCECC;                       /*!< (@ 0x00000020) Last error ECC without correction                          */
  
  union {
    __IOM uint32_t TEST_TUNING;                 /*!< (@ 0x00000024) Access Memory Tuning register                              */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t TE         : 2;            /*!< [4..3] Select Test Mode                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t TIME_TUNING : 3;           /*!< [10..8] Timeouts to read bit                                              */
      __IM  uint32_t            : 5;
      __IOM uint32_t REPL_TUNING : 4;           /*!< [19..16] Bit Hi_Level Read Resistance                                     */
    } TEST_TUNING_b;
  } ;
} MDR_OTP_Type;                                 /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief PORTA (MDR_PORTA)
  */

typedef struct {                                /*!< (@ 0x40080000) MDR_PORTA Structure                                        */
  __IOM uint32_t  KEY;                          /*!< (@ 0x00000000) Key lock Register                                          */
  
  union {
    __IOM uint32_t RXTX;                        /*!< (@ 0x00000004) GPIO Pin Data Register                                     */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Pin data value                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Pin data value                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Pin data value                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Pin data value                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Pin data value                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Pin data value                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Pin data value                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Pin data value                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Pin data value                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Pin data value                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Pin data value                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Pin data value                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Pin data value                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Pin data value                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Pin data value                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Pin data value                                                   */
      __IOM uint32_t Pin_16     : 1;            /*!< [16..16] Pin data value                                                   */
      __IOM uint32_t Pin_17     : 1;            /*!< [17..17] Pin data value                                                   */
      __IOM uint32_t Pin_18     : 1;            /*!< [18..18] Pin data value                                                   */
      __IOM uint32_t Pin_19     : 1;            /*!< [19..19] Pin data value                                                   */
      __IOM uint32_t Pin_20     : 1;            /*!< [20..20] Pin data value                                                   */
      __IOM uint32_t Pin_21     : 1;            /*!< [21..21] Pin data value                                                   */
      __IOM uint32_t Pin_22     : 1;            /*!< [22..22] Pin data value                                                   */
      __IOM uint32_t Pin_23     : 1;            /*!< [23..23] Pin data value                                                   */
      __IOM uint32_t Pin_24     : 1;            /*!< [24..24] Pin data value                                                   */
      __IOM uint32_t Pin_25     : 1;            /*!< [25..25] Pin data value                                                   */
      __IOM uint32_t Pin_26     : 1;            /*!< [26..26] Pin data value                                                   */
      __IOM uint32_t Pin_27     : 1;            /*!< [27..27] Pin data value                                                   */
      __IOM uint32_t Pin_28     : 1;            /*!< [28..28] Pin data value                                                   */
      __IOM uint32_t Pin_29     : 1;            /*!< [29..29] Pin data value                                                   */
      __IOM uint32_t Pin_30     : 1;            /*!< [30..30] Pin data value                                                   */
      __IOM uint32_t Pin_31     : 1;            /*!< [31..31] Pin data value                                                   */
    } RXTX_b;
  } ;
  
  union {
    __OM  uint32_t RXTX_Set;                    /*!< (@ 0x00000008) Set RXTX Bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 1 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 1 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 1 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 1 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 1 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 1 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 1 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 1 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 1 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 1 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 1 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 1 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 1 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 1 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 1 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 1 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 1 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 1 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 1 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 1 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 1 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 1 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 1 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 1 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 1 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 1 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 1 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 1 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 1 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 1 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 1 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 1 to pin                                                     */
    } RXTX_Set_b;
  } ;
  
  union {
    __OM  uint32_t RXTX_Clear;                  /*!< (@ 0x0000000C) Clear RXTX Bits                                            */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } RXTX_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t OE;                        /*!< (@ 0x00000010) Pins Output Enable (Port function)                         */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pin Output Enable                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pin Output Enable                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pin Output Enable                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pin Output Enable                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pin Output Enable                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pin Output Enable                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pin Output Enable                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pin Output Enable                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pin Output Enable                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pin Output Enable                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pin Output Enable                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pin Output Enable                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pin Output Enable                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pin Output Enable                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pin Output Enable                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pin Output Enable                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pin Output Enable                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pin Output Enable                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pin Output Enable                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pin Output Enable                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pin Output Enable                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pin Output Enable                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pin Output Enable                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pin Output Enable                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pin Output Enable                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pin Output Enable                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pin Output Enable                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pin Output Enable                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pin Output Enable                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pin Output Enable                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pin Output Enable                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pin Output Enable                                                */
      } OE_b;
    } ;
    
    union {
      __OM  uint32_t OE_Set;                    /*!< (@ 0x00000010) Set OE Pins                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } OE_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t OE_Clear;                    /*!< (@ 0x00000014) Clear OE Pins                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } OE_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t FUNC0;                     /*!< (@ 0x00000018) Pin0 - Pin7 Functions                                      */
      
      struct {
        __IM  uint32_t Func_Pin_0 : 4;          /*!< [3..0] Read SFUNC0 Register                                               */
        __IM  uint32_t Func_Pin_1 : 4;          /*!< [7..4] Read SFUNC0 Register                                               */
        __IM  uint32_t Func_Pin_2 : 4;          /*!< [11..8] Read SFUNC0 Register                                              */
        __IM  uint32_t Func_Pin_3 : 4;          /*!< [15..12] Read SFUNC0 Register                                             */
        __IM  uint32_t Func_Pin_4 : 4;          /*!< [19..16] Read SFUNC0 Register                                             */
        __IM  uint32_t Func_Pin_5 : 4;          /*!< [23..20] Read SFUNC0 Register                                             */
        __IM  uint32_t Func_Pin_6 : 4;          /*!< [27..24] Read SFUNC0 Register                                             */
        __IM  uint32_t Func_Pin_7 : 4;          /*!< [31..28] Read SFUNC0 Register                                             */
      } FUNC0_b;
    } ;
    
    union {
      __OM  uint32_t FUNC0_Set;                 /*!< (@ 0x00000018) Set FUNC0 bits                                             */
      
      struct {
        __OM  uint32_t Func_Pin_0 : 4;          /*!< [3..0] Read SFUNC0 Register                                               */
        __OM  uint32_t Func_Pin_1 : 4;          /*!< [7..4] Read SFUNC0 Register                                               */
        __OM  uint32_t Func_Pin_2 : 4;          /*!< [11..8] Read SFUNC0 Register                                              */
        __OM  uint32_t Func_Pin_3 : 4;          /*!< [15..12] Read SFUNC0 Register                                             */
        __OM  uint32_t Func_Pin_4 : 4;          /*!< [19..16] Read SFUNC0 Register                                             */
        __OM  uint32_t Func_Pin_5 : 4;          /*!< [23..20] Read SFUNC0 Register                                             */
        __OM  uint32_t Func_Pin_6 : 4;          /*!< [27..24] Read SFUNC0 Register                                             */
        __OM  uint32_t Func_Pin_7 : 4;          /*!< [31..28] Read SFUNC0 Register                                             */
      } FUNC0_Set_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t FUNC1;                     /*!< (@ 0x0000001C) Pin8 - Pin15 Functions                                     */
      
      struct {
        __IM  uint32_t Func_Pin_8 : 4;          /*!< [3..0] Read SFUNC1 Register                                               */
        __IM  uint32_t Func_Pin_9 : 4;          /*!< [7..4] Read SFUNC1 Register                                               */
        __IM  uint32_t Func_Pin_10 : 4;         /*!< [11..8] Read SFUNC1 Register                                              */
        __IM  uint32_t Func_Pin_11 : 4;         /*!< [15..12] Read SFUNC1 Register                                             */
        __IM  uint32_t Func_Pin_12 : 4;         /*!< [19..16] Read SFUNC1 Register                                             */
        __IM  uint32_t Func_Pin_13 : 4;         /*!< [23..20] Read SFUNC1 Register                                             */
        __IM  uint32_t Func_Pin_14 : 4;         /*!< [27..24] Read SFUNC1 Register                                             */
        __IM  uint32_t Func_Pin_15 : 4;         /*!< [31..28] Read SFUNC1 Register                                             */
      } FUNC1_b;
    } ;
    
    union {
      __OM  uint32_t FUNC1_Set;                 /*!< (@ 0x0000001C) Set FUNC1 bits                                             */
      
      struct {
        __OM  uint32_t Func_Pin_8 : 4;          /*!< [3..0] Read SFUNC1 Register                                               */
        __OM  uint32_t Func_Pin_9 : 4;          /*!< [7..4] Read SFUNC1 Register                                               */
        __OM  uint32_t Func_Pin_10 : 4;         /*!< [11..8] Read SFUNC1 Register                                              */
        __OM  uint32_t Func_Pin_11 : 4;         /*!< [15..12] Read SFUNC1 Register                                             */
        __OM  uint32_t Func_Pin_12 : 4;         /*!< [19..16] Read SFUNC1 Register                                             */
        __OM  uint32_t Func_Pin_13 : 4;         /*!< [23..20] Read SFUNC1 Register                                             */
        __OM  uint32_t Func_Pin_14 : 4;         /*!< [27..24] Read SFUNC1 Register                                             */
        __OM  uint32_t Func_Pin_15 : 4;         /*!< [31..28] Read SFUNC1 Register                                             */
      } FUNC1_Set_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t FUNC2;                     /*!< (@ 0x00000020) Pin16 - Pin23 Functions                                    */
      
      struct {
        __IM  uint32_t Func_Pin_16 : 4;         /*!< [3..0] Read SFUNC2 Register                                               */
        __IM  uint32_t Func_Pin_17 : 4;         /*!< [7..4] Read SFUNC2 Register                                               */
        __IM  uint32_t Func_Pin_18 : 4;         /*!< [11..8] Read SFUNC2 Register                                              */
        __IM  uint32_t Func_Pin_19 : 4;         /*!< [15..12] Read SFUNC2 Register                                             */
        __IM  uint32_t Func_Pin_20 : 4;         /*!< [19..16] Read SFUNC2 Register                                             */
        __IM  uint32_t Func_Pin_21 : 4;         /*!< [23..20] Read SFUNC2 Register                                             */
        __IM  uint32_t Func_Pin_22 : 4;         /*!< [27..24] Read SFUNC2 Register                                             */
        __IM  uint32_t Func_Pin_23 : 4;         /*!< [31..28] Read SFUNC2 Register                                             */
      } FUNC2_b;
    } ;
    
    union {
      __OM  uint32_t FUNC2_Set;                 /*!< (@ 0x00000020) Set FUNC2 bits                                             */
      
      struct {
        __OM  uint32_t Func_Pin_16 : 4;         /*!< [3..0] Read SFUNC2 Register                                               */
        __OM  uint32_t Func_Pin_17 : 4;         /*!< [7..4] Read SFUNC2 Register                                               */
        __OM  uint32_t Func_Pin_18 : 4;         /*!< [11..8] Read SFUNC2 Register                                              */
        __OM  uint32_t Func_Pin_19 : 4;         /*!< [15..12] Read SFUNC2 Register                                             */
        __OM  uint32_t Func_Pin_20 : 4;         /*!< [19..16] Read SFUNC2 Register                                             */
        __OM  uint32_t Func_Pin_21 : 4;         /*!< [23..20] Read SFUNC2 Register                                             */
        __OM  uint32_t Func_Pin_22 : 4;         /*!< [27..24] Read SFUNC2 Register                                             */
        __OM  uint32_t Func_Pin_23 : 4;         /*!< [31..28] Read SFUNC2 Register                                             */
      } FUNC2_Set_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t FUNC3;                     /*!< (@ 0x00000024) Pin24 - Pin31 Functions                                    */
      
      struct {
        __IM  uint32_t Func_Pin_24 : 4;         /*!< [3..0] Read SFUNC3 Register                                               */
        __IM  uint32_t Func_Pin_25 : 4;         /*!< [7..4] Read SFUNC3 Register                                               */
        __IM  uint32_t Func_Pin_26 : 4;         /*!< [11..8] Read SFUNC3 Register                                              */
        __IM  uint32_t Func_Pin_27 : 4;         /*!< [15..12] Read SFUNC3 Register                                             */
        __IM  uint32_t Func_Pin_28 : 4;         /*!< [19..16] Read SFUNC3 Register                                             */
        __IM  uint32_t Func_Pin_29 : 4;         /*!< [23..20] Read SFUNC3 Register                                             */
        __IM  uint32_t Func_Pin_30 : 4;         /*!< [27..24] Read SFUNC3 Register                                             */
        __IM  uint32_t Func_Pin_31 : 4;         /*!< [31..28] Read SFUNC3 Register                                             */
      } FUNC3_b;
    } ;
    
    union {
      __OM  uint32_t FUNC3_Set;                 /*!< (@ 0x00000024) Set FUNC3 bits                                             */
      
      struct {
        __OM  uint32_t Func_Pin_24 : 4;         /*!< [3..0] Read SFUNC3 Register                                               */
        __OM  uint32_t Func_Pin_25 : 4;         /*!< [7..4] Read SFUNC3 Register                                               */
        __OM  uint32_t Func_Pin_26 : 4;         /*!< [11..8] Read SFUNC3 Register                                              */
        __OM  uint32_t Func_Pin_27 : 4;         /*!< [15..12] Read SFUNC3 Register                                             */
        __OM  uint32_t Func_Pin_28 : 4;         /*!< [19..16] Read SFUNC3 Register                                             */
        __OM  uint32_t Func_Pin_29 : 4;         /*!< [23..20] Read SFUNC3 Register                                             */
        __OM  uint32_t Func_Pin_30 : 4;         /*!< [27..24] Read SFUNC3 Register                                             */
        __OM  uint32_t Func_Pin_31 : 4;         /*!< [31..28] Read SFUNC3 Register                                             */
      } FUNC3_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t FUNC0_Clear;                 /*!< (@ 0x00000028) Clear FUNC0 bits                                           */
    
    struct {
      __OM  uint32_t Func_Pin_0 : 4;            /*!< [3..0] Clear FUNC0 bits                                                   */
      __OM  uint32_t Func_Pin_1 : 4;            /*!< [7..4] Clear FUNC0 bits                                                   */
      __OM  uint32_t Func_Pin_2 : 4;            /*!< [11..8] Clear FUNC0 bits                                                  */
      __OM  uint32_t Func_Pin_3 : 4;            /*!< [15..12] Clear FUNC0 bits                                                 */
      __OM  uint32_t Func_Pin_4 : 4;            /*!< [19..16] Clear FUNC0 bits                                                 */
      __OM  uint32_t Func_Pin_5 : 4;            /*!< [23..20] Clear FUNC0 bits                                                 */
      __OM  uint32_t Func_Pin_6 : 4;            /*!< [27..24] Clear FUNC0 bits                                                 */
      __OM  uint32_t Func_Pin_7 : 4;            /*!< [31..28] Clear FUNC0 bits                                                 */
    } FUNC0_Clear_b;
  } ;
  
  union {
    __OM  uint32_t FUNC1_Clear;                 /*!< (@ 0x0000002C) Clear FUNC1 bits                                           */
    
    struct {
      __OM  uint32_t Func_Pin_8 : 4;            /*!< [3..0] Clear FUNC1 bits                                                   */
      __OM  uint32_t Func_Pin_9 : 4;            /*!< [7..4] Clear FUNC1 bits                                                   */
      __OM  uint32_t Func_Pin_10 : 4;           /*!< [11..8] Clear FUNC1 bits                                                  */
      __OM  uint32_t Func_Pin_11 : 4;           /*!< [15..12] Clear FUNC1 bits                                                 */
      __OM  uint32_t Func_Pin_12 : 4;           /*!< [19..16] Clear FUNC1 bits                                                 */
      __OM  uint32_t Func_Pin_13 : 4;           /*!< [23..20] Clear FUNC1 bits                                                 */
      __OM  uint32_t Func_Pin_14 : 4;           /*!< [27..24] Clear FUNC1 bits                                                 */
      __OM  uint32_t Func_Pin_15 : 4;           /*!< [31..28] Clear FUNC1 bits                                                 */
    } FUNC1_Clear_b;
  } ;
  
  union {
    __OM  uint32_t FUNC2_Clear;                 /*!< (@ 0x00000030) Clear FUNC2 bits                                           */
    
    struct {
      __OM  uint32_t Func_Pin_16 : 4;           /*!< [3..0] Clear FUNC2 bits                                                   */
      __OM  uint32_t Func_Pin_17 : 4;           /*!< [7..4] Clear FUNC2 bits                                                   */
      __OM  uint32_t Func_Pin_18 : 4;           /*!< [11..8] Clear FUNC2 bits                                                  */
      __OM  uint32_t Func_Pin_19 : 4;           /*!< [15..12] Clear FUNC2 bits                                                 */
      __OM  uint32_t Func_Pin_20 : 4;           /*!< [19..16] Clear FUNC2 bits                                                 */
      __OM  uint32_t Func_Pin_21 : 4;           /*!< [23..20] Clear FUNC2 bits                                                 */
      __OM  uint32_t Func_Pin_22 : 4;           /*!< [27..24] Clear FUNC2 bits                                                 */
      __OM  uint32_t Func_Pin_23 : 4;           /*!< [31..28] Clear FUNC2 bits                                                 */
    } FUNC2_Clear_b;
  } ;
  
  union {
    __OM  uint32_t FUNC3_Clear;                 /*!< (@ 0x00000034) Clear FUNC3 bits                                           */
    
    struct {
      __OM  uint32_t Func_Pin_24 : 4;           /*!< [3..0] Clear FUNC3 bits                                                   */
      __OM  uint32_t Func_Pin_25 : 4;           /*!< [7..4] Clear FUNC3 bits                                                   */
      __OM  uint32_t Func_Pin_26 : 4;           /*!< [11..8] Clear FUNC3 bits                                                  */
      __OM  uint32_t Func_Pin_27 : 4;           /*!< [15..12] Clear FUNC3 bits                                                 */
      __OM  uint32_t Func_Pin_28 : 4;           /*!< [19..16] Clear FUNC3 bits                                                 */
      __OM  uint32_t Func_Pin_29 : 4;           /*!< [23..20] Clear FUNC3 bits                                                 */
      __OM  uint32_t Func_Pin_30 : 4;           /*!< [27..24] Clear FUNC3 bits                                                 */
      __OM  uint32_t Func_Pin_31 : 4;           /*!< [31..28] Clear FUNC3 bits                                                 */
    } FUNC3_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t ANALOG;                    /*!< (@ 0x00000038) Pins Digital Mode                                          */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pins Digital Mode                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pins Digital Mode                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pins Digital Mode                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pins Digital Mode                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pins Digital Mode                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pins Digital Mode                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pins Digital Mode                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pins Digital Mode                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pins Digital Mode                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pins Digital Mode                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pins Digital Mode                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pins Digital Mode                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pins Digital Mode                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pins Digital Mode                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pins Digital Mode                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pins Digital Mode                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pins Digital Mode                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pins Digital Mode                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pins Digital Mode                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pins Digital Mode                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pins Digital Mode                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pins Digital Mode                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pins Digital Mode                                                */
      } ANALOG_b;
    } ;
    
    union {
      __OM  uint32_t ANALOG_Set;                /*!< (@ 0x00000038) Set ANALOG bits                                            */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } ANALOG_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t ANALOG_Clear;                /*!< (@ 0x0000003C) Clear ANALOG bits                                          */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } ANALOG_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t PULLUP;                    /*!< (@ 0x00000040) Pins PullUP State                                          */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pins PullUp State                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pins PullUp State                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pins PullUp State                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pins PullUp State                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pins PullUp State                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pins PullUp State                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pins PullUp State                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pins PullUp State                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pins PullUp State                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pins PullUp State                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pins PullUp State                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pins PullUp State                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pins PullUp State                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pins PullUp State                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pins PullUp State                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pins PullUp State                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pins PullUp State                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pins PullUp State                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pins PullUp State                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pins PullUp State                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pins PullUp State                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pins PullUp State                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pins PullUp State                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pins PullUp State                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pins PullUp State                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pins PullUp State                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pins PullUp State                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pins PullUp State                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pins PullUp State                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pins PullUp State                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pins PullUp State                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pins PullUp State                                                */
      } PULLUP_b;
    } ;
    
    union {
      __OM  uint32_t PULLUP_Set;                /*!< (@ 0x00000040) Set PULLUP bits                                            */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } PULLUP_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t PULLUP_Clear;                /*!< (@ 0x00000044) Clear PULLUP bits                                          */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } PULLUP_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t PULLDOWN;                  /*!< (@ 0x00000048) Pins PullDOWN State                                        */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pins PullUp State                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pins PullUp State                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pins PullUp State                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pins PullUp State                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pins PullUp State                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pins PullUp State                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pins PullUp State                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pins PullUp State                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pins PullUp State                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pins PullUp State                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pins PullUp State                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pins PullUp State                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pins PullUp State                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pins PullUp State                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pins PullUp State                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pins PullUp State                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pins PullUp State                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pins PullUp State                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pins PullUp State                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pins PullUp State                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pins PullUp State                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pins PullUp State                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pins PullUp State                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pins PullUp State                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pins PullUp State                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pins PullUp State                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pins PullUp State                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pins PullUp State                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pins PullUp State                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pins PullUp State                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pins PullUp State                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pins PullUp State                                                */
      } PULLDOWN_b;
    } ;
    
    union {
      __OM  uint32_t PULLDOWN_Set;              /*!< (@ 0x00000048) Set PULLDOWN bits                                          */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } PULLDOWN_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t PULLDOWN_Clear;              /*!< (@ 0x0000004C) Clear PULLDOWN bits                                        */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } PULLDOWN_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t PD;                        /*!< (@ 0x00000050) Pins Driver Mode                                           */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Pins Driver Mode                                                   */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Pins Driver Mode                                                 */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Pins Driver Mode                                                 */
      } PD_b;
    } ;
    
    union {
      __OM  uint32_t PD_Set;                    /*!< (@ 0x00000050) Set PD bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } PD_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t PD_Clear;                    /*!< (@ 0x00000054) Clear PD bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } PD_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t PWR0;                      /*!< (@ 0x00000058) Power of Pins 0 - 15                                       */
      
      struct {
        __IM  uint32_t Pin_0    : 2;            /*!< [1..0] Read SPWR Register                                                 */
        __IM  uint32_t Pin_1    : 2;            /*!< [3..2] Read SPWR Register                                                 */
        __IM  uint32_t Pin_2    : 2;            /*!< [5..4] Read SPWR Register                                                 */
        __IM  uint32_t Pin_3    : 2;            /*!< [7..6] Read SPWR Register                                                 */
        __IM  uint32_t Pin_4    : 2;            /*!< [9..8] Read SPWR Register                                                 */
        __IM  uint32_t Pin_5    : 2;            /*!< [11..10] Read SPWR Register                                               */
        __IM  uint32_t Pin_6    : 2;            /*!< [13..12] Read SPWR Register                                               */
        __IM  uint32_t Pin_7    : 2;            /*!< [15..14] Read SPWR Register                                               */
        __IM  uint32_t Pin_8    : 2;            /*!< [17..16] Read SPWR Register                                               */
        __IM  uint32_t Pin_9    : 2;            /*!< [19..18] Read SPWR Register                                               */
        __IM  uint32_t Pin_10   : 2;            /*!< [21..20] Read SPWR Register                                               */
        __IM  uint32_t Pin_11   : 2;            /*!< [23..22] Read SPWR Register                                               */
        __IM  uint32_t Pin_12   : 2;            /*!< [25..24] Read SPWR Register                                               */
        __IM  uint32_t Pin_13   : 2;            /*!< [27..26] Read SPWR Register                                               */
        __IM  uint32_t Pin_14   : 2;            /*!< [29..28] Read SPWR Register                                               */
        __IM  uint32_t Pin_15   : 2;            /*!< [31..30] Read SPWR Register                                               */
      } PWR0_b;
    } ;
    
    union {
      __OM  uint32_t PWR0_Set;                  /*!< (@ 0x00000058) Set PWR0 bits                                              */
      
      struct {
        __OM  uint32_t Pin_0    : 2;            /*!< [1..0] Read SPWR Register                                                 */
        __OM  uint32_t Pin_1    : 2;            /*!< [3..2] Read SPWR Register                                                 */
        __OM  uint32_t Pin_2    : 2;            /*!< [5..4] Read SPWR Register                                                 */
        __OM  uint32_t Pin_3    : 2;            /*!< [7..6] Read SPWR Register                                                 */
        __OM  uint32_t Pin_4    : 2;            /*!< [9..8] Read SPWR Register                                                 */
        __OM  uint32_t Pin_5    : 2;            /*!< [11..10] Read SPWR Register                                               */
        __OM  uint32_t Pin_6    : 2;            /*!< [13..12] Read SPWR Register                                               */
        __OM  uint32_t Pin_7    : 2;            /*!< [15..14] Read SPWR Register                                               */
        __OM  uint32_t Pin_8    : 2;            /*!< [17..16] Read SPWR Register                                               */
        __OM  uint32_t Pin_9    : 2;            /*!< [19..18] Read SPWR Register                                               */
        __OM  uint32_t Pin_10   : 2;            /*!< [21..20] Read SPWR Register                                               */
        __OM  uint32_t Pin_11   : 2;            /*!< [23..22] Read SPWR Register                                               */
        __OM  uint32_t Pin_12   : 2;            /*!< [25..24] Read SPWR Register                                               */
        __OM  uint32_t Pin_13   : 2;            /*!< [27..26] Read SPWR Register                                               */
        __OM  uint32_t Pin_14   : 2;            /*!< [29..28] Read SPWR Register                                               */
        __OM  uint32_t Pin_15   : 2;            /*!< [31..30] Read SPWR Register                                               */
      } PWR0_Set_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t PWR1;                      /*!< (@ 0x0000005C) Power of Pins 0 - 15                                       */
      
      struct {
        __IM  uint32_t Pin_16   : 2;            /*!< [1..0] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_17   : 2;            /*!< [3..2] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_18   : 2;            /*!< [5..4] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_19   : 2;            /*!< [7..6] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_20   : 2;            /*!< [9..8] Read SPWR1 Register                                                */
        __IM  uint32_t Pin_21   : 2;            /*!< [11..10] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_22   : 2;            /*!< [13..12] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_23   : 2;            /*!< [15..14] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_24   : 2;            /*!< [17..16] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_25   : 2;            /*!< [19..18] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_26   : 2;            /*!< [21..20] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_27   : 2;            /*!< [23..22] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_28   : 2;            /*!< [25..24] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_29   : 2;            /*!< [27..26] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_30   : 2;            /*!< [29..28] Read SPWR1 Register                                              */
        __IM  uint32_t Pin_31   : 2;            /*!< [31..30] Read SPWR1 Register                                              */
      } PWR1_b;
    } ;
    
    union {
      __OM  uint32_t PWR1_Set;                  /*!< (@ 0x0000005C) Set PWR1 bits                                              */
      
      struct {
        __OM  uint32_t Pin_16   : 2;            /*!< [1..0] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_17   : 2;            /*!< [3..2] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_18   : 2;            /*!< [5..4] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_19   : 2;            /*!< [7..6] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_20   : 2;            /*!< [9..8] Read SPWR1 Register                                                */
        __OM  uint32_t Pin_21   : 2;            /*!< [11..10] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_22   : 2;            /*!< [13..12] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_23   : 2;            /*!< [15..14] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_24   : 2;            /*!< [17..16] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_25   : 2;            /*!< [19..18] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_26   : 2;            /*!< [21..20] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_27   : 2;            /*!< [23..22] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_28   : 2;            /*!< [25..24] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_29   : 2;            /*!< [27..26] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_30   : 2;            /*!< [29..28] Read SPWR1 Register                                              */
        __OM  uint32_t Pin_31   : 2;            /*!< [31..30] Read SPWR1 Register                                              */
      } PWR1_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t PWR0_Clear;                  /*!< (@ 0x00000060) Clear PWR0 bits                                            */
    
    struct {
      __OM  uint32_t Pin_0      : 2;            /*!< [1..0] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_1      : 2;            /*!< [3..2] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_2      : 2;            /*!< [5..4] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_3      : 2;            /*!< [7..6] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_4      : 2;            /*!< [9..8] Clear PWR0 bits                                                    */
      __OM  uint32_t Pin_5      : 2;            /*!< [11..10] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_6      : 2;            /*!< [13..12] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_7      : 2;            /*!< [15..14] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_8      : 2;            /*!< [17..16] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_9      : 2;            /*!< [19..18] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_10     : 2;            /*!< [21..20] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_11     : 2;            /*!< [23..22] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_12     : 2;            /*!< [25..24] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_13     : 2;            /*!< [27..26] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_14     : 2;            /*!< [29..28] Clear PWR0 bits                                                  */
      __OM  uint32_t Pin_15     : 2;            /*!< [31..30] Clear PWR0 bits                                                  */
    } PWR0_Clear_b;
  } ;
  
  union {
    __OM  uint32_t PWR1_Clear;                  /*!< (@ 0x00000064) Clear PWR1 bits                                            */
    
    struct {
      __OM  uint32_t Pin_16     : 2;            /*!< [1..0] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_17     : 2;            /*!< [3..2] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_18     : 2;            /*!< [5..4] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_19     : 2;            /*!< [7..6] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_20     : 2;            /*!< [9..8] Clear PWR1 bits                                                    */
      __OM  uint32_t Pin_21     : 2;            /*!< [11..10] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_22     : 2;            /*!< [13..12] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_23     : 2;            /*!< [15..14] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_24     : 2;            /*!< [17..16] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_25     : 2;            /*!< [19..18] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_26     : 2;            /*!< [21..20] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_27     : 2;            /*!< [23..22] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_28     : 2;            /*!< [25..24] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_29     : 2;            /*!< [27..26] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_30     : 2;            /*!< [29..28] Clear PWR1 bits                                                  */
      __OM  uint32_t Pin_31     : 2;            /*!< [31..30] Clear PWR1 bits                                                  */
    } PWR1_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t CL;                        /*!< (@ 0x00000068) Pins Current Control enabled                               */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Read register SCL                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Read register SCL                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Read register SCL                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Read register SCL                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Read register SCL                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Read register SCL                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Read register SCL                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Read register SCL                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Read register SCL                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Read register SCL                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Read register SCL                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Read register SCL                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Read register SCL                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Read register SCL                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Read register SCL                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Read register SCL                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Read register SCL                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Read register SCL                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Read register SCL                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Read register SCL                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Read register SCL                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Read register SCL                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Read register SCL                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Read register SCL                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Read register SCL                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Read register SCL                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Read register SCL                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Read register SCL                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Read register SCL                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Read register SCL                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Read register SCL                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Read register SCL                                                */
      } CL_b;
    } ;
    
    union {
      __OM  uint32_t CL_Set;                    /*!< (@ 0x00000068) Set CL bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } CL_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t CL_Clear;                    /*!< (@ 0x0000006C) Clear CL bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } CL_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t IE;                        /*!< (@ 0x00000070) Pin Level IRQ Enable                                       */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Read register SIE                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Read register SIE                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Read register SIE                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Read register SIE                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Read register SIE                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Read register SIE                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Read register SIE                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Read register SIE                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Read register SIE                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Read register SIE                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Read register SIE                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Read register SIE                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Read register SIE                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Read register SIE                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Read register SIE                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Read register SIE                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Read register SIE                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Read register SIE                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Read register SIE                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Read register SIE                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Read register SIE                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Read register SIE                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Read register SIE                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Read register SIE                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Read register SIE                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Read register SIE                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Read register SIE                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Read register SIE                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Read register SIE                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Read register SIE                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Read register SIE                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Read register SIE                                                */
      } IE_b;
    } ;
    
    union {
      __OM  uint32_t IE_Set;                    /*!< (@ 0x00000070) Set IE bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } IE_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t IE_Clear;                    /*!< (@ 0x00000074) Clear IE bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } IE_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t IT;                        /*!< (@ 0x00000078) IRQ Level Select                                           */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Read register SIT                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Read register SIT                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Read register SIT                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Read register SIT                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Read register SIT                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Read register SIT                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Read register SIT                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Read register SIT                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Read register SIT                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Read register SIT                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Read register SIT                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Read register SIT                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Read register SIT                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Read register SIT                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Read register SIT                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Read register SIT                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Read register SIT                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Read register SIT                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Read register SIT                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Read register SIT                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Read register SIT                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Read register SIT                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Read register SIT                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Read register SIT                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Read register SIT                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Read register SIT                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Read register SIT                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Read register SIT                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Read register SIT                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Read register SIT                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Read register SIT                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Read register SIT                                                */
      } IT_b;
    } ;
    
    union {
      __OM  uint32_t IT_Set;                    /*!< (@ 0x00000078) Set IT bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } IT_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t IT_Clear;                    /*!< (@ 0x0000007C) Clear IT bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } IT_Clear_b;
  } ;
  
  union {
    union {
      __IM  uint32_t IR;                        /*!< (@ 0x00000080) Read SIR Register                                          */
      
      struct {
        __IM  uint32_t Pin_0    : 1;            /*!< [0..0] Read register SIR                                                  */
        __IM  uint32_t Pin_1    : 1;            /*!< [1..1] Read register SIR                                                  */
        __IM  uint32_t Pin_2    : 1;            /*!< [2..2] Read register SIR                                                  */
        __IM  uint32_t Pin_3    : 1;            /*!< [3..3] Read register SIR                                                  */
        __IM  uint32_t Pin_4    : 1;            /*!< [4..4] Read register SIR                                                  */
        __IM  uint32_t Pin_5    : 1;            /*!< [5..5] Read register SIR                                                  */
        __IM  uint32_t Pin_6    : 1;            /*!< [6..6] Read register SIR                                                  */
        __IM  uint32_t Pin_7    : 1;            /*!< [7..7] Read register SIR                                                  */
        __IM  uint32_t Pin_8    : 1;            /*!< [8..8] Read register SIR                                                  */
        __IM  uint32_t Pin_9    : 1;            /*!< [9..9] Read register SIR                                                  */
        __IM  uint32_t Pin_10   : 1;            /*!< [10..10] Read register SIR                                                */
        __IM  uint32_t Pin_11   : 1;            /*!< [11..11] Read register SIR                                                */
        __IM  uint32_t Pin_12   : 1;            /*!< [12..12] Read register SIR                                                */
        __IM  uint32_t Pin_13   : 1;            /*!< [13..13] Read register SIR                                                */
        __IM  uint32_t Pin_14   : 1;            /*!< [14..14] Read register SIR                                                */
        __IM  uint32_t Pin_15   : 1;            /*!< [15..15] Read register SIR                                                */
        __IM  uint32_t Pin_16   : 1;            /*!< [16..16] Read register SIR                                                */
        __IM  uint32_t Pin_17   : 1;            /*!< [17..17] Read register SIR                                                */
        __IM  uint32_t Pin_18   : 1;            /*!< [18..18] Read register SIR                                                */
        __IM  uint32_t Pin_19   : 1;            /*!< [19..19] Read register SIR                                                */
        __IM  uint32_t Pin_20   : 1;            /*!< [20..20] Read register SIR                                                */
        __IM  uint32_t Pin_21   : 1;            /*!< [21..21] Read register SIR                                                */
        __IM  uint32_t Pin_22   : 1;            /*!< [22..22] Read register SIR                                                */
        __IM  uint32_t Pin_23   : 1;            /*!< [23..23] Read register SIR                                                */
        __IM  uint32_t Pin_24   : 1;            /*!< [24..24] Read register SIR                                                */
        __IM  uint32_t Pin_25   : 1;            /*!< [25..25] Read register SIR                                                */
        __IM  uint32_t Pin_26   : 1;            /*!< [26..26] Read register SIR                                                */
        __IM  uint32_t Pin_27   : 1;            /*!< [27..27] Read register SIR                                                */
        __IM  uint32_t Pin_28   : 1;            /*!< [28..28] Read register SIR                                                */
        __IM  uint32_t Pin_29   : 1;            /*!< [29..29] Read register SIR                                                */
        __IM  uint32_t Pin_30   : 1;            /*!< [30..30] Read register SIR                                                */
        __IM  uint32_t Pin_31   : 1;            /*!< [31..31] Read register SIR                                                */
      } IR_b;
    } ;
    
    union {
      __OM  uint32_t IR_Set;                    /*!< (@ 0x00000080) Set IR bits                                                */
      
      struct {
        __OM  uint32_t Pin_0    : 1;            /*!< [0..0] Set 1 to pin                                                       */
        __OM  uint32_t Pin_1    : 1;            /*!< [1..1] Set 1 to pin                                                       */
        __OM  uint32_t Pin_2    : 1;            /*!< [2..2] Set 1 to pin                                                       */
        __OM  uint32_t Pin_3    : 1;            /*!< [3..3] Set 1 to pin                                                       */
        __OM  uint32_t Pin_4    : 1;            /*!< [4..4] Set 1 to pin                                                       */
        __OM  uint32_t Pin_5    : 1;            /*!< [5..5] Set 1 to pin                                                       */
        __OM  uint32_t Pin_6    : 1;            /*!< [6..6] Set 1 to pin                                                       */
        __OM  uint32_t Pin_7    : 1;            /*!< [7..7] Set 1 to pin                                                       */
        __OM  uint32_t Pin_8    : 1;            /*!< [8..8] Set 1 to pin                                                       */
        __OM  uint32_t Pin_9    : 1;            /*!< [9..9] Set 1 to pin                                                       */
        __OM  uint32_t Pin_10   : 1;            /*!< [10..10] Set 1 to pin                                                     */
        __OM  uint32_t Pin_11   : 1;            /*!< [11..11] Set 1 to pin                                                     */
        __OM  uint32_t Pin_12   : 1;            /*!< [12..12] Set 1 to pin                                                     */
        __OM  uint32_t Pin_13   : 1;            /*!< [13..13] Set 1 to pin                                                     */
        __OM  uint32_t Pin_14   : 1;            /*!< [14..14] Set 1 to pin                                                     */
        __OM  uint32_t Pin_15   : 1;            /*!< [15..15] Set 1 to pin                                                     */
        __OM  uint32_t Pin_16   : 1;            /*!< [16..16] Set 1 to pin                                                     */
        __OM  uint32_t Pin_17   : 1;            /*!< [17..17] Set 1 to pin                                                     */
        __OM  uint32_t Pin_18   : 1;            /*!< [18..18] Set 1 to pin                                                     */
        __OM  uint32_t Pin_19   : 1;            /*!< [19..19] Set 1 to pin                                                     */
        __OM  uint32_t Pin_20   : 1;            /*!< [20..20] Set 1 to pin                                                     */
        __OM  uint32_t Pin_21   : 1;            /*!< [21..21] Set 1 to pin                                                     */
        __OM  uint32_t Pin_22   : 1;            /*!< [22..22] Set 1 to pin                                                     */
        __OM  uint32_t Pin_23   : 1;            /*!< [23..23] Set 1 to pin                                                     */
        __OM  uint32_t Pin_24   : 1;            /*!< [24..24] Set 1 to pin                                                     */
        __OM  uint32_t Pin_25   : 1;            /*!< [25..25] Set 1 to pin                                                     */
        __OM  uint32_t Pin_26   : 1;            /*!< [26..26] Set 1 to pin                                                     */
        __OM  uint32_t Pin_27   : 1;            /*!< [27..27] Set 1 to pin                                                     */
        __OM  uint32_t Pin_28   : 1;            /*!< [28..28] Set 1 to pin                                                     */
        __OM  uint32_t Pin_29   : 1;            /*!< [29..29] Set 1 to pin                                                     */
        __OM  uint32_t Pin_30   : 1;            /*!< [30..30] Set 1 to pin                                                     */
        __OM  uint32_t Pin_31   : 1;            /*!< [31..31] Set 1 to pin                                                     */
      } IR_Set_b;
    } ;
  };
  
  union {
    __OM  uint32_t IR_Clear;                    /*!< (@ 0x00000084) Clear IR bits                                              */
    
    struct {
      __OM  uint32_t Pin_0      : 1;            /*!< [0..0] Set 0 to pin                                                       */
      __OM  uint32_t Pin_1      : 1;            /*!< [1..1] Set 0 to pin                                                       */
      __OM  uint32_t Pin_2      : 1;            /*!< [2..2] Set 0 to pin                                                       */
      __OM  uint32_t Pin_3      : 1;            /*!< [3..3] Set 0 to pin                                                       */
      __OM  uint32_t Pin_4      : 1;            /*!< [4..4] Set 0 to pin                                                       */
      __OM  uint32_t Pin_5      : 1;            /*!< [5..5] Set 0 to pin                                                       */
      __OM  uint32_t Pin_6      : 1;            /*!< [6..6] Set 0 to pin                                                       */
      __OM  uint32_t Pin_7      : 1;            /*!< [7..7] Set 0 to pin                                                       */
      __OM  uint32_t Pin_8      : 1;            /*!< [8..8] Set 0 to pin                                                       */
      __OM  uint32_t Pin_9      : 1;            /*!< [9..9] Set 0 to pin                                                       */
      __OM  uint32_t Pin_10     : 1;            /*!< [10..10] Set 0 to pin                                                     */
      __OM  uint32_t Pin_11     : 1;            /*!< [11..11] Set 0 to pin                                                     */
      __OM  uint32_t Pin_12     : 1;            /*!< [12..12] Set 0 to pin                                                     */
      __OM  uint32_t Pin_13     : 1;            /*!< [13..13] Set 0 to pin                                                     */
      __OM  uint32_t Pin_14     : 1;            /*!< [14..14] Set 0 to pin                                                     */
      __OM  uint32_t Pin_15     : 1;            /*!< [15..15] Set 0 to pin                                                     */
      __OM  uint32_t Pin_16     : 1;            /*!< [16..16] Set 0 to pin                                                     */
      __OM  uint32_t Pin_17     : 1;            /*!< [17..17] Set 0 to pin                                                     */
      __OM  uint32_t Pin_18     : 1;            /*!< [18..18] Set 0 to pin                                                     */
      __OM  uint32_t Pin_19     : 1;            /*!< [19..19] Set 0 to pin                                                     */
      __OM  uint32_t Pin_20     : 1;            /*!< [20..20] Set 0 to pin                                                     */
      __OM  uint32_t Pin_21     : 1;            /*!< [21..21] Set 0 to pin                                                     */
      __OM  uint32_t Pin_22     : 1;            /*!< [22..22] Set 0 to pin                                                     */
      __OM  uint32_t Pin_23     : 1;            /*!< [23..23] Set 0 to pin                                                     */
      __OM  uint32_t Pin_24     : 1;            /*!< [24..24] Set 0 to pin                                                     */
      __OM  uint32_t Pin_25     : 1;            /*!< [25..25] Set 0 to pin                                                     */
      __OM  uint32_t Pin_26     : 1;            /*!< [26..26] Set 0 to pin                                                     */
      __OM  uint32_t Pin_27     : 1;            /*!< [27..27] Set 0 to pin                                                     */
      __OM  uint32_t Pin_28     : 1;            /*!< [28..28] Set 0 to pin                                                     */
      __OM  uint32_t Pin_29     : 1;            /*!< [29..29] Set 0 to pin                                                     */
      __OM  uint32_t Pin_30     : 1;            /*!< [30..30] Set 0 to pin                                                     */
      __OM  uint32_t Pin_31     : 1;            /*!< [31..31] Set 0 to pin                                                     */
    } IR_Clear_b;
  } ;
  
  union {
    __IOM uint32_t HCUR;                        /*!< (@ 0x00000088) Pins' Overcurrent Status                                   */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Register HCUR                                                      */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Register HCUR                                                      */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Register HCUR                                                      */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Register HCUR                                                      */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Register HCUR                                                      */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Register HCUR                                                      */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Register HCUR                                                      */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Register HCUR                                                      */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Register HCUR                                                      */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Register HCUR                                                      */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Register HCUR                                                    */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Register HCUR                                                    */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Register HCUR                                                    */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Register HCUR                                                    */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Register HCUR                                                    */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Register HCUR                                                    */
      __IOM uint32_t Pin_16     : 1;            /*!< [16..16] Register HCUR                                                    */
      __IOM uint32_t Pin_17     : 1;            /*!< [17..17] Register HCUR                                                    */
      __IOM uint32_t Pin_18     : 1;            /*!< [18..18] Register HCUR                                                    */
      __IOM uint32_t Pin_19     : 1;            /*!< [19..19] Register HCUR                                                    */
      __IOM uint32_t Pin_20     : 1;            /*!< [20..20] Register HCUR                                                    */
      __IOM uint32_t Pin_21     : 1;            /*!< [21..21] Register HCUR                                                    */
      __IOM uint32_t Pin_22     : 1;            /*!< [22..22] Register HCUR                                                    */
      __IOM uint32_t Pin_23     : 1;            /*!< [23..23] Register HCUR                                                    */
      __IOM uint32_t Pin_24     : 1;            /*!< [24..24] Register HCUR                                                    */
      __IOM uint32_t Pin_25     : 1;            /*!< [25..25] Register HCUR                                                    */
      __IOM uint32_t Pin_26     : 1;            /*!< [26..26] Register HCUR                                                    */
      __IOM uint32_t Pin_27     : 1;            /*!< [27..27] Register HCUR                                                    */
      __IOM uint32_t Pin_28     : 1;            /*!< [28..28] Register HCUR                                                    */
      __IOM uint32_t Pin_29     : 1;            /*!< [29..29] Register HCUR                                                    */
      __IOM uint32_t Pin_30     : 1;            /*!< [30..30] Register HCUR                                                    */
      __IOM uint32_t Pin_31     : 1;            /*!< [31..31] Register HCUR                                                    */
    } HCUR_b;
  } ;
} MDR_PORTA_Type;                               /*!< Size = 140 (0x8c)                                                         */



/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief TIMER Control (MDR_TIMER1)
  */

typedef struct {                                /*!< (@ 0x4008A000) MDR_TIMER1 Structure                                       */
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000000) Counter register                                           */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Counter Value                                                     */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t PSG;                         /*!< (@ 0x00000004) Presample Gain                                             */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Inc CNT by PSG clocks of TIM_CLOCK                                */
    } PSG_b;
  } ;
  
  union {
    __IOM uint32_t ARR;                         /*!< (@ 0x00000008) Counter Period                                             */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Counter Value                                                     */
    } ARR_b;
  } ;
  
  union {
    __IOM uint32_t CNTRL;                       /*!< (@ 0x0000000C) Timer Control                                              */
    
    struct {
      __IOM uint32_t CNT_EN     : 1;            /*!< [0..0] Timer Enable                                                       */
      __IOM uint32_t ARRB_EN    : 1;            /*!< [1..1] ARR update mode                                                    */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [2..2] Can write to CNT, ARR, PSG                                         */
      __IOM uint32_t DIR        : 1;            /*!< [3..3] Count Direction                                                    */
      __IOM uint32_t FDTS       : 2;            /*!< [5..4] Select Data Sampling frequency                                     */
      __IOM uint32_t CNT_MODE   : 2;            /*!< [7..6] Counting mode                                                      */
      __IOM uint32_t EVENT_SEL  : 4;            /*!< [11..8] Events for counting                                               */
    } CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CCR1;                        /*!< (@ 0x00000010) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR1_b;
  } ;
  
  union {
    __IOM uint32_t CCR2;                        /*!< (@ 0x00000014) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR2_b;
  } ;
  
  union {
    __IOM uint32_t CCR3;                        /*!< (@ 0x00000018) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR3_b;
  } ;
  
  union {
    __IOM uint32_t CCR4;                        /*!< (@ 0x0000001C) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR4_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL;                   /*!< (@ 0x00000020) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH1_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL;                   /*!< (@ 0x00000024) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH2_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL;                   /*!< (@ 0x00000028) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH3_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL;                   /*!< (@ 0x0000002C) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH4_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL1;                  /*!< (@ 0x00000030) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH1_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL1;                  /*!< (@ 0x00000034) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH2_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL1;                  /*!< (@ 0x00000038) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH3_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL1;                  /*!< (@ 0x0000003C) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH4_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH1_DTG;                     /*!< (@ 0x00000040) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH1_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH2_DTG;                     /*!< (@ 0x00000044) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH2_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH3_DTG;                     /*!< (@ 0x00000048) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH3_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH4_DTG;                     /*!< (@ 0x0000004C) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH4_DTG_b;
  } ;
  
  union {
    __IOM uint32_t BRKETR_CNTRL;                /*!< (@ 0x00000050) Break and External Count Control                           */
    
    struct {
      __IOM uint32_t BRK_INV    : 1;            /*!< [0..0] Invert Break Signal                                                */
      __IOM uint32_t ETR_INV    : 1;            /*!< [1..1] Invert External Count Signal                                       */
      __IOM uint32_t ETR_PSC    : 2;            /*!< [3..2] External Count Div                                                 */
      __IOM uint32_t ETR_Filter : 4;            /*!< [7..4] External Count Signal Filter                                       */
    } BRKETR_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000054) Status Register                                            */
    
    struct {
      __IOM uint32_t CNT_ZERO   : 1;            /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR    : 1;            /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE     : 1;            /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE     : 1;            /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK        : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1 : 1;           /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2 : 1;           /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3 : 1;           /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4 : 1;           /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1 : 1;           /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2 : 1;           /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3 : 1;           /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4 : 1;           /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1 : 1;          /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2 : 1;          /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3 : 1;          /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4 : 1;          /*!< [16..16] Captured to CCR1                                                 */
    } STATUS_b;
  } ;
  
  union {
    __IOM uint32_t IE;                          /*!< (@ 0x00000058) IRQ Enable                                                 */
    
    struct {
      __IOM uint32_t CNT_ZERO_IE : 1;           /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_IE : 1;            /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_IE  : 1;            /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_IE  : 1;            /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_IE     : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_IE : 1;        /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_IE : 1;        /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_IE : 1;        /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_IE : 1;        /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_IE : 1;        /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_IE : 1;        /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_IE : 1;        /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_IE : 1;        /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_IE : 1;       /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_IE : 1;       /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_IE : 1;       /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_IE : 1;       /*!< [16..16] Captured to CCR1                                                 */
    } IE_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE;                      /*!< (@ 0x0000005C) DMA Request Enable for TIMx_DMA_REQ                        */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL2;                  /*!< (@ 0x00000060) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
      __IOM uint32_t CAP_CCR_Fix : 1;           /*!< [4..4] CAP update CCRs fix                                                */
    } CH1_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL2;                  /*!< (@ 0x00000064) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
      __IOM uint32_t CAP_CCR_Fix : 1;           /*!< [4..4] CAP update CCRs fix                                                */
    } CH2_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL2;                  /*!< (@ 0x00000068) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
      __IOM uint32_t CAP_CCR_Fix : 1;           /*!< [4..4] CAP update CCRs fix                                                */
    } CH3_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL2;                  /*!< (@ 0x0000006C) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
      __IOM uint32_t CAP_CCR_Fix : 1;           /*!< [4..4] CAP update CCRs fix                                                */
    } CH4_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CCR11;                       /*!< (@ 0x00000070) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR11_b;
  } ;
  
  union {
    __IOM uint32_t CCR21;                       /*!< (@ 0x00000074) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR21_b;
  } ;
  
  union {
    __IOM uint32_t CCR31;                       /*!< (@ 0x00000078) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR31_b;
  } ;
  
  union {
    __IOM uint32_t CCR41;                       /*!< (@ 0x0000007C) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Captured or PWM Value                                             */
    } CCR41_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE1;                     /*!< (@ 0x00000080) DMA Request Enable for TIMx_DMA_REQ1                       */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE1_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE2;                     /*!< (@ 0x00000084) DMA Request Enable for TIMx_DMA_REQ2                       */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE2_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE3;                     /*!< (@ 0x00000088) DMA Request Enable for TIMx_DMA_REQ3                       */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE3_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE4;                     /*!< (@ 0x0000008C) DMA Request Enable for TIMx_DMA_REQ4                       */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE4_b;
  } ;
} MDR_TIMER1_Type;                              /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                         MDR_CAN1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief CAN Control (MDR_CAN1)
  */

typedef struct {                                /*!< (@ 0x40090000) MDR_CAN1 Structure                                         */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) Control register                                           */
    
    struct {
      __IOM uint32_t CAN_EN     : 1;            /*!< [0..0] Enable CAN                                                         */
      __IOM uint32_t ROM        : 1;            /*!< [1..1] Read Only Mode                                                     */
      __IOM uint32_t STM        : 1;            /*!< [2..2] Self Test Mode                                                     */
      __IOM uint32_t SAP        : 1;            /*!< [3..3] Send Ack for Own Packets                                           */
      __IOM uint32_t ROP        : 1;            /*!< [4..4] Receive Own Packets                                                */
    } CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000004) STATUS register                                            */
    
    struct {
      __IOM uint32_t RX_Ready   : 1;            /*!< [0..0] Some Buff Data received                                            */
      __IOM uint32_t TX_Ready   : 1;            /*!< [1..1] Some buff has data to send                                         */
      __IOM uint32_t ERR_Over   : 1;            /*!< [2..2] TEC o REC exceeds ERROR_MAX                                        */
      __IOM uint32_t ERR_Bit    : 1;            /*!< [3..3] Error while TX some bit                                            */
      __IOM uint32_t ERR_StuffBit : 1;          /*!< [4..4] Error in Staff Bit                                                 */
      __IOM uint32_t ERR_CRC    : 1;            /*!< [5..5] CRC Error                                                          */
      __IOM uint32_t ERR_FRAME  : 1;            /*!< [6..6] Wrong Frame structure                                              */
      __IOM uint32_t ERR_ACK    : 1;            /*!< [7..7] Acknowledge error                                                  */
      __IOM uint32_t ID_Lower   : 1;            /*!< [8..8] Arbitrage failure                                                  */
      __IOM uint32_t ERR_Status : 2;            /*!< [10..9] Eror status                                                       */
      __IOM uint32_t RX_ERR_CNT8 : 1;           /*!< [11..11] REC > 255, BusOff                                                */
      __IOM uint32_t TX_ERR_CNT8 : 1;           /*!< [12..12] TEC > 255, BusOff                                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t RX_ERR_CNT : 8;            /*!< [23..16] Rx Error Counter                                                 */
      __IOM uint32_t TX_ERR_CNT : 8;            /*!< [31..24] Tx Error Counter                                                 */
    } STATUS_b;
  } ;
  
  union {
    __IOM uint32_t BITTMNG;                     /*!< (@ 0x00000008) Bit Timing register                                        */
    
    struct {
      __IOM uint32_t BRP        : 16;           /*!< [15..0] Boud Rate Prescaler to TQ                                         */
      __IOM uint32_t PSEG       : 3;            /*!< [18..16] Propagation time in TQ                                           */
      __IOM uint32_t SEG1       : 3;            /*!< [21..19] Delay before line sampling                                       */
      __IOM uint32_t SEG2       : 3;            /*!< [24..22] Delay after line sampling                                        */
      __IOM uint32_t SJW        : 2;            /*!< [26..25] Sync phase deviation                                             */
      __IOM uint32_t SB         : 1;            /*!< [27..27] Line Sampling Count                                              */
    } BITTMNG_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t INT_EN;                      /*!< (@ 0x00000010) IRQ Enable                                                 */
    
    struct {
      __IOM uint32_t GLB_IntEn  : 1;            /*!< [0..0] IRQ Enable Global                                                  */
      __IOM uint32_t RX_IntEn   : 1;            /*!< [1..1] Enable IRQ on RX                                                   */
      __IOM uint32_t TX_IntEn   : 1;            /*!< [2..2] Enable IRQ on TX                                                   */
      __IOM uint32_t ERR_IntEn  : 1;            /*!< [3..3] Enable IRQ on Error                                                */
      __IOM uint32_t ErrOV_IntEn : 1;           /*!< [4..4] Enable IRQ of Error Over                                           */
    } INT_EN_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t OVER;                        /*!< (@ 0x0000001C) ERROR_MAX level                                            */
    
    struct {
      __IOM uint32_t ERROR_MAX  : 8;            /*!< [7..0] Level of TEC or REC errors to OverIRQ                              */
    } OVER_b;
  } ;
  
  union {
    __IOM uint32_t RX_ID;                       /*!< (@ 0x00000020) Last Received ID                                           */
    
    struct {
      __IOM uint32_t EID        : 18;           /*!< [17..0] Extended frame ID                                                 */
      __IOM uint32_t SID        : 11;           /*!< [28..18] Standard frame ID                                                */
    } RX_ID_b;
  } ;
  
  union {
    __IOM uint32_t RX_DLC;                      /*!< (@ 0x00000024) Last Received ControlField                                 */
    
    struct {
      __IOM uint32_t DLC        : 4;            /*!< [3..0] Data Length Code                                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t RTR        : 1;            /*!< [8..8] Remote transmission Request                                        */
      __IOM uint32_t R1         : 1;            /*!< [9..9] Reserved bit R1                                                    */
      __IOM uint32_t R0         : 1;            /*!< [10..10] Reserved bit R0                                                  */
      __IOM uint32_t SRR        : 1;            /*!< [11..11] Substitute Remote Request                                        */
      __IOM uint32_t IDE        : 1;            /*!< [12..12] Frame format                                                     */
    } RX_DLC_b;
  } ;
  
  union {
    __IOM uint32_t RX_DATAL;                    /*!< (@ 0x00000028) Received Byte[0]..Byte[3]                                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Byte 0                                                             */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Byte 1                                                            */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Byte 2                                                           */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Byte 3                                                           */
    } RX_DATAL_b;
  } ;
  
  union {
    __IOM uint32_t RX_DATAH;                    /*!< (@ 0x0000002C) Received Byte[4]..Byte[7]                                  */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Byte 0                                                             */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Byte 1                                                            */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Byte 2                                                           */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Byte 3                                                           */
    } RX_DATAH_b;
  } ;
  
  union {
    __IOM uint32_t TX_ID;                       /*!< (@ 0x00000030) Last Sent ID                                               */
    
    struct {
      __IOM uint32_t EID        : 18;           /*!< [17..0] Extended frame ID                                                 */
      __IOM uint32_t SID        : 11;           /*!< [28..18] Standard frame ID                                                */
    } TX_ID_b;
  } ;
  
  union {
    __IOM uint32_t TX_DLC;                      /*!< (@ 0x00000034) Last Sent ControlField                                     */
    
    struct {
      __IOM uint32_t DLC        : 4;            /*!< [3..0] Data Length Code                                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t RTR        : 1;            /*!< [8..8] Remote transmission Request                                        */
      __IOM uint32_t R1         : 1;            /*!< [9..9] Reserved bit R1                                                    */
      __IOM uint32_t R0         : 1;            /*!< [10..10] Reserved bit R0                                                  */
      __IOM uint32_t SRR        : 1;            /*!< [11..11] Substitute Remote Request                                        */
      __IOM uint32_t IDE        : 1;            /*!< [12..12] Frame format                                                     */
    } TX_DLC_b;
  } ;
  
  union {
    __IOM uint32_t TX_DATAL;                    /*!< (@ 0x00000038) Last Sent Byte[4]..Byte[7]                                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Byte 0                                                             */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Byte 1                                                            */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Byte 2                                                           */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Byte 3                                                           */
    } TX_DATAL_b;
  } ;
  
  union {
    __IOM uint32_t TX_DATAH;                    /*!< (@ 0x0000003C) Last Sent Byte[4]..Byte[7]                                 */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Byte 0                                                             */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Byte 1                                                            */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Byte 2                                                           */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Byte 3                                                           */
    } TX_DATAH_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON0;                    /*!< (@ 0x00000040) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON0_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON1;                    /*!< (@ 0x00000044) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON1_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON2;                    /*!< (@ 0x00000048) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON2_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON3;                    /*!< (@ 0x0000004C) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON3_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON4;                    /*!< (@ 0x00000050) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON4_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON5;                    /*!< (@ 0x00000054) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON5_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON6;                    /*!< (@ 0x00000058) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON6_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON7;                    /*!< (@ 0x0000005C) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON7_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON8;                    /*!< (@ 0x00000060) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON8_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON9;                    /*!< (@ 0x00000064) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON9_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON10;                   /*!< (@ 0x00000068) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON10_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON11;                   /*!< (@ 0x0000006C) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON11_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON12;                   /*!< (@ 0x00000070) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON12_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON13;                   /*!< (@ 0x00000074) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON13_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON14;                   /*!< (@ 0x00000078) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON14_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON15;                   /*!< (@ 0x0000007C) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON15_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON16;                   /*!< (@ 0x00000080) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON16_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON17;                   /*!< (@ 0x00000084) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON17_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON18;                   /*!< (@ 0x00000088) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON18_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON19;                   /*!< (@ 0x0000008C) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON19_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON20;                   /*!< (@ 0x00000090) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON20_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON21;                   /*!< (@ 0x00000094) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON21_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON22;                   /*!< (@ 0x00000098) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON22_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON23;                   /*!< (@ 0x0000009C) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON23_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON24;                   /*!< (@ 0x000000A0) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON24_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON25;                   /*!< (@ 0x000000A4) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON25_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON26;                   /*!< (@ 0x000000A8) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON26_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON27;                   /*!< (@ 0x000000AC) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON27_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON28;                   /*!< (@ 0x000000B0) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON28_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON29;                   /*!< (@ 0x000000B4) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON29_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON30;                   /*!< (@ 0x000000B8) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON30_b;
  } ;
  
  union {
    __IOM uint32_t BUF_CON31;                   /*!< (@ 0x000000BC) Buffer control                                             */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Buffer enable                                                      */
      __IOM uint32_t RX_TX      : 1;            /*!< [1..1] Buffer Direction                                                   */
      __IOM uint32_t OVER_EN    : 1;            /*!< [2..2] Overwrite enable                                                   */
      __IOM uint32_t RTR_EN     : 1;            /*!< [3..3] RTR ACK enable                                                     */
      __IOM uint32_t PRIOR_OFF  : 1;            /*!< [4..4] Send priority Off                                                  */
      __IOM uint32_t TX_REQ     : 1;            /*!< [5..5] Request to send                                                    */
      __IOM uint32_t RX_FULL    : 1;            /*!< [6..6] Has new data                                                       */
      __IOM uint32_t OVER_WR    : 1;            /*!< [7..7] Data overwritten                                                   */
    } BUF_CON31_b;
  } ;
  
  union {
    __IOM uint32_t INT_RX;                      /*!< (@ 0x000000C0) Enable Buffs' RX IRQ                                       */
    
    struct {
      __IOM uint32_t RX_IRQ_En0 : 1;            /*!< [0..0] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En1 : 1;            /*!< [1..1] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En2 : 1;            /*!< [2..2] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En3 : 1;            /*!< [3..3] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En4 : 1;            /*!< [4..4] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En5 : 1;            /*!< [5..5] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En6 : 1;            /*!< [6..6] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En7 : 1;            /*!< [7..7] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En8 : 1;            /*!< [8..8] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En9 : 1;            /*!< [9..9] Enable Buffs' RX IRQ                                               */
      __IOM uint32_t RX_IRQ_En10 : 1;           /*!< [10..10] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En11 : 1;           /*!< [11..11] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En12 : 1;           /*!< [12..12] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En13 : 1;           /*!< [13..13] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En14 : 1;           /*!< [14..14] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En15 : 1;           /*!< [15..15] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En16 : 1;           /*!< [16..16] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En17 : 1;           /*!< [17..17] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En18 : 1;           /*!< [18..18] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En19 : 1;           /*!< [19..19] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En20 : 1;           /*!< [20..20] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En21 : 1;           /*!< [21..21] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En22 : 1;           /*!< [22..22] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En23 : 1;           /*!< [23..23] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En24 : 1;           /*!< [24..24] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En25 : 1;           /*!< [25..25] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En26 : 1;           /*!< [26..26] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En27 : 1;           /*!< [27..27] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En28 : 1;           /*!< [28..28] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En29 : 1;           /*!< [29..29] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En30 : 1;           /*!< [30..30] Enable Buffs' RX IRQ                                             */
      __IOM uint32_t RX_IRQ_En31 : 1;           /*!< [31..31] Enable Buffs' RX IRQ                                             */
    } INT_RX_b;
  } ;
  
  union {
    __IOM uint32_t RX;                          /*!< (@ 0x000000C4) Buffs' RX_FIFO Full                                        */
    
    struct {
      __IOM uint32_t RX_FULL0   : 1;            /*!< [0..0] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL1   : 1;            /*!< [1..1] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL2   : 1;            /*!< [2..2] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL3   : 1;            /*!< [3..3] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL4   : 1;            /*!< [4..4] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL5   : 1;            /*!< [5..5] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL6   : 1;            /*!< [6..6] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL7   : 1;            /*!< [7..7] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL8   : 1;            /*!< [8..8] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL9   : 1;            /*!< [9..9] Buffs' RX_FIFO Full                                                */
      __IOM uint32_t RX_FULL10  : 1;            /*!< [10..10] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL11  : 1;            /*!< [11..11] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL12  : 1;            /*!< [12..12] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL13  : 1;            /*!< [13..13] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL14  : 1;            /*!< [14..14] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL15  : 1;            /*!< [15..15] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL16  : 1;            /*!< [16..16] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL17  : 1;            /*!< [17..17] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL18  : 1;            /*!< [18..18] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL19  : 1;            /*!< [19..19] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL20  : 1;            /*!< [20..20] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL21  : 1;            /*!< [21..21] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL22  : 1;            /*!< [22..22] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL23  : 1;            /*!< [23..23] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL24  : 1;            /*!< [24..24] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL25  : 1;            /*!< [25..25] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL26  : 1;            /*!< [26..26] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL27  : 1;            /*!< [27..27] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL28  : 1;            /*!< [28..28] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL29  : 1;            /*!< [29..29] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL30  : 1;            /*!< [30..30] Buffs' RX_FIFO Full                                              */
      __IOM uint32_t RX_FULL31  : 1;            /*!< [31..31] Buffs' RX_FIFO Full                                              */
    } RX_b;
  } ;
  
  union {
    __IOM uint32_t INT_TX;                      /*!< (@ 0x000000C8) Enable Buffs' TX IRQ                                       */
    
    struct {
      __IOM uint32_t TX_IRQ_En0 : 1;            /*!< [0..0] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En1 : 1;            /*!< [1..1] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En2 : 1;            /*!< [2..2] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En3 : 1;            /*!< [3..3] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En4 : 1;            /*!< [4..4] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En5 : 1;            /*!< [5..5] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En6 : 1;            /*!< [6..6] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En7 : 1;            /*!< [7..7] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En8 : 1;            /*!< [8..8] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En9 : 1;            /*!< [9..9] Enable Buffs' TX IRQ                                               */
      __IOM uint32_t TX_IRQ_En10 : 1;           /*!< [10..10] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En11 : 1;           /*!< [11..11] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En12 : 1;           /*!< [12..12] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En13 : 1;           /*!< [13..13] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En14 : 1;           /*!< [14..14] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En15 : 1;           /*!< [15..15] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En16 : 1;           /*!< [16..16] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En17 : 1;           /*!< [17..17] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En18 : 1;           /*!< [18..18] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En19 : 1;           /*!< [19..19] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En20 : 1;           /*!< [20..20] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En21 : 1;           /*!< [21..21] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En22 : 1;           /*!< [22..22] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En23 : 1;           /*!< [23..23] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En24 : 1;           /*!< [24..24] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En25 : 1;           /*!< [25..25] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En26 : 1;           /*!< [26..26] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En27 : 1;           /*!< [27..27] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En28 : 1;           /*!< [28..28] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En29 : 1;           /*!< [29..29] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En30 : 1;           /*!< [30..30] Enable Buffs' TX IRQ                                             */
      __IOM uint32_t TX_IRQ_En31 : 1;           /*!< [31..31] Enable Buffs' TX IRQ                                             */
    } INT_TX_b;
  } ;
  
  union {
    __IOM uint32_t TX;                          /*!< (@ 0x000000CC) TX_nReq buffs' state                                       */
    
    struct {
      __IOM uint32_t TX_nReq0   : 1;            /*!< [0..0] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq1   : 1;            /*!< [1..1] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq2   : 1;            /*!< [2..2] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq3   : 1;            /*!< [3..3] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq4   : 1;            /*!< [4..4] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq5   : 1;            /*!< [5..5] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq6   : 1;            /*!< [6..6] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq7   : 1;            /*!< [7..7] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq8   : 1;            /*!< [8..8] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq9   : 1;            /*!< [9..9] TX_nReq buffs' state                                               */
      __IOM uint32_t TX_nReq10  : 1;            /*!< [10..10] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq11  : 1;            /*!< [11..11] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq12  : 1;            /*!< [12..12] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq13  : 1;            /*!< [13..13] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq14  : 1;            /*!< [14..14] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq15  : 1;            /*!< [15..15] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq16  : 1;            /*!< [16..16] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq17  : 1;            /*!< [17..17] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq18  : 1;            /*!< [18..18] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq19  : 1;            /*!< [19..19] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq20  : 1;            /*!< [20..20] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq21  : 1;            /*!< [21..21] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq22  : 1;            /*!< [22..22] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq23  : 1;            /*!< [23..23] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq24  : 1;            /*!< [24..24] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq25  : 1;            /*!< [25..25] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq26  : 1;            /*!< [26..26] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq27  : 1;            /*!< [27..27] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq28  : 1;            /*!< [28..28] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq29  : 1;            /*!< [29..29] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq30  : 1;            /*!< [30..30] TX_nReq buffs' state                                             */
      __IOM uint32_t TX_nReq31  : 1;            /*!< [31..31] TX_nReq buffs' state                                             */
    } TX_b;
  } ;
  __IM  uint32_t  RESERVED2[76];
  __IOM MDR_CAN1_BUF_Type BUF0;                 /*!< (@ 0x00000200) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF1;                 /*!< (@ 0x00000210) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF2;                 /*!< (@ 0x00000220) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF3;                 /*!< (@ 0x00000230) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF4;                 /*!< (@ 0x00000240) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF5;                 /*!< (@ 0x00000250) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF6;                 /*!< (@ 0x00000260) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF7;                 /*!< (@ 0x00000270) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF8;                 /*!< (@ 0x00000280) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF9;                 /*!< (@ 0x00000290) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF10;                /*!< (@ 0x000002A0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF11;                /*!< (@ 0x000002B0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF12;                /*!< (@ 0x000002C0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF13;                /*!< (@ 0x000002D0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF14;                /*!< (@ 0x000002E0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF15;                /*!< (@ 0x000002F0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF16;                /*!< (@ 0x00000300) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF17;                /*!< (@ 0x00000310) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF18;                /*!< (@ 0x00000320) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF19;                /*!< (@ 0x00000330) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF20;                /*!< (@ 0x00000340) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF21;                /*!< (@ 0x00000350) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF22;                /*!< (@ 0x00000360) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF23;                /*!< (@ 0x00000370) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF24;                /*!< (@ 0x00000380) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF25;                /*!< (@ 0x00000390) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF26;                /*!< (@ 0x000003A0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF27;                /*!< (@ 0x000003B0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF28;                /*!< (@ 0x000003C0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF29;                /*!< (@ 0x000003D0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF30;                /*!< (@ 0x000003E0) TX or RX buffer control                                    */
  __IOM MDR_CAN1_BUF_Type BUF31;                /*!< (@ 0x000003F0) TX or RX buffer control                                    */
  __IM  uint32_t  RESERVED3[64];
  __IOM MDR_CAN1_FILTER_Type FILTER0;           /*!< (@ 0x00000500) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER1;           /*!< (@ 0x00000508) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER2;           /*!< (@ 0x00000510) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER3;           /*!< (@ 0x00000518) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER4;           /*!< (@ 0x00000520) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER5;           /*!< (@ 0x00000528) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER6;           /*!< (@ 0x00000530) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER7;           /*!< (@ 0x00000538) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER8;           /*!< (@ 0x00000540) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER9;           /*!< (@ 0x00000548) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER10;          /*!< (@ 0x00000550) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER11;          /*!< (@ 0x00000558) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER12;          /*!< (@ 0x00000560) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER13;          /*!< (@ 0x00000568) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER14;          /*!< (@ 0x00000570) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER15;          /*!< (@ 0x00000578) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER16;          /*!< (@ 0x00000580) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER17;          /*!< (@ 0x00000588) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER18;          /*!< (@ 0x00000590) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER19;          /*!< (@ 0x00000598) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER20;          /*!< (@ 0x000005A0) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER21;          /*!< (@ 0x000005A8) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER22;          /*!< (@ 0x000005B0) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER23;          /*!< (@ 0x000005B8) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER24;          /*!< (@ 0x000005C0) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER25;          /*!< (@ 0x000005C8) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER26;          /*!< (@ 0x000005D0) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER27;          /*!< (@ 0x000005D8) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER28;          /*!< (@ 0x000005E0) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER29;          /*!< (@ 0x000005E8) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER30;          /*!< (@ 0x000005F0) Buffer Receive Filters                                     */
  __IOM MDR_CAN1_FILTER_Type FILTER31;          /*!< (@ 0x000005F8) Buffer Receive Filters                                     */
} MDR_CAN1_Type;                                /*!< Size = 1536 (0x600)                                                       */



/* =========================================================================================================================== */
/* ================                                         MDR_SSP1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Synchronous Serial Port (MDR_SSP1)
  */

typedef struct {                                /*!< (@ 0x40095000) MDR_SSP1 Structure                                         */
  
  union {
    __IOM uint32_t CR0;                         /*!< (@ 0x00000000) Control Register 0                                         */
    
    struct {
      __IOM uint32_t DSS        : 4;            /*!< [3..0] Data Size Select                                                   */
      __IOM uint32_t FRF        : 2;            /*!< [5..4] Frame Format                                                       */
      __IOM uint32_t SPO        : 1;            /*!< [6..6] SPI Clock Polarity                                                 */
      __IOM uint32_t SPH        : 1;            /*!< [7..7] SPI Capture Clock Phase                                            */
      __IOM uint32_t SCR        : 8;            /*!< [15..8] Signal CLock Rate                                                 */
    } CR0_b;
  } ;
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000004) Control Register 1                                         */
    
    struct {
      __IOM uint32_t LBM        : 1;            /*!< [0..0] Loop Back Mode                                                     */
      __IOM uint32_t SSE        : 1;            /*!< [1..1] Synchronous Serial Enable                                          */
      __IOM uint32_t MS         : 1;            /*!< [2..2] Master or Slave mode                                               */
      __IOM uint32_t SOD        : 1;            /*!< [3..3] Slave mode Output Disable                                          */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000008) FIFO_Rx and FIFO_Tx access                                 */
    
    struct {
      __IOM uint32_t Data       : 16;           /*!< [15..0] Data value                                                        */
    } DR_b;
  } ;
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x0000000C) Status Register                                            */
    
    struct {
      __IM  uint32_t TFE        : 1;            /*!< [0..0] FIFO_TX is Empty                                                   */
      __IM  uint32_t TNF        : 1;            /*!< [1..1] FIFO_TX is Not Full                                                */
      __IM  uint32_t RNE        : 1;            /*!< [2..2] FIFO_RX is Not Empty                                               */
      __IM  uint32_t RFF        : 1;            /*!< [3..3] FIFO_RX is Full                                                    */
      __IM  uint32_t BSY        : 1;            /*!< [4..4] Transfer in progress                                               */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t CPSR;                        /*!< (@ 0x00000010) Clock Prescaller Register                                  */
    
    struct {
      __IOM uint32_t CPSDVSR    : 8;            /*!< [7..0] Clock Prescaller                                                   */
    } CPSR_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000014) IRQ Mask Set-Clear                                         */
    
    struct {
      __IOM uint32_t RORIM      : 1;            /*!< [0..0] Enable IRQ on FIFO_RX overrun                                      */
      __IOM uint32_t RTIM       : 1;            /*!< [1..1] Enable IQR on RX timeout for 32bits                                */
      __IOM uint32_t RXIM       : 1;            /*!< [2..2] Enable IQR on FIFO_RX ge 4 words                                   */
      __IOM uint32_t TXIM       : 1;            /*!< [3..3] Enable IQR on FIFO_TX le 4 words                                   */
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x00000018) Raw Interupt Status                                        */
    
    struct {
      __IM  uint32_t RORRIS     : 1;            /*!< [0..0] FIFO_RX is overrun                                                 */
      __IM  uint32_t RTRIS      : 1;            /*!< [1..1] RX timeout for 32bits                                              */
      __IM  uint32_t RXRIS      : 1;            /*!< [2..2] FIFO_RX gt words                                                   */
      __IM  uint32_t TXRIS      : 1;            /*!< [3..3] FIFO_TX le words                                                   */
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x0000001C) Masked Interupt Status                                     */
    
    struct {
      __IM  uint32_t RORMIS     : 1;            /*!< [0..0] FIFO_RX is overrun                                                 */
      __IM  uint32_t RTMIS      : 1;            /*!< [1..1] RX timeout for 32bits                                              */
      __IM  uint32_t RXMIS      : 1;            /*!< [2..2] FIFO_RX ge 4 words                                                 */
      __IM  uint32_t TXMIS      : 1;            /*!< [3..3] FIFO_TX le 4 words                                                 */
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000020) Interupt Clear Register                                    */
    
    struct {
      __OM  uint32_t RORIC      : 1;            /*!< [0..0] Clear FIFO_RX overrun flag                                         */
      __OM  uint32_t RTIC       : 1;            /*!< [1..1] Clear RX timeout flag                                              */
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000024) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] Enable DMA by FIFO_RX has data                                     */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] Enable DMA by FIFO_TX not Full                                     */
    } DMACR_b;
  } ;
} MDR_SSP1_Type;                                /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief UART Control (MDR_UART1)
  */

typedef struct {                                /*!< (@ 0x40099000) MDR_UART1 Structure                                        */
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000000) Data Register                                              */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Data FIFO access                                                   */
      __IOM uint32_t FE         : 1;            /*!< [8..8] Stop Bit Error                                                     */
      __IOM uint32_t PE         : 1;            /*!< [9..9] Parity Error                                                       */
      __IOM uint32_t BE         : 1;            /*!< [10..10] Break Error                                                      */
      __IOM uint32_t OE         : 1;            /*!< [11..11] Overrun FIFO_RX                                                  */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t RSR_ECR;                     /*!< (@ 0x00000004) Receive Status and Error Clear Register                    */
    
    struct {
      __IOM uint32_t FE         : 1;            /*!< [0..0] Stop Bit Error                                                     */
      __IOM uint32_t PE         : 1;            /*!< [1..1] Parity Error                                                       */
      __IOM uint32_t BE         : 1;            /*!< [2..2] Break Error                                                        */
      __IOM uint32_t OE         : 1;            /*!< [3..3] Overrun FIFO_RX                                                    */
    } RSR_ECR_b;
  } ;
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IM  uint32_t FR;                          /*!< (@ 0x00000018) Flag Register                                              */
    
    struct {
      __IM  uint32_t CTS        : 1;            /*!< [0..0] Modem Clear To Send                                                */
      __IM  uint32_t DSR        : 1;            /*!< [1..1] Modem Data Set Ready                                               */
      __IM  uint32_t DCD        : 1;            /*!< [2..2] Modem Data Carrier Detect                                          */
      __IM  uint32_t BUSY       : 1;            /*!< [3..3] Transmitting data                                                  */
      __IM  uint32_t RXFE       : 1;            /*!< [4..4] FIFO_RX Empty status                                               */
      __IM  uint32_t TXFF       : 1;            /*!< [5..5] FIFO_TX Full Status                                                */
      __IM  uint32_t RXFF       : 1;            /*!< [6..6] FIFO_RX Full Status                                                */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] FIFO_RX Empty status                                               */
      __IM  uint32_t RI         : 1;            /*!< [8..8] Modem Ring Indicator                                               */
    } FR_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t ILPR;                        /*!< (@ 0x00000020) IrDA Low-Power Counter                                     */
    
    struct {
      __IOM uint32_t DVSR       : 8;            /*!< [7..0] Div of SampleRate                                                  */
    } ILPR_b;
  } ;
  
  union {
    __IOM uint32_t IBRD;                        /*!< (@ 0x00000024) Integer BaudRate Divisor                                   */
    
    struct {
      __IOM uint32_t Baud_DivInt : 16;          /*!< [15..0] Integer part of Rate divisor                                      */
    } IBRD_b;
  } ;
  
  union {
    __IOM uint32_t FBRD;                        /*!< (@ 0x00000028) Fractional BaudRate Divisor                                */
    
    struct {
      __IOM uint32_t Baud_DivFrac : 6;          /*!< [5..0] Fractional part of Rate divisor                                    */
    } FBRD_b;
  } ;
  
  union {
    __IOM uint32_t LCR_H;                       /*!< (@ 0x0000002C) Line Control Register                                      */
    
    struct {
      __IOM uint32_t BRK        : 1;            /*!< [0..0] Send Break - TX LOW for 2 words                                    */
      __IOM uint32_t PEN        : 1;            /*!< [1..1] Parity Enable                                                      */
      __IOM uint32_t EPS        : 1;            /*!< [2..2] Even Parity Select                                                 */
      __IOM uint32_t STP2       : 1;            /*!< [3..3] Double Stop Bits Enable                                            */
      __IOM uint32_t FEN        : 1;            /*!< [4..4] FIFOs Enable                                                       */
      __IOM uint32_t WLEN       : 2;            /*!< [6..5] Word Length                                                        */
      __IOM uint32_t SPS        : 1;            /*!< [7..7] Stick Parity Select                                                */
    } LCR_H_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000030) Control Register                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable UART                                                        */
      __IOM uint32_t SIREN      : 1;            /*!< [1..1] IrDA Enable                                                        */
      __IOM uint32_t SIRLP      : 1;            /*!< [2..2] IrDA Low-Power Enable                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t LBE        : 1;            /*!< [7..7] LoopBack Enable                                                    */
      __IOM uint32_t TXE        : 1;            /*!< [8..8] Transmitter Enable                                                 */
      __IOM uint32_t RXE        : 1;            /*!< [9..9] Receiver Enable                                                    */
      __IOM uint32_t DTR        : 1;            /*!< [10..10] Data Transmit Ready                                              */
      __IOM uint32_t RTS        : 1;            /*!< [11..11] Request To Send                                                  */
      __IOM uint32_t Out1       : 1;            /*!< [12..12] Custom Modem Output1 - DCD                                       */
      __IOM uint32_t Out2       : 1;            /*!< [13..13] Custom Modem Output2 - RI                                        */
      __IOM uint32_t RTSEn      : 1;            /*!< [14..14] Hardware RTS Control                                             */
      __IOM uint32_t CTSEn      : 1;            /*!< [15..15] Hardware CTS Control                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IFLS;                        /*!< (@ 0x00000034) IRQ FIFO Level                                             */
    
    struct {
      __IOM uint32_t TXIFLSES   : 3;            /*!< [2..0] IRQ FIFO_TX level                                                  */
      __IOM uint32_t RXIFLSES   : 3;            /*!< [5..3] IRQ FIFO_RX level                                                  */
    } IFLS_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000038) IRQ Mask Set Clear                                         */
    
    struct {
      __IOM uint32_t RIM_IM     : 1;            /*!< [0..0] RI Modem IRQ Mask                                                  */
      __IOM uint32_t STCM_IM    : 1;            /*!< [1..1] STC Modem IRQ Mask                                                 */
      __IOM uint32_t DCDM_IM    : 1;            /*!< [2..2] DCD Modem IRQ Mask                                                 */
      __IOM uint32_t DSRM_IM    : 1;            /*!< [3..3] DSR Modem IRQ Mask                                                 */
      __IOM uint32_t RX_IM      : 1;            /*!< [4..4] RX IRQ Mask                                                        */
      __IOM uint32_t TX_IM      : 1;            /*!< [5..5] TX IRQ Mask                                                        */
      __IOM uint32_t RT_IM      : 1;            /*!< [6..6] RX Timeout IRQ Mask                                                */
      __IOM uint32_t FE_IM      : 1;            /*!< [7..7] Frame Error IRQ Mask                                               */
      __IOM uint32_t PE_IM      : 1;            /*!< [8..8] Parity Error IRQ Mask                                              */
      __IOM uint32_t BE_IM      : 1;            /*!< [9..9] BreakLine IRQ Mask                                                 */
      __IOM uint32_t OE_IM      : 1;            /*!< [10..10] Overrun FIFO_RX IRQ Mask                                         */
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x0000003C) Raw IQR Status Register                                    */
    
    struct {
      __IM  uint32_t RIM_RIS    : 1;            /*!< [0..0] RI Modem Event                                                     */
      __IM  uint32_t STCM_RIS   : 1;            /*!< [1..1] STC Modem Event                                                    */
      __IM  uint32_t DCDM_RIS   : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __IM  uint32_t DSRM_RIS   : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __IM  uint32_t RX_RIS     : 1;            /*!< [4..4] RX Event                                                           */
      __IM  uint32_t TX_RIS     : 1;            /*!< [5..5] TX Event                                                           */
      __IM  uint32_t RT_RIS     : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __IM  uint32_t FE_RIS     : 1;            /*!< [7..7] Frame Error Event                                                  */
      __IM  uint32_t PE_RIS     : 1;            /*!< [8..8] Parity Error Event                                                 */
      __IM  uint32_t BE_RIS     : 1;            /*!< [9..9] BreakLine Event                                                    */
      __IM  uint32_t OE_RIS     : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x00000040) Masked IQR Status Register                                 */
    
    struct {
      __IM  uint32_t RIM_MIS    : 1;            /*!< [0..0] RI Modem Event                                                     */
      __IM  uint32_t STCM_MIS   : 1;            /*!< [1..1] STC Modem Event                                                    */
      __IM  uint32_t DCDM_MIS   : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __IM  uint32_t DSRM_MIS   : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __IM  uint32_t RX_MIS     : 1;            /*!< [4..4] RX Event                                                           */
      __IM  uint32_t TX_MIS     : 1;            /*!< [5..5] TX Event                                                           */
      __IM  uint32_t RT_MIS     : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __IM  uint32_t FE_MIS     : 1;            /*!< [7..7] Frame Error Event                                                  */
      __IM  uint32_t PE_MIS     : 1;            /*!< [8..8] Parity Error Event                                                 */
      __IM  uint32_t BE_MIS     : 1;            /*!< [9..9] BreakLine Event                                                    */
      __IM  uint32_t OE_MIS     : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000044) IRQ Clear Register                                         */
    
    struct {
      __OM  uint32_t RIM_IC     : 1;            /*!< [0..0] RI Modem Event                                                     */
      __OM  uint32_t STCM_IC    : 1;            /*!< [1..1] STC Modem Event                                                    */
      __OM  uint32_t DCDM_IC    : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __OM  uint32_t DSRM_IC    : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __OM  uint32_t RX_IC      : 1;            /*!< [4..4] RX Event                                                           */
      __OM  uint32_t TX_IC      : 1;            /*!< [5..5] TX Event                                                           */
      __OM  uint32_t RT_IC      : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __OM  uint32_t FE_IC      : 1;            /*!< [7..7] Frame Error Event                                                  */
      __OM  uint32_t PE_IC      : 1;            /*!< [8..8] Parity Error Event                                                 */
      __OM  uint32_t BE_IC      : 1;            /*!< [9..9] BreakLine Event                                                    */
      __OM  uint32_t OE_IC      : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000048) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] RX DMA Enable                                                      */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] TX DMA Enable                                                      */
      __IOM uint32_t DMAonErr   : 1;            /*!< [2..2] Disable DMA req on Error                                           */
    } DMACR_b;
  } ;
  __IM  uint32_t  RESERVED2[13];
  
  union {
    __IOM uint32_t TCR;                         /*!< (@ 0x00000080) Test Control Register                                      */
    
    struct {
      __IOM uint32_t ITEN       : 1;            /*!< [0..0] Test Mode Enable                                                   */
      __IOM uint32_t TestFIFO   : 1;            /*!< [1..1] FIFO test mode                                                     */
      __IOM uint32_t SIRTest    : 1;            /*!< [2..2] IrDA test mode                                                     */
    } TCR_b;
  } ;
} MDR_UART1_Type;                               /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                          MDR_DMA                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controler (MDR_DMA)
  */

typedef struct {                                /*!< (@ 0xE0042000) MDR_DMA Structure                                          */
  
  union {
    __IM  uint32_t STATUS;                      /*!< (@ 0x00000000) Status register                                            */
    
    struct {
      __IM  uint32_t Enable     : 1;            /*!< [0..0] Enable block                                                       */
      __IM  uint32_t            : 3;
      __IM  uint32_t State      : 4;            /*!< [7..4] Active Operation                                                   */
      __IM  uint32_t            : 8;
      __IM  uint32_t Chnls_minus1 : 5;          /*!< [20..16] Channels count                                                   */
      __IM  uint32_t            : 7;
      __IM  uint32_t test_status : 1;           /*!< [28..28] Test logic availability                                          */
    } STATUS_b;
  } ;
  
  union {
    __OM  uint32_t CFG;                         /*!< (@ 0x00000004) Config register                                            */
    
    struct {
      __OM  uint32_t Enable     : 1;            /*!< [0..0] Enable block                                                       */
      __IM  uint32_t            : 4;
      __OM  uint32_t Privileged : 1;            /*!< [5..5] Privileged AHB bus priority                                        */
      __OM  uint32_t Bufferable : 1;            /*!< [6..6] Bufferable AHB bus priority                                        */
      __OM  uint32_t Cachable   : 1;            /*!< [7..7] Cachable AHB bus priority                                          */
    } CFG_b;
  } ;
  
  union {
    __IOM uint32_t CTRL_BASE_PTR;               /*!< (@ 0x00000008) Channel control data base pointer                          */
    
    struct {
      __IM  uint32_t            : 10;
      __IOM uint32_t Addr_Hi    : 22;           /*!< [31..10] Pointer                                                          */
    } CTRL_BASE_PTR_b;
  } ;
  
  union {
    __IM  uint32_t ALT_CTRL_BASE_PTR;           /*!< (@ 0x0000000C) Channel alternate control data base pointer                */
    
    struct {
      __IM  uint32_t Addr       : 32;           /*!< [31..0] Pointer                                                           */
    } ALT_CTRL_BASE_PTR_b;
  } ;
  
  union {
    __IM  uint32_t WAITONREQ_STATUS;            /*!< (@ 0x00000010) Channel wait on request status                             */
    
    struct {
      __IM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } WAITONREQ_STATUS_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_SW_REQUEST;             /*!< (@ 0x00000014) Channel Software Request                                   */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_SW_REQUEST_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_USEBURST_SET;           /*!< (@ 0x00000018) Disable SREQ requests                                      */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_USEBURST_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_USEBURST_CLR;           /*!< (@ 0x0000001C) Enable SREQ requests                                       */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_USEBURST_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_REQ_MASK_SET;           /*!< (@ 0x00000020) Disable channel processing                                 */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_REQ_MASK_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_REQ_MASK_CLR;           /*!< (@ 0x00000024) Enable channel processing                                  */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_REQ_MASK_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_ENABLE_SET;             /*!< (@ 0x00000028) Start Channel                                              */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_ENABLE_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_ENABLE_CLR;             /*!< (@ 0x0000002C) Stop Channel                                               */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_ENABLE_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_PRI_ALT_SET;            /*!< (@ 0x00000030) Select Alter Structure                                     */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_PRI_ALT_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_PRI_ALT_CLR;            /*!< (@ 0x00000034) Select Primary Structure                                   */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_PRI_ALT_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHNL_PRIORITY_SET;           /*!< (@ 0x00000038) Rise up priority to High                                   */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_PRIORITY_SET_b;
  } ;
  
  union {
    __OM  uint32_t CHNL_PRIORITY_CLR;           /*!< (@ 0x0000003C) Clear Priority to Normal                                   */
    
    struct {
      __OM  uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __OM  uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __OM  uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __OM  uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __OM  uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __OM  uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __OM  uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __OM  uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __OM  uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __OM  uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __OM  uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __OM  uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __OM  uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __OM  uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __OM  uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __OM  uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __OM  uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __OM  uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __OM  uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __OM  uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __OM  uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __OM  uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __OM  uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __OM  uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __OM  uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __OM  uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __OM  uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __OM  uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __OM  uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __OM  uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __OM  uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __OM  uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } CHNL_PRIORITY_CLR_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t ERR_CLR;                     /*!< (@ 0x0000004C) AHB-Lite bus error clear                                   */
    
    struct {
      __IOM uint32_t Ch_0       : 1;            /*!< [0..0] Channel Select                                                     */
      __IOM uint32_t Ch_1       : 1;            /*!< [1..1] Channel Select                                                     */
      __IOM uint32_t Ch_2       : 1;            /*!< [2..2] Channel Select                                                     */
      __IOM uint32_t Ch_3       : 1;            /*!< [3..3] Channel Select                                                     */
      __IOM uint32_t Ch_4       : 1;            /*!< [4..4] Channel Select                                                     */
      __IOM uint32_t Ch_5       : 1;            /*!< [5..5] Channel Select                                                     */
      __IOM uint32_t Ch_6       : 1;            /*!< [6..6] Channel Select                                                     */
      __IOM uint32_t Ch_7       : 1;            /*!< [7..7] Channel Select                                                     */
      __IOM uint32_t Ch_8       : 1;            /*!< [8..8] Channel Select                                                     */
      __IOM uint32_t Ch_9       : 1;            /*!< [9..9] Channel Select                                                     */
      __IOM uint32_t Ch_10      : 1;            /*!< [10..10] Channel Select                                                   */
      __IOM uint32_t Ch_11      : 1;            /*!< [11..11] Channel Select                                                   */
      __IOM uint32_t Ch_12      : 1;            /*!< [12..12] Channel Select                                                   */
      __IOM uint32_t Ch_13      : 1;            /*!< [13..13] Channel Select                                                   */
      __IOM uint32_t Ch_14      : 1;            /*!< [14..14] Channel Select                                                   */
      __IOM uint32_t Ch_15      : 1;            /*!< [15..15] Channel Select                                                   */
      __IOM uint32_t Ch_16      : 1;            /*!< [16..16] Channel Select                                                   */
      __IOM uint32_t Ch_17      : 1;            /*!< [17..17] Channel Select                                                   */
      __IOM uint32_t Ch_18      : 1;            /*!< [18..18] Channel Select                                                   */
      __IOM uint32_t Ch_19      : 1;            /*!< [19..19] Channel Select                                                   */
      __IOM uint32_t Ch_20      : 1;            /*!< [20..20] Channel Select                                                   */
      __IOM uint32_t Ch_21      : 1;            /*!< [21..21] Channel Select                                                   */
      __IOM uint32_t Ch_22      : 1;            /*!< [22..22] Channel Select                                                   */
      __IOM uint32_t Ch_23      : 1;            /*!< [23..23] Channel Select                                                   */
      __IOM uint32_t Ch_24      : 1;            /*!< [24..24] Channel Select                                                   */
      __IOM uint32_t Ch_25      : 1;            /*!< [25..25] Channel Select                                                   */
      __IOM uint32_t Ch_26      : 1;            /*!< [26..26] Channel Select                                                   */
      __IOM uint32_t Ch_27      : 1;            /*!< [27..27] Channel Select                                                   */
      __IOM uint32_t Ch_28      : 1;            /*!< [28..28] Channel Select                                                   */
      __IOM uint32_t Ch_29      : 1;            /*!< [29..29] Channel Select                                                   */
      __IOM uint32_t Ch_30      : 1;            /*!< [30..30] Channel Select                                                   */
      __IOM uint32_t Ch_31      : 1;            /*!< [31..31] Channel Select                                                   */
    } ERR_CLR_b;
  } ;
  
  union {
    __IOM uint32_t CHMUX0;                      /*!< (@ 0x00000050) Periph select for DMA channels 0..3                        */
    
    struct {
      __IOM uint32_t CH0_Sel    : 8;            /*!< [7..0] Periph Event for DMA_Channel                                       */
      __IOM uint32_t CH1_Sel    : 8;            /*!< [15..8] Periph Event for DMA_Channel                                      */
      __IOM uint32_t CH2_Sel    : 8;            /*!< [23..16] Periph Event for DMA_Channel                                     */
      __IOM uint32_t CH3_Sel    : 8;            /*!< [31..24] Periph Event for DMA_Channel                                     */
    } CHMUX0_b;
  } ;
  
  union {
    __IOM uint32_t CHMUX1;                      /*!< (@ 0x00000054) Periph select for DMA channels 4..7                        */
    
    struct {
      __IOM uint32_t CH4_Sel    : 8;            /*!< [7..0] Periph Event for DMA_Channel                                       */
      __IOM uint32_t CH5_Sel    : 8;            /*!< [15..8] Periph Event for DMA_Channel                                      */
      __IOM uint32_t CH6_Sel    : 8;            /*!< [23..16] Periph Event for DMA_Channel                                     */
      __IOM uint32_t CH7_Sel    : 8;            /*!< [31..24] Periph Event for DMA_Channel                                     */
    } CHMUX1_b;
  } ;
  
  union {
    __IOM uint32_t CHMUX2;                      /*!< (@ 0x00000058) Periph select for DMA channels 8..11                       */
    
    struct {
      __IOM uint32_t CH8_Sel    : 8;            /*!< [7..0] Periph Event for DMA_Channel                                       */
      __IOM uint32_t CH9_Sel    : 8;            /*!< [15..8] Periph Event for DMA_Channel                                      */
      __IOM uint32_t CH10_Sel   : 8;            /*!< [23..16] Periph Event for DMA_Channel                                     */
      __IOM uint32_t CH11_Sel   : 8;            /*!< [31..24] Periph Event for DMA_Channel                                     */
    } CHMUX2_b;
  } ;
  
  union {
    __IOM uint32_t CHMUX3;                      /*!< (@ 0x0000005C) Periph select for DMA channels 12..15                      */
    
    struct {
      __IOM uint32_t CH12_Sel   : 8;            /*!< [7..0] Periph Event for DMA_Channel                                       */
      __IOM uint32_t CH13_Sel   : 8;            /*!< [15..8] Periph Event for DMA_Channel                                      */
      __IOM uint32_t CH14_Sel   : 8;            /*!< [23..16] Periph Event for DMA_Channel                                     */
      __IOM uint32_t CH15_Sel   : 8;            /*!< [31..24] Periph Event for DMA_Channel                                     */
    } CHMUX3_b;
  } ;
  
  union {
    __IOM uint32_t CHMUX4;                      /*!< (@ 0x00000060) Periph select for DMA channels 16..19                      */
    
    struct {
      __IOM uint32_t CH16_Sel   : 8;            /*!< [7..0] Periph Event for DMA_Channel                                       */
      __IOM uint32_t CH17_Sel   : 8;            /*!< [15..8] Periph Event for DMA_Channel                                      */
      __IOM uint32_t CH18_Sel   : 8;            /*!< [23..16] Periph Event for DMA_Channel                                     */
      __IOM uint32_t CH19_Sel   : 8;            /*!< [31..24] Periph Event for DMA_Channel                                     */
    } CHMUX4_b;
  } ;
  
  union {
    __IOM uint32_t CHMUX5;                      /*!< (@ 0x00000064) Periph select for DMA channels 20..23                      */
    
    struct {
      __IOM uint32_t CH20_Sel   : 8;            /*!< [7..0] Periph Event for DMA_Channel                                       */
      __IOM uint32_t CH21_Sel   : 8;            /*!< [15..8] Periph Event for DMA_Channel                                      */
      __IOM uint32_t CH22_Sel   : 8;            /*!< [23..16] Periph Event for DMA_Channel                                     */
      __IOM uint32_t CH23_Sel   : 8;            /*!< [31..24] Periph Event for DMA_Channel                                     */
    } CHMUX5_b;
  } ;
  
  union {
    __IOM uint32_t CHMUX6;                      /*!< (@ 0x00000068) Periph select for DMA channels 24..27                      */
    
    struct {
      __IOM uint32_t CH24_Sel   : 8;            /*!< [7..0] Periph Event for DMA_Channel                                       */
      __IOM uint32_t CH25_Sel   : 8;            /*!< [15..8] Periph Event for DMA_Channel                                      */
      __IOM uint32_t CH26_Sel   : 8;            /*!< [23..16] Periph Event for DMA_Channel                                     */
      __IOM uint32_t CH27_Sel   : 8;            /*!< [31..24] Periph Event for DMA_Channel                                     */
    } CHMUX6_b;
  } ;
  
  union {
    __IOM uint32_t CHMUX7;                      /*!< (@ 0x0000006C) Periph select for DMA channels 28..31                      */
    
    struct {
      __IOM uint32_t CH28_Sel   : 8;            /*!< [7..0] Periph Event for DMA_Channel                                       */
      __IOM uint32_t CH29_Sel   : 8;            /*!< [15..8] Periph Event for DMA_Channel                                      */
      __IOM uint32_t CH30_Sel   : 8;            /*!< [23..16] Periph Event for DMA_Channel                                     */
      __IOM uint32_t CH31_Sel   : 8;            /*!< [31..24] Periph Event for DMA_Channel                                     */
    } CHMUX7_b;
  } ;
} MDR_DMA_Type;                                 /*!< Size = 112 (0x70)                                                         */



/* =========================================================================================================================== */
/* ================                                         MDR_ETH1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet Control (MDR_ETH1)
  */

typedef struct {                                /*!< (@ 0x21000000) MDR_ETH1 Structure                                         */
  __IOM uint16_t  DELIMETER;                    /*!< (@ 0x00000000) Slit EthMem to FIFO_Rx and FIFO_Tx                         */
  __IOM uint16_t  MAC_L;                        /*!< (@ 0x00000002) MAC low bits                                               */
  __IOM uint16_t  MAC_M;                        /*!< (@ 0x00000004) MAC middle bits                                            */
  __IOM uint16_t  MAC_H;                        /*!< (@ 0x00000006) MAC high bits                                              */
  __IOM uint16_t  HASH0;                        /*!< (@ 0x00000008) HASH of MAC to filter multycast                            */
  __IOM uint16_t  HASH1;                        /*!< (@ 0x0000000A) HASH of MAC to filter multycast                            */
  __IOM uint16_t  HASH2;                        /*!< (@ 0x0000000C) HASH of MAC to filter multycast                            */
  __IOM uint16_t  HASH3;                        /*!< (@ 0x0000000E) HASH of MAC to filter multycast                            */
  __IOM uint16_t  IPG;                          /*!< (@ 0x00000010) Inter Packet Gap                                           */
  __IOM uint16_t  PSC;                          /*!< (@ 0x00000012) Prescaller of ETH_Clock to get TimeStep                    */
  __IOM uint16_t  BAG;                          /*!< (@ 0x00000014) Frame Send Period in DetermMode                            */
  __IOM uint16_t  JitterWnd;                    /*!< (@ 0x00000016) BAG's Jitter to start transfer                             */
  
  union {
    __IOM uint16_t R_CFG;                       /*!< (@ 0x00000018) RX Config Register                                         */
    
    struct {
      __IOM uint16_t MCA_En     : 1;            /*!< [0..0] Accept Multycast frames                                            */
      __IOM uint16_t BCA_En     : 1;            /*!< [1..1] Accept Broadcast frames                                            */
      __IOM uint16_t UCA_En     : 1;            /*!< [2..2] Accept Unicast frames                                              */
      __IOM uint16_t AC_En      : 1;            /*!< [3..3] Accept Any MAC                                                     */
      __IOM uint16_t EF_En      : 1;            /*!< [4..4] Accept frames with errors                                          */
      __IOM uint16_t CF_En      : 1;            /*!< [5..5] Accept Control frames                                              */
      __IOM uint16_t LF_En      : 1;            /*!< [6..6] Accept Long frames                                                 */
      __IOM uint16_t SF_En      : 1;            /*!< [7..7] Accept Short frames                                                */
      __IOM uint16_t EVNT_MODE  : 3;            /*!< [10..8] Select signal EVNT1 events                                        */
      __IM  uint16_t            : 1;
      __IOM uint16_t MSB_1st    : 1;            /*!< [12..12] Bit order                                                        */
      __IOM uint16_t BE         : 1;            /*!< [13..13] Byte order                                                       */
      __IM  uint16_t            : 1;
      __IOM uint16_t EN         : 1;            /*!< [15..15] Enable Receiver                                                  */
    } R_CFG_b;
  } ;
  
  union {
    __IOM uint16_t X_CFG;                       /*!< (@ 0x0000001A) TX Config Register                                         */
    
    struct {
      __IOM uint16_t RtryCnt    : 4;            /*!< [3..0] Try send count                                                     */
      __IOM uint16_t IPG_En     : 1;            /*!< [4..4] IPG enable                                                         */
      __IOM uint16_t CRC_En     : 1;            /*!< [5..5] Add CRC to frame                                                   */
      __IOM uint16_t PRE_En     : 1;            /*!< [6..6] Add Preamble to frame                                              */
      __IOM uint16_t PAD_En     : 1;            /*!< [7..7] Fill with PAD to minimum length                                    */
      __IOM uint16_t EVNT_MODE  : 3;            /*!< [10..8] Select signal EVNT1 events                                        */
      __IM  uint16_t            : 1;
      __IOM uint16_t MSB_1st    : 1;            /*!< [12..12] Bit order                                                        */
      __IOM uint16_t BE         : 1;            /*!< [13..13] Byte order                                                       */
      __IM  uint16_t            : 1;
      __IOM uint16_t EN         : 1;            /*!< [15..15] Enable Transmitter                                               */
    } X_CFG_b;
  } ;
  
  union {
    __IOM uint16_t G_CFGL;                      /*!< (@ 0x0000001C) Global Config Register1                                    */
    
    struct {
      __IOM uint16_t ColWnd     : 8;            /*!< [7..0] Collision window in bits mul 4                                     */
      __IOM uint16_t Pause_En   : 1;            /*!< [8..8] Accept Pause frame                                                 */
      __IOM uint16_t DTRM_En    : 1;            /*!< [9..9] DetermMode                                                         */
      __IOM uint16_t HD_En      : 1;            /*!< [10..10] Enable Half duples                                               */
      __IOM uint16_t EXT_En     : 1;            /*!< [11..11] Fill frame to slot time                                          */
      __IOM uint16_t BUFF_Mode  : 2;            /*!< [13..12] Buffer control                                                   */
      __IOM uint16_t IFR_CLR_En : 1;            /*!< [14..14] Clear IFR status on Read                                         */
    } G_CFGL_b;
  } ;
  
  union {
    __IOM uint16_t G_CFGH;                      /*!< (@ 0x0000001E) Global Config Register2                                    */
    
    struct {
      __IOM uint16_t XRST       : 1;            /*!< [0..0] Reset Transmitter                                                  */
      __IOM uint16_t RRST       : 1;            /*!< [1..1] Reset Receiver                                                     */
      __IOM uint16_t DLB        : 1;            /*!< [2..2] Dig Loopback                                                       */
      __IM  uint16_t            : 9;
      __IOM uint16_t DBG_RF_EN  : 1;            /*!< [12..12] Enable Auto PTR_RX                                               */
      __IOM uint16_t DBG_TF_EN  : 1;            /*!< [13..13] Enable Auto PTR_TX                                               */
      __IOM uint16_t RUN_Mode   : 2;            /*!< [15..14] Work mode                                                        */
    } G_CFGH_b;
  } ;
  
  union {
    __IOM uint16_t IMR;                         /*!< (@ 0x00000020) IRQ Mask Register                                          */
    
    struct {
      __IOM uint16_t RF_OK      : 1;            /*!< [0..0] Received OK                                                        */
      __IOM uint16_t MISSED_F   : 1;            /*!< [1..1] Not enough space in buff RX                                        */
      __IOM uint16_t OVF        : 1;            /*!< [2..2] Buff RX overflow                                                   */
      __IOM uint16_t SMB_Err    : 1;            /*!< [3..3] Receiving error                                                    */
      __IOM uint16_t CRC_Err    : 1;            /*!< [4..4] CRC error                                                          */
      __IOM uint16_t CF         : 1;            /*!< [5..5] Control frame received                                             */
      __IOM uint16_t LF         : 1;            /*!< [6..6] Long frame received                                                */
      __IOM uint16_t SF         : 1;            /*!< [7..7] Short frame received                                               */
      __IOM uint16_t XF_Ok      : 1;            /*!< [8..8] Sent successful                                                    */
      __IOM uint16_t XF_Err     : 1;            /*!< [9..9] Error on sending                                                   */
      __IOM uint16_t UNDEF      : 1;            /*!< [10..10] Tx buff empty                                                    */
      __IOM uint16_t LC         : 1;            /*!< [11..11] Late Collision                                                   */
      __IOM uint16_t CRC_Lost   : 1;            /*!< [12..12] Carrier sense lost                                               */
      __IM  uint16_t            : 1;
      __IOM uint16_t MDIO_INT   : 1;            /*!< [14..14] IRQ from MDIO                                                    */
      __IOM uint16_t MDIO_RDY   : 1;            /*!< [15..15] MDIO transfer completed                                          */
    } IMR_b;
  } ;
  
  union {
    __IOM uint16_t IFR;                         /*!< (@ 0x00000022) IRQ flag register                                          */
    
    struct {
      __IOM uint16_t RF_OK      : 1;            /*!< [0..0] Received OK                                                        */
      __IOM uint16_t MISSED_F   : 1;            /*!< [1..1] Not enough space in buff RX                                        */
      __IOM uint16_t OVF        : 1;            /*!< [2..2] Buff RX overflow                                                   */
      __IOM uint16_t SMB_Err    : 1;            /*!< [3..3] Receiving error                                                    */
      __IOM uint16_t CRC_Err    : 1;            /*!< [4..4] CRC error                                                          */
      __IOM uint16_t CF         : 1;            /*!< [5..5] Control frame received                                             */
      __IOM uint16_t LF         : 1;            /*!< [6..6] Long frame received                                                */
      __IOM uint16_t SF         : 1;            /*!< [7..7] Short frame received                                               */
      __IOM uint16_t XF_Ok      : 1;            /*!< [8..8] Sent successful                                                    */
      __IOM uint16_t XF_Err     : 1;            /*!< [9..9] Error on sending                                                   */
      __IOM uint16_t UNDEF      : 1;            /*!< [10..10] Tx buff empty                                                    */
      __IOM uint16_t LC         : 1;            /*!< [11..11] Late Collision                                                   */
      __IOM uint16_t CRC_Lost   : 1;            /*!< [12..12] Carrier sense lost                                               */
      __IM  uint16_t            : 1;
      __IOM uint16_t MDIO_INT   : 1;            /*!< [14..14] IRQ from MDIO                                                    */
      __IOM uint16_t MDIO_RDY   : 1;            /*!< [15..15] MDIO transfer completed                                          */
    } IFR_b;
  } ;
  
  union {
    __IOM uint16_t MDIO_CTRL;                   /*!< (@ 0x00000024) MDIO Control Register                                      */
    
    struct {
      __IOM uint16_t REG_Addr   : 5;            /*!< [4..0] PHY_Reg address address at MDIO Bus                                */
      __IOM uint16_t DIV        : 3;            /*!< [7..5] ETH_CLK to MDIO bitrate                                            */
      __IOM uint16_t PHY_Addr   : 5;            /*!< [12..8] PHY address at MDIO Bus                                           */
      __IOM uint16_t OP         : 1;            /*!< [13..13] Operation RD or WR                                               */
      __IOM uint16_t PRE_En     : 1;            /*!< [14..14] Send preamble of 0xFFFF_FFFF                                     */
      __IOM uint16_t CTRL_RDY   : 1;            /*!< [15..15] Command and Status flag                                          */
    } MDIO_CTRL_b;
  } ;
  __IOM uint16_t  MDIO_DATA;                    /*!< (@ 0x00000026) MDIO Data                                                  */
  __IOM uint16_t  R_HEAD;                       /*!< (@ 0x00000028) PTR to start of received data                              */
  __IOM uint16_t  X_TAIL;                       /*!< (@ 0x0000002A) PTR to write data                                          */
  __IM  uint16_t  R_TAIL;                       /*!< (@ 0x0000002C) PTR to end of received data                                */
  __IM  uint16_t  X_HEAD;                       /*!< (@ 0x0000002E) PTR to start of data to send                               */
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000030) Status Register                                            */
    
    struct {
      __IOM uint16_t RX_Empty   : 1;            /*!< [0..0] RX_FIFO empty                                                      */
      __IOM uint16_t RX_AEmpty  : 1;            /*!< [1..1] RX_FIFO is 1/32 full                                               */
      __IOM uint16_t RX_Hald    : 1;            /*!< [2..2] RX_FIFO is 1/2 full                                                */
      __IOM uint16_t RX_AFull   : 1;            /*!< [3..3] RX_FIFO is 31/32 full                                              */
      __IOM uint16_t RX_Full    : 1;            /*!< [4..4] RX_FIFO is full                                                    */
      __IOM uint16_t RX_Count   : 3;            /*!< [7..5] Frames in FIFO                                                     */
      __IOM uint16_t TX_Empty   : 1;            /*!< [8..8] TX_FIFO is Empty                                                   */
      __IOM uint16_t TX_AEmpty  : 1;            /*!< [9..9] TX_FIFO is 1/32 full                                               */
      __IOM uint16_t TX_Hald    : 1;            /*!< [10..10] TX_FIFO is 1/2 full                                              */
      __IOM uint16_t TX_AFull   : 1;            /*!< [11..11] TX_FIFO is 31/32 full                                            */
      __IOM uint16_t TX_Full    : 1;            /*!< [12..12] TX_FIFO is full                                                  */
    } STAT_b;
  } ;
  __IM  uint16_t  RCOUNTER;                     /*!< (@ 0x00000032) Frame Received in Total                                    */
  
  union {
    __IOM uint16_t PHY_CONTROL;                 /*!< (@ 0x00000034) PHY Control Register                                       */
    
    struct {
      __IOM uint16_t LB         : 1;            /*!< [0..0] Analog LoopBack                                                    */
      __IOM uint16_t DLB        : 1;            /*!< [1..1] Digital LoopBack                                                   */
      __IOM uint16_t Duplex     : 1;            /*!< [2..2] Digital LoopBack                                                   */
      __IM  uint16_t            : 1;
      __IOM uint16_t DIR        : 1;            /*!< [4..4] Bit Order                                                          */
      __IOM uint16_t BASE_2     : 1;            /*!< [5..5] Cable seelct                                                       */
      __IOM uint16_t LINK_Period : 6;           /*!< [11..6] Link period                                                       */
      __IM  uint16_t            : 2;
      __IOM uint16_t EXT_En     : 1;            /*!< [14..14] External PHY enable                                              */
      __IOM uint16_t RST        : 1;            /*!< [15..15] PHY Reset                                                        */
    } PHY_CONTROL_b;
  } ;
  
  union {
    __IOM uint16_t PHY_STATYS;                  /*!< (@ 0x00000036) PHY Status Register                                        */
    
    struct {
      __IM  uint16_t            : 8;
      __IOM uint16_t LED_LINK   : 1;            /*!< [8..8] Link Indicator                                                     */
      __IOM uint16_t LED_COL    : 1;            /*!< [9..9] Collision Indicator                                                */
      __IOM uint16_t INT_LOSS   : 1;            /*!< [10..10] Link Lost                                                        */
      __IOM uint16_t INT_POL    : 1;            /*!< [11..11] Link Pulse inverted                                              */
      __IOM uint16_t INT_JAB    : 1;            /*!< [12..12] Long frame received                                              */
      __IOM uint16_t INT_JAM    : 1;            /*!< [13..13] JAM signal received                                              */
    } PHY_STATYS_b;
  } ;
  
  union {
    __IOM uint16_t PHY_CONTORL_A;               /*!< (@ 0x00000038) PHY Control Extra Register                                 */
    
    struct {
      __IOM uint16_t SELR       : 1;            /*!< [0..0] Select U_Ref source                                                */
      __IOM uint16_t TRIM       : 3;            /*!< [3..1] Trin internal U_Ref                                                */
      __IOM uint16_t TRIMR      : 8;            /*!< [11..4] Select I_Ref                                                      */
      __IM  uint16_t            : 2;
      __IOM uint16_t ISRC       : 1;            /*!< [14..14] I source select                                                  */
      __IOM uint16_t PHY_En     : 1;            /*!< [15..15] PHY Enable                                                       */
    } PHY_CONTORL_A_b;
  } ;
} MDR_ETH1_Type;                                /*!< Size = 58 (0x3a)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define MDR_RST_CLOCK_BASE          0x40000000UL
#define MDR_BKP_BASE                0x40001000UL
#define MDR_OTP_BASE                0x40006000UL
#define MDR_PORTA_BASE              0x40080000UL
#define MDR_PORTB_BASE              0x40081000UL
#define MDR_PORTC_BASE              0x40082000UL
#define MDR_PORTD_BASE              0x40083000UL
#define MDR_PORTE_BASE              0x40084000UL
#define MDR_TIMER1_BASE             0x4008A000UL
#define MDR_TIMER2_BASE             0x4008B000UL
#define MDR_TIMER3_BASE             0x4008C000UL
#define MDR_TIMER4_BASE             0x4008D000UL
#define MDR_CAN1_BASE               0x40090000UL
#define MDR_SSP1_BASE               0x40095000UL
#define MDR_UART1_BASE              0x40099000UL
#define MDR_UART2_BASE              0x4009A000UL
#define MDR_DMA_BASE                0xE0042000UL
#define MDR_ETH1_BASE               0x21000000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define MDR_RST_CLOCK               ((MDR_RST_CLOCK_Type*)     MDR_RST_CLOCK_BASE)
#define MDR_BKP                     ((MDR_BKP_Type*)           MDR_BKP_BASE)
#define MDR_OTP                     ((MDR_OTP_Type*)           MDR_OTP_BASE)
#define MDR_PORTA                   ((MDR_PORTA_Type*)         MDR_PORTA_BASE)
#define MDR_PORTB                   ((MDR_PORTA_Type*)         MDR_PORTB_BASE)
#define MDR_PORTC                   ((MDR_PORTA_Type*)         MDR_PORTC_BASE)
#define MDR_PORTD                   ((MDR_PORTA_Type*)         MDR_PORTD_BASE)
#define MDR_PORTE                   ((MDR_PORTA_Type*)         MDR_PORTE_BASE)
#define MDR_TIMER1                  ((MDR_TIMER1_Type*)        MDR_TIMER1_BASE)
#define MDR_TIMER2                  ((MDR_TIMER1_Type*)        MDR_TIMER2_BASE)
#define MDR_TIMER3                  ((MDR_TIMER1_Type*)        MDR_TIMER3_BASE)
#define MDR_TIMER4                  ((MDR_TIMER1_Type*)        MDR_TIMER4_BASE)
#define MDR_CAN1                    ((MDR_CAN1_Type*)          MDR_CAN1_BASE)
#define MDR_SSP1                    ((MDR_SSP1_Type*)          MDR_SSP1_BASE)
#define MDR_UART1                   ((MDR_UART1_Type*)         MDR_UART1_BASE)
#define MDR_UART2                   ((MDR_UART1_Type*)         MDR_UART2_BASE)
#define MDR_DMA                     ((MDR_DMA_Type*)           MDR_DMA_BASE)
#define MDR_ETH1                    ((MDR_ETH1_Type*)          MDR_ETH1_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                 Pos/Mask Cluster Section                                  ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            BUF                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  ID  =========================================================== */
#define BUF_ID_EID_Pos                    (0UL)                     /*!< BUF ID: EID (Bit 0)                                   */
#define BUF_ID_EID_Msk                    (0x3ffffUL)               /*!< BUF ID: EID (Bitfield-Mask: 0x3ffff)                  */
#define BUF_ID_SID_Pos                    (18UL)                    /*!< BUF ID: SID (Bit 18)                                  */
#define BUF_ID_SID_Msk                    (0x1ffc0000UL)            /*!< BUF ID: SID (Bitfield-Mask: 0x7ff)                    */
/* ==========================================================  DLC  ========================================================== */
#define BUF_DLC_DLC_Pos                   (0UL)                     /*!< BUF DLC: DLC (Bit 0)                                  */
#define BUF_DLC_DLC_Msk                   (0xfUL)                   /*!< BUF DLC: DLC (Bitfield-Mask: 0x0f)                    */
#define BUF_DLC_RTR_Pos                   (8UL)                     /*!< BUF DLC: RTR (Bit 8)                                  */
#define BUF_DLC_RTR_Msk                   (0x100UL)                 /*!< BUF DLC: RTR (Bitfield-Mask: 0x01)                    */
#define BUF_DLC_R1_Pos                    (9UL)                     /*!< BUF DLC: R1 (Bit 9)                                   */
#define BUF_DLC_R1_Msk                    (0x200UL)                 /*!< BUF DLC: R1 (Bitfield-Mask: 0x01)                     */
#define BUF_DLC_R0_Pos                    (10UL)                    /*!< BUF DLC: R0 (Bit 10)                                  */
#define BUF_DLC_R0_Msk                    (0x400UL)                 /*!< BUF DLC: R0 (Bitfield-Mask: 0x01)                     */
#define BUF_DLC_SRR_Pos                   (11UL)                    /*!< BUF DLC: SRR (Bit 11)                                 */
#define BUF_DLC_SRR_Msk                   (0x800UL)                 /*!< BUF DLC: SRR (Bitfield-Mask: 0x01)                    */
#define BUF_DLC_IDE_Pos                   (12UL)                    /*!< BUF DLC: IDE (Bit 12)                                 */
#define BUF_DLC_IDE_Msk                   (0x1000UL)                /*!< BUF DLC: IDE (Bitfield-Mask: 0x01)                    */
/* =========================================================  DATAL  ========================================================= */
#define BUF_DATAL_DB0_Pos                 (0UL)                     /*!< BUF DATAL: DB0 (Bit 0)                                */
#define BUF_DATAL_DB0_Msk                 (0xffUL)                  /*!< BUF DATAL: DB0 (Bitfield-Mask: 0xff)                  */
#define BUF_DATAL_DB1_Pos                 (8UL)                     /*!< BUF DATAL: DB1 (Bit 8)                                */
#define BUF_DATAL_DB1_Msk                 (0xff00UL)                /*!< BUF DATAL: DB1 (Bitfield-Mask: 0xff)                  */
#define BUF_DATAL_DB2_Pos                 (16UL)                    /*!< BUF DATAL: DB2 (Bit 16)                               */
#define BUF_DATAL_DB2_Msk                 (0xff0000UL)              /*!< BUF DATAL: DB2 (Bitfield-Mask: 0xff)                  */
#define BUF_DATAL_DB3_Pos                 (24UL)                    /*!< BUF DATAL: DB3 (Bit 24)                               */
#define BUF_DATAL_DB3_Msk                 (0xff000000UL)            /*!< BUF DATAL: DB3 (Bitfield-Mask: 0xff)                  */
/* =========================================================  DATAH  ========================================================= */
#define BUF_DATAH_DB4_Pos                 (0UL)                     /*!< BUF DATAH: DB4 (Bit 0)                                */
#define BUF_DATAH_DB4_Msk                 (0xffUL)                  /*!< BUF DATAH: DB4 (Bitfield-Mask: 0xff)                  */
#define BUF_DATAH_DB5_Pos                 (8UL)                     /*!< BUF DATAH: DB5 (Bit 8)                                */
#define BUF_DATAH_DB5_Msk                 (0xff00UL)                /*!< BUF DATAH: DB5 (Bitfield-Mask: 0xff)                  */
#define BUF_DATAH_DB6_Pos                 (16UL)                    /*!< BUF DATAH: DB6 (Bit 16)                               */
#define BUF_DATAH_DB6_Msk                 (0xff0000UL)              /*!< BUF DATAH: DB6 (Bitfield-Mask: 0xff)                  */
#define BUF_DATAH_DB7_Pos                 (24UL)                    /*!< BUF DATAH: DB7 (Bit 24)                               */
#define BUF_DATAH_DB7_Msk                 (0xff000000UL)            /*!< BUF DATAH: DB7 (Bitfield-Mask: 0xff)                  */


/* =========================================================================================================================== */
/* ================                                          FILTER                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MASK  ========================================================== */
/* ========================================================  FILTER  ========================================================= */

/** @} */ /* End of group PosMask_clusters */


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
#define MDR_RST_CLOCK_KEY_Value_Pos       (0UL)                     /*!< MDR_RST_CLOCK KEY: Value (Bit 0)                      */
#define MDR_RST_CLOCK_KEY_Value_Msk       (0xffffffffUL)            /*!< MDR_RST_CLOCK KEY: Value (Bitfield-Mask: 0xffffffff)  */
/* ========================================================  MAX_CLK  ======================================================== */
#define MDR_RST_CLOCK_MAX_CLK_Select_Pos  (0UL)                     /*!< MDR_RST_CLOCK MAX_CLK: Select (Bit 0)                 */
#define MDR_RST_CLOCK_MAX_CLK_Select_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK MAX_CLK: Select (Bitfield-Mask: 0x0f)   */
/* ========================================================  CPU_CLK  ======================================================== */
#define MDR_RST_CLOCK_CPU_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK CPU_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_CPU_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK CPU_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_CPU_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK CPU_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK CPU_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  PER0_CLK  ======================================================== */
#define MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Pos (13UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortA_CLK_EN (Bit 13)         */
#define MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Msk (0x2000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Pos (14UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortB_CLK_EN (Bit 14)         */
#define MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Msk (0x4000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Pos (15UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortC_CLK_EN (Bit 15)         */
#define MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Msk (0x8000UL)          /*!< MDR_RST_CLOCK PER0_CLK: PortC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Pos (16UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortD_CLK_EN (Bit 16)         */
#define MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Msk (0x10000UL)         /*!< MDR_RST_CLOCK PER0_CLK: PortD_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_Pos (17UL)              /*!< MDR_RST_CLOCK PER0_CLK: PortE_CLK_EN (Bit 17)         */
#define MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_Msk (0x20000UL)         /*!< MDR_RST_CLOCK PER0_CLK: PortE_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_Pos (21UL)               /*!< MDR_RST_CLOCK PER0_CLK: SPW1_CLK_EN (Bit 21)          */
#define MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_Msk (0x200000UL)         /*!< MDR_RST_CLOCK PER0_CLK: SPW1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_Pos (23UL)               /*!< MDR_RST_CLOCK PER0_CLK: TIM1_CLK_EN (Bit 23)          */
#define MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_Msk (0x800000UL)         /*!< MDR_RST_CLOCK PER0_CLK: TIM1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_Pos (24UL)               /*!< MDR_RST_CLOCK PER0_CLK: TIM2_CLK_EN (Bit 24)          */
#define MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_Msk (0x1000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: TIM2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_Pos (25UL)               /*!< MDR_RST_CLOCK PER0_CLK: TIM3_CLK_EN (Bit 25)          */
#define MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_Msk (0x2000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: TIM3_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_Pos (26UL)               /*!< MDR_RST_CLOCK PER0_CLK: TIM4_CLK_EN (Bit 26)          */
#define MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_Msk (0x4000000UL)        /*!< MDR_RST_CLOCK PER0_CLK: TIM4_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Pos (29UL)               /*!< MDR_RST_CLOCK PER0_CLK: CAN1_CLK_EN (Bit 29)          */
#define MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Msk (0x20000000UL)       /*!< MDR_RST_CLOCK PER0_CLK: CAN1_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  PER1_CLK  ======================================================== */
#define MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_Pos (2UL)                /*!< MDR_RST_CLOCK PER1_CLK: SSP1_CLK_EN (Bit 2)           */
#define MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_Msk (0x4UL)              /*!< MDR_RST_CLOCK PER1_CLK: SSP1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_Pos (6UL)               /*!< MDR_RST_CLOCK PER1_CLK: UART1_CLK_EN (Bit 6)          */
#define MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_Msk (0x40UL)            /*!< MDR_RST_CLOCK PER1_CLK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_Pos (7UL)               /*!< MDR_RST_CLOCK PER1_CLK: UART2_CLK_EN (Bit 7)          */
#define MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_Msk (0x80UL)            /*!< MDR_RST_CLOCK PER1_CLK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_ARINK_RX_CLK_EN_Pos (11UL)           /*!< MDR_RST_CLOCK PER1_CLK: ARINK_RX_CLK_EN (Bit 11)      */
#define MDR_RST_CLOCK_PER1_CLK_ARINK_RX_CLK_EN_Msk (0x800UL)        /*!< MDR_RST_CLOCK PER1_CLK: ARINK_RX_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_ARINK_TX_CLK_EN_Pos (13UL)           /*!< MDR_RST_CLOCK PER1_CLK: ARINK_TX_CLK_EN (Bit 13)      */
#define MDR_RST_CLOCK_PER1_CLK_ARINK_TX_CLK_EN_Msk (0x2000UL)       /*!< MDR_RST_CLOCK PER1_CLK: ARINK_TX_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_Pos (19UL)               /*!< MDR_RST_CLOCK PER1_CLK: MIL1_CLK_EN (Bit 19)          */
#define MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_Msk (0x80000UL)          /*!< MDR_RST_CLOCK PER1_CLK: MIL1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_Pos (21UL)               /*!< MDR_RST_CLOCK PER1_CLK: MIL2_CLK_EN (Bit 21)          */
#define MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_Msk (0x200000UL)         /*!< MDR_RST_CLOCK PER1_CLK: MIL2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_Pos (23UL)               /*!< MDR_RST_CLOCK PER1_CLK: ADC1_CLK_EN (Bit 23)          */
#define MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_Msk (0x800000UL)         /*!< MDR_RST_CLOCK PER1_CLK: ADC1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_Pos (24UL)               /*!< MDR_RST_CLOCK PER1_CLK: ADC2_CLK_EN (Bit 24)          */
#define MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_Msk (0x1000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: ADC2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_Pos (25UL)               /*!< MDR_RST_CLOCK PER1_CLK: DAC1_CLK_EN (Bit 25)          */
#define MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_Msk (0x2000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: DAC1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_Pos (26UL)               /*!< MDR_RST_CLOCK PER1_CLK: DAC2_CLK_EN (Bit 26)          */
#define MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_Msk (0x4000000UL)        /*!< MDR_RST_CLOCK PER1_CLK: DAC2_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  CPU_CHK0  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG2_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG2 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG2_Msk (0xffffUL)             /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG0_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG0 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK0_PRES_REG0_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK CPU_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  CPU_CHK1  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG1_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG1 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG1_Msk (0xffffUL)             /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG3_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG3 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK1_PRES_REG3_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK CPU_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
/* =======================================================  CPU_CHK2  ======================================================== */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_CPU_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK CPU_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  CPU_STAT  ======================================================== */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_CPU_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK CPU_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_CPU_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_CPU_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK CPU_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_CPU_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK CPU_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
/* ========================================================  LSI_CLK  ======================================================== */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_LSI_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSI_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK LSI_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  LSI_CHK0  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG2_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG2 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG2_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG0_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG0 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK0_PRES_REG0_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSI_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSI_CHK1  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG1_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG1 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG1_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG3_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG3 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK1_PRES_REG3_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSI_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSI_CHK2  ======================================================== */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_LSI_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK LSI_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  LSI_STAT  ======================================================== */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_LSI_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK LSI_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSI_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK LSI_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_LSI_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK LSI_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSI_STAT_READY_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSI_STAT: READY (Bit 20)                */
#define MDR_RST_CLOCK_LSI_STAT_READY_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSI_STAT: READY (Bitfield-Mask: 0x01)   */
/* =======================================================  HSI_STAT  ======================================================== */
#define MDR_RST_CLOCK_HSI_STAT_READY_Pos  (20UL)                    /*!< MDR_RST_CLOCK HSI_STAT: READY (Bit 20)                */
#define MDR_RST_CLOCK_HSI_STAT_READY_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK HSI_STAT: READY (Bitfield-Mask: 0x01)   */
/* ========================================================  LSE_CLK  ======================================================== */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Pos (16UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT0 (Bit 16)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Msk (0x10000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Pos (17UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT1 (Bit 17)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Msk (0x20000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Pos (18UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT2 (Bit 18)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Msk (0x40000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Pos (19UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT3 (Bit 19)         */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Msk (0x80000UL)         /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK (Bit 20)                */
#define MDR_RST_CLOCK_LSE_CLK_EN_CHK_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSE_CLK: EN_CHK (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)         /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)    */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)   /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)         /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)    */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)   /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Pos (23UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT0 (Bit 23)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)       /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Pos (24UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT1 (Bit 24)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Pos (25UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT2 (Bit 25)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Pos (26UL)             /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT3 (Bit 26)        */
#define MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)      /*!< MDR_RST_CLOCK LSE_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
/* =======================================================  LSE_CHK0  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG2_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG2 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG2_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG0_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG0 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK0_PRES_REG0_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSE_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSE_CHK1  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG1_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG1 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG1_Msk (0xffffUL)             /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG3_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG3 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK1_PRES_REG3_Msk (0xffff0000UL)         /*!< MDR_RST_CLOCK LSE_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
/* =======================================================  LSE_CHK2  ======================================================== */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG0_Pos (0UL)                  /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG0 (Bit 0)             */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG0_Msk (0xffUL)               /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG1_Pos (8UL)                  /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG1 (Bit 8)             */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG1_Msk (0xff00UL)             /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG2_Pos (16UL)                 /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG2 (Bit 16)            */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG2_Msk (0xff0000UL)           /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG3_Pos (24UL)                 /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG3 (Bit 24)            */
#define MDR_RST_CLOCK_LSE_CHK2_BASE_REG3_Msk (0xff000000UL)         /*!< MDR_RST_CLOCK LSE_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  LSE_STAT  ======================================================== */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)         /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)    */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)      /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)         /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)    */
#define MDR_RST_CLOCK_LSE_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)    /*!< MDR_RST_CLOCK LSE_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_LSE_STAT_EVENT0_Pos (16UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT0 (Bit 16)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT0_Msk (0x10000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT0 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT1_Pos (17UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT1 (Bit 17)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT1_Msk (0x20000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT1 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT2_Pos (18UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT2 (Bit 18)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT2_Msk (0x40000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT2 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_EVENT3_Pos (19UL)                    /*!< MDR_RST_CLOCK LSE_STAT: EVENT3 (Bit 19)               */
#define MDR_RST_CLOCK_LSE_STAT_EVENT3_Msk (0x80000UL)               /*!< MDR_RST_CLOCK LSE_STAT: EVENT3 (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_LSE_STAT_READY_Pos  (20UL)                    /*!< MDR_RST_CLOCK LSE_STAT: READY (Bit 20)                */
#define MDR_RST_CLOCK_LSE_STAT_READY_Msk  (0x100000UL)              /*!< MDR_RST_CLOCK LSE_STAT: READY (Bitfield-Mask: 0x01)   */
/* =======================================================  HSE0_CLK  ======================================================== */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE0_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK HSE0_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK HSE0_CLK: HSE_ON (Bit 27)               */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK HSE0_CLK: HSE_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Pos (28UL)                   /*!< MDR_RST_CLOCK HSE0_CLK: HSE_BYP (Bit 28)              */
#define MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK HSE0_CLK: HSE_BYP (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Pos (29UL)                 /*!< MDR_RST_CLOCK HSE0_CLK: FILTER_EN (Bit 29)            */
#define MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Msk (0x20000000UL)         /*!< MDR_RST_CLOCK HSE0_CLK: FILTER_EN (Bitfield-Mask: 0x01) */
/* =======================================================  HSE0_CHK0  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG2_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG2 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG2_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG0_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG0 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK0_PRES_REG0_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE0_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE0_CHK1  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG1_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG1 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG1_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG3_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG3 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK1_PRES_REG3_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE0_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE0_CHK2  ======================================================= */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_HSE0_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK HSE0_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  HSE0_STAT  ======================================================= */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_HSE0_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK HSE0_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK HSE0_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_HSE0_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE0_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE0_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_HSE0_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE0_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  HSE1_CLK  ======================================================== */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE1_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK HSE1_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK HSE1_CLK: HSE_ON (Bit 27)               */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK HSE1_CLK: HSE_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Pos (28UL)                   /*!< MDR_RST_CLOCK HSE1_CLK: HSE_BYP (Bit 28)              */
#define MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK HSE1_CLK: HSE_BYP (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Pos (29UL)                 /*!< MDR_RST_CLOCK HSE1_CLK: FILTER_EN (Bit 29)            */
#define MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Msk (0x20000000UL)         /*!< MDR_RST_CLOCK HSE1_CLK: FILTER_EN (Bitfield-Mask: 0x01) */
/* =======================================================  HSE1_CHK0  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG2_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG2 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG2_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG0_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG0 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK0_PRES_REG0_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE1_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE1_CHK1  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG1_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG1 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG1_Msk (0xffffUL)            /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG3_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG3 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK1_PRES_REG3_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK HSE1_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
/* =======================================================  HSE1_CHK2  ======================================================= */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_HSE1_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK HSE1_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  HSE1_STAT  ======================================================= */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_HSE1_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK HSE1_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK HSE1_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_HSE1_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HSE1_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK HSE1_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_HSE1_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK HSE1_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL0_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL0_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK PLL0_CLK: PLL_Q (Bitfield-Mask: 0x0f)   */
#define MDR_RST_CLOCK_PLL0_CLK_DV_Pos     (4UL)                     /*!< MDR_RST_CLOCK PLL0_CLK: DV (Bit 4)                    */
#define MDR_RST_CLOCK_PLL0_CLK_DV_Msk     (0x10UL)                  /*!< MDR_RST_CLOCK PLL0_CLK: DV (Bitfield-Mask: 0x01)      */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_N_Pos  (8UL)                     /*!< MDR_RST_CLOCK PLL0_CLK: PLL_N (Bit 8)                 */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_N_Msk  (0x7f00UL)                /*!< MDR_RST_CLOCK PLL0_CLK: PLL_N (Bitfield-Mask: 0x7f)   */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL0_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK PLL0_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: PLL_ON (Bit 27)               */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK PLL0_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Pos (28UL)                   /*!< MDR_RST_CLOCK PLL0_CLK: PLL_RLD (Bit 28)              */
#define MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK PLL0_CLK: PLL_RLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_CLK_SELECT_Pos (29UL)                    /*!< MDR_RST_CLOCK PLL0_CLK: SELECT (Bit 29)               */
#define MDR_RST_CLOCK_PLL0_CLK_SELECT_Msk (0xe0000000UL)            /*!< MDR_RST_CLOCK PLL0_CLK: SELECT (Bitfield-Mask: 0x07)  */
/* =======================================================  PLL0_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG2_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG2 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG2_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG0_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG0 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK0_PRES_REG0_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL0_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL0_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG1_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG1 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG1_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG3_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG3 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK1_PRES_REG3_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL0_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL0_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL0_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL0_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL0_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL0_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL0_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL0_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL0_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL0_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL0_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL0_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL0_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL1_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL1_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK PLL1_CLK: PLL_Q (Bitfield-Mask: 0x0f)   */
#define MDR_RST_CLOCK_PLL1_CLK_DV_Pos     (4UL)                     /*!< MDR_RST_CLOCK PLL1_CLK: DV (Bit 4)                    */
#define MDR_RST_CLOCK_PLL1_CLK_DV_Msk     (0x10UL)                  /*!< MDR_RST_CLOCK PLL1_CLK: DV (Bitfield-Mask: 0x01)      */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_N_Pos  (8UL)                     /*!< MDR_RST_CLOCK PLL1_CLK: PLL_N (Bit 8)                 */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_N_Msk  (0x7f00UL)                /*!< MDR_RST_CLOCK PLL1_CLK: PLL_N (Bitfield-Mask: 0x7f)   */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL1_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK PLL1_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: PLL_ON (Bit 27)               */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK PLL1_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Pos (28UL)                   /*!< MDR_RST_CLOCK PLL1_CLK: PLL_RLD (Bit 28)              */
#define MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK PLL1_CLK: PLL_RLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_CLK_SELECT_Pos (29UL)                    /*!< MDR_RST_CLOCK PLL1_CLK: SELECT (Bit 29)               */
#define MDR_RST_CLOCK_PLL1_CLK_SELECT_Msk (0xe0000000UL)            /*!< MDR_RST_CLOCK PLL1_CLK: SELECT (Bitfield-Mask: 0x07)  */
/* =======================================================  PLL1_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG2_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG2 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG2_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG0_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG0 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK0_PRES_REG0_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL1_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL1_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG1_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG1 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG1_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG3_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG3 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK1_PRES_REG3_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL1_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL1_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL1_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL1_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL1_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL1_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL1_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL1_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL1_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL1_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL1_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL1_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL1_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  PLL2_CLK  ======================================================== */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Pos  (0UL)                     /*!< MDR_RST_CLOCK PLL2_CLK: PLL_Q (Bit 0)                 */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Msk  (0xfUL)                   /*!< MDR_RST_CLOCK PLL2_CLK: PLL_Q (Bitfield-Mask: 0x0f)   */
#define MDR_RST_CLOCK_PLL2_CLK_DV_Pos     (4UL)                     /*!< MDR_RST_CLOCK PLL2_CLK: DV (Bit 4)                    */
#define MDR_RST_CLOCK_PLL2_CLK_DV_Msk     (0x10UL)                  /*!< MDR_RST_CLOCK PLL2_CLK: DV (Bitfield-Mask: 0x01)      */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_N_Pos  (8UL)                     /*!< MDR_RST_CLOCK PLL2_CLK: PLL_N (Bit 8)                 */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_N_Msk  (0x7f00UL)                /*!< MDR_RST_CLOCK PLL2_CLK: PLL_N (Bitfield-Mask: 0x7f)   */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Pos (16UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT0 (Bit 16)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Msk (0x10000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Pos (17UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT1 (Bit 17)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Msk (0x20000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Pos (18UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT2 (Bit 18)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Msk (0x40000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Pos (19UL)             /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT3 (Bit 19)        */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Msk (0x80000UL)        /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK (Bit 20)               */
#define MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL2_CLK: EN_CHK (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Pos (21UL)        /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG0 (Bit 21)   */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Msk (0x200000UL)  /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Pos (22UL)        /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG1 (Bit 22)   */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Msk (0x400000UL)  /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_SHIFT_REG1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Pos (23UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT0 (Bit 23)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Msk (0x800000UL)      /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Pos (24UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT1 (Bit 24)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Pos (25UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT2 (Bit 25)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Pos (26UL)            /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT3 (Bit 26)       */
#define MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Msk (0x4000000UL)     /*!< MDR_RST_CLOCK PLL2_CLK: CLR_CHK_EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Pos (27UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: PLL_ON (Bit 27)               */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Msk (0x8000000UL)             /*!< MDR_RST_CLOCK PLL2_CLK: PLL_ON (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Pos (28UL)                   /*!< MDR_RST_CLOCK PLL2_CLK: PLL_RLD (Bit 28)              */
#define MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Msk (0x10000000UL)           /*!< MDR_RST_CLOCK PLL2_CLK: PLL_RLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_CLK_SELECT_Pos (29UL)                    /*!< MDR_RST_CLOCK PLL2_CLK: SELECT (Bit 29)               */
#define MDR_RST_CLOCK_PLL2_CLK_SELECT_Msk (0xe0000000UL)            /*!< MDR_RST_CLOCK PLL2_CLK: SELECT (Bitfield-Mask: 0x07)  */
/* =======================================================  PLL2_CHK0  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG2_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG2 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG2_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG2 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG0_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG0 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK0_PRES_REG0_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL2_CHK0: PRES_REG0 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL2_CHK1  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG1_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG1 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG1_Msk (0xffffUL)            /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG1 (Bitfield-Mask: 0xffff) */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG3_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG3 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK1_PRES_REG3_Msk (0xffff0000UL)        /*!< MDR_RST_CLOCK PLL2_CHK1: PRES_REG3 (Bitfield-Mask: 0xffff) */
/* =======================================================  PLL2_CHK2  ======================================================= */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG0_Pos (0UL)                 /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG0 (Bit 0)            */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG0_Msk (0xffUL)              /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG1_Pos (8UL)                 /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG1 (Bit 8)            */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG1_Msk (0xff00UL)            /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG2_Pos (16UL)                /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG2 (Bit 16)           */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG2_Msk (0xff0000UL)          /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG2 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG3_Pos (24UL)                /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG3 (Bit 24)           */
#define MDR_RST_CLOCK_PLL2_CHK2_BASE_REG3_Msk (0xff000000UL)        /*!< MDR_RST_CLOCK PLL2_CHK2: BASE_REG3 (Bitfield-Mask: 0xff) */
/* =======================================================  PLL2_STAT  ======================================================= */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG0_Pos (0UL)        /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG0 (Bit 0)   */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG0_Msk (0xffUL)     /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG0 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG1_Pos (8UL)        /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG1 (Bit 8)   */
#define MDR_RST_CLOCK_PLL2_STAT_MAX_CLK_SHIFT_REG1_Msk (0xff00UL)   /*!< MDR_RST_CLOCK PLL2_STAT: MAX_CLK_SHIFT_REG1 (Bitfield-Mask: 0xff) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT0_Pos (16UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT0 (Bit 16)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT0_Msk (0x10000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT0 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT1_Pos (17UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT1 (Bit 17)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT1_Msk (0x20000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT1 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT2_Pos (18UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT2 (Bit 18)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT2_Msk (0x40000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT2 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT3_Pos (19UL)                   /*!< MDR_RST_CLOCK PLL2_STAT: EVENT3 (Bit 19)              */
#define MDR_RST_CLOCK_PLL2_STAT_EVENT3_Msk (0x80000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: EVENT3 (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL2_STAT_READY_Pos (20UL)                    /*!< MDR_RST_CLOCK PLL2_STAT: READY (Bit 20)               */
#define MDR_RST_CLOCK_PLL2_STAT_READY_Msk (0x100000UL)              /*!< MDR_RST_CLOCK PLL2_STAT: READY (Bitfield-Mask: 0x01)  */
/* =======================================================  CAN1_CLK  ======================================================== */
#define MDR_RST_CLOCK_CAN1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK CAN1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_CAN1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK CAN1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK CAN1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK CAN1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM1_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM2_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM3_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM3_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM3_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM3_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM3_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM3_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM3_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  TIM4_CLK  ======================================================== */
#define MDR_RST_CLOCK_TIM4_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK TIM4_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_TIM4_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK TIM4_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK TIM4_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK TIM4_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* ========================================================  ETH_CLK  ======================================================== */
#define MDR_RST_CLOCK_ETH_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK ETH_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_ETH_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK ETH_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_ETH_CLK_CLK_EN_Pos  (16UL)                    /*!< MDR_RST_CLOCK ETH_CLK: CLK_EN (Bit 16)                */
#define MDR_RST_CLOCK_ETH_CLK_CLK_EN_Msk  (0x10000UL)               /*!< MDR_RST_CLOCK ETH_CLK: CLK_EN (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_ETH_CLK_SELECT_Pos  (28UL)                    /*!< MDR_RST_CLOCK ETH_CLK: SELECT (Bit 28)                */
#define MDR_RST_CLOCK_ETH_CLK_SELECT_Msk  (0xf0000000UL)            /*!< MDR_RST_CLOCK ETH_CLK: SELECT (Bitfield-Mask: 0x0f)   */
/* =======================================================  SPW1_CLK  ======================================================== */
#define MDR_RST_CLOCK_SPW1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SPW1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SPW1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SPW1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SPW1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SPW1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SPW1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SPW1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
/* =======================================================  UART1_CLK  ======================================================= */
#define MDR_RST_CLOCK_UART1_CLK_DIV_Pos   (0UL)                     /*!< MDR_RST_CLOCK UART1_CLK: DIV (Bit 0)                  */
#define MDR_RST_CLOCK_UART1_CLK_DIV_Msk   (0xffffUL)                /*!< MDR_RST_CLOCK UART1_CLK: DIV (Bitfield-Mask: 0xffff)  */
#define MDR_RST_CLOCK_UART1_CLK_CLK_EN_Pos (16UL)                   /*!< MDR_RST_CLOCK UART1_CLK: CLK_EN (Bit 16)              */
#define MDR_RST_CLOCK_UART1_CLK_CLK_EN_Msk (0x10000UL)              /*!< MDR_RST_CLOCK UART1_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART1_CLK_SELECT_Pos (28UL)                   /*!< MDR_RST_CLOCK UART1_CLK: SELECT (Bit 28)              */
#define MDR_RST_CLOCK_UART1_CLK_SELECT_Msk (0xf0000000UL)           /*!< MDR_RST_CLOCK UART1_CLK: SELECT (Bitfield-Mask: 0x0f) */
/* =======================================================  UART2_CLK  ======================================================= */
#define MDR_RST_CLOCK_UART2_CLK_DIV_Pos   (0UL)                     /*!< MDR_RST_CLOCK UART2_CLK: DIV (Bit 0)                  */
#define MDR_RST_CLOCK_UART2_CLK_DIV_Msk   (0xffffUL)                /*!< MDR_RST_CLOCK UART2_CLK: DIV (Bitfield-Mask: 0xffff)  */
#define MDR_RST_CLOCK_UART2_CLK_CLK_EN_Pos (16UL)                   /*!< MDR_RST_CLOCK UART2_CLK: CLK_EN (Bit 16)              */
#define MDR_RST_CLOCK_UART2_CLK_CLK_EN_Msk (0x10000UL)              /*!< MDR_RST_CLOCK UART2_CLK: CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART2_CLK_SELECT_Pos (28UL)                   /*!< MDR_RST_CLOCK UART2_CLK: SELECT (Bit 28)              */
#define MDR_RST_CLOCK_UART2_CLK_SELECT_Msk (0xf0000000UL)           /*!< MDR_RST_CLOCK UART2_CLK: SELECT (Bitfield-Mask: 0x0f) */
/* =======================================================  SSP1_CLK  ======================================================== */
#define MDR_RST_CLOCK_SSP1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK SSP1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_SSP1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK SSP1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK SSP1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK SSP1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_SSP1_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK SSP1_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_SSP1_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK SSP1_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  ADC1_CLK  ======================================================== */
#define MDR_RST_CLOCK_ADC1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK ADC1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_ADC1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK ADC1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_ADC1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK ADC1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_ADC1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK ADC1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_ADC1_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK ADC1_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_ADC1_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK ADC1_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  ADC2_CLK  ======================================================== */
#define MDR_RST_CLOCK_ADC2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK ADC2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_ADC2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK ADC2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_ADC2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK ADC2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_ADC2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK ADC2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_ADC2_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK ADC2_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_ADC2_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK ADC2_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  DAC1_CLK  ======================================================== */
#define MDR_RST_CLOCK_DAC1_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK DAC1_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_DAC1_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK DAC1_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_DAC1_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK DAC1_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_DAC1_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK DAC1_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_DAC1_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK DAC1_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_DAC1_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK DAC1_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* =======================================================  DAC2_CLK  ======================================================== */
#define MDR_RST_CLOCK_DAC2_CLK_DIV_Pos    (0UL)                     /*!< MDR_RST_CLOCK DAC2_CLK: DIV (Bit 0)                   */
#define MDR_RST_CLOCK_DAC2_CLK_DIV_Msk    (0xffffUL)                /*!< MDR_RST_CLOCK DAC2_CLK: DIV (Bitfield-Mask: 0xffff)   */
#define MDR_RST_CLOCK_DAC2_CLK_CLK_EN_Pos (16UL)                    /*!< MDR_RST_CLOCK DAC2_CLK: CLK_EN (Bit 16)               */
#define MDR_RST_CLOCK_DAC2_CLK_CLK_EN_Msk (0x10000UL)               /*!< MDR_RST_CLOCK DAC2_CLK: CLK_EN (Bitfield-Mask: 0x01)  */
#define MDR_RST_CLOCK_DAC2_CLK_SELECT_Pos (28UL)                    /*!< MDR_RST_CLOCK DAC2_CLK: SELECT (Bit 28)               */
#define MDR_RST_CLOCK_DAC2_CLK_SELECT_Msk (0xf0000000UL)            /*!< MDR_RST_CLOCK DAC2_CLK: SELECT (Bitfield-Mask: 0x0f)  */
/* ========================================================  RTC_CLK  ======================================================== */
#define MDR_RST_CLOCK_RTC_CLK_DIV_Pos     (0UL)                     /*!< MDR_RST_CLOCK RTC_CLK: DIV (Bit 0)                    */
#define MDR_RST_CLOCK_RTC_CLK_DIV_Msk     (0xffffUL)                /*!< MDR_RST_CLOCK RTC_CLK: DIV (Bitfield-Mask: 0xffff)    */
#define MDR_RST_CLOCK_RTC_CLK_CLK_EN_Pos  (16UL)                    /*!< MDR_RST_CLOCK RTC_CLK: CLK_EN (Bit 16)                */
#define MDR_RST_CLOCK_RTC_CLK_CLK_EN_Msk  (0x10000UL)               /*!< MDR_RST_CLOCK RTC_CLK: CLK_EN (Bitfield-Mask: 0x01)   */
#define MDR_RST_CLOCK_RTC_CLK_SELECT_Pos  (28UL)                    /*!< MDR_RST_CLOCK RTC_CLK: SELECT (Bit 28)                */
#define MDR_RST_CLOCK_RTC_CLK_SELECT_Msk  (0xf0000000UL)            /*!< MDR_RST_CLOCK RTC_CLK: SELECT (Bitfield-Mask: 0x0f)   */


/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  REG  ========================================================== */
/* ==========================================================  KEY  ========================================================== */
/* ======================================================  REG_60_TMR0  ====================================================== */
#define MDR_BKP_REG_60_TMR0_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR0: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR0_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR0: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR0_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR0: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR0_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR0: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR0_S_UccReset_Pos (8UL)                    /*!< MDR_BKP REG_60_TMR0: S_UccReset (Bit 8)               */
#define MDR_BKP_REG_60_TMR0_S_UccReset_Msk (0x100UL)                /*!< MDR_BKP REG_60_TMR0: S_UccReset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_S_RSTn0_Pos   (9UL)                     /*!< MDR_BKP REG_60_TMR0: S_RSTn0 (Bit 9)                  */
#define MDR_BKP_REG_60_TMR0_S_RSTn0_Msk   (0x200UL)                 /*!< MDR_BKP REG_60_TMR0: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_S_FT_Reset_Pos (10UL)                   /*!< MDR_BKP REG_60_TMR0: S_FT_Reset (Bit 10)              */
#define MDR_BKP_REG_60_TMR0_S_FT_Reset_Msk (0x400UL)                /*!< MDR_BKP REG_60_TMR0: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_S_WDT_Reset_Pos (11UL)                  /*!< MDR_BKP REG_60_TMR0: S_WDT_Reset (Bit 11)             */
#define MDR_BKP_REG_60_TMR0_S_WDT_Reset_Msk (0x800UL)               /*!< MDR_BKP REG_60_TMR0: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_S_RSTn1_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR0: S_RSTn1 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR0_S_RSTn1_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR0: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_S_OVRSTn_Pos  (13UL)                    /*!< MDR_BKP REG_60_TMR0: S_OVRSTn (Bit 13)                */
#define MDR_BKP_REG_60_TMR0_S_OVRSTn_Msk  (0x2000UL)                /*!< MDR_BKP REG_60_TMR0: S_OVRSTn (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_60_TMR0_S_SYSRSTn_Pos (14UL)                    /*!< MDR_BKP REG_60_TMR0: S_SYSRSTn (Bit 14)               */
#define MDR_BKP_REG_60_TMR0_S_SYSRSTn_Msk (0x4000UL)                /*!< MDR_BKP REG_60_TMR0: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR0_JTAG_Enable_Pos (15UL)                  /*!< MDR_BKP REG_60_TMR0: JTAG_Enable (Bit 15)             */
#define MDR_BKP_REG_60_TMR0_JTAG_Enable_Msk (0x8000UL)              /*!< MDR_BKP REG_60_TMR0: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_Pos (16UL)              /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc0 (Bit 16)         */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_Msk (0x10000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc0 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_Pos (17UL)              /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc1 (Bit 17)         */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_Msk (0x20000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc1 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_Pos (18UL)              /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc2 (Bit 18)         */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_Msk (0x40000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc2 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_Pos (19UL)              /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc3 (Bit 19)         */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_Msk (0x80000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_DUcc3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_Pos (20UL)               /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_BUcc (Bit 20)          */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_Msk (0x100000UL)         /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_BUcc (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_Pos (21UL)                /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_PLL (Bit 21)           */
#define MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_Msk (0x200000UL)          /*!< MDR_BKP REG_60_TMR0: LimEn_LDO_PLL (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR0_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR0: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR0: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR0: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR0_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR0: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR0_PORSTn_En_Pos (28UL)                    /*!< MDR_BKP REG_60_TMR0: PORSTn_En (Bit 28)               */
#define MDR_BKP_REG_60_TMR0_PORSTn_En_Msk (0x10000000UL)            /*!< MDR_BKP REG_60_TMR0: PORSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR0_OVRSTn_En_Pos (29UL)                    /*!< MDR_BKP REG_60_TMR0: OVRSTn_En (Bit 29)               */
#define MDR_BKP_REG_60_TMR0_OVRSTn_En_Msk (0x20000000UL)            /*!< MDR_BKP REG_60_TMR0: OVRSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR0_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR0: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR0_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR0: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR0: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR0: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR0  ====================================================== */
#define MDR_BKP_REG_61_TMR0_LDO0_SRILow_Pos (0UL)                   /*!< MDR_BKP REG_61_TMR0: LDO0_SRILow (Bit 0)              */
#define MDR_BKP_REG_61_TMR0_LDO0_SRILow_Msk (0x7UL)                 /*!< MDR_BKP REG_61_TMR0: LDO0_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_LDO0_Trim_Pos (3UL)                     /*!< MDR_BKP REG_61_TMR0: LDO0_Trim (Bit 3)                */
#define MDR_BKP_REG_61_TMR0_LDO0_Trim_Msk (0x38UL)                  /*!< MDR_BKP REG_61_TMR0: LDO0_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR0_LDO0_En_Pos   (6UL)                     /*!< MDR_BKP REG_61_TMR0: LDO0_En (Bit 6)                  */
#define MDR_BKP_REG_61_TMR0_LDO0_En_Msk   (0x40UL)                  /*!< MDR_BKP REG_61_TMR0: LDO0_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_LDO0_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_61_TMR0: LDO0_RDY (Bit 7)                 */
#define MDR_BKP_REG_61_TMR0_LDO0_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_61_TMR0: LDO0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_LDO1_SRILow_Pos (8UL)                   /*!< MDR_BKP REG_61_TMR0: LDO1_SRILow (Bit 8)              */
#define MDR_BKP_REG_61_TMR0_LDO1_SRILow_Msk (0x700UL)               /*!< MDR_BKP REG_61_TMR0: LDO1_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_LDO1_Trim_Pos (11UL)                    /*!< MDR_BKP REG_61_TMR0: LDO1_Trim (Bit 11)               */
#define MDR_BKP_REG_61_TMR0_LDO1_Trim_Msk (0x3800UL)                /*!< MDR_BKP REG_61_TMR0: LDO1_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR0_LDO1_En_Pos   (14UL)                    /*!< MDR_BKP REG_61_TMR0: LDO1_En (Bit 14)                 */
#define MDR_BKP_REG_61_TMR0_LDO1_En_Msk   (0x4000UL)                /*!< MDR_BKP REG_61_TMR0: LDO1_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_LDO1_RDY_Pos  (15UL)                    /*!< MDR_BKP REG_61_TMR0: LDO1_RDY (Bit 15)                */
#define MDR_BKP_REG_61_TMR0_LDO1_RDY_Msk  (0x8000UL)                /*!< MDR_BKP REG_61_TMR0: LDO1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_LDO2_SRILow_Pos (16UL)                  /*!< MDR_BKP REG_61_TMR0: LDO2_SRILow (Bit 16)             */
#define MDR_BKP_REG_61_TMR0_LDO2_SRILow_Msk (0x70000UL)             /*!< MDR_BKP REG_61_TMR0: LDO2_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_LDO2_Trim_Pos (19UL)                    /*!< MDR_BKP REG_61_TMR0: LDO2_Trim (Bit 19)               */
#define MDR_BKP_REG_61_TMR0_LDO2_Trim_Msk (0x380000UL)              /*!< MDR_BKP REG_61_TMR0: LDO2_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR0_LDO2_En_Pos   (22UL)                    /*!< MDR_BKP REG_61_TMR0: LDO2_En (Bit 22)                 */
#define MDR_BKP_REG_61_TMR0_LDO2_En_Msk   (0x400000UL)              /*!< MDR_BKP REG_61_TMR0: LDO2_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_LDO2_RDY_Pos  (23UL)                    /*!< MDR_BKP REG_61_TMR0: LDO2_RDY (Bit 23)                */
#define MDR_BKP_REG_61_TMR0_LDO2_RDY_Msk  (0x800000UL)              /*!< MDR_BKP REG_61_TMR0: LDO2_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR0_LDO3_SRILow_Pos (24UL)                  /*!< MDR_BKP REG_61_TMR0: LDO3_SRILow (Bit 24)             */
#define MDR_BKP_REG_61_TMR0_LDO3_SRILow_Msk (0x7000000UL)           /*!< MDR_BKP REG_61_TMR0: LDO3_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR0_LDO3_Trim_Pos (27UL)                    /*!< MDR_BKP REG_61_TMR0: LDO3_Trim (Bit 27)               */
#define MDR_BKP_REG_61_TMR0_LDO3_Trim_Msk (0x38000000UL)            /*!< MDR_BKP REG_61_TMR0: LDO3_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR0_LDO3_En_Pos   (30UL)                    /*!< MDR_BKP REG_61_TMR0: LDO3_En (Bit 30)                 */
#define MDR_BKP_REG_61_TMR0_LDO3_En_Msk   (0x40000000UL)            /*!< MDR_BKP REG_61_TMR0: LDO3_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR0_LDO3_RDY_Pos  (31UL)                    /*!< MDR_BKP REG_61_TMR0: LDO3_RDY (Bit 31)                */
#define MDR_BKP_REG_61_TMR0_LDO3_RDY_Msk  (0x80000000UL)            /*!< MDR_BKP REG_61_TMR0: LDO3_RDY (Bitfield-Mask: 0x01)   */
/* ======================================================  REG_62_TMR0  ====================================================== */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_Pos (0UL)               /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_SRILow (Bit 0)          */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_Msk (0x7UL)             /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_Pos (3UL)                 /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_Trim (Bit 3)            */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_Msk (0x38UL)              /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_En_Pos (6UL)                   /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_En (Bit 6)              */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_En_Msk (0x40UL)                /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_Pos (7UL)                  /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_RDY (Bit 7)             */
#define MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_Msk (0x80UL)               /*!< MDR_BKP REG_62_TMR0: LDO_BUcc_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_Pos (8UL)                /*!< MDR_BKP REG_62_TMR0: LDO_PLL_SRILow (Bit 8)           */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_Msk (0x700UL)            /*!< MDR_BKP REG_62_TMR0: LDO_PLL_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_Pos (11UL)                 /*!< MDR_BKP REG_62_TMR0: LDO_PLL_Trim (Bit 11)            */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_Msk (0x3800UL)             /*!< MDR_BKP REG_62_TMR0: LDO_PLL_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_En_Pos (14UL)                   /*!< MDR_BKP REG_62_TMR0: LDO_PLL_En (Bit 14)              */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_En_Msk (0x4000UL)               /*!< MDR_BKP REG_62_TMR0: LDO_PLL_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_Pos (15UL)                  /*!< MDR_BKP REG_62_TMR0: LDO_PLL_RDY (Bit 15)             */
#define MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_Msk (0x8000UL)              /*!< MDR_BKP REG_62_TMR0: LDO_PLL_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR0_TrimR_Pos     (16UL)                    /*!< MDR_BKP REG_62_TMR0: TrimR (Bit 16)                   */
#define MDR_BKP_REG_62_TMR0_TrimR_Msk     (0x1ff0000UL)             /*!< MDR_BKP REG_62_TMR0: TrimR (Bitfield-Mask: 0x1ff)     */
#define MDR_BKP_REG_62_TMR0_Trim_Ref_Pos  (28UL)                    /*!< MDR_BKP REG_62_TMR0: Trim_Ref (Bit 28)                */
#define MDR_BKP_REG_62_TMR0_Trim_Ref_Msk  (0x70000000UL)            /*!< MDR_BKP REG_62_TMR0: Trim_Ref (Bitfield-Mask: 0x07)   */
/* ======================================================  REG_63_TMR0  ====================================================== */
#define MDR_BKP_REG_63_TMR0_LSE_On_Pos    (0UL)                     /*!< MDR_BKP REG_63_TMR0: LSE_On (Bit 0)                   */
#define MDR_BKP_REG_63_TMR0_LSE_On_Msk    (0x1UL)                   /*!< MDR_BKP REG_63_TMR0: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_LSE_BYP_Pos   (1UL)                     /*!< MDR_BKP REG_63_TMR0: LSE_BYP (Bit 1)                  */
#define MDR_BKP_REG_63_TMR0_LSE_BYP_Msk   (0x2UL)                   /*!< MDR_BKP REG_63_TMR0: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_RTC_Sel_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR0: RTC_Sel (Bit 2)                  */
#define MDR_BKP_REG_63_TMR0_RTC_Sel_Msk   (0xcUL)                   /*!< MDR_BKP REG_63_TMR0: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_63_TMR0_RTC_En_Pos    (4UL)                     /*!< MDR_BKP REG_63_TMR0: RTC_En (Bit 4)                   */
#define MDR_BKP_REG_63_TMR0_RTC_En_Msk    (0x10UL)                  /*!< MDR_BKP REG_63_TMR0: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_RTC_Cal_Pos   (5UL)                     /*!< MDR_BKP REG_63_TMR0: RTC_Cal (Bit 5)                  */
#define MDR_BKP_REG_63_TMR0_RTC_Cal_Msk   (0x1fe0UL)                /*!< MDR_BKP REG_63_TMR0: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_63_TMR0_LSE_RDY_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR0: LSE_RDY (Bit 13)                 */
#define MDR_BKP_REG_63_TMR0_LSE_RDY_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR0: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_LSE_FilterEn_Pos (14UL)                 /*!< MDR_BKP REG_63_TMR0: LSE_FilterEn (Bit 14)            */
#define MDR_BKP_REG_63_TMR0_LSE_FilterEn_Msk (0x4000UL)             /*!< MDR_BKP REG_63_TMR0: LSE_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR0_LSI_On_Pos    (15UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_On (Bit 15)                  */
#define MDR_BKP_REG_63_TMR0_LSI_On_Msk    (0x8000UL)                /*!< MDR_BKP REG_63_TMR0: LSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_LSI_Trim_Pos  (16UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_Trim (Bit 16)                */
#define MDR_BKP_REG_63_TMR0_LSI_Trim_Msk  (0x1f0000UL)              /*!< MDR_BKP REG_63_TMR0: LSI_Trim (Bitfield-Mask: 0x1f)   */
#define MDR_BKP_REG_63_TMR0_LSI_RDY_Pos   (21UL)                    /*!< MDR_BKP REG_63_TMR0: LSI_RDY (Bit 21)                 */
#define MDR_BKP_REG_63_TMR0_LSI_RDY_Msk   (0x200000UL)              /*!< MDR_BKP REG_63_TMR0: LSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_HSI_On_Pos    (22UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_On (Bit 22)                  */
#define MDR_BKP_REG_63_TMR0_HSI_On_Msk    (0x400000UL)              /*!< MDR_BKP REG_63_TMR0: HSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR0_HSI_RDY_Pos   (23UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_RDY (Bit 23)                 */
#define MDR_BKP_REG_63_TMR0_HSI_RDY_Msk   (0x800000UL)              /*!< MDR_BKP REG_63_TMR0: HSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_HSI_Trim_Pos  (24UL)                    /*!< MDR_BKP REG_63_TMR0: HSI_Trim (Bit 24)                */
#define MDR_BKP_REG_63_TMR0_HSI_Trim_Msk  (0x3f000000UL)            /*!< MDR_BKP REG_63_TMR0: HSI_Trim (Bitfield-Mask: 0x3f)   */
#define MDR_BKP_REG_63_TMR0_STANDBY_Pos   (30UL)                    /*!< MDR_BKP REG_63_TMR0: STANDBY (Bit 30)                 */
#define MDR_BKP_REG_63_TMR0_STANDBY_Msk   (0x40000000UL)            /*!< MDR_BKP REG_63_TMR0: STANDBY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR0_RTC_RST_Pos   (31UL)                    /*!< MDR_BKP REG_63_TMR0: RTC_RST (Bit 31)                 */
#define MDR_BKP_REG_63_TMR0_RTC_RST_Msk   (0x80000000UL)            /*!< MDR_BKP REG_63_TMR0: RTC_RST (Bitfield-Mask: 0x01)    */
/* ======================================================  REG_60_TMR1  ====================================================== */
#define MDR_BKP_REG_60_TMR1_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR1: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR1_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR1: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR1_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR1: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR1_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR1: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR1_S_UccReset_Pos (8UL)                    /*!< MDR_BKP REG_60_TMR1: S_UccReset (Bit 8)               */
#define MDR_BKP_REG_60_TMR1_S_UccReset_Msk (0x100UL)                /*!< MDR_BKP REG_60_TMR1: S_UccReset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_S_RSTn0_Pos   (9UL)                     /*!< MDR_BKP REG_60_TMR1: S_RSTn0 (Bit 9)                  */
#define MDR_BKP_REG_60_TMR1_S_RSTn0_Msk   (0x200UL)                 /*!< MDR_BKP REG_60_TMR1: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_S_FT_Reset_Pos (10UL)                   /*!< MDR_BKP REG_60_TMR1: S_FT_Reset (Bit 10)              */
#define MDR_BKP_REG_60_TMR1_S_FT_Reset_Msk (0x400UL)                /*!< MDR_BKP REG_60_TMR1: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_S_WDT_Reset_Pos (11UL)                  /*!< MDR_BKP REG_60_TMR1: S_WDT_Reset (Bit 11)             */
#define MDR_BKP_REG_60_TMR1_S_WDT_Reset_Msk (0x800UL)               /*!< MDR_BKP REG_60_TMR1: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_S_RSTn1_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR1: S_RSTn1 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR1_S_RSTn1_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR1: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_S_OVRSTn_Pos  (13UL)                    /*!< MDR_BKP REG_60_TMR1: S_OVRSTn (Bit 13)                */
#define MDR_BKP_REG_60_TMR1_S_OVRSTn_Msk  (0x2000UL)                /*!< MDR_BKP REG_60_TMR1: S_OVRSTn (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_60_TMR1_S_SYSRSTn_Pos (14UL)                    /*!< MDR_BKP REG_60_TMR1: S_SYSRSTn (Bit 14)               */
#define MDR_BKP_REG_60_TMR1_S_SYSRSTn_Msk (0x4000UL)                /*!< MDR_BKP REG_60_TMR1: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR1_JTAG_Enable_Pos (15UL)                  /*!< MDR_BKP REG_60_TMR1: JTAG_Enable (Bit 15)             */
#define MDR_BKP_REG_60_TMR1_JTAG_Enable_Msk (0x8000UL)              /*!< MDR_BKP REG_60_TMR1: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_Pos (16UL)              /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc0 (Bit 16)         */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_Msk (0x10000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc0 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_Pos (17UL)              /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc1 (Bit 17)         */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_Msk (0x20000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc1 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_Pos (18UL)              /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc2 (Bit 18)         */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_Msk (0x40000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc2 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_Pos (19UL)              /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc3 (Bit 19)         */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_Msk (0x80000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_DUcc3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_Pos (20UL)               /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_BUcc (Bit 20)          */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_Msk (0x100000UL)         /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_BUcc (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_Pos (21UL)                /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_PLL (Bit 21)           */
#define MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_Msk (0x200000UL)          /*!< MDR_BKP REG_60_TMR1: LimEn_LDO_PLL (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR1_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR1: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR1: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR1: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR1_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR1: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR1_PORSTn_En_Pos (28UL)                    /*!< MDR_BKP REG_60_TMR1: PORSTn_En (Bit 28)               */
#define MDR_BKP_REG_60_TMR1_PORSTn_En_Msk (0x10000000UL)            /*!< MDR_BKP REG_60_TMR1: PORSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR1_OVRSTn_En_Pos (29UL)                    /*!< MDR_BKP REG_60_TMR1: OVRSTn_En (Bit 29)               */
#define MDR_BKP_REG_60_TMR1_OVRSTn_En_Msk (0x20000000UL)            /*!< MDR_BKP REG_60_TMR1: OVRSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR1_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR1: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR1_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR1: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR1: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR1: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR1  ====================================================== */
#define MDR_BKP_REG_61_TMR1_LDO0_SRILow_Pos (0UL)                   /*!< MDR_BKP REG_61_TMR1: LDO0_SRILow (Bit 0)              */
#define MDR_BKP_REG_61_TMR1_LDO0_SRILow_Msk (0x7UL)                 /*!< MDR_BKP REG_61_TMR1: LDO0_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_LDO0_Trim_Pos (3UL)                     /*!< MDR_BKP REG_61_TMR1: LDO0_Trim (Bit 3)                */
#define MDR_BKP_REG_61_TMR1_LDO0_Trim_Msk (0x38UL)                  /*!< MDR_BKP REG_61_TMR1: LDO0_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR1_LDO0_En_Pos   (6UL)                     /*!< MDR_BKP REG_61_TMR1: LDO0_En (Bit 6)                  */
#define MDR_BKP_REG_61_TMR1_LDO0_En_Msk   (0x40UL)                  /*!< MDR_BKP REG_61_TMR1: LDO0_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_LDO0_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_61_TMR1: LDO0_RDY (Bit 7)                 */
#define MDR_BKP_REG_61_TMR1_LDO0_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_61_TMR1: LDO0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_LDO1_SRILow_Pos (8UL)                   /*!< MDR_BKP REG_61_TMR1: LDO1_SRILow (Bit 8)              */
#define MDR_BKP_REG_61_TMR1_LDO1_SRILow_Msk (0x700UL)               /*!< MDR_BKP REG_61_TMR1: LDO1_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_LDO1_Trim_Pos (11UL)                    /*!< MDR_BKP REG_61_TMR1: LDO1_Trim (Bit 11)               */
#define MDR_BKP_REG_61_TMR1_LDO1_Trim_Msk (0x3800UL)                /*!< MDR_BKP REG_61_TMR1: LDO1_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR1_LDO1_En_Pos   (14UL)                    /*!< MDR_BKP REG_61_TMR1: LDO1_En (Bit 14)                 */
#define MDR_BKP_REG_61_TMR1_LDO1_En_Msk   (0x4000UL)                /*!< MDR_BKP REG_61_TMR1: LDO1_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_LDO1_RDY_Pos  (15UL)                    /*!< MDR_BKP REG_61_TMR1: LDO1_RDY (Bit 15)                */
#define MDR_BKP_REG_61_TMR1_LDO1_RDY_Msk  (0x8000UL)                /*!< MDR_BKP REG_61_TMR1: LDO1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_LDO2_SRILow_Pos (16UL)                  /*!< MDR_BKP REG_61_TMR1: LDO2_SRILow (Bit 16)             */
#define MDR_BKP_REG_61_TMR1_LDO2_SRILow_Msk (0x70000UL)             /*!< MDR_BKP REG_61_TMR1: LDO2_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_LDO2_Trim_Pos (19UL)                    /*!< MDR_BKP REG_61_TMR1: LDO2_Trim (Bit 19)               */
#define MDR_BKP_REG_61_TMR1_LDO2_Trim_Msk (0x380000UL)              /*!< MDR_BKP REG_61_TMR1: LDO2_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR1_LDO2_En_Pos   (22UL)                    /*!< MDR_BKP REG_61_TMR1: LDO2_En (Bit 22)                 */
#define MDR_BKP_REG_61_TMR1_LDO2_En_Msk   (0x400000UL)              /*!< MDR_BKP REG_61_TMR1: LDO2_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_LDO2_RDY_Pos  (23UL)                    /*!< MDR_BKP REG_61_TMR1: LDO2_RDY (Bit 23)                */
#define MDR_BKP_REG_61_TMR1_LDO2_RDY_Msk  (0x800000UL)              /*!< MDR_BKP REG_61_TMR1: LDO2_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR1_LDO3_SRILow_Pos (24UL)                  /*!< MDR_BKP REG_61_TMR1: LDO3_SRILow (Bit 24)             */
#define MDR_BKP_REG_61_TMR1_LDO3_SRILow_Msk (0x7000000UL)           /*!< MDR_BKP REG_61_TMR1: LDO3_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR1_LDO3_Trim_Pos (27UL)                    /*!< MDR_BKP REG_61_TMR1: LDO3_Trim (Bit 27)               */
#define MDR_BKP_REG_61_TMR1_LDO3_Trim_Msk (0x38000000UL)            /*!< MDR_BKP REG_61_TMR1: LDO3_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR1_LDO3_En_Pos   (30UL)                    /*!< MDR_BKP REG_61_TMR1: LDO3_En (Bit 30)                 */
#define MDR_BKP_REG_61_TMR1_LDO3_En_Msk   (0x40000000UL)            /*!< MDR_BKP REG_61_TMR1: LDO3_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR1_LDO3_RDY_Pos  (31UL)                    /*!< MDR_BKP REG_61_TMR1: LDO3_RDY (Bit 31)                */
#define MDR_BKP_REG_61_TMR1_LDO3_RDY_Msk  (0x80000000UL)            /*!< MDR_BKP REG_61_TMR1: LDO3_RDY (Bitfield-Mask: 0x01)   */
/* ======================================================  REG_62_TMR1  ====================================================== */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_Pos (0UL)               /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_SRILow (Bit 0)          */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_Msk (0x7UL)             /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_Pos (3UL)                 /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_Trim (Bit 3)            */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_Msk (0x38UL)              /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_En_Pos (6UL)                   /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_En (Bit 6)              */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_En_Msk (0x40UL)                /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_Pos (7UL)                  /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_RDY (Bit 7)             */
#define MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_Msk (0x80UL)               /*!< MDR_BKP REG_62_TMR1: LDO_BUcc_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_Pos (8UL)                /*!< MDR_BKP REG_62_TMR1: LDO_PLL_SRILow (Bit 8)           */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_Msk (0x700UL)            /*!< MDR_BKP REG_62_TMR1: LDO_PLL_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_Pos (11UL)                 /*!< MDR_BKP REG_62_TMR1: LDO_PLL_Trim (Bit 11)            */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_Msk (0x3800UL)             /*!< MDR_BKP REG_62_TMR1: LDO_PLL_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_En_Pos (14UL)                   /*!< MDR_BKP REG_62_TMR1: LDO_PLL_En (Bit 14)              */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_En_Msk (0x4000UL)               /*!< MDR_BKP REG_62_TMR1: LDO_PLL_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_Pos (15UL)                  /*!< MDR_BKP REG_62_TMR1: LDO_PLL_RDY (Bit 15)             */
#define MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_Msk (0x8000UL)              /*!< MDR_BKP REG_62_TMR1: LDO_PLL_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR1_TrimR_Pos     (16UL)                    /*!< MDR_BKP REG_62_TMR1: TrimR (Bit 16)                   */
#define MDR_BKP_REG_62_TMR1_TrimR_Msk     (0x1ff0000UL)             /*!< MDR_BKP REG_62_TMR1: TrimR (Bitfield-Mask: 0x1ff)     */
#define MDR_BKP_REG_62_TMR1_Trim_Ref_Pos  (28UL)                    /*!< MDR_BKP REG_62_TMR1: Trim_Ref (Bit 28)                */
#define MDR_BKP_REG_62_TMR1_Trim_Ref_Msk  (0x70000000UL)            /*!< MDR_BKP REG_62_TMR1: Trim_Ref (Bitfield-Mask: 0x07)   */
/* ======================================================  REG_63_TMR1  ====================================================== */
#define MDR_BKP_REG_63_TMR1_LSE_On_Pos    (0UL)                     /*!< MDR_BKP REG_63_TMR1: LSE_On (Bit 0)                   */
#define MDR_BKP_REG_63_TMR1_LSE_On_Msk    (0x1UL)                   /*!< MDR_BKP REG_63_TMR1: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_LSE_BYP_Pos   (1UL)                     /*!< MDR_BKP REG_63_TMR1: LSE_BYP (Bit 1)                  */
#define MDR_BKP_REG_63_TMR1_LSE_BYP_Msk   (0x2UL)                   /*!< MDR_BKP REG_63_TMR1: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_RTC_Sel_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR1: RTC_Sel (Bit 2)                  */
#define MDR_BKP_REG_63_TMR1_RTC_Sel_Msk   (0xcUL)                   /*!< MDR_BKP REG_63_TMR1: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_63_TMR1_RTC_En_Pos    (4UL)                     /*!< MDR_BKP REG_63_TMR1: RTC_En (Bit 4)                   */
#define MDR_BKP_REG_63_TMR1_RTC_En_Msk    (0x10UL)                  /*!< MDR_BKP REG_63_TMR1: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_RTC_Cal_Pos   (5UL)                     /*!< MDR_BKP REG_63_TMR1: RTC_Cal (Bit 5)                  */
#define MDR_BKP_REG_63_TMR1_RTC_Cal_Msk   (0x1fe0UL)                /*!< MDR_BKP REG_63_TMR1: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_63_TMR1_LSE_RDY_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR1: LSE_RDY (Bit 13)                 */
#define MDR_BKP_REG_63_TMR1_LSE_RDY_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR1: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_LSE_FilterEn_Pos (14UL)                 /*!< MDR_BKP REG_63_TMR1: LSE_FilterEn (Bit 14)            */
#define MDR_BKP_REG_63_TMR1_LSE_FilterEn_Msk (0x4000UL)             /*!< MDR_BKP REG_63_TMR1: LSE_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR1_LSI_On_Pos    (15UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_On (Bit 15)                  */
#define MDR_BKP_REG_63_TMR1_LSI_On_Msk    (0x8000UL)                /*!< MDR_BKP REG_63_TMR1: LSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_LSI_Trim_Pos  (16UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_Trim (Bit 16)                */
#define MDR_BKP_REG_63_TMR1_LSI_Trim_Msk  (0x1f0000UL)              /*!< MDR_BKP REG_63_TMR1: LSI_Trim (Bitfield-Mask: 0x1f)   */
#define MDR_BKP_REG_63_TMR1_LSI_RDY_Pos   (21UL)                    /*!< MDR_BKP REG_63_TMR1: LSI_RDY (Bit 21)                 */
#define MDR_BKP_REG_63_TMR1_LSI_RDY_Msk   (0x200000UL)              /*!< MDR_BKP REG_63_TMR1: LSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_HSI_On_Pos    (22UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_On (Bit 22)                  */
#define MDR_BKP_REG_63_TMR1_HSI_On_Msk    (0x400000UL)              /*!< MDR_BKP REG_63_TMR1: HSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR1_HSI_RDY_Pos   (23UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_RDY (Bit 23)                 */
#define MDR_BKP_REG_63_TMR1_HSI_RDY_Msk   (0x800000UL)              /*!< MDR_BKP REG_63_TMR1: HSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_HSI_Trim_Pos  (24UL)                    /*!< MDR_BKP REG_63_TMR1: HSI_Trim (Bit 24)                */
#define MDR_BKP_REG_63_TMR1_HSI_Trim_Msk  (0x3f000000UL)            /*!< MDR_BKP REG_63_TMR1: HSI_Trim (Bitfield-Mask: 0x3f)   */
#define MDR_BKP_REG_63_TMR1_STANDBY_Pos   (30UL)                    /*!< MDR_BKP REG_63_TMR1: STANDBY (Bit 30)                 */
#define MDR_BKP_REG_63_TMR1_STANDBY_Msk   (0x40000000UL)            /*!< MDR_BKP REG_63_TMR1: STANDBY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR1_RTC_RST_Pos   (31UL)                    /*!< MDR_BKP REG_63_TMR1: RTC_RST (Bit 31)                 */
#define MDR_BKP_REG_63_TMR1_RTC_RST_Msk   (0x80000000UL)            /*!< MDR_BKP REG_63_TMR1: RTC_RST (Bitfield-Mask: 0x01)    */
/* ======================================================  REG_60_TMR2  ====================================================== */
#define MDR_BKP_REG_60_TMR2_MODE_Pos      (0UL)                     /*!< MDR_BKP REG_60_TMR2: MODE (Bit 0)                     */
#define MDR_BKP_REG_60_TMR2_MODE_Msk      (0x7fUL)                  /*!< MDR_BKP REG_60_TMR2: MODE (Bitfield-Mask: 0x7f)       */
#define MDR_BKP_REG_60_TMR2_FPOR_Pos      (7UL)                     /*!< MDR_BKP REG_60_TMR2: FPOR (Bit 7)                     */
#define MDR_BKP_REG_60_TMR2_FPOR_Msk      (0x80UL)                  /*!< MDR_BKP REG_60_TMR2: FPOR (Bitfield-Mask: 0x01)       */
#define MDR_BKP_REG_60_TMR2_S_UccReset_Pos (8UL)                    /*!< MDR_BKP REG_60_TMR2: S_UccReset (Bit 8)               */
#define MDR_BKP_REG_60_TMR2_S_UccReset_Msk (0x100UL)                /*!< MDR_BKP REG_60_TMR2: S_UccReset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_S_RSTn0_Pos   (9UL)                     /*!< MDR_BKP REG_60_TMR2: S_RSTn0 (Bit 9)                  */
#define MDR_BKP_REG_60_TMR2_S_RSTn0_Msk   (0x200UL)                 /*!< MDR_BKP REG_60_TMR2: S_RSTn0 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_S_FT_Reset_Pos (10UL)                   /*!< MDR_BKP REG_60_TMR2: S_FT_Reset (Bit 10)              */
#define MDR_BKP_REG_60_TMR2_S_FT_Reset_Msk (0x400UL)                /*!< MDR_BKP REG_60_TMR2: S_FT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_S_WDT_Reset_Pos (11UL)                  /*!< MDR_BKP REG_60_TMR2: S_WDT_Reset (Bit 11)             */
#define MDR_BKP_REG_60_TMR2_S_WDT_Reset_Msk (0x800UL)               /*!< MDR_BKP REG_60_TMR2: S_WDT_Reset (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_S_RSTn1_Pos   (12UL)                    /*!< MDR_BKP REG_60_TMR2: S_RSTn1 (Bit 12)                 */
#define MDR_BKP_REG_60_TMR2_S_RSTn1_Msk   (0x1000UL)                /*!< MDR_BKP REG_60_TMR2: S_RSTn1 (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_S_OVRSTn_Pos  (13UL)                    /*!< MDR_BKP REG_60_TMR2: S_OVRSTn (Bit 13)                */
#define MDR_BKP_REG_60_TMR2_S_OVRSTn_Msk  (0x2000UL)                /*!< MDR_BKP REG_60_TMR2: S_OVRSTn (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_60_TMR2_S_SYSRSTn_Pos (14UL)                    /*!< MDR_BKP REG_60_TMR2: S_SYSRSTn (Bit 14)               */
#define MDR_BKP_REG_60_TMR2_S_SYSRSTn_Msk (0x4000UL)                /*!< MDR_BKP REG_60_TMR2: S_SYSRSTn (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR2_JTAG_Enable_Pos (15UL)                  /*!< MDR_BKP REG_60_TMR2: JTAG_Enable (Bit 15)             */
#define MDR_BKP_REG_60_TMR2_JTAG_Enable_Msk (0x8000UL)              /*!< MDR_BKP REG_60_TMR2: JTAG_Enable (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_Pos (16UL)              /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc0 (Bit 16)         */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_Msk (0x10000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc0 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_Pos (17UL)              /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc1 (Bit 17)         */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_Msk (0x20000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc1 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_Pos (18UL)              /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc2 (Bit 18)         */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_Msk (0x40000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc2 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_Pos (19UL)              /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc3 (Bit 19)         */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_Msk (0x80000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_DUcc3 (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_Pos (20UL)               /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_BUcc (Bit 20)          */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_Msk (0x100000UL)         /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_BUcc (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_Pos (21UL)                /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_PLL (Bit 21)           */
#define MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_Msk (0x200000UL)          /*!< MDR_BKP REG_60_TMR2: LimEn_LDO_PLL (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG60x_Pos (25UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_REG60x (Bit 25)              */
#define MDR_BKP_REG_60_TMR2_ERR_REG60x_Msk (0x2000000UL)            /*!< MDR_BKP REG_60_TMR2: ERR_REG60x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Pos (26UL)               /*!< MDR_BKP REG_60_TMR2: ERR_REG61x_62x (Bit 26)          */
#define MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Msk (0x4000000UL)        /*!< MDR_BKP REG_60_TMR2: ERR_REG61x_62x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_ERR_REG63x_Pos (27UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_REG63x (Bit 27)              */
#define MDR_BKP_REG_60_TMR2_ERR_REG63x_Msk (0x8000000UL)            /*!< MDR_BKP REG_60_TMR2: ERR_REG63x (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_60_TMR2_PORSTn_En_Pos (28UL)                    /*!< MDR_BKP REG_60_TMR2: PORSTn_En (Bit 28)               */
#define MDR_BKP_REG_60_TMR2_PORSTn_En_Msk (0x10000000UL)            /*!< MDR_BKP REG_60_TMR2: PORSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR2_OVRSTn_En_Pos (29UL)                    /*!< MDR_BKP REG_60_TMR2: OVRSTn_En (Bit 29)               */
#define MDR_BKP_REG_60_TMR2_OVRSTn_En_Msk (0x20000000UL)            /*!< MDR_BKP REG_60_TMR2: OVRSTn_En (Bitfield-Mask: 0x01)  */
#define MDR_BKP_REG_60_TMR2_CLR_ERR_Pos   (30UL)                    /*!< MDR_BKP REG_60_TMR2: CLR_ERR (Bit 30)                 */
#define MDR_BKP_REG_60_TMR2_CLR_ERR_Msk   (0x40000000UL)            /*!< MDR_BKP REG_60_TMR2: CLR_ERR (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Pos (31UL)                   /*!< MDR_BKP REG_60_TMR2: ERR_IRQ_EN (Bit 31)              */
#define MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Msk (0x80000000UL)           /*!< MDR_BKP REG_60_TMR2: ERR_IRQ_EN (Bitfield-Mask: 0x01) */
/* ======================================================  REG_61_TMR2  ====================================================== */
#define MDR_BKP_REG_61_TMR2_LDO0_SRILow_Pos (0UL)                   /*!< MDR_BKP REG_61_TMR2: LDO0_SRILow (Bit 0)              */
#define MDR_BKP_REG_61_TMR2_LDO0_SRILow_Msk (0x7UL)                 /*!< MDR_BKP REG_61_TMR2: LDO0_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_LDO0_Trim_Pos (3UL)                     /*!< MDR_BKP REG_61_TMR2: LDO0_Trim (Bit 3)                */
#define MDR_BKP_REG_61_TMR2_LDO0_Trim_Msk (0x38UL)                  /*!< MDR_BKP REG_61_TMR2: LDO0_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR2_LDO0_En_Pos   (6UL)                     /*!< MDR_BKP REG_61_TMR2: LDO0_En (Bit 6)                  */
#define MDR_BKP_REG_61_TMR2_LDO0_En_Msk   (0x40UL)                  /*!< MDR_BKP REG_61_TMR2: LDO0_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_LDO0_RDY_Pos  (7UL)                     /*!< MDR_BKP REG_61_TMR2: LDO0_RDY (Bit 7)                 */
#define MDR_BKP_REG_61_TMR2_LDO0_RDY_Msk  (0x80UL)                  /*!< MDR_BKP REG_61_TMR2: LDO0_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_LDO1_SRILow_Pos (8UL)                   /*!< MDR_BKP REG_61_TMR2: LDO1_SRILow (Bit 8)              */
#define MDR_BKP_REG_61_TMR2_LDO1_SRILow_Msk (0x700UL)               /*!< MDR_BKP REG_61_TMR2: LDO1_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_LDO1_Trim_Pos (11UL)                    /*!< MDR_BKP REG_61_TMR2: LDO1_Trim (Bit 11)               */
#define MDR_BKP_REG_61_TMR2_LDO1_Trim_Msk (0x3800UL)                /*!< MDR_BKP REG_61_TMR2: LDO1_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR2_LDO1_En_Pos   (14UL)                    /*!< MDR_BKP REG_61_TMR2: LDO1_En (Bit 14)                 */
#define MDR_BKP_REG_61_TMR2_LDO1_En_Msk   (0x4000UL)                /*!< MDR_BKP REG_61_TMR2: LDO1_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_LDO1_RDY_Pos  (15UL)                    /*!< MDR_BKP REG_61_TMR2: LDO1_RDY (Bit 15)                */
#define MDR_BKP_REG_61_TMR2_LDO1_RDY_Msk  (0x8000UL)                /*!< MDR_BKP REG_61_TMR2: LDO1_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_LDO2_SRILow_Pos (16UL)                  /*!< MDR_BKP REG_61_TMR2: LDO2_SRILow (Bit 16)             */
#define MDR_BKP_REG_61_TMR2_LDO2_SRILow_Msk (0x70000UL)             /*!< MDR_BKP REG_61_TMR2: LDO2_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_LDO2_Trim_Pos (19UL)                    /*!< MDR_BKP REG_61_TMR2: LDO2_Trim (Bit 19)               */
#define MDR_BKP_REG_61_TMR2_LDO2_Trim_Msk (0x380000UL)              /*!< MDR_BKP REG_61_TMR2: LDO2_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR2_LDO2_En_Pos   (22UL)                    /*!< MDR_BKP REG_61_TMR2: LDO2_En (Bit 22)                 */
#define MDR_BKP_REG_61_TMR2_LDO2_En_Msk   (0x400000UL)              /*!< MDR_BKP REG_61_TMR2: LDO2_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_LDO2_RDY_Pos  (23UL)                    /*!< MDR_BKP REG_61_TMR2: LDO2_RDY (Bit 23)                */
#define MDR_BKP_REG_61_TMR2_LDO2_RDY_Msk  (0x800000UL)              /*!< MDR_BKP REG_61_TMR2: LDO2_RDY (Bitfield-Mask: 0x01)   */
#define MDR_BKP_REG_61_TMR2_LDO3_SRILow_Pos (24UL)                  /*!< MDR_BKP REG_61_TMR2: LDO3_SRILow (Bit 24)             */
#define MDR_BKP_REG_61_TMR2_LDO3_SRILow_Msk (0x7000000UL)           /*!< MDR_BKP REG_61_TMR2: LDO3_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_61_TMR2_LDO3_Trim_Pos (27UL)                    /*!< MDR_BKP REG_61_TMR2: LDO3_Trim (Bit 27)               */
#define MDR_BKP_REG_61_TMR2_LDO3_Trim_Msk (0x38000000UL)            /*!< MDR_BKP REG_61_TMR2: LDO3_Trim (Bitfield-Mask: 0x07)  */
#define MDR_BKP_REG_61_TMR2_LDO3_En_Pos   (30UL)                    /*!< MDR_BKP REG_61_TMR2: LDO3_En (Bit 30)                 */
#define MDR_BKP_REG_61_TMR2_LDO3_En_Msk   (0x40000000UL)            /*!< MDR_BKP REG_61_TMR2: LDO3_En (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_61_TMR2_LDO3_RDY_Pos  (31UL)                    /*!< MDR_BKP REG_61_TMR2: LDO3_RDY (Bit 31)                */
#define MDR_BKP_REG_61_TMR2_LDO3_RDY_Msk  (0x80000000UL)            /*!< MDR_BKP REG_61_TMR2: LDO3_RDY (Bitfield-Mask: 0x01)   */
/* ======================================================  REG_62_TMR2  ====================================================== */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_Pos (0UL)               /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_SRILow (Bit 0)          */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_Msk (0x7UL)             /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_Pos (3UL)                 /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_Trim (Bit 3)            */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_Msk (0x38UL)              /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_En_Pos (6UL)                   /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_En (Bit 6)              */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_En_Msk (0x40UL)                /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_Pos (7UL)                  /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_RDY (Bit 7)             */
#define MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_Msk (0x80UL)               /*!< MDR_BKP REG_62_TMR2: LDO_BUcc_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_Pos (8UL)                /*!< MDR_BKP REG_62_TMR2: LDO_PLL_SRILow (Bit 8)           */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_Msk (0x700UL)            /*!< MDR_BKP REG_62_TMR2: LDO_PLL_SRILow (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_Pos (11UL)                 /*!< MDR_BKP REG_62_TMR2: LDO_PLL_Trim (Bit 11)            */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_Msk (0x3800UL)             /*!< MDR_BKP REG_62_TMR2: LDO_PLL_Trim (Bitfield-Mask: 0x07) */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_En_Pos (14UL)                   /*!< MDR_BKP REG_62_TMR2: LDO_PLL_En (Bit 14)              */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_En_Msk (0x4000UL)               /*!< MDR_BKP REG_62_TMR2: LDO_PLL_En (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_Pos (15UL)                  /*!< MDR_BKP REG_62_TMR2: LDO_PLL_RDY (Bit 15)             */
#define MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_Msk (0x8000UL)              /*!< MDR_BKP REG_62_TMR2: LDO_PLL_RDY (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_62_TMR2_TrimR_Pos     (16UL)                    /*!< MDR_BKP REG_62_TMR2: TrimR (Bit 16)                   */
#define MDR_BKP_REG_62_TMR2_TrimR_Msk     (0x1ff0000UL)             /*!< MDR_BKP REG_62_TMR2: TrimR (Bitfield-Mask: 0x1ff)     */
#define MDR_BKP_REG_62_TMR2_Trim_Ref_Pos  (28UL)                    /*!< MDR_BKP REG_62_TMR2: Trim_Ref (Bit 28)                */
#define MDR_BKP_REG_62_TMR2_Trim_Ref_Msk  (0x70000000UL)            /*!< MDR_BKP REG_62_TMR2: Trim_Ref (Bitfield-Mask: 0x07)   */
/* ======================================================  REG_63_TMR2  ====================================================== */
#define MDR_BKP_REG_63_TMR2_LSE_On_Pos    (0UL)                     /*!< MDR_BKP REG_63_TMR2: LSE_On (Bit 0)                   */
#define MDR_BKP_REG_63_TMR2_LSE_On_Msk    (0x1UL)                   /*!< MDR_BKP REG_63_TMR2: LSE_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_LSE_BYP_Pos   (1UL)                     /*!< MDR_BKP REG_63_TMR2: LSE_BYP (Bit 1)                  */
#define MDR_BKP_REG_63_TMR2_LSE_BYP_Msk   (0x2UL)                   /*!< MDR_BKP REG_63_TMR2: LSE_BYP (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_RTC_Sel_Pos   (2UL)                     /*!< MDR_BKP REG_63_TMR2: RTC_Sel (Bit 2)                  */
#define MDR_BKP_REG_63_TMR2_RTC_Sel_Msk   (0xcUL)                   /*!< MDR_BKP REG_63_TMR2: RTC_Sel (Bitfield-Mask: 0x03)    */
#define MDR_BKP_REG_63_TMR2_RTC_En_Pos    (4UL)                     /*!< MDR_BKP REG_63_TMR2: RTC_En (Bit 4)                   */
#define MDR_BKP_REG_63_TMR2_RTC_En_Msk    (0x10UL)                  /*!< MDR_BKP REG_63_TMR2: RTC_En (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_RTC_Cal_Pos   (5UL)                     /*!< MDR_BKP REG_63_TMR2: RTC_Cal (Bit 5)                  */
#define MDR_BKP_REG_63_TMR2_RTC_Cal_Msk   (0x1fe0UL)                /*!< MDR_BKP REG_63_TMR2: RTC_Cal (Bitfield-Mask: 0xff)    */
#define MDR_BKP_REG_63_TMR2_LSE_RDY_Pos   (13UL)                    /*!< MDR_BKP REG_63_TMR2: LSE_RDY (Bit 13)                 */
#define MDR_BKP_REG_63_TMR2_LSE_RDY_Msk   (0x2000UL)                /*!< MDR_BKP REG_63_TMR2: LSE_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_LSE_FilterEn_Pos (14UL)                 /*!< MDR_BKP REG_63_TMR2: LSE_FilterEn (Bit 14)            */
#define MDR_BKP_REG_63_TMR2_LSE_FilterEn_Msk (0x4000UL)             /*!< MDR_BKP REG_63_TMR2: LSE_FilterEn (Bitfield-Mask: 0x01) */
#define MDR_BKP_REG_63_TMR2_LSI_On_Pos    (15UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_On (Bit 15)                  */
#define MDR_BKP_REG_63_TMR2_LSI_On_Msk    (0x8000UL)                /*!< MDR_BKP REG_63_TMR2: LSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_LSI_Trim_Pos  (16UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_Trim (Bit 16)                */
#define MDR_BKP_REG_63_TMR2_LSI_Trim_Msk  (0x1f0000UL)              /*!< MDR_BKP REG_63_TMR2: LSI_Trim (Bitfield-Mask: 0x1f)   */
#define MDR_BKP_REG_63_TMR2_LSI_RDY_Pos   (21UL)                    /*!< MDR_BKP REG_63_TMR2: LSI_RDY (Bit 21)                 */
#define MDR_BKP_REG_63_TMR2_LSI_RDY_Msk   (0x200000UL)              /*!< MDR_BKP REG_63_TMR2: LSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_HSI_On_Pos    (22UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_On (Bit 22)                  */
#define MDR_BKP_REG_63_TMR2_HSI_On_Msk    (0x400000UL)              /*!< MDR_BKP REG_63_TMR2: HSI_On (Bitfield-Mask: 0x01)     */
#define MDR_BKP_REG_63_TMR2_HSI_RDY_Pos   (23UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_RDY (Bit 23)                 */
#define MDR_BKP_REG_63_TMR2_HSI_RDY_Msk   (0x800000UL)              /*!< MDR_BKP REG_63_TMR2: HSI_RDY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_HSI_Trim_Pos  (24UL)                    /*!< MDR_BKP REG_63_TMR2: HSI_Trim (Bit 24)                */
#define MDR_BKP_REG_63_TMR2_HSI_Trim_Msk  (0x3f000000UL)            /*!< MDR_BKP REG_63_TMR2: HSI_Trim (Bitfield-Mask: 0x3f)   */
#define MDR_BKP_REG_63_TMR2_STANDBY_Pos   (30UL)                    /*!< MDR_BKP REG_63_TMR2: STANDBY (Bit 30)                 */
#define MDR_BKP_REG_63_TMR2_STANDBY_Msk   (0x40000000UL)            /*!< MDR_BKP REG_63_TMR2: STANDBY (Bitfield-Mask: 0x01)    */
#define MDR_BKP_REG_63_TMR2_RTC_RST_Pos   (31UL)                    /*!< MDR_BKP REG_63_TMR2: RTC_RST (Bit 31)                 */
#define MDR_BKP_REG_63_TMR2_RTC_RST_Msk   (0x80000000UL)            /*!< MDR_BKP REG_63_TMR2: RTC_RST (Bitfield-Mask: 0x01)    */
/* =====================================================  RTC_CNT_TMR0  ====================================================== */
/* =====================================================  RTC_DIV_TMR0  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR0_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR0: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR0_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR0: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR0  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR0_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR0: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR0_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR0: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR0  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR0_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR0: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR0_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR0: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR0  ====================================================== */
#define MDR_BKP_RTC_CS_TMR0_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR0: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR0_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR0: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR0_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR0: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR0_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR0: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR0_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR0: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR0_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR0: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR0_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR0: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR0_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR0: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR0: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR0_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR0: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR0: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR0_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR0: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR0: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR0_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR0: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR0: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR0: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR0: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR0: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR0: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR0_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR0_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR0_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR0: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR0_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR0: ERR_IE (Bitfield-Mask: 0x01)     */
/* =====================================================  RTC_CNT_TMR1  ====================================================== */
/* =====================================================  RTC_DIV_TMR1  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR1_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR1: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR1_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR1: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR1  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR1_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR1: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR1_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR1: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR1  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR1_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR1: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR1_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR1: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR1  ====================================================== */
#define MDR_BKP_RTC_CS_TMR1_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR1: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR1_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR1: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR1_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR1: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR1_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR1: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR1_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR1: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR1_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR1: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR1_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR1: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR1_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR1: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR1: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR1_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR1: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR1: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR1_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR1: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR1: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR1_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR1: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR1: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR1: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR1: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR1: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR1: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR1_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR1_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR1_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR1: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR1_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR1: ERR_IE (Bitfield-Mask: 0x01)     */
/* =====================================================  RTC_CNT_TMR2  ====================================================== */
/* =====================================================  RTC_DIV_TMR2  ====================================================== */
#define MDR_BKP_RTC_DIV_TMR2_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_DIV_TMR2: Value (Bit 0)                   */
#define MDR_BKP_RTC_DIV_TMR2_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_DIV_TMR2: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_PRL_TMR2  ====================================================== */
#define MDR_BKP_RTC_PRL_TMR2_Value_Pos    (0UL)                     /*!< MDR_BKP RTC_PRL_TMR2: Value (Bit 0)                   */
#define MDR_BKP_RTC_PRL_TMR2_Value_Msk    (0xfffffUL)               /*!< MDR_BKP RTC_PRL_TMR2: Value (Bitfield-Mask: 0xfffff)  */
/* =====================================================  RTC_ALRM_TMR2  ===================================================== */
#define MDR_BKP_RTC_ALRM_TMR2_Value_Pos   (0UL)                     /*!< MDR_BKP RTC_ALRM_TMR2: Value (Bit 0)                  */
#define MDR_BKP_RTC_ALRM_TMR2_Value_Msk   (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM_TMR2: Value (Bitfield-Mask: 0xffffffff) */
/* ======================================================  RTC_CS_TMR2  ====================================================== */
#define MDR_BKP_RTC_CS_TMR2_OWF_Pos       (0UL)                     /*!< MDR_BKP RTC_CS_TMR2: OWF (Bit 0)                      */
#define MDR_BKP_RTC_CS_TMR2_OWF_Msk       (0x1UL)                   /*!< MDR_BKP RTC_CS_TMR2: OWF (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR2_SECF_Pos      (1UL)                     /*!< MDR_BKP RTC_CS_TMR2: SECF (Bit 1)                     */
#define MDR_BKP_RTC_CS_TMR2_SECF_Msk      (0x2UL)                   /*!< MDR_BKP RTC_CS_TMR2: SECF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR2_ALRF_Pos      (2UL)                     /*!< MDR_BKP RTC_CS_TMR2: ALRF (Bit 2)                     */
#define MDR_BKP_RTC_CS_TMR2_ALRF_Msk      (0x4UL)                   /*!< MDR_BKP RTC_CS_TMR2: ALRF (Bitfield-Mask: 0x01)       */
#define MDR_BKP_RTC_CS_TMR2_OWF_IE_Pos    (3UL)                     /*!< MDR_BKP RTC_CS_TMR2: OWF_IE (Bit 3)                   */
#define MDR_BKP_RTC_CS_TMR2_OWF_IE_Msk    (0x8UL)                   /*!< MDR_BKP RTC_CS_TMR2: OWF_IE (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_SECF_IE_Pos   (4UL)                     /*!< MDR_BKP RTC_CS_TMR2: SECF_IE (Bit 4)                  */
#define MDR_BKP_RTC_CS_TMR2_SECF_IE_Msk   (0x10UL)                  /*!< MDR_BKP RTC_CS_TMR2: SECF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ALRF_IE_Pos   (5UL)                     /*!< MDR_BKP RTC_CS_TMR2: ALRF_IE (Bit 5)                  */
#define MDR_BKP_RTC_CS_TMR2_ALRF_IE_Msk   (0x20UL)                  /*!< MDR_BKP RTC_CS_TMR2: ALRF_IE (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_WEC_Pos       (6UL)                     /*!< MDR_BKP RTC_CS_TMR2: WEC (Bit 6)                      */
#define MDR_BKP_RTC_CS_TMR2_WEC_Msk       (0x40UL)                  /*!< MDR_BKP RTC_CS_TMR2: WEC (Bitfield-Mask: 0x01)        */
#define MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Pos  (7UL)                     /*!< MDR_BKP RTC_CS_TMR2: CLR_ERRx (Bit 7)                 */
#define MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Msk  (0x80UL)                  /*!< MDR_BKP RTC_CS_TMR2: CLR_ERRx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNT_Pos   (8UL)                     /*!< MDR_BKP RTC_CS_TMR2: ERR_CNT (Bit 8)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNT_Msk   (0x100UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CNT (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIV_Pos   (9UL)                     /*!< MDR_BKP RTC_CS_TMR2: ERR_DIV (Bit 9)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIV_Msk   (0x200UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_DIV (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_CM_Pos    (10UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CM (Bit 10)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CM_Msk    (0x400UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CM (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_ERR_CC_Pos    (11UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CC (Bit 11)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_CC_Msk    (0x800UL)                 /*!< MDR_BKP RTC_CS_TMR2: ERR_CC (Bitfield-Mask: 0x01)     */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Pos  (12UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CNTx (Bit 12)                */
#define MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Msk  (0x1000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_CNTx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Pos  (13UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_DIVx (Bit 13)                */
#define MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Msk  (0x2000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_DIVx (Bitfield-Mask: 0x01)   */
#define MDR_BKP_RTC_CS_TMR2_ERR_CMx_Pos   (14UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_CMx (Bit 14)                 */
#define MDR_BKP_RTC_CS_TMR2_ERR_CMx_Msk   (0x4000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_CMx (Bitfield-Mask: 0x01)    */
#define MDR_BKP_RTC_CS_TMR2_ERR_IE_Pos    (15UL)                    /*!< MDR_BKP RTC_CS_TMR2: ERR_IE (Bit 15)                  */
#define MDR_BKP_RTC_CS_TMR2_ERR_IE_Msk    (0x8000UL)                /*!< MDR_BKP RTC_CS_TMR2: ERR_IE (Bitfield-Mask: 0x01)     */


/* =========================================================================================================================== */
/* ================                                          MDR_OTP                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* =========================================================  CNTR  ========================================================== */
#define MDR_OTP_CNTR_WAITCYCL_Pos         (0UL)                     /*!< MDR_OTP CNTR: WAITCYCL (Bit 0)                        */
#define MDR_OTP_CNTR_WAITCYCL_Msk         (0xfUL)                   /*!< MDR_OTP CNTR: WAITCYCL (Bitfield-Mask: 0x0f)          */
#define MDR_OTP_CNTR_REG_ACCESS_Pos       (4UL)                     /*!< MDR_OTP CNTR: REG_ACCESS (Bit 4)                      */
#define MDR_OTP_CNTR_REG_ACCESS_Msk       (0x10UL)                  /*!< MDR_OTP CNTR: REG_ACCESS (Bitfield-Mask: 0x01)        */
#define MDR_OTP_CNTR_SE_Pos               (5UL)                     /*!< MDR_OTP CNTR: SE (Bit 5)                              */
#define MDR_OTP_CNTR_SE_Msk               (0x20UL)                  /*!< MDR_OTP CNTR: SE (Bitfield-Mask: 0x01)                */
#define MDR_OTP_CNTR_PE_Pos               (6UL)                     /*!< MDR_OTP CNTR: PE (Bit 6)                              */
#define MDR_OTP_CNTR_PE_Msk               (0x40UL)                  /*!< MDR_OTP CNTR: PE (Bitfield-Mask: 0x01)                */
#define MDR_OTP_CNTR_WECC_Pos             (16UL)                    /*!< MDR_OTP CNTR: WECC (Bit 16)                           */
#define MDR_OTP_CNTR_WECC_Msk             (0xff0000UL)              /*!< MDR_OTP CNTR: WECC (Bitfield-Mask: 0xff)              */
#define MDR_OTP_CNTR_RECC_Pos             (24UL)                    /*!< MDR_OTP CNTR: RECC (Bit 24)                           */
#define MDR_OTP_CNTR_RECC_Msk             (0xff000000UL)            /*!< MDR_OTP CNTR: RECC (Bitfield-Mask: 0xff)              */
/* ==========================================================  ADR  ========================================================== */
/* =========================================================  WDATA  ========================================================= */
/* =========================================================  RDATA  ========================================================= */
/* =========================================================  ECCCS  ========================================================= */
#define MDR_OTP_ECCCS_SECC_Pos            (0UL)                     /*!< MDR_OTP ECCCS: SECC (Bit 0)                           */
#define MDR_OTP_ECCCS_SECC_Msk            (0x1UL)                   /*!< MDR_OTP ECCCS: SECC (Bitfield-Mask: 0x01)             */
#define MDR_OTP_ECCCS_DECC_Pos            (1UL)                     /*!< MDR_OTP ECCCS: DECC (Bit 1)                           */
#define MDR_OTP_ECCCS_DECC_Msk            (0x2UL)                   /*!< MDR_OTP ECCCS: DECC (Bitfield-Mask: 0x01)             */
#define MDR_OTP_ECCCS_SECC_IE_Pos         (2UL)                     /*!< MDR_OTP ECCCS: SECC_IE (Bit 2)                        */
#define MDR_OTP_ECCCS_SECC_IE_Msk         (0x4UL)                   /*!< MDR_OTP ECCCS: SECC_IE (Bitfield-Mask: 0x01)          */
#define MDR_OTP_ECCCS_DECC_IE_Pos         (3UL)                     /*!< MDR_OTP ECCCS: DECC_IE (Bit 3)                        */
#define MDR_OTP_ECCCS_DECC_IE_Msk         (0x8UL)                   /*!< MDR_OTP ECCCS: DECC_IE (Bitfield-Mask: 0x01)          */
#define MDR_OTP_ECCCS_FIX_SECC_Pos        (4UL)                     /*!< MDR_OTP ECCCS: FIX_SECC (Bit 4)                       */
#define MDR_OTP_ECCCS_FIX_SECC_Msk        (0x10UL)                  /*!< MDR_OTP ECCCS: FIX_SECC (Bitfield-Mask: 0x01)         */
#define MDR_OTP_ECCCS_FIX_DECC_Pos        (5UL)                     /*!< MDR_OTP ECCCS: FIX_DECC (Bit 5)                       */
#define MDR_OTP_ECCCS_FIX_DECC_Msk        (0x20UL)                  /*!< MDR_OTP ECCCS: FIX_DECC (Bitfield-Mask: 0x01)         */
#define MDR_OTP_ECCCS_CLR_SECNT_Pos       (6UL)                     /*!< MDR_OTP ECCCS: CLR_SECNT (Bit 6)                      */
#define MDR_OTP_ECCCS_CLR_SECNT_Msk       (0x40UL)                  /*!< MDR_OTP ECCCS: CLR_SECNT (Bitfield-Mask: 0x01)        */
#define MDR_OTP_ECCCS_CLR_DECNT_Pos       (7UL)                     /*!< MDR_OTP ECCCS: CLR_DECNT (Bit 7)                      */
#define MDR_OTP_ECCCS_CLR_DECNT_Msk       (0x80UL)                  /*!< MDR_OTP ECCCS: CLR_DECNT (Bitfield-Mask: 0x01)        */
#define MDR_OTP_ECCCS_ECC_DECNT_Pos       (8UL)                     /*!< MDR_OTP ECCCS: ECC_DECNT (Bit 8)                      */
#define MDR_OTP_ECCCS_ECC_DECNT_Msk       (0xff00UL)                /*!< MDR_OTP ECCCS: ECC_DECNT (Bitfield-Mask: 0xff)        */
#define MDR_OTP_ECCCS_ECC_SECNT_Pos       (16UL)                    /*!< MDR_OTP ECCCS: ECC_SECNT (Bit 16)                     */
#define MDR_OTP_ECCCS_ECC_SECNT_Msk       (0xffff0000UL)            /*!< MDR_OTP ECCCS: ECC_SECNT (Bitfield-Mask: 0xffff)      */
/* ========================================================  ECCADR  ========================================================= */
/* ========================================================  ECCDATA  ======================================================== */
/* ========================================================  ECCECC  ========================================================= */
/* ======================================================  TEST_TUNING  ====================================================== */
#define MDR_OTP_TEST_TUNING_TE_Pos        (3UL)                     /*!< MDR_OTP TEST_TUNING: TE (Bit 3)                       */
#define MDR_OTP_TEST_TUNING_TE_Msk        (0x18UL)                  /*!< MDR_OTP TEST_TUNING: TE (Bitfield-Mask: 0x03)         */
#define MDR_OTP_TEST_TUNING_TIME_TUNING_Pos (8UL)                   /*!< MDR_OTP TEST_TUNING: TIME_TUNING (Bit 8)              */
#define MDR_OTP_TEST_TUNING_TIME_TUNING_Msk (0x700UL)               /*!< MDR_OTP TEST_TUNING: TIME_TUNING (Bitfield-Mask: 0x07) */
#define MDR_OTP_TEST_TUNING_REPL_TUNING_Pos (16UL)                  /*!< MDR_OTP TEST_TUNING: REPL_TUNING (Bit 16)             */
#define MDR_OTP_TEST_TUNING_REPL_TUNING_Msk (0xf0000UL)             /*!< MDR_OTP TEST_TUNING: REPL_TUNING (Bitfield-Mask: 0x0f) */


/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* =========================================================  RXTX  ========================================================== */
#define MDR_PORTA_RXTX_Pin__Pos           (0UL)                     /*!< MDR_PORTA RXTX: Pin_ (Bit 0)                          */
#define MDR_PORTA_RXTX_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA RXTX: Pin_ (Bitfield-Mask: 0x01)            */
/* =======================================================  RXTX_Set  ======================================================== */
#define MDR_PORTA_RXTX_Set_Pin__Pos       (0UL)                     /*!< MDR_PORTA RXTX_Set: Pin_ (Bit 0)                      */
#define MDR_PORTA_RXTX_Set_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA RXTX_Set: Pin_ (Bitfield-Mask: 0x01)        */
/* ======================================================  RXTX_Clear  ======================================================= */
#define MDR_PORTA_RXTX_Clear_Pin__Pos     (0UL)                     /*!< MDR_PORTA RXTX_Clear: Pin_ (Bit 0)                    */
#define MDR_PORTA_RXTX_Clear_Pin__Msk     (0x1UL)                   /*!< MDR_PORTA RXTX_Clear: Pin_ (Bitfield-Mask: 0x01)      */
/* ==========================================================  OE  =========================================================== */
#define MDR_PORTA_OE_Pin__Pos             (0UL)                     /*!< MDR_PORTA OE: Pin_ (Bit 0)                            */
#define MDR_PORTA_OE_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA OE: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  OE_Set  ========================================================= */
#define MDR_PORTA_OE_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA OE_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_OE_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA OE_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  OE_Clear  ======================================================== */
#define MDR_PORTA_OE_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA OE_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_OE_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA OE_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* =========================================================  FUNC0  ========================================================= */
#define MDR_PORTA_FUNC0_Func_Pin__Pos     (0UL)                     /*!< MDR_PORTA FUNC0: Func_Pin_ (Bit 0)                    */
#define MDR_PORTA_FUNC0_Func_Pin__Msk     (0xfUL)                   /*!< MDR_PORTA FUNC0: Func_Pin_ (Bitfield-Mask: 0x0f)      */
/* =========================================================  FUNC1  ========================================================= */
#define MDR_PORTA_FUNC1_Func_Pin__Pos     (0UL)                     /*!< MDR_PORTA FUNC1: Func_Pin_ (Bit 0)                    */
#define MDR_PORTA_FUNC1_Func_Pin__Msk     (0xfUL)                   /*!< MDR_PORTA FUNC1: Func_Pin_ (Bitfield-Mask: 0x0f)      */
/* =========================================================  FUNC2  ========================================================= */
#define MDR_PORTA_FUNC2_Func_Pin__Pos     (0UL)                     /*!< MDR_PORTA FUNC2: Func_Pin_ (Bit 0)                    */
#define MDR_PORTA_FUNC2_Func_Pin__Msk     (0xfUL)                   /*!< MDR_PORTA FUNC2: Func_Pin_ (Bitfield-Mask: 0x0f)      */
/* =========================================================  FUNC3  ========================================================= */
#define MDR_PORTA_FUNC3_Func_Pin__Pos     (0UL)                     /*!< MDR_PORTA FUNC3: Func_Pin_ (Bit 0)                    */
#define MDR_PORTA_FUNC3_Func_Pin__Msk     (0xfUL)                   /*!< MDR_PORTA FUNC3: Func_Pin_ (Bitfield-Mask: 0x0f)      */
/* =======================================================  FUNC0_Set  ======================================================= */
#define MDR_PORTA_FUNC0_Set_Func_Pin__Pos (0UL)                     /*!< MDR_PORTA FUNC0_Set: Func_Pin_ (Bit 0)                */
#define MDR_PORTA_FUNC0_Set_Func_Pin__Msk (0xfUL)                   /*!< MDR_PORTA FUNC0_Set: Func_Pin_ (Bitfield-Mask: 0x0f)  */
/* =======================================================  FUNC1_Set  ======================================================= */
#define MDR_PORTA_FUNC1_Set_Func_Pin__Pos (0UL)                     /*!< MDR_PORTA FUNC1_Set: Func_Pin_ (Bit 0)                */
#define MDR_PORTA_FUNC1_Set_Func_Pin__Msk (0xfUL)                   /*!< MDR_PORTA FUNC1_Set: Func_Pin_ (Bitfield-Mask: 0x0f)  */
/* =======================================================  FUNC2_Set  ======================================================= */
#define MDR_PORTA_FUNC2_Set_Func_Pin__Pos (0UL)                     /*!< MDR_PORTA FUNC2_Set: Func_Pin_ (Bit 0)                */
#define MDR_PORTA_FUNC2_Set_Func_Pin__Msk (0xfUL)                   /*!< MDR_PORTA FUNC2_Set: Func_Pin_ (Bitfield-Mask: 0x0f)  */
/* =======================================================  FUNC3_Set  ======================================================= */
#define MDR_PORTA_FUNC3_Set_Func_Pin__Pos (0UL)                     /*!< MDR_PORTA FUNC3_Set: Func_Pin_ (Bit 0)                */
#define MDR_PORTA_FUNC3_Set_Func_Pin__Msk (0xfUL)                   /*!< MDR_PORTA FUNC3_Set: Func_Pin_ (Bitfield-Mask: 0x0f)  */
/* ======================================================  FUNC0_Clear  ====================================================== */
#define MDR_PORTA_FUNC0_Clear_Func_Pin__Pos (0UL)                   /*!< MDR_PORTA FUNC0_Clear: Func_Pin_ (Bit 0)              */
#define MDR_PORTA_FUNC0_Clear_Func_Pin__Msk (0xfUL)                 /*!< MDR_PORTA FUNC0_Clear: Func_Pin_ (Bitfield-Mask: 0x0f) */
/* ======================================================  FUNC1_Clear  ====================================================== */
#define MDR_PORTA_FUNC1_Clear_Func_Pin__Pos (0UL)                   /*!< MDR_PORTA FUNC1_Clear: Func_Pin_ (Bit 0)              */
#define MDR_PORTA_FUNC1_Clear_Func_Pin__Msk (0xfUL)                 /*!< MDR_PORTA FUNC1_Clear: Func_Pin_ (Bitfield-Mask: 0x0f) */
/* ======================================================  FUNC2_Clear  ====================================================== */
#define MDR_PORTA_FUNC2_Clear_Func_Pin__Pos (0UL)                   /*!< MDR_PORTA FUNC2_Clear: Func_Pin_ (Bit 0)              */
#define MDR_PORTA_FUNC2_Clear_Func_Pin__Msk (0xfUL)                 /*!< MDR_PORTA FUNC2_Clear: Func_Pin_ (Bitfield-Mask: 0x0f) */
/* ======================================================  FUNC3_Clear  ====================================================== */
#define MDR_PORTA_FUNC3_Clear_Func_Pin__Pos (0UL)                   /*!< MDR_PORTA FUNC3_Clear: Func_Pin_ (Bit 0)              */
#define MDR_PORTA_FUNC3_Clear_Func_Pin__Msk (0xfUL)                 /*!< MDR_PORTA FUNC3_Clear: Func_Pin_ (Bitfield-Mask: 0x0f) */
/* ========================================================  ANALOG  ========================================================= */
#define MDR_PORTA_ANALOG_Pin__Pos         (0UL)                     /*!< MDR_PORTA ANALOG: Pin_ (Bit 0)                        */
#define MDR_PORTA_ANALOG_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA ANALOG: Pin_ (Bitfield-Mask: 0x01)          */
/* ======================================================  ANALOG_Set  ======================================================= */
#define MDR_PORTA_ANALOG_Set_Pin__Pos     (0UL)                     /*!< MDR_PORTA ANALOG_Set: Pin_ (Bit 0)                    */
#define MDR_PORTA_ANALOG_Set_Pin__Msk     (0x1UL)                   /*!< MDR_PORTA ANALOG_Set: Pin_ (Bitfield-Mask: 0x01)      */
/* =====================================================  ANALOG_Clear  ====================================================== */
#define MDR_PORTA_ANALOG_Clear_Pin__Pos   (0UL)                     /*!< MDR_PORTA ANALOG_Clear: Pin_ (Bit 0)                  */
#define MDR_PORTA_ANALOG_Clear_Pin__Msk   (0x1UL)                   /*!< MDR_PORTA ANALOG_Clear: Pin_ (Bitfield-Mask: 0x01)    */
/* ========================================================  PULLUP  ========================================================= */
#define MDR_PORTA_PULLUP_Pin__Pos         (0UL)                     /*!< MDR_PORTA PULLUP: Pin_ (Bit 0)                        */
#define MDR_PORTA_PULLUP_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA PULLUP: Pin_ (Bitfield-Mask: 0x01)          */
/* ======================================================  PULLUP_Set  ======================================================= */
#define MDR_PORTA_PULLUP_Set_Pin__Pos     (0UL)                     /*!< MDR_PORTA PULLUP_Set: Pin_ (Bit 0)                    */
#define MDR_PORTA_PULLUP_Set_Pin__Msk     (0x1UL)                   /*!< MDR_PORTA PULLUP_Set: Pin_ (Bitfield-Mask: 0x01)      */
/* =====================================================  PULLUP_Clear  ====================================================== */
#define MDR_PORTA_PULLUP_Clear_Pin__Pos   (0UL)                     /*!< MDR_PORTA PULLUP_Clear: Pin_ (Bit 0)                  */
#define MDR_PORTA_PULLUP_Clear_Pin__Msk   (0x1UL)                   /*!< MDR_PORTA PULLUP_Clear: Pin_ (Bitfield-Mask: 0x01)    */
/* =======================================================  PULLDOWN  ======================================================== */
#define MDR_PORTA_PULLDOWN_Pin__Pos       (0UL)                     /*!< MDR_PORTA PULLDOWN: Pin_ (Bit 0)                      */
#define MDR_PORTA_PULLDOWN_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA PULLDOWN: Pin_ (Bitfield-Mask: 0x01)        */
/* =====================================================  PULLDOWN_Set  ====================================================== */
#define MDR_PORTA_PULLDOWN_Set_Pin__Pos   (0UL)                     /*!< MDR_PORTA PULLDOWN_Set: Pin_ (Bit 0)                  */
#define MDR_PORTA_PULLDOWN_Set_Pin__Msk   (0x1UL)                   /*!< MDR_PORTA PULLDOWN_Set: Pin_ (Bitfield-Mask: 0x01)    */
/* ====================================================  PULLDOWN_Clear  ===================================================== */
#define MDR_PORTA_PULLDOWN_Clear_Pin__Pos (0UL)                     /*!< MDR_PORTA PULLDOWN_Clear: Pin_ (Bit 0)                */
#define MDR_PORTA_PULLDOWN_Clear_Pin__Msk (0x1UL)                   /*!< MDR_PORTA PULLDOWN_Clear: Pin_ (Bitfield-Mask: 0x01)  */
/* ==========================================================  PD  =========================================================== */
#define MDR_PORTA_PD_Pin__Pos             (0UL)                     /*!< MDR_PORTA PD: Pin_ (Bit 0)                            */
#define MDR_PORTA_PD_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA PD: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  PD_Set  ========================================================= */
#define MDR_PORTA_PD_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA PD_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_PD_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA PD_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  PD_Clear  ======================================================== */
#define MDR_PORTA_PD_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA PD_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_PD_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA PD_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* =========================================================  PWR0  ========================================================== */
#define MDR_PORTA_PWR0_Pin__Pos           (0UL)                     /*!< MDR_PORTA PWR0: Pin_ (Bit 0)                          */
#define MDR_PORTA_PWR0_Pin__Msk           (0x3UL)                   /*!< MDR_PORTA PWR0: Pin_ (Bitfield-Mask: 0x03)            */
/* =========================================================  PWR1  ========================================================== */
#define MDR_PORTA_PWR1_Pin__Pos           (0UL)                     /*!< MDR_PORTA PWR1: Pin_ (Bit 0)                          */
#define MDR_PORTA_PWR1_Pin__Msk           (0x3UL)                   /*!< MDR_PORTA PWR1: Pin_ (Bitfield-Mask: 0x03)            */
/* =======================================================  PWR0_Set  ======================================================== */
#define MDR_PORTA_PWR0_Set_Pin__Pos       (0UL)                     /*!< MDR_PORTA PWR0_Set: Pin_ (Bit 0)                      */
#define MDR_PORTA_PWR0_Set_Pin__Msk       (0x3UL)                   /*!< MDR_PORTA PWR0_Set: Pin_ (Bitfield-Mask: 0x03)        */
/* =======================================================  PWR1_Set  ======================================================== */
#define MDR_PORTA_PWR1_Set_Pin__Pos       (0UL)                     /*!< MDR_PORTA PWR1_Set: Pin_ (Bit 0)                      */
#define MDR_PORTA_PWR1_Set_Pin__Msk       (0x3UL)                   /*!< MDR_PORTA PWR1_Set: Pin_ (Bitfield-Mask: 0x03)        */
/* ======================================================  PWR0_Clear  ======================================================= */
#define MDR_PORTA_PWR0_Clear_Pin__Pos     (0UL)                     /*!< MDR_PORTA PWR0_Clear: Pin_ (Bit 0)                    */
#define MDR_PORTA_PWR0_Clear_Pin__Msk     (0x3UL)                   /*!< MDR_PORTA PWR0_Clear: Pin_ (Bitfield-Mask: 0x03)      */
/* ======================================================  PWR1_Clear  ======================================================= */
#define MDR_PORTA_PWR1_Clear_Pin__Pos     (0UL)                     /*!< MDR_PORTA PWR1_Clear: Pin_ (Bit 0)                    */
#define MDR_PORTA_PWR1_Clear_Pin__Msk     (0x3UL)                   /*!< MDR_PORTA PWR1_Clear: Pin_ (Bitfield-Mask: 0x03)      */
/* ==========================================================  CL  =========================================================== */
#define MDR_PORTA_CL_Pin__Pos             (0UL)                     /*!< MDR_PORTA CL: Pin_ (Bit 0)                            */
#define MDR_PORTA_CL_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA CL: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  CL_Set  ========================================================= */
#define MDR_PORTA_CL_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA CL_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_CL_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA CL_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  CL_Clear  ======================================================== */
#define MDR_PORTA_CL_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA CL_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_CL_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA CL_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* ==========================================================  IE  =========================================================== */
#define MDR_PORTA_IE_Pin__Pos             (0UL)                     /*!< MDR_PORTA IE: Pin_ (Bit 0)                            */
#define MDR_PORTA_IE_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA IE: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  IE_Set  ========================================================= */
#define MDR_PORTA_IE_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA IE_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_IE_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA IE_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  IE_Clear  ======================================================== */
#define MDR_PORTA_IE_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA IE_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_IE_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA IE_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* ==========================================================  IT  =========================================================== */
#define MDR_PORTA_IT_Pin__Pos             (0UL)                     /*!< MDR_PORTA IT: Pin_ (Bit 0)                            */
#define MDR_PORTA_IT_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA IT: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  IT_Set  ========================================================= */
#define MDR_PORTA_IT_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA IT_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_IT_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA IT_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  IT_Clear  ======================================================== */
#define MDR_PORTA_IT_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA IT_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_IT_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA IT_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* ==========================================================  IR  =========================================================== */
#define MDR_PORTA_IR_Pin__Pos             (0UL)                     /*!< MDR_PORTA IR: Pin_ (Bit 0)                            */
#define MDR_PORTA_IR_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA IR: Pin_ (Bitfield-Mask: 0x01)              */
/* ========================================================  IR_Set  ========================================================= */
#define MDR_PORTA_IR_Set_Pin__Pos         (0UL)                     /*!< MDR_PORTA IR_Set: Pin_ (Bit 0)                        */
#define MDR_PORTA_IR_Set_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA IR_Set: Pin_ (Bitfield-Mask: 0x01)          */
/* =======================================================  IR_Clear  ======================================================== */
#define MDR_PORTA_IR_Clear_Pin__Pos       (0UL)                     /*!< MDR_PORTA IR_Clear: Pin_ (Bit 0)                      */
#define MDR_PORTA_IR_Clear_Pin__Msk       (0x1UL)                   /*!< MDR_PORTA IR_Clear: Pin_ (Bitfield-Mask: 0x01)        */
/* =========================================================  HCUR  ========================================================== */
#define MDR_PORTA_HCUR_Pin__Pos           (0UL)                     /*!< MDR_PORTA HCUR: Pin_ (Bit 0)                          */
#define MDR_PORTA_HCUR_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA HCUR: Pin_ (Bitfield-Mask: 0x01)            */


/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CNT  ========================================================== */
#define MDR_TIMER1_CNT_Value_Pos          (0UL)                     /*!< MDR_TIMER1 CNT: Value (Bit 0)                         */
#define MDR_TIMER1_CNT_Value_Msk          (0xffffffffUL)            /*!< MDR_TIMER1 CNT: Value (Bitfield-Mask: 0xffffffff)     */
/* ==========================================================  PSG  ========================================================== */
#define MDR_TIMER1_PSG_Value_Pos          (0UL)                     /*!< MDR_TIMER1 PSG: Value (Bit 0)                         */
#define MDR_TIMER1_PSG_Value_Msk          (0xffffUL)                /*!< MDR_TIMER1 PSG: Value (Bitfield-Mask: 0xffff)         */
/* ==========================================================  ARR  ========================================================== */
#define MDR_TIMER1_ARR_Value_Pos          (0UL)                     /*!< MDR_TIMER1 ARR: Value (Bit 0)                         */
#define MDR_TIMER1_ARR_Value_Msk          (0xffffffffUL)            /*!< MDR_TIMER1 ARR: Value (Bitfield-Mask: 0xffffffff)     */
/* =========================================================  CNTRL  ========================================================= */
#define MDR_TIMER1_CNTRL_CNT_EN_Pos       (0UL)                     /*!< MDR_TIMER1 CNTRL: CNT_EN (Bit 0)                      */
#define MDR_TIMER1_CNTRL_CNT_EN_Msk       (0x1UL)                   /*!< MDR_TIMER1 CNTRL: CNT_EN (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CNTRL_ARRB_EN_Pos      (1UL)                     /*!< MDR_TIMER1 CNTRL: ARRB_EN (Bit 1)                     */
#define MDR_TIMER1_CNTRL_ARRB_EN_Msk      (0x2UL)                   /*!< MDR_TIMER1 CNTRL: ARRB_EN (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_CNTRL_WR_CMPL_Pos      (2UL)                     /*!< MDR_TIMER1 CNTRL: WR_CMPL (Bit 2)                     */
#define MDR_TIMER1_CNTRL_WR_CMPL_Msk      (0x4UL)                   /*!< MDR_TIMER1 CNTRL: WR_CMPL (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_CNTRL_DIR_Pos          (3UL)                     /*!< MDR_TIMER1 CNTRL: DIR (Bit 3)                         */
#define MDR_TIMER1_CNTRL_DIR_Msk          (0x8UL)                   /*!< MDR_TIMER1 CNTRL: DIR (Bitfield-Mask: 0x01)           */
#define MDR_TIMER1_CNTRL_FDTS_Pos         (4UL)                     /*!< MDR_TIMER1 CNTRL: FDTS (Bit 4)                        */
#define MDR_TIMER1_CNTRL_FDTS_Msk         (0x30UL)                  /*!< MDR_TIMER1 CNTRL: FDTS (Bitfield-Mask: 0x03)          */
#define MDR_TIMER1_CNTRL_CNT_MODE_Pos     (6UL)                     /*!< MDR_TIMER1 CNTRL: CNT_MODE (Bit 6)                    */
#define MDR_TIMER1_CNTRL_CNT_MODE_Msk     (0xc0UL)                  /*!< MDR_TIMER1 CNTRL: CNT_MODE (Bitfield-Mask: 0x03)      */
#define MDR_TIMER1_CNTRL_EVENT_SEL_Pos    (8UL)                     /*!< MDR_TIMER1 CNTRL: EVENT_SEL (Bit 8)                   */
#define MDR_TIMER1_CNTRL_EVENT_SEL_Msk    (0xf00UL)                 /*!< MDR_TIMER1 CNTRL: EVENT_SEL (Bitfield-Mask: 0x0f)     */
/* =========================================================  CCR1  ========================================================== */
#define MDR_TIMER1_CCR1_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR1: Value (Bit 0)                        */
#define MDR_TIMER1_CCR1_Value_Msk         (0xffffffffUL)            /*!< MDR_TIMER1 CCR1: Value (Bitfield-Mask: 0xffffffff)    */
/* =========================================================  CCR2  ========================================================== */
#define MDR_TIMER1_CCR2_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR2: Value (Bit 0)                        */
#define MDR_TIMER1_CCR2_Value_Msk         (0xffffffffUL)            /*!< MDR_TIMER1 CCR2: Value (Bitfield-Mask: 0xffffffff)    */
/* =========================================================  CCR3  ========================================================== */
#define MDR_TIMER1_CCR3_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR3: Value (Bit 0)                        */
#define MDR_TIMER1_CCR3_Value_Msk         (0xffffffffUL)            /*!< MDR_TIMER1 CCR3: Value (Bitfield-Mask: 0xffffffff)    */
/* =========================================================  CCR4  ========================================================== */
#define MDR_TIMER1_CCR4_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR4: Value (Bit 0)                        */
#define MDR_TIMER1_CCR4_Value_Msk         (0xffffffffUL)            /*!< MDR_TIMER1 CCR4: Value (Bitfield-Mask: 0xffffffff)    */
/* =======================================================  CH1_CNTRL  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH1_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH1_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH1_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH1_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH1_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH1_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH1_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH1_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH1_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH1_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH1_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH1_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH1_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH1_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH1_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH1_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH1_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH1_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH1_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH1_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH1_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH1_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH1_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH1_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH1_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH1_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH1_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH1_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH2_CNTRL  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH2_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH2_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH2_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH2_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH2_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH2_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH2_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH2_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH2_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH2_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH2_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH2_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH2_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH2_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH2_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH2_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH2_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH2_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH2_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH2_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH2_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH2_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH2_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH2_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH2_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH2_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH2_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH2_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH3_CNTRL  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH3_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH3_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH3_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH3_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH3_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH3_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH3_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH3_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH3_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH3_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH3_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH3_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH3_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH3_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH3_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH3_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH3_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH3_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH3_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH3_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH3_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH3_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH3_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH3_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH3_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH3_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH3_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH3_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH4_CNTRL  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH4_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH4_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH4_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH4_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH4_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH4_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH4_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH4_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH4_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH4_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH4_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH4_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH4_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH4_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH4_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH4_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH4_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH4_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH4_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH4_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH4_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH4_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH4_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH4_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH4_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH4_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH4_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH4_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* ======================================================  CH1_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH1_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH1_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH1_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH1_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH1_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH1_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH1_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH1_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH1_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH1_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH1_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH1_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH1_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH1_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH1_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH1_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH1_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH1_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH2_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH2_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH2_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH2_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH2_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH2_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH2_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH2_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH2_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH2_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH2_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH2_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH2_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH2_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH2_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH2_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH2_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH2_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH2_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH3_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH3_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH3_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH3_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH3_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH3_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH3_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH3_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH3_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH3_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH3_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH3_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH3_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH3_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH3_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH3_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH3_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH3_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH3_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH4_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH4_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH4_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH4_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH4_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH4_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH4_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH4_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH4_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH4_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH4_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH4_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH4_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH4_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH4_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH4_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH4_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH4_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH4_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ========================================================  CH1_DTG  ======================================================== */
#define MDR_TIMER1_CH1_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH1_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH1_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH1_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH1_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH1_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH1_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH1_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH1_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH1_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH1_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH1_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH2_DTG  ======================================================== */
#define MDR_TIMER1_CH2_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH2_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH2_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH2_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH2_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH2_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH2_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH2_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH2_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH2_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH2_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH2_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH3_DTG  ======================================================== */
#define MDR_TIMER1_CH3_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH3_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH3_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH3_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH3_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH3_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH3_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH3_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH3_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH3_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH3_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH3_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH4_DTG  ======================================================== */
#define MDR_TIMER1_CH4_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH4_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH4_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH4_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH4_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH4_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH4_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH4_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH4_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH4_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH4_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH4_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* =====================================================  BRKETR_CNTRL  ====================================================== */
#define MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Pos (0UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: BRK_INV (Bit 0)              */
#define MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Msk (0x1UL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: BRK_INV (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Pos (1UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_INV (Bit 1)              */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Msk (0x2UL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_INV (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Pos (2UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_PSC (Bit 2)              */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Msk (0xcUL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_PSC (Bitfield-Mask: 0x03) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Pos (4UL)                /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_Filter (Bit 4)           */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Msk (0xf0UL)             /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_Filter (Bitfield-Mask: 0x0f) */
/* ========================================================  STATUS  ========================================================= */
#define MDR_TIMER1_STATUS_CNT_ZERO_Pos    (0UL)                     /*!< MDR_TIMER1 STATUS: CNT_ZERO (Bit 0)                   */
#define MDR_TIMER1_STATUS_CNT_ZERO_Msk    (0x1UL)                   /*!< MDR_TIMER1 STATUS: CNT_ZERO (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_STATUS_CNT_ARR_Pos     (1UL)                     /*!< MDR_TIMER1 STATUS: CNT_ARR (Bit 1)                    */
#define MDR_TIMER1_STATUS_CNT_ARR_Msk     (0x2UL)                   /*!< MDR_TIMER1 STATUS: CNT_ARR (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_STATUS_ETR_RE_Pos      (2UL)                     /*!< MDR_TIMER1 STATUS: ETR_RE (Bit 2)                     */
#define MDR_TIMER1_STATUS_ETR_RE_Msk      (0x4UL)                   /*!< MDR_TIMER1 STATUS: ETR_RE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_STATUS_ETR_FE_Pos      (3UL)                     /*!< MDR_TIMER1 STATUS: ETR_FE (Bit 3)                     */
#define MDR_TIMER1_STATUS_ETR_FE_Msk      (0x8UL)                   /*!< MDR_TIMER1 STATUS: ETR_FE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_STATUS_BRK_Pos         (4UL)                     /*!< MDR_TIMER1 STATUS: BRK (Bit 4)                        */
#define MDR_TIMER1_STATUS_BRK_Msk         (0x10UL)                  /*!< MDR_TIMER1 STATUS: BRK (Bitfield-Mask: 0x01)          */
#define MDR_TIMER1_STATUS_CCR_CAP_CH1_Pos (5UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH1 (Bit 5)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH1_Msk (0x20UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH1 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH2_Pos (6UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH2 (Bit 6)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH2_Msk (0x40UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH2 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH3_Pos (7UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH3 (Bit 7)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH3_Msk (0x80UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH3 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH4_Pos (8UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH4 (Bit 8)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH4_Msk (0x100UL)                 /*!< MDR_TIMER1 STATUS: CCR_CAP_CH4 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH1_Pos (9UL)                     /*!< MDR_TIMER1 STATUS: CCR_REF_CH1 (Bit 9)                */
#define MDR_TIMER1_STATUS_CCR_REF_CH1_Msk (0x200UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH1 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH2_Pos (10UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH2 (Bit 10)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH2_Msk (0x400UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH2 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH3_Pos (11UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH3 (Bit 11)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH3_Msk (0x800UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH3 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH4_Pos (12UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH4 (Bit 12)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH4_Msk (0x1000UL)                /*!< MDR_TIMER1 STATUS: CCR_REF_CH4 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH1_Pos (13UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH1 (Bit 13)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH1_Msk (0x2000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH1 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH2_Pos (14UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH2 (Bit 14)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH2_Msk (0x4000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH2 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH3_Pos (15UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH3 (Bit 15)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH3_Msk (0x8000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH3 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH4_Pos (16UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH4 (Bit 16)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH4_Msk (0x10000UL)              /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH4 (Bitfield-Mask: 0x01) */
/* ==========================================================  IE  =========================================================== */
#define MDR_TIMER1_IE_CNT_ZERO_IE_Pos     (0UL)                     /*!< MDR_TIMER1 IE: CNT_ZERO_IE (Bit 0)                    */
#define MDR_TIMER1_IE_CNT_ZERO_IE_Msk     (0x1UL)                   /*!< MDR_TIMER1 IE: CNT_ZERO_IE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_IE_CNT_ARR_IE_Pos      (1UL)                     /*!< MDR_TIMER1 IE: CNT_ARR_IE (Bit 1)                     */
#define MDR_TIMER1_IE_CNT_ARR_IE_Msk      (0x2UL)                   /*!< MDR_TIMER1 IE: CNT_ARR_IE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_IE_ETR_RE_IE_Pos       (2UL)                     /*!< MDR_TIMER1 IE: ETR_RE_IE (Bit 2)                      */
#define MDR_TIMER1_IE_ETR_RE_IE_Msk       (0x4UL)                   /*!< MDR_TIMER1 IE: ETR_RE_IE (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_IE_ETR_FE_IE_Pos       (3UL)                     /*!< MDR_TIMER1 IE: ETR_FE_IE (Bit 3)                      */
#define MDR_TIMER1_IE_ETR_FE_IE_Msk       (0x8UL)                   /*!< MDR_TIMER1 IE: ETR_FE_IE (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_IE_BRK_IE_Pos          (4UL)                     /*!< MDR_TIMER1 IE: BRK_IE (Bit 4)                         */
#define MDR_TIMER1_IE_BRK_IE_Msk          (0x10UL)                  /*!< MDR_TIMER1 IE: BRK_IE (Bitfield-Mask: 0x01)           */
#define MDR_TIMER1_IE_CCR_CAP_CH1_IE_Pos  (5UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH1_IE (Bit 5)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH1_IE_Msk  (0x20UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH1_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH2_IE_Pos  (6UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH2_IE (Bit 6)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH2_IE_Msk  (0x40UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH2_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH3_IE_Pos  (7UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH3_IE (Bit 7)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH3_IE_Msk  (0x80UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH3_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH4_IE_Pos  (8UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH4_IE (Bit 8)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH4_IE_Msk  (0x100UL)                 /*!< MDR_TIMER1 IE: CCR_CAP_CH4_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH1_IE_Pos  (9UL)                     /*!< MDR_TIMER1 IE: CCR_REF_CH1_IE (Bit 9)                 */
#define MDR_TIMER1_IE_CCR_REF_CH1_IE_Msk  (0x200UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH1_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH2_IE_Pos  (10UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH2_IE (Bit 10)                */
#define MDR_TIMER1_IE_CCR_REF_CH2_IE_Msk  (0x400UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH2_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH3_IE_Pos  (11UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH3_IE (Bit 11)                */
#define MDR_TIMER1_IE_CCR_REF_CH3_IE_Msk  (0x800UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH3_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH4_IE_Pos  (12UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH4_IE (Bit 12)                */
#define MDR_TIMER1_IE_CCR_REF_CH4_IE_Msk  (0x1000UL)                /*!< MDR_TIMER1 IE: CCR_REF_CH4_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Pos (13UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH1_IE (Bit 13)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Msk (0x2000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH1_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Pos (14UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH2_IE (Bit 14)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Msk (0x4000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH2_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Pos (15UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH3_IE (Bit 15)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Msk (0x8000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH3_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Pos (16UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH4_IE (Bit 16)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Msk (0x10000UL)               /*!< MDR_TIMER1 IE: CCR1_CAP_CH4_IE (Bitfield-Mask: 0x01)  */
/* ========================================================  DMA_RE  ========================================================= */
#define MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Pos (0UL)                   /*!< MDR_TIMER1 DMA_RE: CNT_ZERO_DMAE (Bit 0)              */
#define MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Msk (0x1UL)                 /*!< MDR_TIMER1 DMA_RE: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Pos (1UL)                    /*!< MDR_TIMER1 DMA_RE: CNT_ARR_DMAE (Bit 1)               */
#define MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Msk (0x2UL)                  /*!< MDR_TIMER1 DMA_RE: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Pos (2UL)                     /*!< MDR_TIMER1 DMA_RE: ETR_RE_DMAE (Bit 2)                */
#define MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Msk (0x4UL)                   /*!< MDR_TIMER1 DMA_RE: ETR_RE_DMAE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Pos (3UL)                     /*!< MDR_TIMER1 DMA_RE: ETR_FE_DMAE (Bit 3)                */
#define MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Msk (0x8UL)                   /*!< MDR_TIMER1 DMA_RE: ETR_FE_DMAE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_DMA_RE_BRK_DMAE_Pos    (4UL)                     /*!< MDR_TIMER1 DMA_RE: BRK_DMAE (Bit 4)                   */
#define MDR_TIMER1_DMA_RE_BRK_DMAE_Msk    (0x10UL)                  /*!< MDR_TIMER1 DMA_RE: BRK_DMAE (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Pos (5UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH1_DMAE (Bit 5)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Msk (0x20UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Pos (6UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH2_DMAE (Bit 6)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Msk (0x40UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Pos (7UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH3_DMAE (Bit 7)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Msk (0x80UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Pos (8UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH4_DMAE (Bit 8)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Msk (0x100UL)            /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Pos (9UL)                /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH1_DMAE (Bit 9)           */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Msk (0x200UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Pos (10UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH2_DMAE (Bit 10)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Msk (0x400UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Pos (11UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH3_DMAE (Bit 11)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Msk (0x800UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Pos (12UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH4_DMAE (Bit 12)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Msk (0x1000UL)           /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Pos (13UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH1_DMAE (Bit 13)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Pos (14UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH2_DMAE (Bit 14)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Pos (15UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH3_DMAE (Bit 15)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Pos (16UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH4_DMAE (Bit 16)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)         /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ======================================================  CH1_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH1_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH1_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH1_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH1_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH1_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_Pos (4UL)                 /*!< MDR_TIMER1 CH1_CNTRL2: CAP_CCR_Fix (Bit 4)            */
#define MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_Msk (0x10UL)              /*!< MDR_TIMER1 CH1_CNTRL2: CAP_CCR_Fix (Bitfield-Mask: 0x01) */
/* ======================================================  CH2_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH2_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH2_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH2_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH2_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH2_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_Pos (4UL)                 /*!< MDR_TIMER1 CH2_CNTRL2: CAP_CCR_Fix (Bit 4)            */
#define MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_Msk (0x10UL)              /*!< MDR_TIMER1 CH2_CNTRL2: CAP_CCR_Fix (Bitfield-Mask: 0x01) */
/* ======================================================  CH3_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH3_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH3_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH3_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH3_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH3_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_Pos (4UL)                 /*!< MDR_TIMER1 CH3_CNTRL2: CAP_CCR_Fix (Bit 4)            */
#define MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_Msk (0x10UL)              /*!< MDR_TIMER1 CH3_CNTRL2: CAP_CCR_Fix (Bitfield-Mask: 0x01) */
/* ======================================================  CH4_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH4_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH4_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH4_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH4_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH4_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_Pos (4UL)                 /*!< MDR_TIMER1 CH4_CNTRL2: CAP_CCR_Fix (Bit 4)            */
#define MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_Msk (0x10UL)              /*!< MDR_TIMER1 CH4_CNTRL2: CAP_CCR_Fix (Bitfield-Mask: 0x01) */
/* =========================================================  CCR11  ========================================================= */
#define MDR_TIMER1_CCR11_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR11: Value (Bit 0)                       */
#define MDR_TIMER1_CCR11_Value_Msk        (0xffffffffUL)            /*!< MDR_TIMER1 CCR11: Value (Bitfield-Mask: 0xffffffff)   */
/* =========================================================  CCR21  ========================================================= */
#define MDR_TIMER1_CCR21_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR21: Value (Bit 0)                       */
#define MDR_TIMER1_CCR21_Value_Msk        (0xffffffffUL)            /*!< MDR_TIMER1 CCR21: Value (Bitfield-Mask: 0xffffffff)   */
/* =========================================================  CCR31  ========================================================= */
#define MDR_TIMER1_CCR31_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR31: Value (Bit 0)                       */
#define MDR_TIMER1_CCR31_Value_Msk        (0xffffffffUL)            /*!< MDR_TIMER1 CCR31: Value (Bitfield-Mask: 0xffffffff)   */
/* =========================================================  CCR41  ========================================================= */
#define MDR_TIMER1_CCR41_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR41: Value (Bit 0)                       */
#define MDR_TIMER1_CCR41_Value_Msk        (0xffffffffUL)            /*!< MDR_TIMER1 CCR41: Value (Bitfield-Mask: 0xffffffff)   */
/* ========================================================  DMA_RE1  ======================================================== */
#define MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_Pos (0UL)                  /*!< MDR_TIMER1 DMA_RE1: CNT_ZERO_DMAE (Bit 0)             */
#define MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_Msk (0x1UL)                /*!< MDR_TIMER1 DMA_RE1: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_Pos (1UL)                   /*!< MDR_TIMER1 DMA_RE1: CNT_ARR_DMAE (Bit 1)              */
#define MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_Msk (0x2UL)                 /*!< MDR_TIMER1 DMA_RE1: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_Pos (2UL)                    /*!< MDR_TIMER1 DMA_RE1: ETR_RE_DMAE (Bit 2)               */
#define MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_Msk (0x4UL)                  /*!< MDR_TIMER1 DMA_RE1: ETR_RE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_Pos (3UL)                    /*!< MDR_TIMER1 DMA_RE1: ETR_FE_DMAE (Bit 3)               */
#define MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_Msk (0x8UL)                  /*!< MDR_TIMER1 DMA_RE1: ETR_FE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_BRK_DMAE_Pos   (4UL)                     /*!< MDR_TIMER1 DMA_RE1: BRK_DMAE (Bit 4)                  */
#define MDR_TIMER1_DMA_RE1_BRK_DMAE_Msk   (0x10UL)                  /*!< MDR_TIMER1 DMA_RE1: BRK_DMAE (Bitfield-Mask: 0x01)    */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_Pos (5UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH1_DMAE (Bit 5)          */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_Msk (0x20UL)            /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_Pos (6UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH2_DMAE (Bit 6)          */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_Msk (0x40UL)            /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_Pos (7UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH3_DMAE (Bit 7)          */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_Msk (0x80UL)            /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_Pos (8UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH4_DMAE (Bit 8)          */
#define MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_Msk (0x100UL)           /*!< MDR_TIMER1 DMA_RE1: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_Pos (9UL)               /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH1_DMAE (Bit 9)          */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_Msk (0x200UL)           /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_Pos (10UL)              /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH2_DMAE (Bit 10)         */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_Msk (0x400UL)           /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_Pos (11UL)              /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH3_DMAE (Bit 11)         */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_Msk (0x800UL)           /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_Pos (12UL)              /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH4_DMAE (Bit 12)         */
#define MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_Msk (0x1000UL)          /*!< MDR_TIMER1 DMA_RE1: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_Pos (13UL)             /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH1_DMAE (Bit 13)        */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)         /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_Pos (14UL)             /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH2_DMAE (Bit 14)        */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)         /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_Pos (15UL)             /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH3_DMAE (Bit 15)        */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)         /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_Pos (16UL)             /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH4_DMAE (Bit 16)        */
#define MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)        /*!< MDR_TIMER1 DMA_RE1: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ========================================================  DMA_RE2  ======================================================== */
#define MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_Pos (0UL)                  /*!< MDR_TIMER1 DMA_RE2: CNT_ZERO_DMAE (Bit 0)             */
#define MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_Msk (0x1UL)                /*!< MDR_TIMER1 DMA_RE2: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_Pos (1UL)                   /*!< MDR_TIMER1 DMA_RE2: CNT_ARR_DMAE (Bit 1)              */
#define MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_Msk (0x2UL)                 /*!< MDR_TIMER1 DMA_RE2: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_Pos (2UL)                    /*!< MDR_TIMER1 DMA_RE2: ETR_RE_DMAE (Bit 2)               */
#define MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_Msk (0x4UL)                  /*!< MDR_TIMER1 DMA_RE2: ETR_RE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_Pos (3UL)                    /*!< MDR_TIMER1 DMA_RE2: ETR_FE_DMAE (Bit 3)               */
#define MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_Msk (0x8UL)                  /*!< MDR_TIMER1 DMA_RE2: ETR_FE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_BRK_DMAE_Pos   (4UL)                     /*!< MDR_TIMER1 DMA_RE2: BRK_DMAE (Bit 4)                  */
#define MDR_TIMER1_DMA_RE2_BRK_DMAE_Msk   (0x10UL)                  /*!< MDR_TIMER1 DMA_RE2: BRK_DMAE (Bitfield-Mask: 0x01)    */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_Pos (5UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH1_DMAE (Bit 5)          */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_Msk (0x20UL)            /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_Pos (6UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH2_DMAE (Bit 6)          */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_Msk (0x40UL)            /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_Pos (7UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH3_DMAE (Bit 7)          */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_Msk (0x80UL)            /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_Pos (8UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH4_DMAE (Bit 8)          */
#define MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_Msk (0x100UL)           /*!< MDR_TIMER1 DMA_RE2: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_Pos (9UL)               /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH1_DMAE (Bit 9)          */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_Msk (0x200UL)           /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_Pos (10UL)              /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH2_DMAE (Bit 10)         */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_Msk (0x400UL)           /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_Pos (11UL)              /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH3_DMAE (Bit 11)         */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_Msk (0x800UL)           /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_Pos (12UL)              /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH4_DMAE (Bit 12)         */
#define MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_Msk (0x1000UL)          /*!< MDR_TIMER1 DMA_RE2: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_Pos (13UL)             /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH1_DMAE (Bit 13)        */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)         /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_Pos (14UL)             /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH2_DMAE (Bit 14)        */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)         /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_Pos (15UL)             /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH3_DMAE (Bit 15)        */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)         /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_Pos (16UL)             /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH4_DMAE (Bit 16)        */
#define MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)        /*!< MDR_TIMER1 DMA_RE2: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ========================================================  DMA_RE3  ======================================================== */
#define MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_Pos (0UL)                  /*!< MDR_TIMER1 DMA_RE3: CNT_ZERO_DMAE (Bit 0)             */
#define MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_Msk (0x1UL)                /*!< MDR_TIMER1 DMA_RE3: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_Pos (1UL)                   /*!< MDR_TIMER1 DMA_RE3: CNT_ARR_DMAE (Bit 1)              */
#define MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_Msk (0x2UL)                 /*!< MDR_TIMER1 DMA_RE3: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_Pos (2UL)                    /*!< MDR_TIMER1 DMA_RE3: ETR_RE_DMAE (Bit 2)               */
#define MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_Msk (0x4UL)                  /*!< MDR_TIMER1 DMA_RE3: ETR_RE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_Pos (3UL)                    /*!< MDR_TIMER1 DMA_RE3: ETR_FE_DMAE (Bit 3)               */
#define MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_Msk (0x8UL)                  /*!< MDR_TIMER1 DMA_RE3: ETR_FE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_BRK_DMAE_Pos   (4UL)                     /*!< MDR_TIMER1 DMA_RE3: BRK_DMAE (Bit 4)                  */
#define MDR_TIMER1_DMA_RE3_BRK_DMAE_Msk   (0x10UL)                  /*!< MDR_TIMER1 DMA_RE3: BRK_DMAE (Bitfield-Mask: 0x01)    */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_Pos (5UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH1_DMAE (Bit 5)          */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_Msk (0x20UL)            /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_Pos (6UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH2_DMAE (Bit 6)          */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_Msk (0x40UL)            /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_Pos (7UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH3_DMAE (Bit 7)          */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_Msk (0x80UL)            /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_Pos (8UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH4_DMAE (Bit 8)          */
#define MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_Msk (0x100UL)           /*!< MDR_TIMER1 DMA_RE3: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_Pos (9UL)               /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH1_DMAE (Bit 9)          */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_Msk (0x200UL)           /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_Pos (10UL)              /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH2_DMAE (Bit 10)         */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_Msk (0x400UL)           /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_Pos (11UL)              /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH3_DMAE (Bit 11)         */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_Msk (0x800UL)           /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_Pos (12UL)              /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH4_DMAE (Bit 12)         */
#define MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_Msk (0x1000UL)          /*!< MDR_TIMER1 DMA_RE3: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_Pos (13UL)             /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH1_DMAE (Bit 13)        */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)         /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_Pos (14UL)             /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH2_DMAE (Bit 14)        */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)         /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_Pos (15UL)             /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH3_DMAE (Bit 15)        */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)         /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_Pos (16UL)             /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH4_DMAE (Bit 16)        */
#define MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)        /*!< MDR_TIMER1 DMA_RE3: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ========================================================  DMA_RE4  ======================================================== */
#define MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_Pos (0UL)                  /*!< MDR_TIMER1 DMA_RE4: CNT_ZERO_DMAE (Bit 0)             */
#define MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_Msk (0x1UL)                /*!< MDR_TIMER1 DMA_RE4: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_Pos (1UL)                   /*!< MDR_TIMER1 DMA_RE4: CNT_ARR_DMAE (Bit 1)              */
#define MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_Msk (0x2UL)                 /*!< MDR_TIMER1 DMA_RE4: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_Pos (2UL)                    /*!< MDR_TIMER1 DMA_RE4: ETR_RE_DMAE (Bit 2)               */
#define MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_Msk (0x4UL)                  /*!< MDR_TIMER1 DMA_RE4: ETR_RE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_Pos (3UL)                    /*!< MDR_TIMER1 DMA_RE4: ETR_FE_DMAE (Bit 3)               */
#define MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_Msk (0x8UL)                  /*!< MDR_TIMER1 DMA_RE4: ETR_FE_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_BRK_DMAE_Pos   (4UL)                     /*!< MDR_TIMER1 DMA_RE4: BRK_DMAE (Bit 4)                  */
#define MDR_TIMER1_DMA_RE4_BRK_DMAE_Msk   (0x10UL)                  /*!< MDR_TIMER1 DMA_RE4: BRK_DMAE (Bitfield-Mask: 0x01)    */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_Pos (5UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH1_DMAE (Bit 5)          */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_Msk (0x20UL)            /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_Pos (6UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH2_DMAE (Bit 6)          */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_Msk (0x40UL)            /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_Pos (7UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH3_DMAE (Bit 7)          */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_Msk (0x80UL)            /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_Pos (8UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH4_DMAE (Bit 8)          */
#define MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_Msk (0x100UL)           /*!< MDR_TIMER1 DMA_RE4: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_Pos (9UL)               /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH1_DMAE (Bit 9)          */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_Msk (0x200UL)           /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_Pos (10UL)              /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH2_DMAE (Bit 10)         */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_Msk (0x400UL)           /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_Pos (11UL)              /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH3_DMAE (Bit 11)         */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_Msk (0x800UL)           /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_Pos (12UL)              /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH4_DMAE (Bit 12)         */
#define MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_Msk (0x1000UL)          /*!< MDR_TIMER1 DMA_RE4: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_Pos (13UL)             /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH1_DMAE (Bit 13)        */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)         /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_Pos (14UL)             /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH2_DMAE (Bit 14)        */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)         /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_Pos (15UL)             /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH3_DMAE (Bit 15)        */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)         /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_Pos (16UL)             /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH4_DMAE (Bit 16)        */
#define MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)        /*!< MDR_TIMER1 DMA_RE4: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                         MDR_CAN1                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define MDR_CAN1_CONTROL_CAN_EN_Pos       (0UL)                     /*!< MDR_CAN1 CONTROL: CAN_EN (Bit 0)                      */
#define MDR_CAN1_CONTROL_CAN_EN_Msk       (0x1UL)                   /*!< MDR_CAN1 CONTROL: CAN_EN (Bitfield-Mask: 0x01)        */
#define MDR_CAN1_CONTROL_ROM_Pos          (1UL)                     /*!< MDR_CAN1 CONTROL: ROM (Bit 1)                         */
#define MDR_CAN1_CONTROL_ROM_Msk          (0x2UL)                   /*!< MDR_CAN1 CONTROL: ROM (Bitfield-Mask: 0x01)           */
#define MDR_CAN1_CONTROL_STM_Pos          (2UL)                     /*!< MDR_CAN1 CONTROL: STM (Bit 2)                         */
#define MDR_CAN1_CONTROL_STM_Msk          (0x4UL)                   /*!< MDR_CAN1 CONTROL: STM (Bitfield-Mask: 0x01)           */
#define MDR_CAN1_CONTROL_SAP_Pos          (3UL)                     /*!< MDR_CAN1 CONTROL: SAP (Bit 3)                         */
#define MDR_CAN1_CONTROL_SAP_Msk          (0x8UL)                   /*!< MDR_CAN1 CONTROL: SAP (Bitfield-Mask: 0x01)           */
#define MDR_CAN1_CONTROL_ROP_Pos          (4UL)                     /*!< MDR_CAN1 CONTROL: ROP (Bit 4)                         */
#define MDR_CAN1_CONTROL_ROP_Msk          (0x10UL)                  /*!< MDR_CAN1 CONTROL: ROP (Bitfield-Mask: 0x01)           */
/* ========================================================  STATUS  ========================================================= */
#define MDR_CAN1_STATUS_RX_Ready_Pos      (0UL)                     /*!< MDR_CAN1 STATUS: RX_Ready (Bit 0)                     */
#define MDR_CAN1_STATUS_RX_Ready_Msk      (0x1UL)                   /*!< MDR_CAN1 STATUS: RX_Ready (Bitfield-Mask: 0x01)       */
#define MDR_CAN1_STATUS_TX_Ready_Pos      (1UL)                     /*!< MDR_CAN1 STATUS: TX_Ready (Bit 1)                     */
#define MDR_CAN1_STATUS_TX_Ready_Msk      (0x2UL)                   /*!< MDR_CAN1 STATUS: TX_Ready (Bitfield-Mask: 0x01)       */
#define MDR_CAN1_STATUS_ERR_Over_Pos      (2UL)                     /*!< MDR_CAN1 STATUS: ERR_Over (Bit 2)                     */
#define MDR_CAN1_STATUS_ERR_Over_Msk      (0x4UL)                   /*!< MDR_CAN1 STATUS: ERR_Over (Bitfield-Mask: 0x01)       */
#define MDR_CAN1_STATUS_ERR_Bit_Pos       (3UL)                     /*!< MDR_CAN1 STATUS: ERR_Bit (Bit 3)                      */
#define MDR_CAN1_STATUS_ERR_Bit_Msk       (0x8UL)                   /*!< MDR_CAN1 STATUS: ERR_Bit (Bitfield-Mask: 0x01)        */
#define MDR_CAN1_STATUS_ERR_StuffBit_Pos  (4UL)                     /*!< MDR_CAN1 STATUS: ERR_StuffBit (Bit 4)                 */
#define MDR_CAN1_STATUS_ERR_StuffBit_Msk  (0x10UL)                  /*!< MDR_CAN1 STATUS: ERR_StuffBit (Bitfield-Mask: 0x01)   */
#define MDR_CAN1_STATUS_ERR_CRC_Pos       (5UL)                     /*!< MDR_CAN1 STATUS: ERR_CRC (Bit 5)                      */
#define MDR_CAN1_STATUS_ERR_CRC_Msk       (0x20UL)                  /*!< MDR_CAN1 STATUS: ERR_CRC (Bitfield-Mask: 0x01)        */
#define MDR_CAN1_STATUS_ERR_FRAME_Pos     (6UL)                     /*!< MDR_CAN1 STATUS: ERR_FRAME (Bit 6)                    */
#define MDR_CAN1_STATUS_ERR_FRAME_Msk     (0x40UL)                  /*!< MDR_CAN1 STATUS: ERR_FRAME (Bitfield-Mask: 0x01)      */
#define MDR_CAN1_STATUS_ERR_ACK_Pos       (7UL)                     /*!< MDR_CAN1 STATUS: ERR_ACK (Bit 7)                      */
#define MDR_CAN1_STATUS_ERR_ACK_Msk       (0x80UL)                  /*!< MDR_CAN1 STATUS: ERR_ACK (Bitfield-Mask: 0x01)        */
#define MDR_CAN1_STATUS_ID_Lower_Pos      (8UL)                     /*!< MDR_CAN1 STATUS: ID_Lower (Bit 8)                     */
#define MDR_CAN1_STATUS_ID_Lower_Msk      (0x100UL)                 /*!< MDR_CAN1 STATUS: ID_Lower (Bitfield-Mask: 0x01)       */
#define MDR_CAN1_STATUS_ERR_Status_Pos    (9UL)                     /*!< MDR_CAN1 STATUS: ERR_Status (Bit 9)                   */
#define MDR_CAN1_STATUS_ERR_Status_Msk    (0x600UL)                 /*!< MDR_CAN1 STATUS: ERR_Status (Bitfield-Mask: 0x03)     */
#define MDR_CAN1_STATUS_RX_ERR_CNT8_Pos   (11UL)                    /*!< MDR_CAN1 STATUS: RX_ERR_CNT8 (Bit 11)                 */
#define MDR_CAN1_STATUS_RX_ERR_CNT8_Msk   (0x800UL)                 /*!< MDR_CAN1 STATUS: RX_ERR_CNT8 (Bitfield-Mask: 0x01)    */
#define MDR_CAN1_STATUS_TX_ERR_CNT8_Pos   (12UL)                    /*!< MDR_CAN1 STATUS: TX_ERR_CNT8 (Bit 12)                 */
#define MDR_CAN1_STATUS_TX_ERR_CNT8_Msk   (0x1000UL)                /*!< MDR_CAN1 STATUS: TX_ERR_CNT8 (Bitfield-Mask: 0x01)    */
#define MDR_CAN1_STATUS_RX_ERR_CNT_Pos    (16UL)                    /*!< MDR_CAN1 STATUS: RX_ERR_CNT (Bit 16)                  */
#define MDR_CAN1_STATUS_RX_ERR_CNT_Msk    (0xff0000UL)              /*!< MDR_CAN1 STATUS: RX_ERR_CNT (Bitfield-Mask: 0xff)     */
#define MDR_CAN1_STATUS_TX_ERR_CNT_Pos    (24UL)                    /*!< MDR_CAN1 STATUS: TX_ERR_CNT (Bit 24)                  */
#define MDR_CAN1_STATUS_TX_ERR_CNT_Msk    (0xff000000UL)            /*!< MDR_CAN1 STATUS: TX_ERR_CNT (Bitfield-Mask: 0xff)     */
/* ========================================================  BITTMNG  ======================================================== */
#define MDR_CAN1_BITTMNG_BRP_Pos          (0UL)                     /*!< MDR_CAN1 BITTMNG: BRP (Bit 0)                         */
#define MDR_CAN1_BITTMNG_BRP_Msk          (0xffffUL)                /*!< MDR_CAN1 BITTMNG: BRP (Bitfield-Mask: 0xffff)         */
#define MDR_CAN1_BITTMNG_PSEG_Pos         (16UL)                    /*!< MDR_CAN1 BITTMNG: PSEG (Bit 16)                       */
#define MDR_CAN1_BITTMNG_PSEG_Msk         (0x70000UL)               /*!< MDR_CAN1 BITTMNG: PSEG (Bitfield-Mask: 0x07)          */
#define MDR_CAN1_BITTMNG_SEG1_Pos         (19UL)                    /*!< MDR_CAN1 BITTMNG: SEG1 (Bit 19)                       */
#define MDR_CAN1_BITTMNG_SEG1_Msk         (0x380000UL)              /*!< MDR_CAN1 BITTMNG: SEG1 (Bitfield-Mask: 0x07)          */
#define MDR_CAN1_BITTMNG_SEG2_Pos         (22UL)                    /*!< MDR_CAN1 BITTMNG: SEG2 (Bit 22)                       */
#define MDR_CAN1_BITTMNG_SEG2_Msk         (0x1c00000UL)             /*!< MDR_CAN1 BITTMNG: SEG2 (Bitfield-Mask: 0x07)          */
#define MDR_CAN1_BITTMNG_SJW_Pos          (25UL)                    /*!< MDR_CAN1 BITTMNG: SJW (Bit 25)                        */
#define MDR_CAN1_BITTMNG_SJW_Msk          (0x6000000UL)             /*!< MDR_CAN1 BITTMNG: SJW (Bitfield-Mask: 0x03)           */
#define MDR_CAN1_BITTMNG_SB_Pos           (27UL)                    /*!< MDR_CAN1 BITTMNG: SB (Bit 27)                         */
#define MDR_CAN1_BITTMNG_SB_Msk           (0x8000000UL)             /*!< MDR_CAN1 BITTMNG: SB (Bitfield-Mask: 0x01)            */
/* ========================================================  INT_EN  ========================================================= */
#define MDR_CAN1_INT_EN_GLB_IntEn_Pos     (0UL)                     /*!< MDR_CAN1 INT_EN: GLB_IntEn (Bit 0)                    */
#define MDR_CAN1_INT_EN_GLB_IntEn_Msk     (0x1UL)                   /*!< MDR_CAN1 INT_EN: GLB_IntEn (Bitfield-Mask: 0x01)      */
#define MDR_CAN1_INT_EN_RX_IntEn_Pos      (1UL)                     /*!< MDR_CAN1 INT_EN: RX_IntEn (Bit 1)                     */
#define MDR_CAN1_INT_EN_RX_IntEn_Msk      (0x2UL)                   /*!< MDR_CAN1 INT_EN: RX_IntEn (Bitfield-Mask: 0x01)       */
#define MDR_CAN1_INT_EN_TX_IntEn_Pos      (2UL)                     /*!< MDR_CAN1 INT_EN: TX_IntEn (Bit 2)                     */
#define MDR_CAN1_INT_EN_TX_IntEn_Msk      (0x4UL)                   /*!< MDR_CAN1 INT_EN: TX_IntEn (Bitfield-Mask: 0x01)       */
#define MDR_CAN1_INT_EN_ERR_IntEn_Pos     (3UL)                     /*!< MDR_CAN1 INT_EN: ERR_IntEn (Bit 3)                    */
#define MDR_CAN1_INT_EN_ERR_IntEn_Msk     (0x8UL)                   /*!< MDR_CAN1 INT_EN: ERR_IntEn (Bitfield-Mask: 0x01)      */
#define MDR_CAN1_INT_EN_ErrOV_IntEn_Pos   (4UL)                     /*!< MDR_CAN1 INT_EN: ErrOV_IntEn (Bit 4)                  */
#define MDR_CAN1_INT_EN_ErrOV_IntEn_Msk   (0x10UL)                  /*!< MDR_CAN1 INT_EN: ErrOV_IntEn (Bitfield-Mask: 0x01)    */
/* =========================================================  OVER  ========================================================== */
#define MDR_CAN1_OVER_ERROR_MAX_Pos       (0UL)                     /*!< MDR_CAN1 OVER: ERROR_MAX (Bit 0)                      */
#define MDR_CAN1_OVER_ERROR_MAX_Msk       (0xffUL)                  /*!< MDR_CAN1 OVER: ERROR_MAX (Bitfield-Mask: 0xff)        */
/* =========================================================  RX_ID  ========================================================= */
#define MDR_CAN1_RX_ID_EID_Pos            (0UL)                     /*!< MDR_CAN1 RX_ID: EID (Bit 0)                           */
#define MDR_CAN1_RX_ID_EID_Msk            (0x3ffffUL)               /*!< MDR_CAN1 RX_ID: EID (Bitfield-Mask: 0x3ffff)          */
#define MDR_CAN1_RX_ID_SID_Pos            (18UL)                    /*!< MDR_CAN1 RX_ID: SID (Bit 18)                          */
#define MDR_CAN1_RX_ID_SID_Msk            (0x1ffc0000UL)            /*!< MDR_CAN1 RX_ID: SID (Bitfield-Mask: 0x7ff)            */
/* ========================================================  RX_DLC  ========================================================= */
#define MDR_CAN1_RX_DLC_DLC_Pos           (0UL)                     /*!< MDR_CAN1 RX_DLC: DLC (Bit 0)                          */
#define MDR_CAN1_RX_DLC_DLC_Msk           (0xfUL)                   /*!< MDR_CAN1 RX_DLC: DLC (Bitfield-Mask: 0x0f)            */
#define MDR_CAN1_RX_DLC_RTR_Pos           (8UL)                     /*!< MDR_CAN1 RX_DLC: RTR (Bit 8)                          */
#define MDR_CAN1_RX_DLC_RTR_Msk           (0x100UL)                 /*!< MDR_CAN1 RX_DLC: RTR (Bitfield-Mask: 0x01)            */
#define MDR_CAN1_RX_DLC_R1_Pos            (9UL)                     /*!< MDR_CAN1 RX_DLC: R1 (Bit 9)                           */
#define MDR_CAN1_RX_DLC_R1_Msk            (0x200UL)                 /*!< MDR_CAN1 RX_DLC: R1 (Bitfield-Mask: 0x01)             */
#define MDR_CAN1_RX_DLC_R0_Pos            (10UL)                    /*!< MDR_CAN1 RX_DLC: R0 (Bit 10)                          */
#define MDR_CAN1_RX_DLC_R0_Msk            (0x400UL)                 /*!< MDR_CAN1 RX_DLC: R0 (Bitfield-Mask: 0x01)             */
#define MDR_CAN1_RX_DLC_SRR_Pos           (11UL)                    /*!< MDR_CAN1 RX_DLC: SRR (Bit 11)                         */
#define MDR_CAN1_RX_DLC_SRR_Msk           (0x800UL)                 /*!< MDR_CAN1 RX_DLC: SRR (Bitfield-Mask: 0x01)            */
#define MDR_CAN1_RX_DLC_IDE_Pos           (12UL)                    /*!< MDR_CAN1 RX_DLC: IDE (Bit 12)                         */
#define MDR_CAN1_RX_DLC_IDE_Msk           (0x1000UL)                /*!< MDR_CAN1 RX_DLC: IDE (Bitfield-Mask: 0x01)            */
/* =======================================================  RX_DATAL  ======================================================== */
#define MDR_CAN1_RX_DATAL_DB0_Pos         (0UL)                     /*!< MDR_CAN1 RX_DATAL: DB0 (Bit 0)                        */
#define MDR_CAN1_RX_DATAL_DB0_Msk         (0xffUL)                  /*!< MDR_CAN1 RX_DATAL: DB0 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_RX_DATAL_DB1_Pos         (8UL)                     /*!< MDR_CAN1 RX_DATAL: DB1 (Bit 8)                        */
#define MDR_CAN1_RX_DATAL_DB1_Msk         (0xff00UL)                /*!< MDR_CAN1 RX_DATAL: DB1 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_RX_DATAL_DB2_Pos         (16UL)                    /*!< MDR_CAN1 RX_DATAL: DB2 (Bit 16)                       */
#define MDR_CAN1_RX_DATAL_DB2_Msk         (0xff0000UL)              /*!< MDR_CAN1 RX_DATAL: DB2 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_RX_DATAL_DB3_Pos         (24UL)                    /*!< MDR_CAN1 RX_DATAL: DB3 (Bit 24)                       */
#define MDR_CAN1_RX_DATAL_DB3_Msk         (0xff000000UL)            /*!< MDR_CAN1 RX_DATAL: DB3 (Bitfield-Mask: 0xff)          */
/* =======================================================  RX_DATAH  ======================================================== */
#define MDR_CAN1_RX_DATAH_DB4_Pos         (0UL)                     /*!< MDR_CAN1 RX_DATAH: DB4 (Bit 0)                        */
#define MDR_CAN1_RX_DATAH_DB4_Msk         (0xffUL)                  /*!< MDR_CAN1 RX_DATAH: DB4 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_RX_DATAH_DB5_Pos         (8UL)                     /*!< MDR_CAN1 RX_DATAH: DB5 (Bit 8)                        */
#define MDR_CAN1_RX_DATAH_DB5_Msk         (0xff00UL)                /*!< MDR_CAN1 RX_DATAH: DB5 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_RX_DATAH_DB6_Pos         (16UL)                    /*!< MDR_CAN1 RX_DATAH: DB6 (Bit 16)                       */
#define MDR_CAN1_RX_DATAH_DB6_Msk         (0xff0000UL)              /*!< MDR_CAN1 RX_DATAH: DB6 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_RX_DATAH_DB7_Pos         (24UL)                    /*!< MDR_CAN1 RX_DATAH: DB7 (Bit 24)                       */
#define MDR_CAN1_RX_DATAH_DB7_Msk         (0xff000000UL)            /*!< MDR_CAN1 RX_DATAH: DB7 (Bitfield-Mask: 0xff)          */
/* =========================================================  TX_ID  ========================================================= */
#define MDR_CAN1_TX_ID_EID_Pos            (0UL)                     /*!< MDR_CAN1 TX_ID: EID (Bit 0)                           */
#define MDR_CAN1_TX_ID_EID_Msk            (0x3ffffUL)               /*!< MDR_CAN1 TX_ID: EID (Bitfield-Mask: 0x3ffff)          */
#define MDR_CAN1_TX_ID_SID_Pos            (18UL)                    /*!< MDR_CAN1 TX_ID: SID (Bit 18)                          */
#define MDR_CAN1_TX_ID_SID_Msk            (0x1ffc0000UL)            /*!< MDR_CAN1 TX_ID: SID (Bitfield-Mask: 0x7ff)            */
/* ========================================================  TX_DLC  ========================================================= */
#define MDR_CAN1_TX_DLC_DLC_Pos           (0UL)                     /*!< MDR_CAN1 TX_DLC: DLC (Bit 0)                          */
#define MDR_CAN1_TX_DLC_DLC_Msk           (0xfUL)                   /*!< MDR_CAN1 TX_DLC: DLC (Bitfield-Mask: 0x0f)            */
#define MDR_CAN1_TX_DLC_RTR_Pos           (8UL)                     /*!< MDR_CAN1 TX_DLC: RTR (Bit 8)                          */
#define MDR_CAN1_TX_DLC_RTR_Msk           (0x100UL)                 /*!< MDR_CAN1 TX_DLC: RTR (Bitfield-Mask: 0x01)            */
#define MDR_CAN1_TX_DLC_R1_Pos            (9UL)                     /*!< MDR_CAN1 TX_DLC: R1 (Bit 9)                           */
#define MDR_CAN1_TX_DLC_R1_Msk            (0x200UL)                 /*!< MDR_CAN1 TX_DLC: R1 (Bitfield-Mask: 0x01)             */
#define MDR_CAN1_TX_DLC_R0_Pos            (10UL)                    /*!< MDR_CAN1 TX_DLC: R0 (Bit 10)                          */
#define MDR_CAN1_TX_DLC_R0_Msk            (0x400UL)                 /*!< MDR_CAN1 TX_DLC: R0 (Bitfield-Mask: 0x01)             */
#define MDR_CAN1_TX_DLC_SRR_Pos           (11UL)                    /*!< MDR_CAN1 TX_DLC: SRR (Bit 11)                         */
#define MDR_CAN1_TX_DLC_SRR_Msk           (0x800UL)                 /*!< MDR_CAN1 TX_DLC: SRR (Bitfield-Mask: 0x01)            */
#define MDR_CAN1_TX_DLC_IDE_Pos           (12UL)                    /*!< MDR_CAN1 TX_DLC: IDE (Bit 12)                         */
#define MDR_CAN1_TX_DLC_IDE_Msk           (0x1000UL)                /*!< MDR_CAN1 TX_DLC: IDE (Bitfield-Mask: 0x01)            */
/* =======================================================  TX_DATAL  ======================================================== */
#define MDR_CAN1_TX_DATAL_DB0_Pos         (0UL)                     /*!< MDR_CAN1 TX_DATAL: DB0 (Bit 0)                        */
#define MDR_CAN1_TX_DATAL_DB0_Msk         (0xffUL)                  /*!< MDR_CAN1 TX_DATAL: DB0 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_TX_DATAL_DB1_Pos         (8UL)                     /*!< MDR_CAN1 TX_DATAL: DB1 (Bit 8)                        */
#define MDR_CAN1_TX_DATAL_DB1_Msk         (0xff00UL)                /*!< MDR_CAN1 TX_DATAL: DB1 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_TX_DATAL_DB2_Pos         (16UL)                    /*!< MDR_CAN1 TX_DATAL: DB2 (Bit 16)                       */
#define MDR_CAN1_TX_DATAL_DB2_Msk         (0xff0000UL)              /*!< MDR_CAN1 TX_DATAL: DB2 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_TX_DATAL_DB3_Pos         (24UL)                    /*!< MDR_CAN1 TX_DATAL: DB3 (Bit 24)                       */
#define MDR_CAN1_TX_DATAL_DB3_Msk         (0xff000000UL)            /*!< MDR_CAN1 TX_DATAL: DB3 (Bitfield-Mask: 0xff)          */
/* =======================================================  TX_DATAH  ======================================================== */
#define MDR_CAN1_TX_DATAH_DB4_Pos         (0UL)                     /*!< MDR_CAN1 TX_DATAH: DB4 (Bit 0)                        */
#define MDR_CAN1_TX_DATAH_DB4_Msk         (0xffUL)                  /*!< MDR_CAN1 TX_DATAH: DB4 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_TX_DATAH_DB5_Pos         (8UL)                     /*!< MDR_CAN1 TX_DATAH: DB5 (Bit 8)                        */
#define MDR_CAN1_TX_DATAH_DB5_Msk         (0xff00UL)                /*!< MDR_CAN1 TX_DATAH: DB5 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_TX_DATAH_DB6_Pos         (16UL)                    /*!< MDR_CAN1 TX_DATAH: DB6 (Bit 16)                       */
#define MDR_CAN1_TX_DATAH_DB6_Msk         (0xff0000UL)              /*!< MDR_CAN1 TX_DATAH: DB6 (Bitfield-Mask: 0xff)          */
#define MDR_CAN1_TX_DATAH_DB7_Pos         (24UL)                    /*!< MDR_CAN1 TX_DATAH: DB7 (Bit 24)                       */
#define MDR_CAN1_TX_DATAH_DB7_Msk         (0xff000000UL)            /*!< MDR_CAN1 TX_DATAH: DB7 (Bitfield-Mask: 0xff)          */
/* ========================================================  BUF_CON  ======================================================== */
#define MDR_CAN1_BUF_CON_EN_Pos           (0UL)                     /*!< MDR_CAN1 BUF_CON: EN (Bit 0)                          */
#define MDR_CAN1_BUF_CON_EN_Msk           (0x1UL)                   /*!< MDR_CAN1 BUF_CON: EN (Bitfield-Mask: 0x01)            */
#define MDR_CAN1_BUF_CON_RX_TX_Pos        (1UL)                     /*!< MDR_CAN1 BUF_CON: RX_TX (Bit 1)                       */
#define MDR_CAN1_BUF_CON_RX_TX_Msk        (0x2UL)                   /*!< MDR_CAN1 BUF_CON: RX_TX (Bitfield-Mask: 0x01)         */
#define MDR_CAN1_BUF_CON_OVER_EN_Pos      (2UL)                     /*!< MDR_CAN1 BUF_CON: OVER_EN (Bit 2)                     */
#define MDR_CAN1_BUF_CON_OVER_EN_Msk      (0x4UL)                   /*!< MDR_CAN1 BUF_CON: OVER_EN (Bitfield-Mask: 0x01)       */
#define MDR_CAN1_BUF_CON_RTR_EN_Pos       (3UL)                     /*!< MDR_CAN1 BUF_CON: RTR_EN (Bit 3)                      */
#define MDR_CAN1_BUF_CON_RTR_EN_Msk       (0x8UL)                   /*!< MDR_CAN1 BUF_CON: RTR_EN (Bitfield-Mask: 0x01)        */
#define MDR_CAN1_BUF_CON_PRIOR_OFF_Pos    (4UL)                     /*!< MDR_CAN1 BUF_CON: PRIOR_OFF (Bit 4)                   */
#define MDR_CAN1_BUF_CON_PRIOR_OFF_Msk    (0x10UL)                  /*!< MDR_CAN1 BUF_CON: PRIOR_OFF (Bitfield-Mask: 0x01)     */
#define MDR_CAN1_BUF_CON_TX_REQ_Pos       (5UL)                     /*!< MDR_CAN1 BUF_CON: TX_REQ (Bit 5)                      */
#define MDR_CAN1_BUF_CON_TX_REQ_Msk       (0x20UL)                  /*!< MDR_CAN1 BUF_CON: TX_REQ (Bitfield-Mask: 0x01)        */
#define MDR_CAN1_BUF_CON_RX_FULL_Pos      (6UL)                     /*!< MDR_CAN1 BUF_CON: RX_FULL (Bit 6)                     */
#define MDR_CAN1_BUF_CON_RX_FULL_Msk      (0x40UL)                  /*!< MDR_CAN1 BUF_CON: RX_FULL (Bitfield-Mask: 0x01)       */
#define MDR_CAN1_BUF_CON_OVER_WR_Pos      (7UL)                     /*!< MDR_CAN1 BUF_CON: OVER_WR (Bit 7)                     */
#define MDR_CAN1_BUF_CON_OVER_WR_Msk      (0x80UL)                  /*!< MDR_CAN1 BUF_CON: OVER_WR (Bitfield-Mask: 0x01)       */
/* ========================================================  INT_RX  ========================================================= */
#define MDR_CAN1_INT_RX_RX_IRQ_En_Pos     (0UL)                     /*!< MDR_CAN1 INT_RX: RX_IRQ_En (Bit 0)                    */
#define MDR_CAN1_INT_RX_RX_IRQ_En_Msk     (0x1UL)                   /*!< MDR_CAN1 INT_RX: RX_IRQ_En (Bitfield-Mask: 0x01)      */
/* ==========================================================  RX  =========================================================== */
#define MDR_CAN1_RX_RX_FULL_Pos           (0UL)                     /*!< MDR_CAN1 RX: RX_FULL (Bit 0)                          */
#define MDR_CAN1_RX_RX_FULL_Msk           (0x1UL)                   /*!< MDR_CAN1 RX: RX_FULL (Bitfield-Mask: 0x01)            */
/* ========================================================  INT_TX  ========================================================= */
#define MDR_CAN1_INT_TX_TX_IRQ_En_Pos     (0UL)                     /*!< MDR_CAN1 INT_TX: TX_IRQ_En (Bit 0)                    */
#define MDR_CAN1_INT_TX_TX_IRQ_En_Msk     (0x1UL)                   /*!< MDR_CAN1 INT_TX: TX_IRQ_En (Bitfield-Mask: 0x01)      */
/* ==========================================================  TX  =========================================================== */
#define MDR_CAN1_TX_TX_nReq_Pos           (0UL)                     /*!< MDR_CAN1 TX: TX_nReq (Bit 0)                          */
#define MDR_CAN1_TX_TX_nReq_Msk           (0x1UL)                   /*!< MDR_CAN1 TX: TX_nReq (Bitfield-Mask: 0x01)            */


/* =========================================================================================================================== */
/* ================                                         MDR_SSP1                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
#define MDR_SSP1_CR0_DSS_Pos              (0UL)                     /*!< MDR_SSP1 CR0: DSS (Bit 0)                             */
#define MDR_SSP1_CR0_DSS_Msk              (0xfUL)                   /*!< MDR_SSP1 CR0: DSS (Bitfield-Mask: 0x0f)               */
#define MDR_SSP1_CR0_FRF_Pos              (4UL)                     /*!< MDR_SSP1 CR0: FRF (Bit 4)                             */
#define MDR_SSP1_CR0_FRF_Msk              (0x30UL)                  /*!< MDR_SSP1 CR0: FRF (Bitfield-Mask: 0x03)               */
#define MDR_SSP1_CR0_SPO_Pos              (6UL)                     /*!< MDR_SSP1 CR0: SPO (Bit 6)                             */
#define MDR_SSP1_CR0_SPO_Msk              (0x40UL)                  /*!< MDR_SSP1 CR0: SPO (Bitfield-Mask: 0x01)               */
#define MDR_SSP1_CR0_SPH_Pos              (7UL)                     /*!< MDR_SSP1 CR0: SPH (Bit 7)                             */
#define MDR_SSP1_CR0_SPH_Msk              (0x80UL)                  /*!< MDR_SSP1 CR0: SPH (Bitfield-Mask: 0x01)               */
#define MDR_SSP1_CR0_SCR_Pos              (8UL)                     /*!< MDR_SSP1 CR0: SCR (Bit 8)                             */
#define MDR_SSP1_CR0_SCR_Msk              (0xff00UL)                /*!< MDR_SSP1 CR0: SCR (Bitfield-Mask: 0xff)               */
/* ==========================================================  CR1  ========================================================== */
#define MDR_SSP1_CR1_LBM_Pos              (0UL)                     /*!< MDR_SSP1 CR1: LBM (Bit 0)                             */
#define MDR_SSP1_CR1_LBM_Msk              (0x1UL)                   /*!< MDR_SSP1 CR1: LBM (Bitfield-Mask: 0x01)               */
#define MDR_SSP1_CR1_SSE_Pos              (1UL)                     /*!< MDR_SSP1 CR1: SSE (Bit 1)                             */
#define MDR_SSP1_CR1_SSE_Msk              (0x2UL)                   /*!< MDR_SSP1 CR1: SSE (Bitfield-Mask: 0x01)               */
#define MDR_SSP1_CR1_MS_Pos               (2UL)                     /*!< MDR_SSP1 CR1: MS (Bit 2)                              */
#define MDR_SSP1_CR1_MS_Msk               (0x4UL)                   /*!< MDR_SSP1 CR1: MS (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_CR1_SOD_Pos              (3UL)                     /*!< MDR_SSP1 CR1: SOD (Bit 3)                             */
#define MDR_SSP1_CR1_SOD_Msk              (0x8UL)                   /*!< MDR_SSP1 CR1: SOD (Bitfield-Mask: 0x01)               */
/* ==========================================================  DR  =========================================================== */
#define MDR_SSP1_DR_Data_Pos              (0UL)                     /*!< MDR_SSP1 DR: Data (Bit 0)                             */
#define MDR_SSP1_DR_Data_Msk              (0xffffUL)                /*!< MDR_SSP1 DR: Data (Bitfield-Mask: 0xffff)             */
/* ==========================================================  SR  =========================================================== */
#define MDR_SSP1_SR_TFE_Pos               (0UL)                     /*!< MDR_SSP1 SR: TFE (Bit 0)                              */
#define MDR_SSP1_SR_TFE_Msk               (0x1UL)                   /*!< MDR_SSP1 SR: TFE (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_SR_TNF_Pos               (1UL)                     /*!< MDR_SSP1 SR: TNF (Bit 1)                              */
#define MDR_SSP1_SR_TNF_Msk               (0x2UL)                   /*!< MDR_SSP1 SR: TNF (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_SR_RNE_Pos               (2UL)                     /*!< MDR_SSP1 SR: RNE (Bit 2)                              */
#define MDR_SSP1_SR_RNE_Msk               (0x4UL)                   /*!< MDR_SSP1 SR: RNE (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_SR_RFF_Pos               (3UL)                     /*!< MDR_SSP1 SR: RFF (Bit 3)                              */
#define MDR_SSP1_SR_RFF_Msk               (0x8UL)                   /*!< MDR_SSP1 SR: RFF (Bitfield-Mask: 0x01)                */
#define MDR_SSP1_SR_BSY_Pos               (4UL)                     /*!< MDR_SSP1 SR: BSY (Bit 4)                              */
#define MDR_SSP1_SR_BSY_Msk               (0x10UL)                  /*!< MDR_SSP1 SR: BSY (Bitfield-Mask: 0x01)                */
/* =========================================================  CPSR  ========================================================== */
#define MDR_SSP1_CPSR_CPSDVSR_Pos         (0UL)                     /*!< MDR_SSP1 CPSR: CPSDVSR (Bit 0)                        */
#define MDR_SSP1_CPSR_CPSDVSR_Msk         (0xffUL)                  /*!< MDR_SSP1 CPSR: CPSDVSR (Bitfield-Mask: 0xff)          */
/* =========================================================  IMSC  ========================================================== */
#define MDR_SSP1_IMSC_RORIM_Pos           (0UL)                     /*!< MDR_SSP1 IMSC: RORIM (Bit 0)                          */
#define MDR_SSP1_IMSC_RORIM_Msk           (0x1UL)                   /*!< MDR_SSP1 IMSC: RORIM (Bitfield-Mask: 0x01)            */
#define MDR_SSP1_IMSC_RTIM_Pos            (1UL)                     /*!< MDR_SSP1 IMSC: RTIM (Bit 1)                           */
#define MDR_SSP1_IMSC_RTIM_Msk            (0x2UL)                   /*!< MDR_SSP1 IMSC: RTIM (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_IMSC_RXIM_Pos            (2UL)                     /*!< MDR_SSP1 IMSC: RXIM (Bit 2)                           */
#define MDR_SSP1_IMSC_RXIM_Msk            (0x4UL)                   /*!< MDR_SSP1 IMSC: RXIM (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_IMSC_TXIM_Pos            (3UL)                     /*!< MDR_SSP1 IMSC: TXIM (Bit 3)                           */
#define MDR_SSP1_IMSC_TXIM_Msk            (0x8UL)                   /*!< MDR_SSP1 IMSC: TXIM (Bitfield-Mask: 0x01)             */
/* ==========================================================  RIS  ========================================================== */
#define MDR_SSP1_RIS_RORRIS_Pos           (0UL)                     /*!< MDR_SSP1 RIS: RORRIS (Bit 0)                          */
#define MDR_SSP1_RIS_RORRIS_Msk           (0x1UL)                   /*!< MDR_SSP1 RIS: RORRIS (Bitfield-Mask: 0x01)            */
#define MDR_SSP1_RIS_RTRIS_Pos            (1UL)                     /*!< MDR_SSP1 RIS: RTRIS (Bit 1)                           */
#define MDR_SSP1_RIS_RTRIS_Msk            (0x2UL)                   /*!< MDR_SSP1 RIS: RTRIS (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_RIS_RXRIS_Pos            (2UL)                     /*!< MDR_SSP1 RIS: RXRIS (Bit 2)                           */
#define MDR_SSP1_RIS_RXRIS_Msk            (0x4UL)                   /*!< MDR_SSP1 RIS: RXRIS (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_RIS_TXRIS_Pos            (3UL)                     /*!< MDR_SSP1 RIS: TXRIS (Bit 3)                           */
#define MDR_SSP1_RIS_TXRIS_Msk            (0x8UL)                   /*!< MDR_SSP1 RIS: TXRIS (Bitfield-Mask: 0x01)             */
/* ==========================================================  MIS  ========================================================== */
#define MDR_SSP1_MIS_RORMIS_Pos           (0UL)                     /*!< MDR_SSP1 MIS: RORMIS (Bit 0)                          */
#define MDR_SSP1_MIS_RORMIS_Msk           (0x1UL)                   /*!< MDR_SSP1 MIS: RORMIS (Bitfield-Mask: 0x01)            */
#define MDR_SSP1_MIS_RTMIS_Pos            (1UL)                     /*!< MDR_SSP1 MIS: RTMIS (Bit 1)                           */
#define MDR_SSP1_MIS_RTMIS_Msk            (0x2UL)                   /*!< MDR_SSP1 MIS: RTMIS (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_MIS_RXMIS_Pos            (2UL)                     /*!< MDR_SSP1 MIS: RXMIS (Bit 2)                           */
#define MDR_SSP1_MIS_RXMIS_Msk            (0x4UL)                   /*!< MDR_SSP1 MIS: RXMIS (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_MIS_TXMIS_Pos            (3UL)                     /*!< MDR_SSP1 MIS: TXMIS (Bit 3)                           */
#define MDR_SSP1_MIS_TXMIS_Msk            (0x8UL)                   /*!< MDR_SSP1 MIS: TXMIS (Bitfield-Mask: 0x01)             */
/* ==========================================================  ICR  ========================================================== */
#define MDR_SSP1_ICR_RORIC_Pos            (0UL)                     /*!< MDR_SSP1 ICR: RORIC (Bit 0)                           */
#define MDR_SSP1_ICR_RORIC_Msk            (0x1UL)                   /*!< MDR_SSP1 ICR: RORIC (Bitfield-Mask: 0x01)             */
#define MDR_SSP1_ICR_RTIC_Pos             (1UL)                     /*!< MDR_SSP1 ICR: RTIC (Bit 1)                            */
#define MDR_SSP1_ICR_RTIC_Msk             (0x2UL)                   /*!< MDR_SSP1 ICR: RTIC (Bitfield-Mask: 0x01)              */
/* =========================================================  DMACR  ========================================================= */
#define MDR_SSP1_DMACR_RXDMAE_Pos         (0UL)                     /*!< MDR_SSP1 DMACR: RXDMAE (Bit 0)                        */
#define MDR_SSP1_DMACR_RXDMAE_Msk         (0x1UL)                   /*!< MDR_SSP1 DMACR: RXDMAE (Bitfield-Mask: 0x01)          */
#define MDR_SSP1_DMACR_TXDMAE_Pos         (1UL)                     /*!< MDR_SSP1 DMACR: TXDMAE (Bit 1)                        */
#define MDR_SSP1_DMACR_TXDMAE_Msk         (0x2UL)                   /*!< MDR_SSP1 DMACR: TXDMAE (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
#define MDR_UART1_DR_DATA_Pos             (0UL)                     /*!< MDR_UART1 DR: DATA (Bit 0)                            */
#define MDR_UART1_DR_DATA_Msk             (0xffUL)                  /*!< MDR_UART1 DR: DATA (Bitfield-Mask: 0xff)              */
#define MDR_UART1_DR_FE_Pos               (8UL)                     /*!< MDR_UART1 DR: FE (Bit 8)                              */
#define MDR_UART1_DR_FE_Msk               (0x100UL)                 /*!< MDR_UART1 DR: FE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_PE_Pos               (9UL)                     /*!< MDR_UART1 DR: PE (Bit 9)                              */
#define MDR_UART1_DR_PE_Msk               (0x200UL)                 /*!< MDR_UART1 DR: PE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_BE_Pos               (10UL)                    /*!< MDR_UART1 DR: BE (Bit 10)                             */
#define MDR_UART1_DR_BE_Msk               (0x400UL)                 /*!< MDR_UART1 DR: BE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_OE_Pos               (11UL)                    /*!< MDR_UART1 DR: OE (Bit 11)                             */
#define MDR_UART1_DR_OE_Msk               (0x800UL)                 /*!< MDR_UART1 DR: OE (Bitfield-Mask: 0x01)                */
/* ========================================================  RSR_ECR  ======================================================== */
#define MDR_UART1_RSR_ECR_FE_Pos          (0UL)                     /*!< MDR_UART1 RSR_ECR: FE (Bit 0)                         */
#define MDR_UART1_RSR_ECR_FE_Msk          (0x1UL)                   /*!< MDR_UART1 RSR_ECR: FE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_PE_Pos          (1UL)                     /*!< MDR_UART1 RSR_ECR: PE (Bit 1)                         */
#define MDR_UART1_RSR_ECR_PE_Msk          (0x2UL)                   /*!< MDR_UART1 RSR_ECR: PE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_BE_Pos          (2UL)                     /*!< MDR_UART1 RSR_ECR: BE (Bit 2)                         */
#define MDR_UART1_RSR_ECR_BE_Msk          (0x4UL)                   /*!< MDR_UART1 RSR_ECR: BE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_OE_Pos          (3UL)                     /*!< MDR_UART1 RSR_ECR: OE (Bit 3)                         */
#define MDR_UART1_RSR_ECR_OE_Msk          (0x8UL)                   /*!< MDR_UART1 RSR_ECR: OE (Bitfield-Mask: 0x01)           */
/* ==========================================================  FR  =========================================================== */
#define MDR_UART1_FR_CTS_Pos              (0UL)                     /*!< MDR_UART1 FR: CTS (Bit 0)                             */
#define MDR_UART1_FR_CTS_Msk              (0x1UL)                   /*!< MDR_UART1 FR: CTS (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_DSR_Pos              (1UL)                     /*!< MDR_UART1 FR: DSR (Bit 1)                             */
#define MDR_UART1_FR_DSR_Msk              (0x2UL)                   /*!< MDR_UART1 FR: DSR (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_DCD_Pos              (2UL)                     /*!< MDR_UART1 FR: DCD (Bit 2)                             */
#define MDR_UART1_FR_DCD_Msk              (0x4UL)                   /*!< MDR_UART1 FR: DCD (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_BUSY_Pos             (3UL)                     /*!< MDR_UART1 FR: BUSY (Bit 3)                            */
#define MDR_UART1_FR_BUSY_Msk             (0x8UL)                   /*!< MDR_UART1 FR: BUSY (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RXFE_Pos             (4UL)                     /*!< MDR_UART1 FR: RXFE (Bit 4)                            */
#define MDR_UART1_FR_RXFE_Msk             (0x10UL)                  /*!< MDR_UART1 FR: RXFE (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_TXFF_Pos             (5UL)                     /*!< MDR_UART1 FR: TXFF (Bit 5)                            */
#define MDR_UART1_FR_TXFF_Msk             (0x20UL)                  /*!< MDR_UART1 FR: TXFF (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RXFF_Pos             (6UL)                     /*!< MDR_UART1 FR: RXFF (Bit 6)                            */
#define MDR_UART1_FR_RXFF_Msk             (0x40UL)                  /*!< MDR_UART1 FR: RXFF (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_TXFE_Pos             (7UL)                     /*!< MDR_UART1 FR: TXFE (Bit 7)                            */
#define MDR_UART1_FR_TXFE_Msk             (0x80UL)                  /*!< MDR_UART1 FR: TXFE (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RI_Pos               (8UL)                     /*!< MDR_UART1 FR: RI (Bit 8)                              */
#define MDR_UART1_FR_RI_Msk               (0x100UL)                 /*!< MDR_UART1 FR: RI (Bitfield-Mask: 0x01)                */
/* =========================================================  ILPR  ========================================================== */
#define MDR_UART1_ILPR_DVSR_Pos           (0UL)                     /*!< MDR_UART1 ILPR: DVSR (Bit 0)                          */
#define MDR_UART1_ILPR_DVSR_Msk           (0xffUL)                  /*!< MDR_UART1 ILPR: DVSR (Bitfield-Mask: 0xff)            */
/* =========================================================  IBRD  ========================================================== */
#define MDR_UART1_IBRD_Baud_DivInt_Pos    (0UL)                     /*!< MDR_UART1 IBRD: Baud_DivInt (Bit 0)                   */
#define MDR_UART1_IBRD_Baud_DivInt_Msk    (0xffffUL)                /*!< MDR_UART1 IBRD: Baud_DivInt (Bitfield-Mask: 0xffff)   */
/* =========================================================  FBRD  ========================================================== */
#define MDR_UART1_FBRD_Baud_DivFrac_Pos   (0UL)                     /*!< MDR_UART1 FBRD: Baud_DivFrac (Bit 0)                  */
#define MDR_UART1_FBRD_Baud_DivFrac_Msk   (0x3fUL)                  /*!< MDR_UART1 FBRD: Baud_DivFrac (Bitfield-Mask: 0x3f)    */
/* =========================================================  LCR_H  ========================================================= */
#define MDR_UART1_LCR_H_BRK_Pos           (0UL)                     /*!< MDR_UART1 LCR_H: BRK (Bit 0)                          */
#define MDR_UART1_LCR_H_BRK_Msk           (0x1UL)                   /*!< MDR_UART1 LCR_H: BRK (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_PEN_Pos           (1UL)                     /*!< MDR_UART1 LCR_H: PEN (Bit 1)                          */
#define MDR_UART1_LCR_H_PEN_Msk           (0x2UL)                   /*!< MDR_UART1 LCR_H: PEN (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_EPS_Pos           (2UL)                     /*!< MDR_UART1 LCR_H: EPS (Bit 2)                          */
#define MDR_UART1_LCR_H_EPS_Msk           (0x4UL)                   /*!< MDR_UART1 LCR_H: EPS (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_STP2_Pos          (3UL)                     /*!< MDR_UART1 LCR_H: STP2 (Bit 3)                         */
#define MDR_UART1_LCR_H_STP2_Msk          (0x8UL)                   /*!< MDR_UART1 LCR_H: STP2 (Bitfield-Mask: 0x01)           */
#define MDR_UART1_LCR_H_FEN_Pos           (4UL)                     /*!< MDR_UART1 LCR_H: FEN (Bit 4)                          */
#define MDR_UART1_LCR_H_FEN_Msk           (0x10UL)                  /*!< MDR_UART1 LCR_H: FEN (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_WLEN_Pos          (5UL)                     /*!< MDR_UART1 LCR_H: WLEN (Bit 5)                         */
#define MDR_UART1_LCR_H_WLEN_Msk          (0x60UL)                  /*!< MDR_UART1 LCR_H: WLEN (Bitfield-Mask: 0x03)           */
#define MDR_UART1_LCR_H_SPS_Pos           (7UL)                     /*!< MDR_UART1 LCR_H: SPS (Bit 7)                          */
#define MDR_UART1_LCR_H_SPS_Msk           (0x80UL)                  /*!< MDR_UART1 LCR_H: SPS (Bitfield-Mask: 0x01)            */
/* ==========================================================  CR  =========================================================== */
#define MDR_UART1_CR_EN_Pos               (0UL)                     /*!< MDR_UART1 CR: EN (Bit 0)                              */
#define MDR_UART1_CR_EN_Msk               (0x1UL)                   /*!< MDR_UART1 CR: EN (Bitfield-Mask: 0x01)                */
#define MDR_UART1_CR_SIREN_Pos            (1UL)                     /*!< MDR_UART1 CR: SIREN (Bit 1)                           */
#define MDR_UART1_CR_SIREN_Msk            (0x2UL)                   /*!< MDR_UART1 CR: SIREN (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_SIRLP_Pos            (2UL)                     /*!< MDR_UART1 CR: SIRLP (Bit 2)                           */
#define MDR_UART1_CR_SIRLP_Msk            (0x4UL)                   /*!< MDR_UART1 CR: SIRLP (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_LBE_Pos              (7UL)                     /*!< MDR_UART1 CR: LBE (Bit 7)                             */
#define MDR_UART1_CR_LBE_Msk              (0x80UL)                  /*!< MDR_UART1 CR: LBE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_TXE_Pos              (8UL)                     /*!< MDR_UART1 CR: TXE (Bit 8)                             */
#define MDR_UART1_CR_TXE_Msk              (0x100UL)                 /*!< MDR_UART1 CR: TXE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_RXE_Pos              (9UL)                     /*!< MDR_UART1 CR: RXE (Bit 9)                             */
#define MDR_UART1_CR_RXE_Msk              (0x200UL)                 /*!< MDR_UART1 CR: RXE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_DTR_Pos              (10UL)                    /*!< MDR_UART1 CR: DTR (Bit 10)                            */
#define MDR_UART1_CR_DTR_Msk              (0x400UL)                 /*!< MDR_UART1 CR: DTR (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_RTS_Pos              (11UL)                    /*!< MDR_UART1 CR: RTS (Bit 11)                            */
#define MDR_UART1_CR_RTS_Msk              (0x800UL)                 /*!< MDR_UART1 CR: RTS (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_Out1_Pos             (12UL)                    /*!< MDR_UART1 CR: Out1 (Bit 12)                           */
#define MDR_UART1_CR_Out1_Msk             (0x1000UL)                /*!< MDR_UART1 CR: Out1 (Bitfield-Mask: 0x01)              */
#define MDR_UART1_CR_Out2_Pos             (13UL)                    /*!< MDR_UART1 CR: Out2 (Bit 13)                           */
#define MDR_UART1_CR_Out2_Msk             (0x2000UL)                /*!< MDR_UART1 CR: Out2 (Bitfield-Mask: 0x01)              */
#define MDR_UART1_CR_RTSEn_Pos            (14UL)                    /*!< MDR_UART1 CR: RTSEn (Bit 14)                          */
#define MDR_UART1_CR_RTSEn_Msk            (0x4000UL)                /*!< MDR_UART1 CR: RTSEn (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_CTSEn_Pos            (15UL)                    /*!< MDR_UART1 CR: CTSEn (Bit 15)                          */
#define MDR_UART1_CR_CTSEn_Msk            (0x8000UL)                /*!< MDR_UART1 CR: CTSEn (Bitfield-Mask: 0x01)             */
/* =========================================================  IFLS  ========================================================== */
#define MDR_UART1_IFLS_TXIFLSES_Pos       (0UL)                     /*!< MDR_UART1 IFLS: TXIFLSES (Bit 0)                      */
#define MDR_UART1_IFLS_TXIFLSES_Msk       (0x7UL)                   /*!< MDR_UART1 IFLS: TXIFLSES (Bitfield-Mask: 0x07)        */
#define MDR_UART1_IFLS_RXIFLSES_Pos       (3UL)                     /*!< MDR_UART1 IFLS: RXIFLSES (Bit 3)                      */
#define MDR_UART1_IFLS_RXIFLSES_Msk       (0x38UL)                  /*!< MDR_UART1 IFLS: RXIFLSES (Bitfield-Mask: 0x07)        */
/* =========================================================  IMSC  ========================================================== */
#define MDR_UART1_IMSC_RIM_IM_Pos         (0UL)                     /*!< MDR_UART1 IMSC: RIM_IM (Bit 0)                        */
#define MDR_UART1_IMSC_RIM_IM_Msk         (0x1UL)                   /*!< MDR_UART1 IMSC: RIM_IM (Bitfield-Mask: 0x01)          */
#define MDR_UART1_IMSC_STCM_IM_Pos        (1UL)                     /*!< MDR_UART1 IMSC: STCM_IM (Bit 1)                       */
#define MDR_UART1_IMSC_STCM_IM_Msk        (0x2UL)                   /*!< MDR_UART1 IMSC: STCM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_DCDM_IM_Pos        (2UL)                     /*!< MDR_UART1 IMSC: DCDM_IM (Bit 2)                       */
#define MDR_UART1_IMSC_DCDM_IM_Msk        (0x4UL)                   /*!< MDR_UART1 IMSC: DCDM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_DSRM_IM_Pos        (3UL)                     /*!< MDR_UART1 IMSC: DSRM_IM (Bit 3)                       */
#define MDR_UART1_IMSC_DSRM_IM_Msk        (0x8UL)                   /*!< MDR_UART1 IMSC: DSRM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_RX_IM_Pos          (4UL)                     /*!< MDR_UART1 IMSC: RX_IM (Bit 4)                         */
#define MDR_UART1_IMSC_RX_IM_Msk          (0x10UL)                  /*!< MDR_UART1 IMSC: RX_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_TX_IM_Pos          (5UL)                     /*!< MDR_UART1 IMSC: TX_IM (Bit 5)                         */
#define MDR_UART1_IMSC_TX_IM_Msk          (0x20UL)                  /*!< MDR_UART1 IMSC: TX_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_RT_IM_Pos          (6UL)                     /*!< MDR_UART1 IMSC: RT_IM (Bit 6)                         */
#define MDR_UART1_IMSC_RT_IM_Msk          (0x40UL)                  /*!< MDR_UART1 IMSC: RT_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_FE_IM_Pos          (7UL)                     /*!< MDR_UART1 IMSC: FE_IM (Bit 7)                         */
#define MDR_UART1_IMSC_FE_IM_Msk          (0x80UL)                  /*!< MDR_UART1 IMSC: FE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_PE_IM_Pos          (8UL)                     /*!< MDR_UART1 IMSC: PE_IM (Bit 8)                         */
#define MDR_UART1_IMSC_PE_IM_Msk          (0x100UL)                 /*!< MDR_UART1 IMSC: PE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_BE_IM_Pos          (9UL)                     /*!< MDR_UART1 IMSC: BE_IM (Bit 9)                         */
#define MDR_UART1_IMSC_BE_IM_Msk          (0x200UL)                 /*!< MDR_UART1 IMSC: BE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_OE_IM_Pos          (10UL)                    /*!< MDR_UART1 IMSC: OE_IM (Bit 10)                        */
#define MDR_UART1_IMSC_OE_IM_Msk          (0x400UL)                 /*!< MDR_UART1 IMSC: OE_IM (Bitfield-Mask: 0x01)           */
/* ==========================================================  RIS  ========================================================== */
#define MDR_UART1_RIS_RIM_RIS_Pos         (0UL)                     /*!< MDR_UART1 RIS: RIM_RIS (Bit 0)                        */
#define MDR_UART1_RIS_RIM_RIS_Msk         (0x1UL)                   /*!< MDR_UART1 RIS: RIM_RIS (Bitfield-Mask: 0x01)          */
#define MDR_UART1_RIS_STCM_RIS_Pos        (1UL)                     /*!< MDR_UART1 RIS: STCM_RIS (Bit 1)                       */
#define MDR_UART1_RIS_STCM_RIS_Msk        (0x2UL)                   /*!< MDR_UART1 RIS: STCM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_DCDM_RIS_Pos        (2UL)                     /*!< MDR_UART1 RIS: DCDM_RIS (Bit 2)                       */
#define MDR_UART1_RIS_DCDM_RIS_Msk        (0x4UL)                   /*!< MDR_UART1 RIS: DCDM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_DSRM_RIS_Pos        (3UL)                     /*!< MDR_UART1 RIS: DSRM_RIS (Bit 3)                       */
#define MDR_UART1_RIS_DSRM_RIS_Msk        (0x8UL)                   /*!< MDR_UART1 RIS: DSRM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_RX_RIS_Pos          (4UL)                     /*!< MDR_UART1 RIS: RX_RIS (Bit 4)                         */
#define MDR_UART1_RIS_RX_RIS_Msk          (0x10UL)                  /*!< MDR_UART1 RIS: RX_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_TX_RIS_Pos          (5UL)                     /*!< MDR_UART1 RIS: TX_RIS (Bit 5)                         */
#define MDR_UART1_RIS_TX_RIS_Msk          (0x20UL)                  /*!< MDR_UART1 RIS: TX_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_RT_RIS_Pos          (6UL)                     /*!< MDR_UART1 RIS: RT_RIS (Bit 6)                         */
#define MDR_UART1_RIS_RT_RIS_Msk          (0x40UL)                  /*!< MDR_UART1 RIS: RT_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_FE_RIS_Pos          (7UL)                     /*!< MDR_UART1 RIS: FE_RIS (Bit 7)                         */
#define MDR_UART1_RIS_FE_RIS_Msk          (0x80UL)                  /*!< MDR_UART1 RIS: FE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_PE_RIS_Pos          (8UL)                     /*!< MDR_UART1 RIS: PE_RIS (Bit 8)                         */
#define MDR_UART1_RIS_PE_RIS_Msk          (0x100UL)                 /*!< MDR_UART1 RIS: PE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_BE_RIS_Pos          (9UL)                     /*!< MDR_UART1 RIS: BE_RIS (Bit 9)                         */
#define MDR_UART1_RIS_BE_RIS_Msk          (0x200UL)                 /*!< MDR_UART1 RIS: BE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_OE_RIS_Pos          (10UL)                    /*!< MDR_UART1 RIS: OE_RIS (Bit 10)                        */
#define MDR_UART1_RIS_OE_RIS_Msk          (0x400UL)                 /*!< MDR_UART1 RIS: OE_RIS (Bitfield-Mask: 0x01)           */
/* ==========================================================  MIS  ========================================================== */
#define MDR_UART1_MIS_RIM_MIS_Pos         (0UL)                     /*!< MDR_UART1 MIS: RIM_MIS (Bit 0)                        */
#define MDR_UART1_MIS_RIM_MIS_Msk         (0x1UL)                   /*!< MDR_UART1 MIS: RIM_MIS (Bitfield-Mask: 0x01)          */
#define MDR_UART1_MIS_STCM_MIS_Pos        (1UL)                     /*!< MDR_UART1 MIS: STCM_MIS (Bit 1)                       */
#define MDR_UART1_MIS_STCM_MIS_Msk        (0x2UL)                   /*!< MDR_UART1 MIS: STCM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_DCDM_MIS_Pos        (2UL)                     /*!< MDR_UART1 MIS: DCDM_MIS (Bit 2)                       */
#define MDR_UART1_MIS_DCDM_MIS_Msk        (0x4UL)                   /*!< MDR_UART1 MIS: DCDM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_DSRM_MIS_Pos        (3UL)                     /*!< MDR_UART1 MIS: DSRM_MIS (Bit 3)                       */
#define MDR_UART1_MIS_DSRM_MIS_Msk        (0x8UL)                   /*!< MDR_UART1 MIS: DSRM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_RX_MIS_Pos          (4UL)                     /*!< MDR_UART1 MIS: RX_MIS (Bit 4)                         */
#define MDR_UART1_MIS_RX_MIS_Msk          (0x10UL)                  /*!< MDR_UART1 MIS: RX_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_TX_MIS_Pos          (5UL)                     /*!< MDR_UART1 MIS: TX_MIS (Bit 5)                         */
#define MDR_UART1_MIS_TX_MIS_Msk          (0x20UL)                  /*!< MDR_UART1 MIS: TX_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_RT_MIS_Pos          (6UL)                     /*!< MDR_UART1 MIS: RT_MIS (Bit 6)                         */
#define MDR_UART1_MIS_RT_MIS_Msk          (0x40UL)                  /*!< MDR_UART1 MIS: RT_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_FE_MIS_Pos          (7UL)                     /*!< MDR_UART1 MIS: FE_MIS (Bit 7)                         */
#define MDR_UART1_MIS_FE_MIS_Msk          (0x80UL)                  /*!< MDR_UART1 MIS: FE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_PE_MIS_Pos          (8UL)                     /*!< MDR_UART1 MIS: PE_MIS (Bit 8)                         */
#define MDR_UART1_MIS_PE_MIS_Msk          (0x100UL)                 /*!< MDR_UART1 MIS: PE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_BE_MIS_Pos          (9UL)                     /*!< MDR_UART1 MIS: BE_MIS (Bit 9)                         */
#define MDR_UART1_MIS_BE_MIS_Msk          (0x200UL)                 /*!< MDR_UART1 MIS: BE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_OE_MIS_Pos          (10UL)                    /*!< MDR_UART1 MIS: OE_MIS (Bit 10)                        */
#define MDR_UART1_MIS_OE_MIS_Msk          (0x400UL)                 /*!< MDR_UART1 MIS: OE_MIS (Bitfield-Mask: 0x01)           */
/* ==========================================================  ICR  ========================================================== */
#define MDR_UART1_ICR_RIM_IC_Pos          (0UL)                     /*!< MDR_UART1 ICR: RIM_IC (Bit 0)                         */
#define MDR_UART1_ICR_RIM_IC_Msk          (0x1UL)                   /*!< MDR_UART1 ICR: RIM_IC (Bitfield-Mask: 0x01)           */
#define MDR_UART1_ICR_STCM_IC_Pos         (1UL)                     /*!< MDR_UART1 ICR: STCM_IC (Bit 1)                        */
#define MDR_UART1_ICR_STCM_IC_Msk         (0x2UL)                   /*!< MDR_UART1 ICR: STCM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_DCDM_IC_Pos         (2UL)                     /*!< MDR_UART1 ICR: DCDM_IC (Bit 2)                        */
#define MDR_UART1_ICR_DCDM_IC_Msk         (0x4UL)                   /*!< MDR_UART1 ICR: DCDM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_DSRM_IC_Pos         (3UL)                     /*!< MDR_UART1 ICR: DSRM_IC (Bit 3)                        */
#define MDR_UART1_ICR_DSRM_IC_Msk         (0x8UL)                   /*!< MDR_UART1 ICR: DSRM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_RX_IC_Pos           (4UL)                     /*!< MDR_UART1 ICR: RX_IC (Bit 4)                          */
#define MDR_UART1_ICR_RX_IC_Msk           (0x10UL)                  /*!< MDR_UART1 ICR: RX_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_TX_IC_Pos           (5UL)                     /*!< MDR_UART1 ICR: TX_IC (Bit 5)                          */
#define MDR_UART1_ICR_TX_IC_Msk           (0x20UL)                  /*!< MDR_UART1 ICR: TX_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_RT_IC_Pos           (6UL)                     /*!< MDR_UART1 ICR: RT_IC (Bit 6)                          */
#define MDR_UART1_ICR_RT_IC_Msk           (0x40UL)                  /*!< MDR_UART1 ICR: RT_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_FE_IC_Pos           (7UL)                     /*!< MDR_UART1 ICR: FE_IC (Bit 7)                          */
#define MDR_UART1_ICR_FE_IC_Msk           (0x80UL)                  /*!< MDR_UART1 ICR: FE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_PE_IC_Pos           (8UL)                     /*!< MDR_UART1 ICR: PE_IC (Bit 8)                          */
#define MDR_UART1_ICR_PE_IC_Msk           (0x100UL)                 /*!< MDR_UART1 ICR: PE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_BE_IC_Pos           (9UL)                     /*!< MDR_UART1 ICR: BE_IC (Bit 9)                          */
#define MDR_UART1_ICR_BE_IC_Msk           (0x200UL)                 /*!< MDR_UART1 ICR: BE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_OE_IC_Pos           (10UL)                    /*!< MDR_UART1 ICR: OE_IC (Bit 10)                         */
#define MDR_UART1_ICR_OE_IC_Msk           (0x400UL)                 /*!< MDR_UART1 ICR: OE_IC (Bitfield-Mask: 0x01)            */
/* =========================================================  DMACR  ========================================================= */
#define MDR_UART1_DMACR_RXDMAE_Pos        (0UL)                     /*!< MDR_UART1 DMACR: RXDMAE (Bit 0)                       */
#define MDR_UART1_DMACR_RXDMAE_Msk        (0x1UL)                   /*!< MDR_UART1 DMACR: RXDMAE (Bitfield-Mask: 0x01)         */
#define MDR_UART1_DMACR_TXDMAE_Pos        (1UL)                     /*!< MDR_UART1 DMACR: TXDMAE (Bit 1)                       */
#define MDR_UART1_DMACR_TXDMAE_Msk        (0x2UL)                   /*!< MDR_UART1 DMACR: TXDMAE (Bitfield-Mask: 0x01)         */
#define MDR_UART1_DMACR_DMAonErr_Pos      (2UL)                     /*!< MDR_UART1 DMACR: DMAonErr (Bit 2)                     */
#define MDR_UART1_DMACR_DMAonErr_Msk      (0x4UL)                   /*!< MDR_UART1 DMACR: DMAonErr (Bitfield-Mask: 0x01)       */
/* ==========================================================  TCR  ========================================================== */
#define MDR_UART1_TCR_ITEN_Pos            (0UL)                     /*!< MDR_UART1 TCR: ITEN (Bit 0)                           */
#define MDR_UART1_TCR_ITEN_Msk            (0x1UL)                   /*!< MDR_UART1 TCR: ITEN (Bitfield-Mask: 0x01)             */
#define MDR_UART1_TCR_TestFIFO_Pos        (1UL)                     /*!< MDR_UART1 TCR: TestFIFO (Bit 1)                       */
#define MDR_UART1_TCR_TestFIFO_Msk        (0x2UL)                   /*!< MDR_UART1 TCR: TestFIFO (Bitfield-Mask: 0x01)         */
#define MDR_UART1_TCR_SIRTest_Pos         (2UL)                     /*!< MDR_UART1 TCR: SIRTest (Bit 2)                        */
#define MDR_UART1_TCR_SIRTest_Msk         (0x4UL)                   /*!< MDR_UART1 TCR: SIRTest (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                          MDR_DMA                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
#define MDR_DMA_STATUS_Enable_Pos         (0UL)                     /*!< MDR_DMA STATUS: Enable (Bit 0)                        */
#define MDR_DMA_STATUS_Enable_Msk         (0x1UL)                   /*!< MDR_DMA STATUS: Enable (Bitfield-Mask: 0x01)          */
#define MDR_DMA_STATUS_State_Pos          (4UL)                     /*!< MDR_DMA STATUS: State (Bit 4)                         */
#define MDR_DMA_STATUS_State_Msk          (0xf0UL)                  /*!< MDR_DMA STATUS: State (Bitfield-Mask: 0x0f)           */
#define MDR_DMA_STATUS_Chnls_minus1_Pos   (16UL)                    /*!< MDR_DMA STATUS: Chnls_minus1 (Bit 16)                 */
#define MDR_DMA_STATUS_Chnls_minus1_Msk   (0x1f0000UL)              /*!< MDR_DMA STATUS: Chnls_minus1 (Bitfield-Mask: 0x1f)    */
#define MDR_DMA_STATUS_test_status_Pos    (28UL)                    /*!< MDR_DMA STATUS: test_status (Bit 28)                  */
#define MDR_DMA_STATUS_test_status_Msk    (0x10000000UL)            /*!< MDR_DMA STATUS: test_status (Bitfield-Mask: 0x01)     */
/* ==========================================================  CFG  ========================================================== */
#define MDR_DMA_CFG_Enable_Pos            (0UL)                     /*!< MDR_DMA CFG: Enable (Bit 0)                           */
#define MDR_DMA_CFG_Enable_Msk            (0x1UL)                   /*!< MDR_DMA CFG: Enable (Bitfield-Mask: 0x01)             */
#define MDR_DMA_CFG_Privileged_Pos        (5UL)                     /*!< MDR_DMA CFG: Privileged (Bit 5)                       */
#define MDR_DMA_CFG_Privileged_Msk        (0x20UL)                  /*!< MDR_DMA CFG: Privileged (Bitfield-Mask: 0x01)         */
#define MDR_DMA_CFG_Bufferable_Pos        (6UL)                     /*!< MDR_DMA CFG: Bufferable (Bit 6)                       */
#define MDR_DMA_CFG_Bufferable_Msk        (0x40UL)                  /*!< MDR_DMA CFG: Bufferable (Bitfield-Mask: 0x01)         */
#define MDR_DMA_CFG_Cachable_Pos          (7UL)                     /*!< MDR_DMA CFG: Cachable (Bit 7)                         */
#define MDR_DMA_CFG_Cachable_Msk          (0x80UL)                  /*!< MDR_DMA CFG: Cachable (Bitfield-Mask: 0x01)           */
/* =====================================================  CTRL_BASE_PTR  ===================================================== */
#define MDR_DMA_CTRL_BASE_PTR_Addr_Hi_Pos (10UL)                    /*!< MDR_DMA CTRL_BASE_PTR: Addr_Hi (Bit 10)               */
#define MDR_DMA_CTRL_BASE_PTR_Addr_Hi_Msk (0xfffffc00UL)            /*!< MDR_DMA CTRL_BASE_PTR: Addr_Hi (Bitfield-Mask: 0x3fffff) */
/* ===================================================  ALT_CTRL_BASE_PTR  =================================================== */
#define MDR_DMA_ALT_CTRL_BASE_PTR_Addr_Pos (0UL)                    /*!< MDR_DMA ALT_CTRL_BASE_PTR: Addr (Bit 0)               */
#define MDR_DMA_ALT_CTRL_BASE_PTR_Addr_Msk (0xffffffffUL)           /*!< MDR_DMA ALT_CTRL_BASE_PTR: Addr (Bitfield-Mask: 0xffffffff) */
/* ===================================================  WAITONREQ_STATUS  ==================================================== */
#define MDR_DMA_WAITONREQ_STATUS_Ch__Pos  (0UL)                     /*!< MDR_DMA WAITONREQ_STATUS: Ch_ (Bit 0)                 */
#define MDR_DMA_WAITONREQ_STATUS_Ch__Msk  (0x1UL)                   /*!< MDR_DMA WAITONREQ_STATUS: Ch_ (Bitfield-Mask: 0x01)   */
/* ====================================================  CHNL_SW_REQUEST  ==================================================== */
#define MDR_DMA_CHNL_SW_REQUEST_Ch__Pos   (0UL)                     /*!< MDR_DMA CHNL_SW_REQUEST: Ch_ (Bit 0)                  */
#define MDR_DMA_CHNL_SW_REQUEST_Ch__Msk   (0x1UL)                   /*!< MDR_DMA CHNL_SW_REQUEST: Ch_ (Bitfield-Mask: 0x01)    */
/* ===================================================  CHNL_USEBURST_SET  =================================================== */
#define MDR_DMA_CHNL_USEBURST_SET_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_USEBURST_SET: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_USEBURST_SET_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_USEBURST_SET: Ch_ (Bitfield-Mask: 0x01)  */
/* ===================================================  CHNL_USEBURST_CLR  =================================================== */
#define MDR_DMA_CHNL_USEBURST_CLR_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_USEBURST_CLR: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_USEBURST_CLR_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_USEBURST_CLR: Ch_ (Bitfield-Mask: 0x01)  */
/* ===================================================  CHNL_REQ_MASK_SET  =================================================== */
#define MDR_DMA_CHNL_REQ_MASK_SET_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_REQ_MASK_SET: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_REQ_MASK_SET_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_REQ_MASK_SET: Ch_ (Bitfield-Mask: 0x01)  */
/* ===================================================  CHNL_REQ_MASK_CLR  =================================================== */
#define MDR_DMA_CHNL_REQ_MASK_CLR_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_REQ_MASK_CLR: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_REQ_MASK_CLR_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_REQ_MASK_CLR: Ch_ (Bitfield-Mask: 0x01)  */
/* ====================================================  CHNL_ENABLE_SET  ==================================================== */
#define MDR_DMA_CHNL_ENABLE_SET_Ch__Pos   (0UL)                     /*!< MDR_DMA CHNL_ENABLE_SET: Ch_ (Bit 0)                  */
#define MDR_DMA_CHNL_ENABLE_SET_Ch__Msk   (0x1UL)                   /*!< MDR_DMA CHNL_ENABLE_SET: Ch_ (Bitfield-Mask: 0x01)    */
/* ====================================================  CHNL_ENABLE_CLR  ==================================================== */
#define MDR_DMA_CHNL_ENABLE_CLR_Ch__Pos   (0UL)                     /*!< MDR_DMA CHNL_ENABLE_CLR: Ch_ (Bit 0)                  */
#define MDR_DMA_CHNL_ENABLE_CLR_Ch__Msk   (0x1UL)                   /*!< MDR_DMA CHNL_ENABLE_CLR: Ch_ (Bitfield-Mask: 0x01)    */
/* ===================================================  CHNL_PRI_ALT_SET  ==================================================== */
#define MDR_DMA_CHNL_PRI_ALT_SET_Ch__Pos  (0UL)                     /*!< MDR_DMA CHNL_PRI_ALT_SET: Ch_ (Bit 0)                 */
#define MDR_DMA_CHNL_PRI_ALT_SET_Ch__Msk  (0x1UL)                   /*!< MDR_DMA CHNL_PRI_ALT_SET: Ch_ (Bitfield-Mask: 0x01)   */
/* ===================================================  CHNL_PRI_ALT_CLR  ==================================================== */
#define MDR_DMA_CHNL_PRI_ALT_CLR_Ch__Pos  (0UL)                     /*!< MDR_DMA CHNL_PRI_ALT_CLR: Ch_ (Bit 0)                 */
#define MDR_DMA_CHNL_PRI_ALT_CLR_Ch__Msk  (0x1UL)                   /*!< MDR_DMA CHNL_PRI_ALT_CLR: Ch_ (Bitfield-Mask: 0x01)   */
/* ===================================================  CHNL_PRIORITY_SET  =================================================== */
#define MDR_DMA_CHNL_PRIORITY_SET_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_PRIORITY_SET: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_PRIORITY_SET_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_PRIORITY_SET: Ch_ (Bitfield-Mask: 0x01)  */
/* ===================================================  CHNL_PRIORITY_CLR  =================================================== */
#define MDR_DMA_CHNL_PRIORITY_CLR_Ch__Pos (0UL)                     /*!< MDR_DMA CHNL_PRIORITY_CLR: Ch_ (Bit 0)                */
#define MDR_DMA_CHNL_PRIORITY_CLR_Ch__Msk (0x1UL)                   /*!< MDR_DMA CHNL_PRIORITY_CLR: Ch_ (Bitfield-Mask: 0x01)  */
/* ========================================================  ERR_CLR  ======================================================== */
#define MDR_DMA_ERR_CLR_Ch__Pos           (0UL)                     /*!< MDR_DMA ERR_CLR: Ch_ (Bit 0)                          */
#define MDR_DMA_ERR_CLR_Ch__Msk           (0x1UL)                   /*!< MDR_DMA ERR_CLR: Ch_ (Bitfield-Mask: 0x01)            */
/* ========================================================  CHMUX0  ========================================================= */
#define MDR_DMA_CHMUX0_CH0_Sel_Pos        (0UL)                     /*!< MDR_DMA CHMUX0: CH0_Sel (Bit 0)                       */
#define MDR_DMA_CHMUX0_CH0_Sel_Msk        (0xffUL)                  /*!< MDR_DMA CHMUX0: CH0_Sel (Bitfield-Mask: 0xff)         */
#define MDR_DMA_CHMUX0_CH1_Sel_Pos        (8UL)                     /*!< MDR_DMA CHMUX0: CH1_Sel (Bit 8)                       */
#define MDR_DMA_CHMUX0_CH1_Sel_Msk        (0xff00UL)                /*!< MDR_DMA CHMUX0: CH1_Sel (Bitfield-Mask: 0xff)         */
#define MDR_DMA_CHMUX0_CH2_Sel_Pos        (16UL)                    /*!< MDR_DMA CHMUX0: CH2_Sel (Bit 16)                      */
#define MDR_DMA_CHMUX0_CH2_Sel_Msk        (0xff0000UL)              /*!< MDR_DMA CHMUX0: CH2_Sel (Bitfield-Mask: 0xff)         */
#define MDR_DMA_CHMUX0_CH3_Sel_Pos        (24UL)                    /*!< MDR_DMA CHMUX0: CH3_Sel (Bit 24)                      */
#define MDR_DMA_CHMUX0_CH3_Sel_Msk        (0xff000000UL)            /*!< MDR_DMA CHMUX0: CH3_Sel (Bitfield-Mask: 0xff)         */
/* ========================================================  CHMUX1  ========================================================= */
#define MDR_DMA_CHMUX1_CH4_Sel_Pos        (0UL)                     /*!< MDR_DMA CHMUX1: CH4_Sel (Bit 0)                       */
#define MDR_DMA_CHMUX1_CH4_Sel_Msk        (0xffUL)                  /*!< MDR_DMA CHMUX1: CH4_Sel (Bitfield-Mask: 0xff)         */
#define MDR_DMA_CHMUX1_CH5_Sel_Pos        (8UL)                     /*!< MDR_DMA CHMUX1: CH5_Sel (Bit 8)                       */
#define MDR_DMA_CHMUX1_CH5_Sel_Msk        (0xff00UL)                /*!< MDR_DMA CHMUX1: CH5_Sel (Bitfield-Mask: 0xff)         */
#define MDR_DMA_CHMUX1_CH6_Sel_Pos        (16UL)                    /*!< MDR_DMA CHMUX1: CH6_Sel (Bit 16)                      */
#define MDR_DMA_CHMUX1_CH6_Sel_Msk        (0xff0000UL)              /*!< MDR_DMA CHMUX1: CH6_Sel (Bitfield-Mask: 0xff)         */
#define MDR_DMA_CHMUX1_CH7_Sel_Pos        (24UL)                    /*!< MDR_DMA CHMUX1: CH7_Sel (Bit 24)                      */
#define MDR_DMA_CHMUX1_CH7_Sel_Msk        (0xff000000UL)            /*!< MDR_DMA CHMUX1: CH7_Sel (Bitfield-Mask: 0xff)         */
/* ========================================================  CHMUX2  ========================================================= */
#define MDR_DMA_CHMUX2_CH8_Sel_Pos        (0UL)                     /*!< MDR_DMA CHMUX2: CH8_Sel (Bit 0)                       */
#define MDR_DMA_CHMUX2_CH8_Sel_Msk        (0xffUL)                  /*!< MDR_DMA CHMUX2: CH8_Sel (Bitfield-Mask: 0xff)         */
#define MDR_DMA_CHMUX2_CH9_Sel_Pos        (8UL)                     /*!< MDR_DMA CHMUX2: CH9_Sel (Bit 8)                       */
#define MDR_DMA_CHMUX2_CH9_Sel_Msk        (0xff00UL)                /*!< MDR_DMA CHMUX2: CH9_Sel (Bitfield-Mask: 0xff)         */
#define MDR_DMA_CHMUX2_CH10_Sel_Pos       (16UL)                    /*!< MDR_DMA CHMUX2: CH10_Sel (Bit 16)                     */
#define MDR_DMA_CHMUX2_CH10_Sel_Msk       (0xff0000UL)              /*!< MDR_DMA CHMUX2: CH10_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX2_CH11_Sel_Pos       (24UL)                    /*!< MDR_DMA CHMUX2: CH11_Sel (Bit 24)                     */
#define MDR_DMA_CHMUX2_CH11_Sel_Msk       (0xff000000UL)            /*!< MDR_DMA CHMUX2: CH11_Sel (Bitfield-Mask: 0xff)        */
/* ========================================================  CHMUX3  ========================================================= */
#define MDR_DMA_CHMUX3_CH12_Sel_Pos       (0UL)                     /*!< MDR_DMA CHMUX3: CH12_Sel (Bit 0)                      */
#define MDR_DMA_CHMUX3_CH12_Sel_Msk       (0xffUL)                  /*!< MDR_DMA CHMUX3: CH12_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX3_CH13_Sel_Pos       (8UL)                     /*!< MDR_DMA CHMUX3: CH13_Sel (Bit 8)                      */
#define MDR_DMA_CHMUX3_CH13_Sel_Msk       (0xff00UL)                /*!< MDR_DMA CHMUX3: CH13_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX3_CH14_Sel_Pos       (16UL)                    /*!< MDR_DMA CHMUX3: CH14_Sel (Bit 16)                     */
#define MDR_DMA_CHMUX3_CH14_Sel_Msk       (0xff0000UL)              /*!< MDR_DMA CHMUX3: CH14_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX3_CH15_Sel_Pos       (24UL)                    /*!< MDR_DMA CHMUX3: CH15_Sel (Bit 24)                     */
#define MDR_DMA_CHMUX3_CH15_Sel_Msk       (0xff000000UL)            /*!< MDR_DMA CHMUX3: CH15_Sel (Bitfield-Mask: 0xff)        */
/* ========================================================  CHMUX4  ========================================================= */
#define MDR_DMA_CHMUX4_CH16_Sel_Pos       (0UL)                     /*!< MDR_DMA CHMUX4: CH16_Sel (Bit 0)                      */
#define MDR_DMA_CHMUX4_CH16_Sel_Msk       (0xffUL)                  /*!< MDR_DMA CHMUX4: CH16_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX4_CH17_Sel_Pos       (8UL)                     /*!< MDR_DMA CHMUX4: CH17_Sel (Bit 8)                      */
#define MDR_DMA_CHMUX4_CH17_Sel_Msk       (0xff00UL)                /*!< MDR_DMA CHMUX4: CH17_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX4_CH18_Sel_Pos       (16UL)                    /*!< MDR_DMA CHMUX4: CH18_Sel (Bit 16)                     */
#define MDR_DMA_CHMUX4_CH18_Sel_Msk       (0xff0000UL)              /*!< MDR_DMA CHMUX4: CH18_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX4_CH19_Sel_Pos       (24UL)                    /*!< MDR_DMA CHMUX4: CH19_Sel (Bit 24)                     */
#define MDR_DMA_CHMUX4_CH19_Sel_Msk       (0xff000000UL)            /*!< MDR_DMA CHMUX4: CH19_Sel (Bitfield-Mask: 0xff)        */
/* ========================================================  CHMUX5  ========================================================= */
#define MDR_DMA_CHMUX5_CH20_Sel_Pos       (0UL)                     /*!< MDR_DMA CHMUX5: CH20_Sel (Bit 0)                      */
#define MDR_DMA_CHMUX5_CH20_Sel_Msk       (0xffUL)                  /*!< MDR_DMA CHMUX5: CH20_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX5_CH21_Sel_Pos       (8UL)                     /*!< MDR_DMA CHMUX5: CH21_Sel (Bit 8)                      */
#define MDR_DMA_CHMUX5_CH21_Sel_Msk       (0xff00UL)                /*!< MDR_DMA CHMUX5: CH21_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX5_CH22_Sel_Pos       (16UL)                    /*!< MDR_DMA CHMUX5: CH22_Sel (Bit 16)                     */
#define MDR_DMA_CHMUX5_CH22_Sel_Msk       (0xff0000UL)              /*!< MDR_DMA CHMUX5: CH22_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX5_CH23_Sel_Pos       (24UL)                    /*!< MDR_DMA CHMUX5: CH23_Sel (Bit 24)                     */
#define MDR_DMA_CHMUX5_CH23_Sel_Msk       (0xff000000UL)            /*!< MDR_DMA CHMUX5: CH23_Sel (Bitfield-Mask: 0xff)        */
/* ========================================================  CHMUX6  ========================================================= */
#define MDR_DMA_CHMUX6_CH24_Sel_Pos       (0UL)                     /*!< MDR_DMA CHMUX6: CH24_Sel (Bit 0)                      */
#define MDR_DMA_CHMUX6_CH24_Sel_Msk       (0xffUL)                  /*!< MDR_DMA CHMUX6: CH24_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX6_CH25_Sel_Pos       (8UL)                     /*!< MDR_DMA CHMUX6: CH25_Sel (Bit 8)                      */
#define MDR_DMA_CHMUX6_CH25_Sel_Msk       (0xff00UL)                /*!< MDR_DMA CHMUX6: CH25_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX6_CH26_Sel_Pos       (16UL)                    /*!< MDR_DMA CHMUX6: CH26_Sel (Bit 16)                     */
#define MDR_DMA_CHMUX6_CH26_Sel_Msk       (0xff0000UL)              /*!< MDR_DMA CHMUX6: CH26_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX6_CH27_Sel_Pos       (24UL)                    /*!< MDR_DMA CHMUX6: CH27_Sel (Bit 24)                     */
#define MDR_DMA_CHMUX6_CH27_Sel_Msk       (0xff000000UL)            /*!< MDR_DMA CHMUX6: CH27_Sel (Bitfield-Mask: 0xff)        */
/* ========================================================  CHMUX7  ========================================================= */
#define MDR_DMA_CHMUX7_CH28_Sel_Pos       (0UL)                     /*!< MDR_DMA CHMUX7: CH28_Sel (Bit 0)                      */
#define MDR_DMA_CHMUX7_CH28_Sel_Msk       (0xffUL)                  /*!< MDR_DMA CHMUX7: CH28_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX7_CH29_Sel_Pos       (8UL)                     /*!< MDR_DMA CHMUX7: CH29_Sel (Bit 8)                      */
#define MDR_DMA_CHMUX7_CH29_Sel_Msk       (0xff00UL)                /*!< MDR_DMA CHMUX7: CH29_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX7_CH30_Sel_Pos       (16UL)                    /*!< MDR_DMA CHMUX7: CH30_Sel (Bit 16)                     */
#define MDR_DMA_CHMUX7_CH30_Sel_Msk       (0xff0000UL)              /*!< MDR_DMA CHMUX7: CH30_Sel (Bitfield-Mask: 0xff)        */
#define MDR_DMA_CHMUX7_CH31_Sel_Pos       (24UL)                    /*!< MDR_DMA CHMUX7: CH31_Sel (Bit 24)                     */
#define MDR_DMA_CHMUX7_CH31_Sel_Msk       (0xff000000UL)            /*!< MDR_DMA CHMUX7: CH31_Sel (Bitfield-Mask: 0xff)        */


/* =========================================================================================================================== */
/* ================                                         MDR_ETH1                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  DELIMETER  ======================================================= */
/* =========================================================  MAC_L  ========================================================= */
/* =========================================================  MAC_M  ========================================================= */
/* =========================================================  MAC_H  ========================================================= */
/* =========================================================  HASH0  ========================================================= */
/* =========================================================  HASH1  ========================================================= */
/* =========================================================  HASH2  ========================================================= */
/* =========================================================  HASH3  ========================================================= */
/* ==========================================================  IPG  ========================================================== */
/* ==========================================================  PSC  ========================================================== */
/* ==========================================================  BAG  ========================================================== */
/* =======================================================  JitterWnd  ======================================================= */
/* =========================================================  R_CFG  ========================================================= */
#define MDR_ETH1_R_CFG_MCA_En_Pos         (0UL)                     /*!< MDR_ETH1 R_CFG: MCA_En (Bit 0)                        */
#define MDR_ETH1_R_CFG_MCA_En_Msk         (0x1UL)                   /*!< MDR_ETH1 R_CFG: MCA_En (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_R_CFG_BCA_En_Pos         (1UL)                     /*!< MDR_ETH1 R_CFG: BCA_En (Bit 1)                        */
#define MDR_ETH1_R_CFG_BCA_En_Msk         (0x2UL)                   /*!< MDR_ETH1 R_CFG: BCA_En (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_R_CFG_UCA_En_Pos         (2UL)                     /*!< MDR_ETH1 R_CFG: UCA_En (Bit 2)                        */
#define MDR_ETH1_R_CFG_UCA_En_Msk         (0x4UL)                   /*!< MDR_ETH1 R_CFG: UCA_En (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_R_CFG_AC_En_Pos          (3UL)                     /*!< MDR_ETH1 R_CFG: AC_En (Bit 3)                         */
#define MDR_ETH1_R_CFG_AC_En_Msk          (0x8UL)                   /*!< MDR_ETH1 R_CFG: AC_En (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_R_CFG_EF_En_Pos          (4UL)                     /*!< MDR_ETH1 R_CFG: EF_En (Bit 4)                         */
#define MDR_ETH1_R_CFG_EF_En_Msk          (0x10UL)                  /*!< MDR_ETH1 R_CFG: EF_En (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_R_CFG_CF_En_Pos          (5UL)                     /*!< MDR_ETH1 R_CFG: CF_En (Bit 5)                         */
#define MDR_ETH1_R_CFG_CF_En_Msk          (0x20UL)                  /*!< MDR_ETH1 R_CFG: CF_En (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_R_CFG_LF_En_Pos          (6UL)                     /*!< MDR_ETH1 R_CFG: LF_En (Bit 6)                         */
#define MDR_ETH1_R_CFG_LF_En_Msk          (0x40UL)                  /*!< MDR_ETH1 R_CFG: LF_En (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_R_CFG_SF_En_Pos          (7UL)                     /*!< MDR_ETH1 R_CFG: SF_En (Bit 7)                         */
#define MDR_ETH1_R_CFG_SF_En_Msk          (0x80UL)                  /*!< MDR_ETH1 R_CFG: SF_En (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_R_CFG_EVNT_MODE_Pos      (8UL)                     /*!< MDR_ETH1 R_CFG: EVNT_MODE (Bit 8)                     */
#define MDR_ETH1_R_CFG_EVNT_MODE_Msk      (0x700UL)                 /*!< MDR_ETH1 R_CFG: EVNT_MODE (Bitfield-Mask: 0x07)       */
#define MDR_ETH1_R_CFG_MSB_1st_Pos        (12UL)                    /*!< MDR_ETH1 R_CFG: MSB_1st (Bit 12)                      */
#define MDR_ETH1_R_CFG_MSB_1st_Msk        (0x1000UL)                /*!< MDR_ETH1 R_CFG: MSB_1st (Bitfield-Mask: 0x01)         */
#define MDR_ETH1_R_CFG_BE_Pos             (13UL)                    /*!< MDR_ETH1 R_CFG: BE (Bit 13)                           */
#define MDR_ETH1_R_CFG_BE_Msk             (0x2000UL)                /*!< MDR_ETH1 R_CFG: BE (Bitfield-Mask: 0x01)              */
#define MDR_ETH1_R_CFG_EN_Pos             (15UL)                    /*!< MDR_ETH1 R_CFG: EN (Bit 15)                           */
#define MDR_ETH1_R_CFG_EN_Msk             (0x8000UL)                /*!< MDR_ETH1 R_CFG: EN (Bitfield-Mask: 0x01)              */
/* =========================================================  X_CFG  ========================================================= */
#define MDR_ETH1_X_CFG_RtryCnt_Pos        (0UL)                     /*!< MDR_ETH1 X_CFG: RtryCnt (Bit 0)                       */
#define MDR_ETH1_X_CFG_RtryCnt_Msk        (0xfUL)                   /*!< MDR_ETH1 X_CFG: RtryCnt (Bitfield-Mask: 0x0f)         */
#define MDR_ETH1_X_CFG_IPG_En_Pos         (4UL)                     /*!< MDR_ETH1 X_CFG: IPG_En (Bit 4)                        */
#define MDR_ETH1_X_CFG_IPG_En_Msk         (0x10UL)                  /*!< MDR_ETH1 X_CFG: IPG_En (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_X_CFG_CRC_En_Pos         (5UL)                     /*!< MDR_ETH1 X_CFG: CRC_En (Bit 5)                        */
#define MDR_ETH1_X_CFG_CRC_En_Msk         (0x20UL)                  /*!< MDR_ETH1 X_CFG: CRC_En (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_X_CFG_PRE_En_Pos         (6UL)                     /*!< MDR_ETH1 X_CFG: PRE_En (Bit 6)                        */
#define MDR_ETH1_X_CFG_PRE_En_Msk         (0x40UL)                  /*!< MDR_ETH1 X_CFG: PRE_En (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_X_CFG_PAD_En_Pos         (7UL)                     /*!< MDR_ETH1 X_CFG: PAD_En (Bit 7)                        */
#define MDR_ETH1_X_CFG_PAD_En_Msk         (0x80UL)                  /*!< MDR_ETH1 X_CFG: PAD_En (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_X_CFG_EVNT_MODE_Pos      (8UL)                     /*!< MDR_ETH1 X_CFG: EVNT_MODE (Bit 8)                     */
#define MDR_ETH1_X_CFG_EVNT_MODE_Msk      (0x700UL)                 /*!< MDR_ETH1 X_CFG: EVNT_MODE (Bitfield-Mask: 0x07)       */
#define MDR_ETH1_X_CFG_MSB_1st_Pos        (12UL)                    /*!< MDR_ETH1 X_CFG: MSB_1st (Bit 12)                      */
#define MDR_ETH1_X_CFG_MSB_1st_Msk        (0x1000UL)                /*!< MDR_ETH1 X_CFG: MSB_1st (Bitfield-Mask: 0x01)         */
#define MDR_ETH1_X_CFG_BE_Pos             (13UL)                    /*!< MDR_ETH1 X_CFG: BE (Bit 13)                           */
#define MDR_ETH1_X_CFG_BE_Msk             (0x2000UL)                /*!< MDR_ETH1 X_CFG: BE (Bitfield-Mask: 0x01)              */
#define MDR_ETH1_X_CFG_EN_Pos             (15UL)                    /*!< MDR_ETH1 X_CFG: EN (Bit 15)                           */
#define MDR_ETH1_X_CFG_EN_Msk             (0x8000UL)                /*!< MDR_ETH1 X_CFG: EN (Bitfield-Mask: 0x01)              */
/* ========================================================  G_CFGL  ========================================================= */
#define MDR_ETH1_G_CFGL_ColWnd_Pos        (0UL)                     /*!< MDR_ETH1 G_CFGL: ColWnd (Bit 0)                       */
#define MDR_ETH1_G_CFGL_ColWnd_Msk        (0xffUL)                  /*!< MDR_ETH1 G_CFGL: ColWnd (Bitfield-Mask: 0xff)         */
#define MDR_ETH1_G_CFGL_Pause_En_Pos      (8UL)                     /*!< MDR_ETH1 G_CFGL: Pause_En (Bit 8)                     */
#define MDR_ETH1_G_CFGL_Pause_En_Msk      (0x100UL)                 /*!< MDR_ETH1 G_CFGL: Pause_En (Bitfield-Mask: 0x01)       */
#define MDR_ETH1_G_CFGL_DTRM_En_Pos       (9UL)                     /*!< MDR_ETH1 G_CFGL: DTRM_En (Bit 9)                      */
#define MDR_ETH1_G_CFGL_DTRM_En_Msk       (0x200UL)                 /*!< MDR_ETH1 G_CFGL: DTRM_En (Bitfield-Mask: 0x01)        */
#define MDR_ETH1_G_CFGL_HD_En_Pos         (10UL)                    /*!< MDR_ETH1 G_CFGL: HD_En (Bit 10)                       */
#define MDR_ETH1_G_CFGL_HD_En_Msk         (0x400UL)                 /*!< MDR_ETH1 G_CFGL: HD_En (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_G_CFGL_EXT_En_Pos        (11UL)                    /*!< MDR_ETH1 G_CFGL: EXT_En (Bit 11)                      */
#define MDR_ETH1_G_CFGL_EXT_En_Msk        (0x800UL)                 /*!< MDR_ETH1 G_CFGL: EXT_En (Bitfield-Mask: 0x01)         */
#define MDR_ETH1_G_CFGL_BUFF_Mode_Pos     (12UL)                    /*!< MDR_ETH1 G_CFGL: BUFF_Mode (Bit 12)                   */
#define MDR_ETH1_G_CFGL_BUFF_Mode_Msk     (0x3000UL)                /*!< MDR_ETH1 G_CFGL: BUFF_Mode (Bitfield-Mask: 0x03)      */
#define MDR_ETH1_G_CFGL_IFR_CLR_En_Pos    (14UL)                    /*!< MDR_ETH1 G_CFGL: IFR_CLR_En (Bit 14)                  */
#define MDR_ETH1_G_CFGL_IFR_CLR_En_Msk    (0x4000UL)                /*!< MDR_ETH1 G_CFGL: IFR_CLR_En (Bitfield-Mask: 0x01)     */
/* ========================================================  G_CFGH  ========================================================= */
#define MDR_ETH1_G_CFGH_XRST_Pos          (0UL)                     /*!< MDR_ETH1 G_CFGH: XRST (Bit 0)                         */
#define MDR_ETH1_G_CFGH_XRST_Msk          (0x1UL)                   /*!< MDR_ETH1 G_CFGH: XRST (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_G_CFGH_RRST_Pos          (1UL)                     /*!< MDR_ETH1 G_CFGH: RRST (Bit 1)                         */
#define MDR_ETH1_G_CFGH_RRST_Msk          (0x2UL)                   /*!< MDR_ETH1 G_CFGH: RRST (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_G_CFGH_DLB_Pos           (2UL)                     /*!< MDR_ETH1 G_CFGH: DLB (Bit 2)                          */
#define MDR_ETH1_G_CFGH_DLB_Msk           (0x4UL)                   /*!< MDR_ETH1 G_CFGH: DLB (Bitfield-Mask: 0x01)            */
#define MDR_ETH1_G_CFGH_DBG_RF_EN_Pos     (12UL)                    /*!< MDR_ETH1 G_CFGH: DBG_RF_EN (Bit 12)                   */
#define MDR_ETH1_G_CFGH_DBG_RF_EN_Msk     (0x1000UL)                /*!< MDR_ETH1 G_CFGH: DBG_RF_EN (Bitfield-Mask: 0x01)      */
#define MDR_ETH1_G_CFGH_DBG_TF_EN_Pos     (13UL)                    /*!< MDR_ETH1 G_CFGH: DBG_TF_EN (Bit 13)                   */
#define MDR_ETH1_G_CFGH_DBG_TF_EN_Msk     (0x2000UL)                /*!< MDR_ETH1 G_CFGH: DBG_TF_EN (Bitfield-Mask: 0x01)      */
#define MDR_ETH1_G_CFGH_RUN_Mode_Pos      (14UL)                    /*!< MDR_ETH1 G_CFGH: RUN_Mode (Bit 14)                    */
#define MDR_ETH1_G_CFGH_RUN_Mode_Msk      (0xc000UL)                /*!< MDR_ETH1 G_CFGH: RUN_Mode (Bitfield-Mask: 0x03)       */
/* ==========================================================  IMR  ========================================================== */
#define MDR_ETH1_IMR_RF_OK_Pos            (0UL)                     /*!< MDR_ETH1 IMR: RF_OK (Bit 0)                           */
#define MDR_ETH1_IMR_RF_OK_Msk            (0x1UL)                   /*!< MDR_ETH1 IMR: RF_OK (Bitfield-Mask: 0x01)             */
#define MDR_ETH1_IMR_MISSED_F_Pos         (1UL)                     /*!< MDR_ETH1 IMR: MISSED_F (Bit 1)                        */
#define MDR_ETH1_IMR_MISSED_F_Msk         (0x2UL)                   /*!< MDR_ETH1 IMR: MISSED_F (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_IMR_OVF_Pos              (2UL)                     /*!< MDR_ETH1 IMR: OVF (Bit 2)                             */
#define MDR_ETH1_IMR_OVF_Msk              (0x4UL)                   /*!< MDR_ETH1 IMR: OVF (Bitfield-Mask: 0x01)               */
#define MDR_ETH1_IMR_SMB_Err_Pos          (3UL)                     /*!< MDR_ETH1 IMR: SMB_Err (Bit 3)                         */
#define MDR_ETH1_IMR_SMB_Err_Msk          (0x8UL)                   /*!< MDR_ETH1 IMR: SMB_Err (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_IMR_CRC_Err_Pos          (4UL)                     /*!< MDR_ETH1 IMR: CRC_Err (Bit 4)                         */
#define MDR_ETH1_IMR_CRC_Err_Msk          (0x10UL)                  /*!< MDR_ETH1 IMR: CRC_Err (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_IMR_CF_Pos               (5UL)                     /*!< MDR_ETH1 IMR: CF (Bit 5)                              */
#define MDR_ETH1_IMR_CF_Msk               (0x20UL)                  /*!< MDR_ETH1 IMR: CF (Bitfield-Mask: 0x01)                */
#define MDR_ETH1_IMR_LF_Pos               (6UL)                     /*!< MDR_ETH1 IMR: LF (Bit 6)                              */
#define MDR_ETH1_IMR_LF_Msk               (0x40UL)                  /*!< MDR_ETH1 IMR: LF (Bitfield-Mask: 0x01)                */
#define MDR_ETH1_IMR_SF_Pos               (7UL)                     /*!< MDR_ETH1 IMR: SF (Bit 7)                              */
#define MDR_ETH1_IMR_SF_Msk               (0x80UL)                  /*!< MDR_ETH1 IMR: SF (Bitfield-Mask: 0x01)                */
#define MDR_ETH1_IMR_XF_Ok_Pos            (8UL)                     /*!< MDR_ETH1 IMR: XF_Ok (Bit 8)                           */
#define MDR_ETH1_IMR_XF_Ok_Msk            (0x100UL)                 /*!< MDR_ETH1 IMR: XF_Ok (Bitfield-Mask: 0x01)             */
#define MDR_ETH1_IMR_XF_Err_Pos           (9UL)                     /*!< MDR_ETH1 IMR: XF_Err (Bit 9)                          */
#define MDR_ETH1_IMR_XF_Err_Msk           (0x200UL)                 /*!< MDR_ETH1 IMR: XF_Err (Bitfield-Mask: 0x01)            */
#define MDR_ETH1_IMR_UNDEF_Pos            (10UL)                    /*!< MDR_ETH1 IMR: UNDEF (Bit 10)                          */
#define MDR_ETH1_IMR_UNDEF_Msk            (0x400UL)                 /*!< MDR_ETH1 IMR: UNDEF (Bitfield-Mask: 0x01)             */
#define MDR_ETH1_IMR_LC_Pos               (11UL)                    /*!< MDR_ETH1 IMR: LC (Bit 11)                             */
#define MDR_ETH1_IMR_LC_Msk               (0x800UL)                 /*!< MDR_ETH1 IMR: LC (Bitfield-Mask: 0x01)                */
#define MDR_ETH1_IMR_CRC_Lost_Pos         (12UL)                    /*!< MDR_ETH1 IMR: CRC_Lost (Bit 12)                       */
#define MDR_ETH1_IMR_CRC_Lost_Msk         (0x1000UL)                /*!< MDR_ETH1 IMR: CRC_Lost (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_IMR_MDIO_INT_Pos         (14UL)                    /*!< MDR_ETH1 IMR: MDIO_INT (Bit 14)                       */
#define MDR_ETH1_IMR_MDIO_INT_Msk         (0x4000UL)                /*!< MDR_ETH1 IMR: MDIO_INT (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_IMR_MDIO_RDY_Pos         (15UL)                    /*!< MDR_ETH1 IMR: MDIO_RDY (Bit 15)                       */
#define MDR_ETH1_IMR_MDIO_RDY_Msk         (0x8000UL)                /*!< MDR_ETH1 IMR: MDIO_RDY (Bitfield-Mask: 0x01)          */
/* ==========================================================  IFR  ========================================================== */
#define MDR_ETH1_IFR_RF_OK_Pos            (0UL)                     /*!< MDR_ETH1 IFR: RF_OK (Bit 0)                           */
#define MDR_ETH1_IFR_RF_OK_Msk            (0x1UL)                   /*!< MDR_ETH1 IFR: RF_OK (Bitfield-Mask: 0x01)             */
#define MDR_ETH1_IFR_MISSED_F_Pos         (1UL)                     /*!< MDR_ETH1 IFR: MISSED_F (Bit 1)                        */
#define MDR_ETH1_IFR_MISSED_F_Msk         (0x2UL)                   /*!< MDR_ETH1 IFR: MISSED_F (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_IFR_OVF_Pos              (2UL)                     /*!< MDR_ETH1 IFR: OVF (Bit 2)                             */
#define MDR_ETH1_IFR_OVF_Msk              (0x4UL)                   /*!< MDR_ETH1 IFR: OVF (Bitfield-Mask: 0x01)               */
#define MDR_ETH1_IFR_SMB_Err_Pos          (3UL)                     /*!< MDR_ETH1 IFR: SMB_Err (Bit 3)                         */
#define MDR_ETH1_IFR_SMB_Err_Msk          (0x8UL)                   /*!< MDR_ETH1 IFR: SMB_Err (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_IFR_CRC_Err_Pos          (4UL)                     /*!< MDR_ETH1 IFR: CRC_Err (Bit 4)                         */
#define MDR_ETH1_IFR_CRC_Err_Msk          (0x10UL)                  /*!< MDR_ETH1 IFR: CRC_Err (Bitfield-Mask: 0x01)           */
#define MDR_ETH1_IFR_CF_Pos               (5UL)                     /*!< MDR_ETH1 IFR: CF (Bit 5)                              */
#define MDR_ETH1_IFR_CF_Msk               (0x20UL)                  /*!< MDR_ETH1 IFR: CF (Bitfield-Mask: 0x01)                */
#define MDR_ETH1_IFR_LF_Pos               (6UL)                     /*!< MDR_ETH1 IFR: LF (Bit 6)                              */
#define MDR_ETH1_IFR_LF_Msk               (0x40UL)                  /*!< MDR_ETH1 IFR: LF (Bitfield-Mask: 0x01)                */
#define MDR_ETH1_IFR_SF_Pos               (7UL)                     /*!< MDR_ETH1 IFR: SF (Bit 7)                              */
#define MDR_ETH1_IFR_SF_Msk               (0x80UL)                  /*!< MDR_ETH1 IFR: SF (Bitfield-Mask: 0x01)                */
#define MDR_ETH1_IFR_XF_Ok_Pos            (8UL)                     /*!< MDR_ETH1 IFR: XF_Ok (Bit 8)                           */
#define MDR_ETH1_IFR_XF_Ok_Msk            (0x100UL)                 /*!< MDR_ETH1 IFR: XF_Ok (Bitfield-Mask: 0x01)             */
#define MDR_ETH1_IFR_XF_Err_Pos           (9UL)                     /*!< MDR_ETH1 IFR: XF_Err (Bit 9)                          */
#define MDR_ETH1_IFR_XF_Err_Msk           (0x200UL)                 /*!< MDR_ETH1 IFR: XF_Err (Bitfield-Mask: 0x01)            */
#define MDR_ETH1_IFR_UNDEF_Pos            (10UL)                    /*!< MDR_ETH1 IFR: UNDEF (Bit 10)                          */
#define MDR_ETH1_IFR_UNDEF_Msk            (0x400UL)                 /*!< MDR_ETH1 IFR: UNDEF (Bitfield-Mask: 0x01)             */
#define MDR_ETH1_IFR_LC_Pos               (11UL)                    /*!< MDR_ETH1 IFR: LC (Bit 11)                             */
#define MDR_ETH1_IFR_LC_Msk               (0x800UL)                 /*!< MDR_ETH1 IFR: LC (Bitfield-Mask: 0x01)                */
#define MDR_ETH1_IFR_CRC_Lost_Pos         (12UL)                    /*!< MDR_ETH1 IFR: CRC_Lost (Bit 12)                       */
#define MDR_ETH1_IFR_CRC_Lost_Msk         (0x1000UL)                /*!< MDR_ETH1 IFR: CRC_Lost (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_IFR_MDIO_INT_Pos         (14UL)                    /*!< MDR_ETH1 IFR: MDIO_INT (Bit 14)                       */
#define MDR_ETH1_IFR_MDIO_INT_Msk         (0x4000UL)                /*!< MDR_ETH1 IFR: MDIO_INT (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_IFR_MDIO_RDY_Pos         (15UL)                    /*!< MDR_ETH1 IFR: MDIO_RDY (Bit 15)                       */
#define MDR_ETH1_IFR_MDIO_RDY_Msk         (0x8000UL)                /*!< MDR_ETH1 IFR: MDIO_RDY (Bitfield-Mask: 0x01)          */
/* =======================================================  MDIO_CTRL  ======================================================= */
#define MDR_ETH1_MDIO_CTRL_REG_Addr_Pos   (0UL)                     /*!< MDR_ETH1 MDIO_CTRL: REG_Addr (Bit 0)                  */
#define MDR_ETH1_MDIO_CTRL_REG_Addr_Msk   (0x1fUL)                  /*!< MDR_ETH1 MDIO_CTRL: REG_Addr (Bitfield-Mask: 0x1f)    */
#define MDR_ETH1_MDIO_CTRL_DIV_Pos        (5UL)                     /*!< MDR_ETH1 MDIO_CTRL: DIV (Bit 5)                       */
#define MDR_ETH1_MDIO_CTRL_DIV_Msk        (0xe0UL)                  /*!< MDR_ETH1 MDIO_CTRL: DIV (Bitfield-Mask: 0x07)         */
#define MDR_ETH1_MDIO_CTRL_PHY_Addr_Pos   (8UL)                     /*!< MDR_ETH1 MDIO_CTRL: PHY_Addr (Bit 8)                  */
#define MDR_ETH1_MDIO_CTRL_PHY_Addr_Msk   (0x1f00UL)                /*!< MDR_ETH1 MDIO_CTRL: PHY_Addr (Bitfield-Mask: 0x1f)    */
#define MDR_ETH1_MDIO_CTRL_OP_Pos         (13UL)                    /*!< MDR_ETH1 MDIO_CTRL: OP (Bit 13)                       */
#define MDR_ETH1_MDIO_CTRL_OP_Msk         (0x2000UL)                /*!< MDR_ETH1 MDIO_CTRL: OP (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_MDIO_CTRL_PRE_En_Pos     (14UL)                    /*!< MDR_ETH1 MDIO_CTRL: PRE_En (Bit 14)                   */
#define MDR_ETH1_MDIO_CTRL_PRE_En_Msk     (0x4000UL)                /*!< MDR_ETH1 MDIO_CTRL: PRE_En (Bitfield-Mask: 0x01)      */
#define MDR_ETH1_MDIO_CTRL_CTRL_RDY_Pos   (15UL)                    /*!< MDR_ETH1 MDIO_CTRL: CTRL_RDY (Bit 15)                 */
#define MDR_ETH1_MDIO_CTRL_CTRL_RDY_Msk   (0x8000UL)                /*!< MDR_ETH1 MDIO_CTRL: CTRL_RDY (Bitfield-Mask: 0x01)    */
/* =======================================================  MDIO_DATA  ======================================================= */
/* ========================================================  R_HEAD  ========================================================= */
/* ========================================================  X_TAIL  ========================================================= */
/* ========================================================  R_TAIL  ========================================================= */
/* ========================================================  X_HEAD  ========================================================= */
/* =========================================================  STAT  ========================================================== */
#define MDR_ETH1_STAT_RX_Empty_Pos        (0UL)                     /*!< MDR_ETH1 STAT: RX_Empty (Bit 0)                       */
#define MDR_ETH1_STAT_RX_Empty_Msk        (0x1UL)                   /*!< MDR_ETH1 STAT: RX_Empty (Bitfield-Mask: 0x01)         */
#define MDR_ETH1_STAT_RX_AEmpty_Pos       (1UL)                     /*!< MDR_ETH1 STAT: RX_AEmpty (Bit 1)                      */
#define MDR_ETH1_STAT_RX_AEmpty_Msk       (0x2UL)                   /*!< MDR_ETH1 STAT: RX_AEmpty (Bitfield-Mask: 0x01)        */
#define MDR_ETH1_STAT_RX_Hald_Pos         (2UL)                     /*!< MDR_ETH1 STAT: RX_Hald (Bit 2)                        */
#define MDR_ETH1_STAT_RX_Hald_Msk         (0x4UL)                   /*!< MDR_ETH1 STAT: RX_Hald (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_STAT_RX_AFull_Pos        (3UL)                     /*!< MDR_ETH1 STAT: RX_AFull (Bit 3)                       */
#define MDR_ETH1_STAT_RX_AFull_Msk        (0x8UL)                   /*!< MDR_ETH1 STAT: RX_AFull (Bitfield-Mask: 0x01)         */
#define MDR_ETH1_STAT_RX_Full_Pos         (4UL)                     /*!< MDR_ETH1 STAT: RX_Full (Bit 4)                        */
#define MDR_ETH1_STAT_RX_Full_Msk         (0x10UL)                  /*!< MDR_ETH1 STAT: RX_Full (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_STAT_RX_Count_Pos        (5UL)                     /*!< MDR_ETH1 STAT: RX_Count (Bit 5)                       */
#define MDR_ETH1_STAT_RX_Count_Msk        (0xe0UL)                  /*!< MDR_ETH1 STAT: RX_Count (Bitfield-Mask: 0x07)         */
#define MDR_ETH1_STAT_TX_Empty_Pos        (8UL)                     /*!< MDR_ETH1 STAT: TX_Empty (Bit 8)                       */
#define MDR_ETH1_STAT_TX_Empty_Msk        (0x100UL)                 /*!< MDR_ETH1 STAT: TX_Empty (Bitfield-Mask: 0x01)         */
#define MDR_ETH1_STAT_TX_AEmpty_Pos       (9UL)                     /*!< MDR_ETH1 STAT: TX_AEmpty (Bit 9)                      */
#define MDR_ETH1_STAT_TX_AEmpty_Msk       (0x200UL)                 /*!< MDR_ETH1 STAT: TX_AEmpty (Bitfield-Mask: 0x01)        */
#define MDR_ETH1_STAT_TX_Hald_Pos         (10UL)                    /*!< MDR_ETH1 STAT: TX_Hald (Bit 10)                       */
#define MDR_ETH1_STAT_TX_Hald_Msk         (0x400UL)                 /*!< MDR_ETH1 STAT: TX_Hald (Bitfield-Mask: 0x01)          */
#define MDR_ETH1_STAT_TX_AFull_Pos        (11UL)                    /*!< MDR_ETH1 STAT: TX_AFull (Bit 11)                      */
#define MDR_ETH1_STAT_TX_AFull_Msk        (0x800UL)                 /*!< MDR_ETH1 STAT: TX_AFull (Bitfield-Mask: 0x01)         */
#define MDR_ETH1_STAT_TX_Full_Pos         (12UL)                    /*!< MDR_ETH1 STAT: TX_Full (Bit 12)                       */
#define MDR_ETH1_STAT_TX_Full_Msk         (0x1000UL)                /*!< MDR_ETH1 STAT: TX_Full (Bitfield-Mask: 0x01)          */
/* =======================================================  RCOUNTER  ======================================================== */
/* ======================================================  PHY_CONTROL  ====================================================== */
#define MDR_ETH1_PHY_CONTROL_LB_Pos       (0UL)                     /*!< MDR_ETH1 PHY_CONTROL: LB (Bit 0)                      */
#define MDR_ETH1_PHY_CONTROL_LB_Msk       (0x1UL)                   /*!< MDR_ETH1 PHY_CONTROL: LB (Bitfield-Mask: 0x01)        */
#define MDR_ETH1_PHY_CONTROL_DLB_Pos      (1UL)                     /*!< MDR_ETH1 PHY_CONTROL: DLB (Bit 1)                     */
#define MDR_ETH1_PHY_CONTROL_DLB_Msk      (0x2UL)                   /*!< MDR_ETH1 PHY_CONTROL: DLB (Bitfield-Mask: 0x01)       */
#define MDR_ETH1_PHY_CONTROL_Duplex_Pos   (2UL)                     /*!< MDR_ETH1 PHY_CONTROL: Duplex (Bit 2)                  */
#define MDR_ETH1_PHY_CONTROL_Duplex_Msk   (0x4UL)                   /*!< MDR_ETH1 PHY_CONTROL: Duplex (Bitfield-Mask: 0x01)    */
#define MDR_ETH1_PHY_CONTROL_DIR_Pos      (4UL)                     /*!< MDR_ETH1 PHY_CONTROL: DIR (Bit 4)                     */
#define MDR_ETH1_PHY_CONTROL_DIR_Msk      (0x10UL)                  /*!< MDR_ETH1 PHY_CONTROL: DIR (Bitfield-Mask: 0x01)       */
#define MDR_ETH1_PHY_CONTROL_BASE_2_Pos   (5UL)                     /*!< MDR_ETH1 PHY_CONTROL: BASE_2 (Bit 5)                  */
#define MDR_ETH1_PHY_CONTROL_BASE_2_Msk   (0x20UL)                  /*!< MDR_ETH1 PHY_CONTROL: BASE_2 (Bitfield-Mask: 0x01)    */
#define MDR_ETH1_PHY_CONTROL_LINK_Period_Pos (6UL)                  /*!< MDR_ETH1 PHY_CONTROL: LINK_Period (Bit 6)             */
#define MDR_ETH1_PHY_CONTROL_LINK_Period_Msk (0xfc0UL)              /*!< MDR_ETH1 PHY_CONTROL: LINK_Period (Bitfield-Mask: 0x3f) */
#define MDR_ETH1_PHY_CONTROL_EXT_En_Pos   (14UL)                    /*!< MDR_ETH1 PHY_CONTROL: EXT_En (Bit 14)                 */
#define MDR_ETH1_PHY_CONTROL_EXT_En_Msk   (0x4000UL)                /*!< MDR_ETH1 PHY_CONTROL: EXT_En (Bitfield-Mask: 0x01)    */
#define MDR_ETH1_PHY_CONTROL_RST_Pos      (15UL)                    /*!< MDR_ETH1 PHY_CONTROL: RST (Bit 15)                    */
#define MDR_ETH1_PHY_CONTROL_RST_Msk      (0x8000UL)                /*!< MDR_ETH1 PHY_CONTROL: RST (Bitfield-Mask: 0x01)       */
/* ======================================================  PHY_STATYS  ======================================================= */
#define MDR_ETH1_PHY_STATYS_LED_LINK_Pos  (8UL)                     /*!< MDR_ETH1 PHY_STATYS: LED_LINK (Bit 8)                 */
#define MDR_ETH1_PHY_STATYS_LED_LINK_Msk  (0x100UL)                 /*!< MDR_ETH1 PHY_STATYS: LED_LINK (Bitfield-Mask: 0x01)   */
#define MDR_ETH1_PHY_STATYS_LED_COL_Pos   (9UL)                     /*!< MDR_ETH1 PHY_STATYS: LED_COL (Bit 9)                  */
#define MDR_ETH1_PHY_STATYS_LED_COL_Msk   (0x200UL)                 /*!< MDR_ETH1 PHY_STATYS: LED_COL (Bitfield-Mask: 0x01)    */
#define MDR_ETH1_PHY_STATYS_INT_LOSS_Pos  (10UL)                    /*!< MDR_ETH1 PHY_STATYS: INT_LOSS (Bit 10)                */
#define MDR_ETH1_PHY_STATYS_INT_LOSS_Msk  (0x400UL)                 /*!< MDR_ETH1 PHY_STATYS: INT_LOSS (Bitfield-Mask: 0x01)   */
#define MDR_ETH1_PHY_STATYS_INT_POL_Pos   (11UL)                    /*!< MDR_ETH1 PHY_STATYS: INT_POL (Bit 11)                 */
#define MDR_ETH1_PHY_STATYS_INT_POL_Msk   (0x800UL)                 /*!< MDR_ETH1 PHY_STATYS: INT_POL (Bitfield-Mask: 0x01)    */
#define MDR_ETH1_PHY_STATYS_INT_JAB_Pos   (12UL)                    /*!< MDR_ETH1 PHY_STATYS: INT_JAB (Bit 12)                 */
#define MDR_ETH1_PHY_STATYS_INT_JAB_Msk   (0x1000UL)                /*!< MDR_ETH1 PHY_STATYS: INT_JAB (Bitfield-Mask: 0x01)    */
#define MDR_ETH1_PHY_STATYS_INT_JAM_Pos   (13UL)                    /*!< MDR_ETH1 PHY_STATYS: INT_JAM (Bit 13)                 */
#define MDR_ETH1_PHY_STATYS_INT_JAM_Msk   (0x2000UL)                /*!< MDR_ETH1 PHY_STATYS: INT_JAM (Bitfield-Mask: 0x01)    */
/* =====================================================  PHY_CONTORL_A  ===================================================== */
#define MDR_ETH1_PHY_CONTORL_A_SELR_Pos   (0UL)                     /*!< MDR_ETH1 PHY_CONTORL_A: SELR (Bit 0)                  */
#define MDR_ETH1_PHY_CONTORL_A_SELR_Msk   (0x1UL)                   /*!< MDR_ETH1 PHY_CONTORL_A: SELR (Bitfield-Mask: 0x01)    */
#define MDR_ETH1_PHY_CONTORL_A_TRIM_Pos   (1UL)                     /*!< MDR_ETH1 PHY_CONTORL_A: TRIM (Bit 1)                  */
#define MDR_ETH1_PHY_CONTORL_A_TRIM_Msk   (0xeUL)                   /*!< MDR_ETH1 PHY_CONTORL_A: TRIM (Bitfield-Mask: 0x07)    */
#define MDR_ETH1_PHY_CONTORL_A_TRIMR_Pos  (4UL)                     /*!< MDR_ETH1 PHY_CONTORL_A: TRIMR (Bit 4)                 */
#define MDR_ETH1_PHY_CONTORL_A_TRIMR_Msk  (0xff0UL)                 /*!< MDR_ETH1 PHY_CONTORL_A: TRIMR (Bitfield-Mask: 0xff)   */
#define MDR_ETH1_PHY_CONTORL_A_ISRC_Pos   (14UL)                    /*!< MDR_ETH1 PHY_CONTORL_A: ISRC (Bit 14)                 */
#define MDR_ETH1_PHY_CONTORL_A_ISRC_Msk   (0x4000UL)                /*!< MDR_ETH1 PHY_CONTORL_A: ISRC (Bitfield-Mask: 0x01)    */
#define MDR_ETH1_PHY_CONTORL_A_PHY_En_Pos (15UL)                    /*!< MDR_ETH1 PHY_CONTORL_A: PHY_En (Bit 15)               */
#define MDR_ETH1_PHY_CONTORL_A_PHY_En_Msk (0x8000UL)                /*!< MDR_ETH1 PHY_CONTORL_A: PHY_En (Bitfield-Mask: 0x01)  */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                             Enumerated Values Cluster Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            BUF                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  ID  =========================================================== */
/* ==========================================================  DLC  ========================================================== */
/* ==================================================  BUF DLC DLC [0..3]  =================================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_DLC_DLC                                                      */
  MDR_CAN1_BUF_DLC_DLC_NoData          = 0,     /*!< NoData : Normal Operation                                                 */
  MDR_CAN1_BUF_DLC_DLC_Bytes_1         = 1,     /*!< Bytes_1 : Byte Count                                                      */
  MDR_CAN1_BUF_DLC_DLC_Bytes_2         = 2,     /*!< Bytes_2 : Byte Count                                                      */
  MDR_CAN1_BUF_DLC_DLC_Bytes_3         = 3,     /*!< Bytes_3 : Byte Count                                                      */
  MDR_CAN1_BUF_DLC_DLC_Bytes_4         = 4,     /*!< Bytes_4 : Byte Count                                                      */
  MDR_CAN1_BUF_DLC_DLC_Bytes_5         = 5,     /*!< Bytes_5 : Byte Count                                                      */
  MDR_CAN1_BUF_DLC_DLC_Bytes_6         = 6,     /*!< Bytes_6 : Byte Count                                                      */
  MDR_CAN1_BUF_DLC_DLC_Bytes_7         = 7,     /*!< Bytes_7 : Byte Count                                                      */
  MDR_CAN1_BUF_DLC_DLC_Bytes_8         = 8,     /*!< Bytes_8 : Byte Count                                                      */
} MDR_CAN1_BUF_DLC_DLC_Enum;

/* ==================================================  BUF DLC RTR [8..8]  =================================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_DLC_RTR                                                      */
  MDR_CAN1_BUF_DLC_RTR_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_DLC_RTR_On              = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_DLC_RTR_Enum;

/* ===================================================  BUF DLC R1 [9..9]  =================================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_DLC_R1                                                       */
  MDR_CAN1_BUF_DLC_R1_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_DLC_R1_On               = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_DLC_R1_Enum;

/* ==================================================  BUF DLC R0 [10..10]  ================================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_DLC_R0                                                       */
  MDR_CAN1_BUF_DLC_R0_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_DLC_R0_On               = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_DLC_R0_Enum;

/* =================================================  BUF DLC SRR [11..11]  ================================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_DLC_SRR                                                      */
  MDR_CAN1_BUF_DLC_SRR_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_DLC_SRR_On              = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_DLC_SRR_Enum;

/* =================================================  BUF DLC IDE [12..12]  ================================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_DLC_IDE                                                      */
  MDR_CAN1_BUF_DLC_IDE_Standard        = 0,     /*!< Standard : Standard frame                                                 */
  MDR_CAN1_BUF_DLC_IDE_Extended        = 1,     /*!< Extended : Extended frame                                                 */
} MDR_CAN1_BUF_DLC_IDE_Enum;

/* =========================================================  DATAL  ========================================================= */
/* =========================================================  DATAH  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          FILTER                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MASK  ========================================================== */
/* ========================================================  FILTER  ========================================================= */

/** @} */ /* End of group EnumValue_clusters */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* ========================================================  MAX_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK MAX_CLK Select [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_MAX_CLK_Select                                              */
  MDR_RST_CLOCK_MAX_CLK_Select_HSI     = 0,     /*!< HSI : MAX_CLOCK is HSI                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_HSI_div2 = 1,    /*!< HSI_div2 : MAX_CLOCK is HSI/2                                             */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE0    = 2,     /*!< HSE0 : MAX_CLOCK is HSE0                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE0_div2 = 3,   /*!< HSE0_div2 : MAX_CLOCK is HSE0/2                                           */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE1    = 4,     /*!< HSE1 : MAX_CLOCK is HSE1                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_HSE1_div2 = 5,   /*!< HSE1_div2 : MAX_CLOCK is HSE1/2                                           */
  MDR_RST_CLOCK_MAX_CLK_Select_LSI     = 6,     /*!< LSI : MAX_CLOCK is LSI                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_LSE     = 7,     /*!< LSE : MAX_CLOCK is LSE                                                    */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL0    = 8,     /*!< PLL0 : MAX_CLOCK is PLL0                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL1    = 9,     /*!< PLL1 : MAX_CLOCK is PLL1                                                  */
  MDR_RST_CLOCK_MAX_CLK_Select_PLL2    = 10,    /*!< PLL2 : MAX_CLOCK is PLL2                                                  */
} MDR_RST_CLOCK_MAX_CLK_Select_Enum;

/* ========================================================  CPU_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK CPU_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_CPU_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_CPU_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK CPU_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_CPU_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  PER0_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK PER0_CLK PortA_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortA_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortB_CLK_EN [14..14]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortB_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortC_CLK_EN [15..15]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortD_CLK_EN [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortD_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER0_CLK PortE_CLK_EN [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN                                       */
  MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_PortE_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK SPW1_CLK_EN [21..21]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_SPW1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK TIM1_CLK_EN [23..23]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_TIM1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK TIM2_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_TIM2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK TIM3_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_TIM3_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK TIM4_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_TIM4_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER0_CLK CAN1_CLK_EN [29..29]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN                                        */
  MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER0_CLK_CAN1_CLK_EN_Enum;

/* =======================================================  PER1_CLK  ======================================================== */
/* =======================================  MDR_RST_CLOCK PER1_CLK SSP1_CLK_EN [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_SSP1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK UART1_CLK_EN [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN                                       */
  MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_UART1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK UART2_CLK_EN [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN                                       */
  MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_UART2_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER1_CLK ARINK_RX_CLK_EN [11..11]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_ARINK_RX_CLK_EN                                    */
  MDR_RST_CLOCK_PER1_CLK_ARINK_RX_CLK_EN_Off = 0,/*!< Off : Disable                                                            */
  MDR_RST_CLOCK_PER1_CLK_ARINK_RX_CLK_EN_On = 1,/*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_ARINK_RX_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER1_CLK ARINK_TX_CLK_EN [13..13]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_ARINK_TX_CLK_EN                                    */
  MDR_RST_CLOCK_PER1_CLK_ARINK_TX_CLK_EN_Off = 0,/*!< Off : Disable                                                            */
  MDR_RST_CLOCK_PER1_CLK_ARINK_TX_CLK_EN_On = 1,/*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_ARINK_TX_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK MIL1_CLK_EN [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_MIL1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK MIL2_CLK_EN [21..21]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_MIL2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK ADC1_CLK_EN [23..23]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_ADC1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK ADC2_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_ADC2_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK DAC1_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_DAC1_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLK DAC2_CLK_EN [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN                                        */
  MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_Off = 0,   /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_On = 1,    /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PER1_CLK_DAC2_CLK_EN_Enum;

/* =======================================================  CPU_CHK0  ======================================================== */
/* =======================================================  CPU_CHK1  ======================================================== */
/* =======================================================  CPU_CHK2  ======================================================== */
/* =======================================================  CPU_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT0                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT1                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT2                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK CPU_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_STAT_EVENT3                                             */
  MDR_RST_CLOCK_CPU_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_CPU_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_CPU_STAT_EVENT3_Enum;

/* ========================================================  LSI_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSI_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSI_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSI_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSI_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSI_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  LSI_CHK0  ======================================================== */
/* =======================================================  LSI_CHK1  ======================================================== */
/* =======================================================  LSI_CHK2  ======================================================== */
/* =======================================================  LSI_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT0                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT1                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT2                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK LSI_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_EVENT3                                             */
  MDR_RST_CLOCK_LSI_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSI_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSI_STAT_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSI_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSI_STAT_READY                                              */
  MDR_RST_CLOCK_LSI_STAT_READY_Off     = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_LSI_STAT_READY_On      = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_LSI_STAT_READY_Enum;

/* =======================================================  HSI_STAT  ======================================================== */
/* =========================================  MDR_RST_CLOCK HSI_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSI_STAT_READY                                              */
  MDR_RST_CLOCK_HSI_STAT_READY_Off     = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_HSI_STAT_READY_On      = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_HSI_STAT_READY_Enum;

/* ========================================================  LSE_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK EN_CHK_EVENT3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3                                       */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_On = 1,   /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSE_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_EN_CHK                                              */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_LSE_CLK_EN_CHK_On      = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_LSE_CLK_EN_CHK_Enum;

/* ===================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ===================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                              */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                  */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK LSE_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3                                      */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                  */
  MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                      */
} MDR_RST_CLOCK_LSE_CLK_CLR_CHK_EVENT3_Enum;

/* =======================================================  LSE_CHK0  ======================================================== */
/* =======================================================  LSE_CHK1  ======================================================== */
/* =======================================================  LSE_CHK2  ======================================================== */
/* =======================================================  LSE_STAT  ======================================================== */
/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT0 [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT0                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT0_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT0_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT1 [17..17]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT1                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT1_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT2 [18..18]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT2                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT2_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK LSE_STAT EVENT3 [19..19]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_EVENT3                                             */
  MDR_RST_CLOCK_LSE_STAT_EVENT3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_LSE_STAT_EVENT3_On     = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_LSE_STAT_EVENT3_Enum;

/* =========================================  MDR_RST_CLOCK LSE_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_LSE_STAT_READY                                              */
  MDR_RST_CLOCK_LSE_STAT_READY_Off     = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_LSE_STAT_READY_On      = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_LSE_STAT_READY_Enum;

/* =======================================================  HSE0_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK HSE0_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK HSE0_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE0_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK HSE_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_HSE_ON                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_HSE_ON_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_CLK HSE_BYP [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_HSE_BYP                                            */
  MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_On    = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_HSE_BYP_Enum;

/* =======================================  MDR_RST_CLOCK HSE0_CLK FILTER_EN [29..29]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_CLK_FILTER_EN                                          */
  MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE0_CLK_FILTER_EN_Enum;

/* =======================================================  HSE0_CHK0  ======================================================= */
/* =======================================================  HSE0_CHK1  ======================================================= */
/* =======================================================  HSE0_CHK2  ======================================================= */
/* =======================================================  HSE0_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT0                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT1                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT2                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_EVENT3                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE0_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE0_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE0_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE0_STAT_READY                                             */
  MDR_RST_CLOCK_HSE0_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_HSE0_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_HSE0_STAT_READY_Enum;

/* =======================================================  HSE1_CLK  ======================================================== */
/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK HSE1_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK HSE1_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_HSE1_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK HSE_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_HSE_ON                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_HSE_ON_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_CLK HSE_BYP [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_HSE_BYP                                            */
  MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_On    = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_HSE_BYP_Enum;

/* =======================================  MDR_RST_CLOCK HSE1_CLK FILTER_EN [29..29]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_CLK_FILTER_EN                                          */
  MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Off = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_On  = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_HSE1_CLK_FILTER_EN_Enum;

/* =======================================================  HSE1_CHK0  ======================================================= */
/* =======================================================  HSE1_CHK1  ======================================================= */
/* =======================================================  HSE1_CHK2  ======================================================= */
/* =======================================================  HSE1_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT0                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT1                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT2                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_EVENT3                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_HSE1_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_HSE1_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK HSE1_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HSE1_STAT_READY                                             */
  MDR_RST_CLOCK_HSE1_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_HSE1_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_HSE1_STAT_READY_Enum;

/* =======================================================  PLL0_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL0_CLK PLL_Q [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL0_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
} MDR_RST_CLOCK_PLL0_CLK_PLL_Q_Enum;

/* ===========================================  MDR_RST_CLOCK PLL0_CLK DV [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL0_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL0_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
} MDR_RST_CLOCK_PLL0_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL0_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL0_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL0_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK PLL_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL0_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL0_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK PLL_RLD [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_PLL_RLD                                            */
  MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Inactive = 0,  /*!< Inactive : Inactive state                                                 */
  MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Reload = 1,    /*!< Reload : Reload PLL                                                       */
} MDR_RST_CLOCK_PLL0_CLK_PLL_RLD_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_CLK SELECT [29..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL0_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL0_CLK_SELECT_Enum;

/* =======================================================  PLL0_CHK0  ======================================================= */
/* =======================================================  PLL0_CHK1  ======================================================= */
/* =======================================================  PLL0_CHK2  ======================================================= */
/* =======================================================  PLL0_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL0_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL0_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL0_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL0_STAT_READY                                             */
  MDR_RST_CLOCK_PLL0_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL0_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL0_STAT_READY_Enum;

/* =======================================================  PLL1_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL1_CLK PLL_Q [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL1_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
} MDR_RST_CLOCK_PLL1_CLK_PLL_Q_Enum;

/* ===========================================  MDR_RST_CLOCK PLL1_CLK DV [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL1_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL1_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
} MDR_RST_CLOCK_PLL1_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL1_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL1_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL1_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK PLL_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL1_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL1_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK PLL_RLD [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_PLL_RLD                                            */
  MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Inactive = 0,  /*!< Inactive : Inactive state                                                 */
  MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Reload = 1,    /*!< Reload : Reload PLL                                                       */
} MDR_RST_CLOCK_PLL1_CLK_PLL_RLD_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_CLK SELECT [29..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL1_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL1_CLK_SELECT_Enum;

/* =======================================================  PLL1_CHK0  ======================================================= */
/* =======================================================  PLL1_CHK1  ======================================================= */
/* =======================================================  PLL1_CHK2  ======================================================= */
/* =======================================================  PLL1_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL1_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL1_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL1_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL1_STAT_READY                                             */
  MDR_RST_CLOCK_PLL1_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL1_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL1_STAT_READY_Enum;

/* =======================================================  PLL2_CLK  ======================================================== */
/* ==========================================  MDR_RST_CLOCK PLL2_CLK PLL_Q [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_Q                                              */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div1    = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div2    = 1,     /*!< div2 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div3    = 2,     /*!< div3 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div4    = 3,     /*!< div4 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div5    = 4,     /*!< div5 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div6    = 5,     /*!< div6 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div7    = 6,     /*!< div7 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div8    = 7,     /*!< div8 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div9    = 8,     /*!< div9 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div10   = 9,     /*!< div10 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div11   = 10,    /*!< div11 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div12   = 11,    /*!< div12 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div13   = 12,    /*!< div13 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div14   = 13,    /*!< div14 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div15   = 14,    /*!< div15 : Divider                                                           */
  MDR_RST_CLOCK_PLL2_CLK_PLL_Q_div16   = 15,    /*!< div16 : Divider                                                           */
} MDR_RST_CLOCK_PLL2_CLK_PLL_Q_Enum;

/* ===========================================  MDR_RST_CLOCK PLL2_CLK DV [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_DV                                                 */
  MDR_RST_CLOCK_PLL2_CLK_DV_div1       = 0,     /*!< div1 : Divider                                                            */
  MDR_RST_CLOCK_PLL2_CLK_DV_div2       = 1,     /*!< div2 : Divider                                                            */
} MDR_RST_CLOCK_PLL2_CLK_DV_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT0 [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT0_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT1 [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT1_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT2 [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT2_Enum;

/* =====================================  MDR_RST_CLOCK PLL2_CLK EN_CHK_EVENT3 [19..19]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3                                      */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Off = 0, /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_On = 1,  /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK EN_CHK [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_EN_CHK                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_EN_CHK_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_EN_CHK_Enum;

/* ==================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_SHIFT_REG0 [21..21]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG0_Enum;

/* ==================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_SHIFT_REG1 [22..22]  =================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Inactive = 0,/*!< Inactive : No action                                             */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Clear = 1,/*!< Clear : Clear level                                                 */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_SHIFT_REG1_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT0 [23..23]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT0_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT1 [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT1_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT2 [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT2_Enum;

/* ====================================  MDR_RST_CLOCK PLL2_CLK CLR_CHK_EVENT3 [26..26]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3                                     */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Inactive = 0,/*!< Inactive : No action                                                 */
  MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Clear = 1,/*!< Clear : Clear level                                                     */
} MDR_RST_CLOCK_PLL2_CLK_CLR_CHK_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK PLL_ON [27..27]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_ON                                             */
  MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_RST_CLOCK_PLL2_CLK_PLL_ON_On     = 1,     /*!< On : Enable                                                               */
} MDR_RST_CLOCK_PLL2_CLK_PLL_ON_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK PLL_RLD [28..28]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_PLL_RLD                                            */
  MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Inactive = 0,  /*!< Inactive : Inactive state                                                 */
  MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Reload = 1,    /*!< Reload : Reload PLL                                                       */
} MDR_RST_CLOCK_PLL2_CLK_PLL_RLD_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_CLK SELECT [29..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_CLK_SELECT                                             */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSI    = 0,     /*!< HSI : HSI signal                                                          */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSI_div2 = 1,   /*!< HSI_div2 : HSI/2 signal                                                   */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE0   = 2,     /*!< HSE0 : HSE0 signal                                                        */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE0_div2 = 3,  /*!< HSE0_div2 : HSE0/2 signal                                                 */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE1   = 4,     /*!< HSE1 : HSE1 signal                                                        */
  MDR_RST_CLOCK_PLL2_CLK_SELECT_HSE1_div2 = 5,  /*!< HSE1_div2 : HSE1/2 signal                                                 */
} MDR_RST_CLOCK_PLL2_CLK_SELECT_Enum;

/* =======================================================  PLL2_CHK0  ======================================================= */
/* =======================================================  PLL2_CHK1  ======================================================= */
/* =======================================================  PLL2_CHK2  ======================================================= */
/* =======================================================  PLL2_STAT  ======================================================= */
/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT0 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT0                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT0_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT0_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT0_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT1 [17..17]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT1                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT1_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT1_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT2 [18..18]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT2                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT2_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT2_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT EVENT3 [19..19]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_EVENT3                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_RST_CLOCK_PLL2_STAT_EVENT3_On    = 1,     /*!< On : Active                                                               */
} MDR_RST_CLOCK_PLL2_STAT_EVENT3_Enum;

/* ========================================  MDR_RST_CLOCK PLL2_STAT READY [20..20]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL2_STAT_READY                                             */
  MDR_RST_CLOCK_PLL2_STAT_READY_Off    = 0,     /*!< Off : Clock not Ready                                                     */
  MDR_RST_CLOCK_PLL2_STAT_READY_On     = 1,     /*!< On : Clock Ready                                                          */
} MDR_RST_CLOCK_PLL2_STAT_READY_Enum;

/* =======================================================  CAN1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK CAN1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CAN1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_CAN1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_CAN1_CLK_CLK_EN_Enum;

/* =======================================================  TIM1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM1_CLK_CLK_EN_Enum;

/* =======================================================  TIM2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM2_CLK_CLK_EN_Enum;

/* =======================================================  TIM3_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM3_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM3_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM3_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM3_CLK_CLK_EN_Enum;

/* =======================================================  TIM4_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK TIM4_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM4_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_TIM4_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_TIM4_CLK_CLK_EN_Enum;

/* ========================================================  ETH_CLK  ======================================================== */
/* =========================================  MDR_RST_CLOCK ETH_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLK_CLK_EN                                              */
  MDR_RST_CLOCK_ETH_CLK_CLK_EN_Off     = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_ETH_CLK_CLK_EN_On      = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_ETH_CLK_CLK_EN_Enum;

/* =========================================  MDR_RST_CLOCK ETH_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ETH_CLK_SELECT                                              */
  MDR_RST_CLOCK_ETH_CLK_SELECT_HSI     = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_ETH_CLK_SELECT_HSE0    = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_HSE1    = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_LSI     = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_ETH_CLK_SELECT_LSE     = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_ETH_CLK_SELECT_PLL0    = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_PLL1    = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_PLL2    = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_ETH_CLK_SELECT_MAX_CLK = 13,    /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_ETH_CLK_SELECT_Enum;

/* =======================================================  SPW1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SPW1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SPW1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SPW1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SPW1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SPW1_CLK_CLK_EN_Enum;

/* =======================================================  UART1_CLK  ======================================================= */
/* ========================================  MDR_RST_CLOCK UART1_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART1_CLK_CLK_EN                                            */
  MDR_RST_CLOCK_UART1_CLK_CLK_EN_Off   = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_UART1_CLK_CLK_EN_On    = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_UART1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK UART1_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART1_CLK_SELECT                                            */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSI   = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSE0  = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_HSE1  = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_LSI   = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_LSE   = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL0  = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL1  = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_PLL2  = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_UART1_CLK_SELECT_MAX_CLK = 13,  /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_UART1_CLK_SELECT_Enum;

/* =======================================================  UART2_CLK  ======================================================= */
/* ========================================  MDR_RST_CLOCK UART2_CLK CLK_EN [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART2_CLK_CLK_EN                                            */
  MDR_RST_CLOCK_UART2_CLK_CLK_EN_Off   = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_UART2_CLK_CLK_EN_On    = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_UART2_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK UART2_CLK SELECT [28..31]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART2_CLK_SELECT                                            */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSI   = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSE0  = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_HSE1  = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_LSI   = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_LSE   = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL0  = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL1  = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_PLL2  = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_UART2_CLK_SELECT_MAX_CLK = 13,  /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_UART2_CLK_SELECT_Enum;

/* =======================================================  SSP1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK SSP1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_SSP1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_SSP1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK SSP1_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP1_CLK_SELECT                                             */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_SSP1_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_SSP1_CLK_SELECT_Enum;

/* =======================================================  ADC1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK ADC1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_ADC1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_ADC1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_ADC1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK ADC1_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC1_CLK_SELECT                                             */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC1_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_ADC1_CLK_SELECT_Enum;

/* =======================================================  ADC2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK ADC2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_ADC2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_ADC2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_ADC2_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK ADC2_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC2_CLK_SELECT                                             */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_ADC2_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_ADC2_CLK_SELECT_Enum;

/* =======================================================  DAC1_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK DAC1_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_DAC1_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_DAC1_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_DAC1_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_DAC1_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK DAC1_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_DAC1_CLK_SELECT                                             */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC1_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_DAC1_CLK_SELECT_Enum;

/* =======================================================  DAC2_CLK  ======================================================== */
/* ========================================  MDR_RST_CLOCK DAC2_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_DAC2_CLK_CLK_EN                                             */
  MDR_RST_CLOCK_DAC2_CLK_CLK_EN_Off    = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_DAC2_CLK_CLK_EN_On     = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_DAC2_CLK_CLK_EN_Enum;

/* ========================================  MDR_RST_CLOCK DAC2_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_DAC2_CLK_SELECT                                             */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_HSI    = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_HSE0   = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_HSE1   = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_LSI    = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_LSE    = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_PLL0   = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_PLL1   = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_PLL2   = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_DAC2_CLK_SELECT_MAX_CLK = 13,   /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_DAC2_CLK_SELECT_Enum;

/* ========================================================  RTC_CLK  ======================================================== */
/* =========================================  MDR_RST_CLOCK RTC_CLK CLK_EN [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLK_CLK_EN                                              */
  MDR_RST_CLOCK_RTC_CLK_CLK_EN_Off     = 0,     /*!< Off : Clock Off                                                           */
  MDR_RST_CLOCK_RTC_CLK_CLK_EN_On      = 1,     /*!< On : Clock On                                                             */
} MDR_RST_CLOCK_RTC_CLK_CLK_EN_Enum;

/* =========================================  MDR_RST_CLOCK RTC_CLK SELECT [28..31]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLK_SELECT                                              */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSI     = 0,     /*!< HSI : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSE0    = 1,     /*!< HSE0 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_HSE1    = 2,     /*!< HSE1 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_LSI     = 3,     /*!< LSI : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_LSE     = 4,     /*!< LSE : Clock Source                                                        */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL0    = 5,     /*!< PLL0 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL1    = 6,     /*!< PLL1 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_PLL2    = 7,     /*!< PLL2 : Clock Source                                                       */
  MDR_RST_CLOCK_RTC_CLK_SELECT_MAX_CLK = 13,    /*!< MAX_CLK : Clock Source                                                    */
} MDR_RST_CLOCK_RTC_CLK_SELECT_Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  REG  ========================================================== */
/* ==========================================================  KEY  ========================================================== */
/* ======================================================  REG_60_TMR0  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR0 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_FPOR                                                  */
  MDR_BKP_REG_60_TMR0_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR0_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR0_FPOR_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 S_UccReset [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_UccReset                                            */
  MDR_BKP_REG_60_TMR0_S_UccReset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_UccReset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_UccReset_Enum;

/* ==========================================  MDR_BKP REG_60_TMR0 S_RSTn0 [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR0_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 S_FT_Reset [10..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR0_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR0 S_WDT_Reset [11..11]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR0_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_WDT_Reset_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 S_RSTn1 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR0_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 S_OVRSTn [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_OVRSTn                                              */
  MDR_BKP_REG_60_TMR0_S_OVRSTn_Off     = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_OVRSTn_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_OVRSTn_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 S_SYSRSTn [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR0_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_S_SYSRSTn_Enum;

/* =======================================  MDR_BKP REG_60_TMR0 JTAG_Enable [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR0_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR0_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR0_JTAG_Enable_Enum;

/* =====================================  MDR_BKP REG_60_TMR0 LimEn_LDO_DUcc0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0                                       */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc0_Enum;

/* =====================================  MDR_BKP REG_60_TMR0 LimEn_LDO_DUcc1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1                                       */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc1_Enum;

/* =====================================  MDR_BKP REG_60_TMR0 LimEn_LDO_DUcc2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2                                       */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc2_Enum;

/* =====================================  MDR_BKP REG_60_TMR0 LimEn_LDO_DUcc3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3                                       */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_DUcc3_Enum;

/* ======================================  MDR_BKP REG_60_TMR0 LimEn_LDO_BUcc [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc                                        */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_Off = 0,   /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_On = 1,    /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_BUcc_Enum;

/* ======================================  MDR_BKP REG_60_TMR0 LimEn_LDO_PLL [21..21]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL                                         */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_LimEn_LDO_PLL_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR0_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR0 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR0_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR0_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR0_ERR_REG63x_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 PORSTn_En [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_PORSTn_En                                             */
  MDR_BKP_REG_60_TMR0_PORSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR0_PORSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR0_PORSTn_En_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 OVRSTn_En [29..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_OVRSTn_En                                             */
  MDR_BKP_REG_60_TMR0_OVRSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR0_OVRSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR0_OVRSTn_En_Enum;

/* =========================================  MDR_BKP REG_60_TMR0 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR0_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR0_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR0_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR0 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR0_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR0_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR0  ====================================================== */
/* ========================================  MDR_BKP REG_61_TMR0 LDO0_SRILow [0..2]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO0_SRILow                                           */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR0_LDO0_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR0_LDO0_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO0_Trim [3..5]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO0_Trim                                             */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR0_LDO0_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR0_LDO0_Trim_Enum;

/* ==========================================  MDR_BKP REG_61_TMR0 LDO0_En [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO0_En                                               */
  MDR_BKP_REG_61_TMR0_LDO0_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR0_LDO0_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR0_LDO0_En_Enum;

/* ==========================================  MDR_BKP REG_61_TMR0 LDO0_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO0_RDY                                              */
  MDR_BKP_REG_61_TMR0_LDO0_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR0_LDO0_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR0_LDO0_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 LDO1_SRILow [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO1_SRILow                                           */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR0_LDO1_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR0_LDO1_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 LDO1_Trim [11..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO1_Trim                                             */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR0_LDO1_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR0_LDO1_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO1_En [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO1_En                                               */
  MDR_BKP_REG_61_TMR0_LDO1_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR0_LDO1_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR0_LDO1_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO1_RDY [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO1_RDY                                              */
  MDR_BKP_REG_61_TMR0_LDO1_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR0_LDO1_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR0_LDO1_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 LDO2_SRILow [16..18]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO2_SRILow                                           */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR0_LDO2_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR0_LDO2_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 LDO2_Trim [19..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO2_Trim                                             */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR0_LDO2_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR0_LDO2_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO2_En [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO2_En                                               */
  MDR_BKP_REG_61_TMR0_LDO2_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR0_LDO2_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR0_LDO2_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO2_RDY [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO2_RDY                                              */
  MDR_BKP_REG_61_TMR0_LDO2_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR0_LDO2_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR0_LDO2_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR0 LDO3_SRILow [24..26]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO3_SRILow                                           */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR0_LDO3_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR0_LDO3_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR0 LDO3_Trim [27..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO3_Trim                                             */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR0_LDO3_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR0_LDO3_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO3_En [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO3_En                                               */
  MDR_BKP_REG_61_TMR0_LDO3_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR0_LDO3_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR0_LDO3_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR0 LDO3_RDY [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR0_LDO3_RDY                                              */
  MDR_BKP_REG_61_TMR0_LDO3_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR0_LDO3_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR0_LDO3_RDY_Enum;

/* ======================================================  REG_62_TMR0  ====================================================== */
/* ======================================  MDR_BKP REG_62_TMR0 LDO_BUcc_SRILow [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow                                       */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~400uA                                          */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge30MHz = 1,/*!< ge30MHz : Extra_I about ~450uA                                          */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge50MHz = 2,/*!< ge50MHz : Extra_I about ~550uA                                          */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge100MHz = 3,/*!< ge100MHz : Extra_I about ~650uA                                        */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge1MHz = 4,/*!< ge1MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge500KHz = 5,/*!< ge500KHz : Extra_I about ~200uA                                        */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge100KHz = 6,/*!< ge100KHz : Extra_I about ~100uA                                        */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_ge10KHz = 7,/*!< ge10KHz : Extra_I about ~50uA                                           */
} MDR_BKP_REG_62_TMR0_LDO_BUcc_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 LDO_BUcc_Trim [3..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim                                         */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_add_0v01 = 0,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_add_0v05 = 1,/*!< add_0v05 : LD0 extra voltage +0.05V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_add_0v1 = 2,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_add_0v15 = 3,/*!< add_0v15 : LD0 extra voltage +0.15V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_sub_0v05 = 5,/*!< sub_0v05 : LD0 extra voltage -0.05V                                      */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_sub_0v015 = 6,/*!< sub_0v015 : LD0 extra voltage -0.10V                                    */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_sub_0v15 = 7,/*!< sub_0v15 : LD0 extra voltage -0.15V                                      */
} MDR_BKP_REG_62_TMR0_LDO_BUcc_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR0 LDO_BUcc_En [6..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_BUcc_En                                           */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_En_On   = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_En_Off  = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_62_TMR0_LDO_BUcc_En_Enum;

/* ========================================  MDR_BKP REG_62_TMR0 LDO_BUcc_RDY [7..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY                                          */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_NotReady = 0,/*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_Ready = 1,   /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR0_LDO_BUcc_RDY_Enum;

/* ======================================  MDR_BKP REG_62_TMR0 LDO_PLL_SRILow [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow                                        */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~400uA                                           */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge30MHz = 1,/*!< ge30MHz : Extra_I about ~450uA                                           */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge50MHz = 2,/*!< ge50MHz : Extra_I about ~550uA                                           */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge100MHz = 3,/*!< ge100MHz : Extra_I about ~650uA                                         */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge1MHz = 4,/*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge500KHz = 5,/*!< ge500KHz : Extra_I about ~200uA                                         */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge100KHz = 6,/*!< ge100KHz : Extra_I about ~100uA                                         */
  MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_ge10KHz = 7,/*!< ge10KHz : Extra_I about ~50uA                                            */
} MDR_BKP_REG_62_TMR0_LDO_PLL_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 LDO_PLL_Trim [11..13]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_PLL_Trim                                          */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_add_0v01 = 0,/*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_add_0v05 = 1,/*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_add_0v1 = 2, /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_add_0v15 = 3,/*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_sub_0v05 = 5,/*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_sub_0v015 = 6,/*!< sub_0v015 : LD0 extra voltage -0.10V                                     */
  MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_sub_0v15 = 7,/*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_62_TMR0_LDO_PLL_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR0 LDO_PLL_En [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_PLL_En                                            */
  MDR_BKP_REG_62_TMR0_LDO_PLL_En_On    = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_62_TMR0_LDO_PLL_En_Off   = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_62_TMR0_LDO_PLL_En_Enum;

/* =======================================  MDR_BKP REG_62_TMR0 LDO_PLL_RDY [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_LDO_PLL_RDY                                           */
  MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_NotReady = 0, /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_Ready = 1,    /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR0_LDO_PLL_RDY_Enum;

/* =========================================  MDR_BKP REG_62_TMR0 Trim_Ref [28..30]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR0_Trim_Ref                                              */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr0     = 0,     /*!< Tr0 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr1     = 1,     /*!< Tr1 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr2     = 2,     /*!< Tr2 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr3     = 3,     /*!< Tr3 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr4     = 4,     /*!< Tr4 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr5     = 5,     /*!< Tr5 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr6     = 6,     /*!< Tr6 : Trim                                                                */
  MDR_BKP_REG_62_TMR0_Trim_Ref_Tr7     = 7,     /*!< Tr7 : Trim                                                                */
} MDR_BKP_REG_62_TMR0_Trim_Ref_Enum;

/* ======================================================  REG_63_TMR0  ====================================================== */
/* ===========================================  MDR_BKP REG_63_TMR0 LSE_On [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_On                                                */
  MDR_BKP_REG_63_TMR0_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 LSE_BYP [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR0_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 RTC_Sel [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_RTC_Sel                                               */
  MDR_BKP_REG_63_TMR0_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_63_TMR0_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_63_TMR0_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_63_TMR0_RTC_Sel_Enum;

/* ===========================================  MDR_BKP REG_63_TMR0 RTC_En [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_RTC_En                                                */
  MDR_BKP_REG_63_TMR0_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_RTC_En_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 LSE_RDY [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR0_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR0 LSE_FilterEn [14..14]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSE_FilterEn                                          */
  MDR_BKP_REG_63_TMR0_LSE_FilterEn_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSE_FilterEn_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSE_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 LSI_On [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_On                                                */
  MDR_BKP_REG_63_TMR0_LSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 LSI_Trim [16..20]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_Trim                                              */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max8    = 0,     /*!< Max8 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max7    = 1,     /*!< Max7 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max6    = 2,     /*!< Max6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max5    = 3,     /*!< Max5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max4    = 4,     /*!< Max4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max3    = 5,     /*!< Max3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max2    = 6,     /*!< Max2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Max1    = 7,     /*!< Max1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Typical = 8,     /*!< Typical : LSI Default                                                     */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min1    = 9,     /*!< Min1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min2    = 10,    /*!< Min2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min3    = 11,    /*!< Min3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min4    = 12,    /*!< Min4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min5    = 13,    /*!< Min5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min6    = 14,    /*!< Min6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR0_LSI_Trim_Min7    = 15,    /*!< Min7 : LSI Trim                                                           */
} MDR_BKP_REG_63_TMR0_LSI_Trim_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 LSI_RDY [21..21]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_LSI_RDY                                               */
  MDR_BKP_REG_63_TMR0_LSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_LSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_LSI_RDY_Enum;

/* ==========================================  MDR_BKP REG_63_TMR0 HSI_On [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSI_On                                                */
  MDR_BKP_REG_63_TMR0_HSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 HSI_RDY [23..23]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_HSI_RDY                                               */
  MDR_BKP_REG_63_TMR0_HSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_HSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_HSI_RDY_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 STANDBY [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_STANDBY                                               */
  MDR_BKP_REG_63_TMR0_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_63_TMR0_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_63_TMR0_STANDBY_Enum;

/* =========================================  MDR_BKP REG_63_TMR0 RTC_RST [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR0_RTC_RST                                               */
  MDR_BKP_REG_63_TMR0_RTC_RST_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR0_RTC_RST_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR0_RTC_RST_Enum;

/* ======================================================  REG_60_TMR1  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR1 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_FPOR                                                  */
  MDR_BKP_REG_60_TMR1_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR1_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR1_FPOR_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 S_UccReset [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_UccReset                                            */
  MDR_BKP_REG_60_TMR1_S_UccReset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_UccReset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_UccReset_Enum;

/* ==========================================  MDR_BKP REG_60_TMR1 S_RSTn0 [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR1_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 S_FT_Reset [10..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR1_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR1 S_WDT_Reset [11..11]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR1_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_WDT_Reset_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 S_RSTn1 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR1_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 S_OVRSTn [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_OVRSTn                                              */
  MDR_BKP_REG_60_TMR1_S_OVRSTn_Off     = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_OVRSTn_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_OVRSTn_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 S_SYSRSTn [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR1_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_S_SYSRSTn_Enum;

/* =======================================  MDR_BKP REG_60_TMR1 JTAG_Enable [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR1_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR1_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR1_JTAG_Enable_Enum;

/* =====================================  MDR_BKP REG_60_TMR1 LimEn_LDO_DUcc0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0                                       */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc0_Enum;

/* =====================================  MDR_BKP REG_60_TMR1 LimEn_LDO_DUcc1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1                                       */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc1_Enum;

/* =====================================  MDR_BKP REG_60_TMR1 LimEn_LDO_DUcc2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2                                       */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc2_Enum;

/* =====================================  MDR_BKP REG_60_TMR1 LimEn_LDO_DUcc3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3                                       */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_DUcc3_Enum;

/* ======================================  MDR_BKP REG_60_TMR1 LimEn_LDO_BUcc [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc                                        */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_Off = 0,   /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_On = 1,    /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_BUcc_Enum;

/* ======================================  MDR_BKP REG_60_TMR1 LimEn_LDO_PLL [21..21]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL                                         */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_LimEn_LDO_PLL_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR1_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR1 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR1_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR1_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR1_ERR_REG63x_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 PORSTn_En [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_PORSTn_En                                             */
  MDR_BKP_REG_60_TMR1_PORSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR1_PORSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR1_PORSTn_En_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 OVRSTn_En [29..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_OVRSTn_En                                             */
  MDR_BKP_REG_60_TMR1_OVRSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR1_OVRSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR1_OVRSTn_En_Enum;

/* =========================================  MDR_BKP REG_60_TMR1 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR1_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR1_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR1_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR1 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR1_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR1_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR1  ====================================================== */
/* ========================================  MDR_BKP REG_61_TMR1 LDO0_SRILow [0..2]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO0_SRILow                                           */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR1_LDO0_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR1_LDO0_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO0_Trim [3..5]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO0_Trim                                             */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR1_LDO0_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR1_LDO0_Trim_Enum;

/* ==========================================  MDR_BKP REG_61_TMR1 LDO0_En [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO0_En                                               */
  MDR_BKP_REG_61_TMR1_LDO0_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR1_LDO0_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR1_LDO0_En_Enum;

/* ==========================================  MDR_BKP REG_61_TMR1 LDO0_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO0_RDY                                              */
  MDR_BKP_REG_61_TMR1_LDO0_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR1_LDO0_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR1_LDO0_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 LDO1_SRILow [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO1_SRILow                                           */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR1_LDO1_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR1_LDO1_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 LDO1_Trim [11..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO1_Trim                                             */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR1_LDO1_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR1_LDO1_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO1_En [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO1_En                                               */
  MDR_BKP_REG_61_TMR1_LDO1_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR1_LDO1_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR1_LDO1_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO1_RDY [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO1_RDY                                              */
  MDR_BKP_REG_61_TMR1_LDO1_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR1_LDO1_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR1_LDO1_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 LDO2_SRILow [16..18]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO2_SRILow                                           */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR1_LDO2_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR1_LDO2_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 LDO2_Trim [19..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO2_Trim                                             */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR1_LDO2_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR1_LDO2_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO2_En [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO2_En                                               */
  MDR_BKP_REG_61_TMR1_LDO2_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR1_LDO2_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR1_LDO2_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO2_RDY [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO2_RDY                                              */
  MDR_BKP_REG_61_TMR1_LDO2_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR1_LDO2_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR1_LDO2_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR1 LDO3_SRILow [24..26]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO3_SRILow                                           */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR1_LDO3_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR1_LDO3_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR1 LDO3_Trim [27..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO3_Trim                                             */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR1_LDO3_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR1_LDO3_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO3_En [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO3_En                                               */
  MDR_BKP_REG_61_TMR1_LDO3_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR1_LDO3_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR1_LDO3_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR1 LDO3_RDY [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR1_LDO3_RDY                                              */
  MDR_BKP_REG_61_TMR1_LDO3_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR1_LDO3_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR1_LDO3_RDY_Enum;

/* ======================================================  REG_62_TMR1  ====================================================== */
/* ======================================  MDR_BKP REG_62_TMR1 LDO_BUcc_SRILow [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow                                       */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~400uA                                          */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge30MHz = 1,/*!< ge30MHz : Extra_I about ~450uA                                          */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge50MHz = 2,/*!< ge50MHz : Extra_I about ~550uA                                          */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge100MHz = 3,/*!< ge100MHz : Extra_I about ~650uA                                        */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge1MHz = 4,/*!< ge1MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge500KHz = 5,/*!< ge500KHz : Extra_I about ~200uA                                        */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge100KHz = 6,/*!< ge100KHz : Extra_I about ~100uA                                        */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_ge10KHz = 7,/*!< ge10KHz : Extra_I about ~50uA                                           */
} MDR_BKP_REG_62_TMR1_LDO_BUcc_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 LDO_BUcc_Trim [3..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim                                         */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_add_0v01 = 0,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_add_0v05 = 1,/*!< add_0v05 : LD0 extra voltage +0.05V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_add_0v1 = 2,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_add_0v15 = 3,/*!< add_0v15 : LD0 extra voltage +0.15V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_sub_0v05 = 5,/*!< sub_0v05 : LD0 extra voltage -0.05V                                      */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_sub_0v015 = 6,/*!< sub_0v015 : LD0 extra voltage -0.10V                                    */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_sub_0v15 = 7,/*!< sub_0v15 : LD0 extra voltage -0.15V                                      */
} MDR_BKP_REG_62_TMR1_LDO_BUcc_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR1 LDO_BUcc_En [6..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_BUcc_En                                           */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_En_On   = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_En_Off  = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_62_TMR1_LDO_BUcc_En_Enum;

/* ========================================  MDR_BKP REG_62_TMR1 LDO_BUcc_RDY [7..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY                                          */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_NotReady = 0,/*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_Ready = 1,   /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR1_LDO_BUcc_RDY_Enum;

/* ======================================  MDR_BKP REG_62_TMR1 LDO_PLL_SRILow [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow                                        */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~400uA                                           */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge30MHz = 1,/*!< ge30MHz : Extra_I about ~450uA                                           */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge50MHz = 2,/*!< ge50MHz : Extra_I about ~550uA                                           */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge100MHz = 3,/*!< ge100MHz : Extra_I about ~650uA                                         */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge1MHz = 4,/*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge500KHz = 5,/*!< ge500KHz : Extra_I about ~200uA                                         */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge100KHz = 6,/*!< ge100KHz : Extra_I about ~100uA                                         */
  MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_ge10KHz = 7,/*!< ge10KHz : Extra_I about ~50uA                                            */
} MDR_BKP_REG_62_TMR1_LDO_PLL_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 LDO_PLL_Trim [11..13]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_PLL_Trim                                          */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_add_0v01 = 0,/*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_add_0v05 = 1,/*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_add_0v1 = 2, /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_add_0v15 = 3,/*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_sub_0v05 = 5,/*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_sub_0v015 = 6,/*!< sub_0v015 : LD0 extra voltage -0.10V                                     */
  MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_sub_0v15 = 7,/*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_62_TMR1_LDO_PLL_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR1 LDO_PLL_En [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_PLL_En                                            */
  MDR_BKP_REG_62_TMR1_LDO_PLL_En_On    = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_62_TMR1_LDO_PLL_En_Off   = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_62_TMR1_LDO_PLL_En_Enum;

/* =======================================  MDR_BKP REG_62_TMR1 LDO_PLL_RDY [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_LDO_PLL_RDY                                           */
  MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_NotReady = 0, /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_Ready = 1,    /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR1_LDO_PLL_RDY_Enum;

/* =========================================  MDR_BKP REG_62_TMR1 Trim_Ref [28..30]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR1_Trim_Ref                                              */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr0     = 0,     /*!< Tr0 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr1     = 1,     /*!< Tr1 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr2     = 2,     /*!< Tr2 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr3     = 3,     /*!< Tr3 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr4     = 4,     /*!< Tr4 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr5     = 5,     /*!< Tr5 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr6     = 6,     /*!< Tr6 : Trim                                                                */
  MDR_BKP_REG_62_TMR1_Trim_Ref_Tr7     = 7,     /*!< Tr7 : Trim                                                                */
} MDR_BKP_REG_62_TMR1_Trim_Ref_Enum;

/* ======================================================  REG_63_TMR1  ====================================================== */
/* ===========================================  MDR_BKP REG_63_TMR1 LSE_On [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_On                                                */
  MDR_BKP_REG_63_TMR1_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 LSE_BYP [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR1_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 RTC_Sel [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_RTC_Sel                                               */
  MDR_BKP_REG_63_TMR1_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_63_TMR1_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_63_TMR1_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_63_TMR1_RTC_Sel_Enum;

/* ===========================================  MDR_BKP REG_63_TMR1 RTC_En [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_RTC_En                                                */
  MDR_BKP_REG_63_TMR1_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_RTC_En_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 LSE_RDY [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR1_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR1 LSE_FilterEn [14..14]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSE_FilterEn                                          */
  MDR_BKP_REG_63_TMR1_LSE_FilterEn_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSE_FilterEn_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSE_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 LSI_On [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_On                                                */
  MDR_BKP_REG_63_TMR1_LSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 LSI_Trim [16..20]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_Trim                                              */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max8    = 0,     /*!< Max8 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max7    = 1,     /*!< Max7 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max6    = 2,     /*!< Max6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max5    = 3,     /*!< Max5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max4    = 4,     /*!< Max4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max3    = 5,     /*!< Max3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max2    = 6,     /*!< Max2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Max1    = 7,     /*!< Max1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Typical = 8,     /*!< Typical : LSI Default                                                     */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min1    = 9,     /*!< Min1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min2    = 10,    /*!< Min2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min3    = 11,    /*!< Min3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min4    = 12,    /*!< Min4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min5    = 13,    /*!< Min5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min6    = 14,    /*!< Min6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR1_LSI_Trim_Min7    = 15,    /*!< Min7 : LSI Trim                                                           */
} MDR_BKP_REG_63_TMR1_LSI_Trim_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 LSI_RDY [21..21]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_LSI_RDY                                               */
  MDR_BKP_REG_63_TMR1_LSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_LSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_LSI_RDY_Enum;

/* ==========================================  MDR_BKP REG_63_TMR1 HSI_On [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSI_On                                                */
  MDR_BKP_REG_63_TMR1_HSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 HSI_RDY [23..23]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_HSI_RDY                                               */
  MDR_BKP_REG_63_TMR1_HSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_HSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_HSI_RDY_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 STANDBY [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_STANDBY                                               */
  MDR_BKP_REG_63_TMR1_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_63_TMR1_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_63_TMR1_STANDBY_Enum;

/* =========================================  MDR_BKP REG_63_TMR1 RTC_RST [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR1_RTC_RST                                               */
  MDR_BKP_REG_63_TMR1_RTC_RST_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR1_RTC_RST_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR1_RTC_RST_Enum;

/* ======================================================  REG_60_TMR2  ====================================================== */
/* ============================================  MDR_BKP REG_60_TMR2 FPOR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_FPOR                                                  */
  MDR_BKP_REG_60_TMR2_FPOR_Bootloader  = 0,     /*!< Bootloader : Bootloader active                                            */
  MDR_BKP_REG_60_TMR2_FPOR_Completed   = 1,     /*!< Completed : Bootloader completed                                          */
} MDR_BKP_REG_60_TMR2_FPOR_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 S_UccReset [8..8]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_UccReset                                            */
  MDR_BKP_REG_60_TMR2_S_UccReset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_UccReset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_UccReset_Enum;

/* ==========================================  MDR_BKP REG_60_TMR2 S_RSTn0 [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_RSTn0                                               */
  MDR_BKP_REG_60_TMR2_S_RSTn0_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_RSTn0_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_RSTn0_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 S_FT_Reset [10..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_FT_Reset                                            */
  MDR_BKP_REG_60_TMR2_S_FT_Reset_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_FT_Reset_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_FT_Reset_Enum;

/* =======================================  MDR_BKP REG_60_TMR2 S_WDT_Reset [11..11]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_WDT_Reset                                           */
  MDR_BKP_REG_60_TMR2_S_WDT_Reset_Off  = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_WDT_Reset_On   = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_WDT_Reset_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 S_RSTn1 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_RSTn1                                               */
  MDR_BKP_REG_60_TMR2_S_RSTn1_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_RSTn1_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_RSTn1_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 S_OVRSTn [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_OVRSTn                                              */
  MDR_BKP_REG_60_TMR2_S_OVRSTn_Off     = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_OVRSTn_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_OVRSTn_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 S_SYSRSTn [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_S_SYSRSTn                                             */
  MDR_BKP_REG_60_TMR2_S_SYSRSTn_Off    = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_S_SYSRSTn_On     = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_S_SYSRSTn_Enum;

/* =======================================  MDR_BKP REG_60_TMR2 JTAG_Enable [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_JTAG_Enable                                           */
  MDR_BKP_REG_60_TMR2_JTAG_Enable_On   = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR2_JTAG_Enable_Off  = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR2_JTAG_Enable_Enum;

/* =====================================  MDR_BKP REG_60_TMR2 LimEn_LDO_DUcc0 [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0                                       */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc0_Enum;

/* =====================================  MDR_BKP REG_60_TMR2 LimEn_LDO_DUcc1 [17..17]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1                                       */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc1_Enum;

/* =====================================  MDR_BKP REG_60_TMR2 LimEn_LDO_DUcc2 [18..18]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2                                       */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc2_Enum;

/* =====================================  MDR_BKP REG_60_TMR2 LimEn_LDO_DUcc3 [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3                                       */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_Off = 0,  /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_On = 1,   /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_DUcc3_Enum;

/* ======================================  MDR_BKP REG_60_TMR2 LimEn_LDO_BUcc [20..20]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc                                        */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_Off = 0,   /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_On = 1,    /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_BUcc_Enum;

/* ======================================  MDR_BKP REG_60_TMR2 LimEn_LDO_PLL [21..21]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL                                         */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_Off = 0,    /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_On = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_LimEn_LDO_PLL_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_REG60x [25..25]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG60x                                            */
  MDR_BKP_REG_60_TMR2_ERR_REG60x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG60x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG60x_Enum;

/* ======================================  MDR_BKP REG_60_TMR2 ERR_REG61x_62x [26..26]  ====================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG61x_62x                                        */
  MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Off = 0,   /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_On = 1,    /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG61x_62x_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_REG63x [27..27]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_REG63x                                            */
  MDR_BKP_REG_60_TMR2_ERR_REG63x_Off   = 0,     /*!< Off : Event Inactive                                                      */
  MDR_BKP_REG_60_TMR2_ERR_REG63x_On    = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_REG_60_TMR2_ERR_REG63x_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 PORSTn_En [28..28]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_PORSTn_En                                             */
  MDR_BKP_REG_60_TMR2_PORSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR2_PORSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR2_PORSTn_En_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 OVRSTn_En [29..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_OVRSTn_En                                             */
  MDR_BKP_REG_60_TMR2_OVRSTn_En_On     = 0,     /*!< On : Enabled                                                              */
  MDR_BKP_REG_60_TMR2_OVRSTn_En_Off    = 1,     /*!< Off : Disabled                                                            */
} MDR_BKP_REG_60_TMR2_OVRSTn_En_Enum;

/* =========================================  MDR_BKP REG_60_TMR2 CLR_ERR [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_CLR_ERR                                               */
  MDR_BKP_REG_60_TMR2_CLR_ERR_Inactive = 0,     /*!< Inactive : Disable                                                        */
  MDR_BKP_REG_60_TMR2_CLR_ERR_Clear    = 1,     /*!< Clear : Clear Errors                                                      */
} MDR_BKP_REG_60_TMR2_CLR_ERR_Enum;

/* ========================================  MDR_BKP REG_60_TMR2 ERR_IRQ_EN [31..31]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_60_TMR2_ERR_IRQ_EN                                            */
  MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Off   = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_On    = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_60_TMR2_ERR_IRQ_EN_Enum;

/* ======================================================  REG_61_TMR2  ====================================================== */
/* ========================================  MDR_BKP REG_61_TMR2 LDO0_SRILow [0..2]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO0_SRILow                                           */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR2_LDO0_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR2_LDO0_SRILow_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO0_Trim [3..5]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO0_Trim                                             */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR2_LDO0_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR2_LDO0_Trim_Enum;

/* ==========================================  MDR_BKP REG_61_TMR2 LDO0_En [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO0_En                                               */
  MDR_BKP_REG_61_TMR2_LDO0_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR2_LDO0_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR2_LDO0_En_Enum;

/* ==========================================  MDR_BKP REG_61_TMR2 LDO0_RDY [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO0_RDY                                              */
  MDR_BKP_REG_61_TMR2_LDO0_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR2_LDO0_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR2_LDO0_RDY_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 LDO1_SRILow [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO1_SRILow                                           */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR2_LDO1_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR2_LDO1_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 LDO1_Trim [11..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO1_Trim                                             */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR2_LDO1_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR2_LDO1_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO1_En [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO1_En                                               */
  MDR_BKP_REG_61_TMR2_LDO1_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR2_LDO1_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR2_LDO1_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO1_RDY [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO1_RDY                                              */
  MDR_BKP_REG_61_TMR2_LDO1_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR2_LDO1_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR2_LDO1_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 LDO2_SRILow [16..18]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO2_SRILow                                           */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR2_LDO2_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR2_LDO2_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 LDO2_Trim [19..21]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO2_Trim                                             */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR2_LDO2_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR2_LDO2_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO2_En [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO2_En                                               */
  MDR_BKP_REG_61_TMR2_LDO2_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR2_LDO2_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR2_LDO2_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO2_RDY [23..23]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO2_RDY                                              */
  MDR_BKP_REG_61_TMR2_LDO2_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR2_LDO2_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR2_LDO2_RDY_Enum;

/* =======================================  MDR_BKP REG_61_TMR2 LDO3_SRILow [24..26]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO3_SRILow                                           */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge10MHz = 0,  /*!< ge10MHz : Extra_I about ~400uA                                            */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge30MHz = 1,  /*!< ge30MHz : Extra_I about ~450uA                                            */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge50MHz = 2,  /*!< ge50MHz : Extra_I about ~550uA                                            */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge100MHz = 3, /*!< ge100MHz : Extra_I about ~650uA                                           */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge1MHz = 4,   /*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge500KHz = 5, /*!< ge500KHz : Extra_I about ~200uA                                           */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge100KHz = 6, /*!< ge100KHz : Extra_I about ~100uA                                           */
  MDR_BKP_REG_61_TMR2_LDO3_SRILow_ge10KHz = 7,  /*!< ge10KHz : Extra_I about ~50uA                                             */
} MDR_BKP_REG_61_TMR2_LDO3_SRILow_Enum;

/* ========================================  MDR_BKP REG_61_TMR2 LDO3_Trim [27..29]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO3_Trim                                             */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_add_0v01 = 0,   /*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_add_0v05 = 1,   /*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_add_0v1 = 2,    /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_add_0v15 = 3,   /*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_sub_0v01 = 4,   /*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_sub_0v05 = 5,   /*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_sub_0v015 = 6,  /*!< sub_0v015 : LD0 extra voltage -0.10V                                      */
  MDR_BKP_REG_61_TMR2_LDO3_Trim_sub_0v15 = 7,   /*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_61_TMR2_LDO3_Trim_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO3_En [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO3_En                                               */
  MDR_BKP_REG_61_TMR2_LDO3_En_On       = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_61_TMR2_LDO3_En_Off      = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_61_TMR2_LDO3_En_Enum;

/* =========================================  MDR_BKP REG_61_TMR2 LDO3_RDY [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_61_TMR2_LDO3_RDY                                              */
  MDR_BKP_REG_61_TMR2_LDO3_RDY_NotReady = 0,    /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_61_TMR2_LDO3_RDY_Ready   = 1,     /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_61_TMR2_LDO3_RDY_Enum;

/* ======================================================  REG_62_TMR2  ====================================================== */
/* ======================================  MDR_BKP REG_62_TMR2 LDO_BUcc_SRILow [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow                                       */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~400uA                                          */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge30MHz = 1,/*!< ge30MHz : Extra_I about ~450uA                                          */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge50MHz = 2,/*!< ge50MHz : Extra_I about ~550uA                                          */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge100MHz = 3,/*!< ge100MHz : Extra_I about ~650uA                                        */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge1MHz = 4,/*!< ge1MHz : Extra_I about ~300uA                                            */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge500KHz = 5,/*!< ge500KHz : Extra_I about ~200uA                                        */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge100KHz = 6,/*!< ge100KHz : Extra_I about ~100uA                                        */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_ge10KHz = 7,/*!< ge10KHz : Extra_I about ~50uA                                           */
} MDR_BKP_REG_62_TMR2_LDO_BUcc_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 LDO_BUcc_Trim [3..5]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim                                         */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_add_0v01 = 0,/*!< add_0v01 : LD0 extra voltage +0.01V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_add_0v05 = 1,/*!< add_0v05 : LD0 extra voltage +0.05V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_add_0v1 = 2,/*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_add_0v15 = 3,/*!< add_0v15 : LD0 extra voltage +0.15V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_sub_0v05 = 5,/*!< sub_0v05 : LD0 extra voltage -0.05V                                      */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_sub_0v015 = 6,/*!< sub_0v015 : LD0 extra voltage -0.10V                                    */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_sub_0v15 = 7,/*!< sub_0v15 : LD0 extra voltage -0.15V                                      */
} MDR_BKP_REG_62_TMR2_LDO_BUcc_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR2 LDO_BUcc_En [6..6]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_BUcc_En                                           */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_En_On   = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_En_Off  = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_62_TMR2_LDO_BUcc_En_Enum;

/* ========================================  MDR_BKP REG_62_TMR2 LDO_BUcc_RDY [7..7]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY                                          */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_NotReady = 0,/*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_Ready = 1,   /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR2_LDO_BUcc_RDY_Enum;

/* ======================================  MDR_BKP REG_62_TMR2 LDO_PLL_SRILow [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow                                        */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge10MHz = 0,/*!< ge10MHz : Extra_I about ~400uA                                           */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge30MHz = 1,/*!< ge30MHz : Extra_I about ~450uA                                           */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge50MHz = 2,/*!< ge50MHz : Extra_I about ~550uA                                           */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge100MHz = 3,/*!< ge100MHz : Extra_I about ~650uA                                         */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge1MHz = 4,/*!< ge1MHz : Extra_I about ~300uA                                             */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge500KHz = 5,/*!< ge500KHz : Extra_I about ~200uA                                         */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge100KHz = 6,/*!< ge100KHz : Extra_I about ~100uA                                         */
  MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_ge10KHz = 7,/*!< ge10KHz : Extra_I about ~50uA                                            */
} MDR_BKP_REG_62_TMR2_LDO_PLL_SRILow_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 LDO_PLL_Trim [11..13]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_PLL_Trim                                          */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_add_0v01 = 0,/*!< add_0v01 : LD0 extra voltage +0.01V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_add_0v05 = 1,/*!< add_0v05 : LD0 extra voltage +0.05V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_add_0v1 = 2, /*!< add_0v1 : LD0 extra voltage +0.1V                                         */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_add_0v15 = 3,/*!< add_0v15 : LD0 extra voltage +0.15V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_sub_0v01 = 4,/*!< sub_0v01 : LD0 extra voltage -0.01V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_sub_0v05 = 5,/*!< sub_0v05 : LD0 extra voltage -0.05V                                       */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_sub_0v015 = 6,/*!< sub_0v015 : LD0 extra voltage -0.10V                                     */
  MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_sub_0v15 = 7,/*!< sub_0v15 : LD0 extra voltage -0.15V                                       */
} MDR_BKP_REG_62_TMR2_LDO_PLL_Trim_Enum;

/* ========================================  MDR_BKP REG_62_TMR2 LDO_PLL_En [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_PLL_En                                            */
  MDR_BKP_REG_62_TMR2_LDO_PLL_En_On    = 0,     /*!< On : Enable                                                               */
  MDR_BKP_REG_62_TMR2_LDO_PLL_En_Off   = 1,     /*!< Off : Disable                                                             */
} MDR_BKP_REG_62_TMR2_LDO_PLL_En_Enum;

/* =======================================  MDR_BKP REG_62_TMR2 LDO_PLL_RDY [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_LDO_PLL_RDY                                           */
  MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_NotReady = 0, /*!< NotReady : DUcc not ready                                                 */
  MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_Ready = 1,    /*!< Ready : DUcc ready                                                        */
} MDR_BKP_REG_62_TMR2_LDO_PLL_RDY_Enum;

/* =========================================  MDR_BKP REG_62_TMR2 Trim_Ref [28..30]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_62_TMR2_Trim_Ref                                              */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr0     = 0,     /*!< Tr0 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr1     = 1,     /*!< Tr1 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr2     = 2,     /*!< Tr2 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr3     = 3,     /*!< Tr3 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr4     = 4,     /*!< Tr4 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr5     = 5,     /*!< Tr5 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr6     = 6,     /*!< Tr6 : Trim                                                                */
  MDR_BKP_REG_62_TMR2_Trim_Ref_Tr7     = 7,     /*!< Tr7 : Trim                                                                */
} MDR_BKP_REG_62_TMR2_Trim_Ref_Enum;

/* ======================================================  REG_63_TMR2  ====================================================== */
/* ===========================================  MDR_BKP REG_63_TMR2 LSE_On [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_On                                                */
  MDR_BKP_REG_63_TMR2_LSE_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_On_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 LSE_BYP [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_BYP                                               */
  MDR_BKP_REG_63_TMR2_LSE_BYP_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_BYP_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_BYP_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 RTC_Sel [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_RTC_Sel                                               */
  MDR_BKP_REG_63_TMR2_RTC_Sel_LSI      = 0,     /*!< LSI : LSI Clock                                                           */
  MDR_BKP_REG_63_TMR2_RTC_Sel_LSE      = 1,     /*!< LSE : LSE Clock                                                           */
  MDR_BKP_REG_63_TMR2_RTC_Sel_RTCCLK   = 2,     /*!< RTCCLK : RTCCLK Clock                                                     */
} MDR_BKP_REG_63_TMR2_RTC_Sel_Enum;

/* ===========================================  MDR_BKP REG_63_TMR2 RTC_En [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_RTC_En                                                */
  MDR_BKP_REG_63_TMR2_RTC_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_RTC_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_RTC_En_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 LSE_RDY [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_RDY                                               */
  MDR_BKP_REG_63_TMR2_LSE_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_RDY_Enum;

/* =======================================  MDR_BKP REG_63_TMR2 LSE_FilterEn [14..14]  ======================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSE_FilterEn                                          */
  MDR_BKP_REG_63_TMR2_LSE_FilterEn_Off = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSE_FilterEn_On  = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSE_FilterEn_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 LSI_On [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_On                                                */
  MDR_BKP_REG_63_TMR2_LSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 LSI_Trim [16..20]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_Trim                                              */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max8    = 0,     /*!< Max8 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max7    = 1,     /*!< Max7 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max6    = 2,     /*!< Max6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max5    = 3,     /*!< Max5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max4    = 4,     /*!< Max4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max3    = 5,     /*!< Max3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max2    = 6,     /*!< Max2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Max1    = 7,     /*!< Max1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Typical = 8,     /*!< Typical : LSI Default                                                     */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min1    = 9,     /*!< Min1 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min2    = 10,    /*!< Min2 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min3    = 11,    /*!< Min3 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min4    = 12,    /*!< Min4 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min5    = 13,    /*!< Min5 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min6    = 14,    /*!< Min6 : LSI Trim                                                           */
  MDR_BKP_REG_63_TMR2_LSI_Trim_Min7    = 15,    /*!< Min7 : LSI Trim                                                           */
} MDR_BKP_REG_63_TMR2_LSI_Trim_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 LSI_RDY [21..21]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_LSI_RDY                                               */
  MDR_BKP_REG_63_TMR2_LSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_LSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_LSI_RDY_Enum;

/* ==========================================  MDR_BKP REG_63_TMR2 HSI_On [22..22]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSI_On                                                */
  MDR_BKP_REG_63_TMR2_HSI_On_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSI_On_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSI_On_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 HSI_RDY [23..23]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_HSI_RDY                                               */
  MDR_BKP_REG_63_TMR2_HSI_RDY_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_HSI_RDY_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_HSI_RDY_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 STANDBY [30..30]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_STANDBY                                               */
  MDR_BKP_REG_63_TMR2_STANDBY_Inactive = 0,     /*!< Inactive : No Action                                                      */
  MDR_BKP_REG_63_TMR2_STANDBY_GoStandby = 1,    /*!< GoStandby : Standby power off                                             */
} MDR_BKP_REG_63_TMR2_STANDBY_Enum;

/* =========================================  MDR_BKP REG_63_TMR2 RTC_RST [31..31]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_63_TMR2_RTC_RST                                               */
  MDR_BKP_REG_63_TMR2_RTC_RST_Off      = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_REG_63_TMR2_RTC_RST_On       = 1,     /*!< On : Enable                                                               */
} MDR_BKP_REG_63_TMR2_RTC_RST_Enum;

/* =====================================================  RTC_CNT_TMR0  ====================================================== */
/* =====================================================  RTC_DIV_TMR0  ====================================================== */
/* =====================================================  RTC_PRL_TMR0  ====================================================== */
/* =====================================================  RTC_ALRM_TMR0  ===================================================== */
/* ======================================================  RTC_CS_TMR0  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR0 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_OWF                                                   */
  MDR_BKP_RTC_CS_TMR0_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_SECF                                                  */
  MDR_BKP_RTC_CS_TMR0_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR0_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR0 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR0_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR0_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR0_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR0_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR0_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR0 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_WEC                                                   */
  MDR_BKP_RTC_CS_TMR0_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR0_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR0_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR0_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR0 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR0_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR0_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR0_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR0 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR0_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR0_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR0_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR0_ERR_IE_Enum;

/* =====================================================  RTC_CNT_TMR1  ====================================================== */
/* =====================================================  RTC_DIV_TMR1  ====================================================== */
/* =====================================================  RTC_PRL_TMR1  ====================================================== */
/* =====================================================  RTC_ALRM_TMR1  ===================================================== */
/* ======================================================  RTC_CS_TMR1  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR1 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_OWF                                                   */
  MDR_BKP_RTC_CS_TMR1_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_SECF                                                  */
  MDR_BKP_RTC_CS_TMR1_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR1_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR1 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR1_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR1_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR1_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR1_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR1_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR1 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_WEC                                                   */
  MDR_BKP_RTC_CS_TMR1_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR1_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR1_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR1_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR1 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR1_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR1_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR1_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR1 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR1_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR1_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR1_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR1_ERR_IE_Enum;

/* =====================================================  RTC_CNT_TMR2  ====================================================== */
/* =====================================================  RTC_DIV_TMR2  ====================================================== */
/* =====================================================  RTC_PRL_TMR2  ====================================================== */
/* =====================================================  RTC_ALRM_TMR2  ===================================================== */
/* ======================================================  RTC_CS_TMR2  ====================================================== */
/* ============================================  MDR_BKP RTC_CS_TMR2 OWF [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_OWF                                                   */
  MDR_BKP_RTC_CS_TMR2_OWF_Off          = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_OWF_On           = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_OWF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 SECF [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_SECF                                                  */
  MDR_BKP_RTC_CS_TMR2_SECF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_SECF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_SECF_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 ALRF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ALRF                                                  */
  MDR_BKP_RTC_CS_TMR2_ALRF_Off         = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_ALRF_On          = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_ALRF_Enum;

/* ===========================================  MDR_BKP RTC_CS_TMR2 OWF_IE [3..3]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_OWF_IE                                                */
  MDR_BKP_RTC_CS_TMR2_OWF_IE_Off       = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_OWF_IE_On        = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_OWF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 SECF_IE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_SECF_IE                                               */
  MDR_BKP_RTC_CS_TMR2_SECF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_SECF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_SECF_IE_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ALRF_IE [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ALRF_IE                                               */
  MDR_BKP_RTC_CS_TMR2_ALRF_IE_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_TMR2_ALRF_IE_On       = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_TMR2_ALRF_IE_Enum;

/* ============================================  MDR_BKP RTC_CS_TMR2 WEC [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_WEC                                                   */
  MDR_BKP_RTC_CS_TMR2_WEC_Ready        = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_TMR2_WEC_Busy         = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_TMR2_WEC_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 CLR_ERRx [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_CLR_ERRx                                              */
  MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Inactive = 0,    /*!< Inactive : No Action                                                      */
  MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Clear   = 1,     /*!< Clear : Clear ERR_x Errors                                                */
} MDR_BKP_RTC_CS_TMR2_CLR_ERRx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CNT [8..8]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CNT                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_CNT_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CNT_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CNT_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_DIV [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_DIV                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_DIV_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_DIV_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_DIV_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CM [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CM                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_CM_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CM_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CM_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_CC [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CC                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_CC_Off       = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CC_On        = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CC_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_CNTx [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CNTx                                              */
  MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CNTx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CNTx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_DIVx [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_DIVx                                              */
  MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Off     = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_DIVx_On      = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_DIVx_Enum;

/* =========================================  MDR_BKP RTC_CS_TMR2 ERR_CMx [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_CMx                                               */
  MDR_BKP_RTC_CS_TMR2_ERR_CMx_Off      = 0,     /*!< Off : No event                                                            */
  MDR_BKP_RTC_CS_TMR2_ERR_CMx_On       = 1,     /*!< On : Event Active                                                         */
} MDR_BKP_RTC_CS_TMR2_ERR_CMx_Enum;

/* ==========================================  MDR_BKP RTC_CS_TMR2 ERR_IE [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_TMR2_ERR_IE                                                */
  MDR_BKP_RTC_CS_TMR2_ERR_IE_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_BKP_RTC_CS_TMR2_ERR_IE_On        = 1,     /*!< On : Enable                                                               */
} MDR_BKP_RTC_CS_TMR2_ERR_IE_Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_OTP                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* =========================================================  CNTR  ========================================================== */
/* =============================================  MDR_OTP CNTR WAITCYCL [0..3]  ============================================== */
typedef enum {                                  /*!< MDR_OTP_CNTR_WAITCYCL                                                     */
  MDR_OTP_CNTR_WAITCYCL_Forbiden       = 0,     /*!< Forbiden : Forbiden value                                                 */
  MDR_OTP_CNTR_WAITCYCL_20MHz83        = 1,     /*!< 20MHz83 : Delay for clock up to 20.83 MHz                                 */
  MDR_OTP_CNTR_WAITCYCL_41MHz66        = 2,     /*!< 41MHz66 : Delay for clock up to 41.66 MHz                                 */
  MDR_OTP_CNTR_WAITCYCL_62MHz5         = 3,     /*!< 62MHz5 : Delay for clock up to 62.5 MHz                                   */
  MDR_OTP_CNTR_WAITCYCL_83MHz33        = 4,     /*!< 83MHz33 : Delay for clock up to 83.33 MHz                                 */
  MDR_OTP_CNTR_WAITCYCL_100MHz         = 5,     /*!< 100MHz : Delay for clock up to 100 MHz                                    */
} MDR_OTP_CNTR_WAITCYCL_Enum;

/* ============================================  MDR_OTP CNTR REG_ACCESS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_OTP_CNTR_REG_ACCESS                                                   */
  MDR_OTP_CNTR_REG_ACCESS_Off          = 0,     /*!< Off : Bus access                                                          */
  MDR_OTP_CNTR_REG_ACCESS_On           = 1,     /*!< On : Access through registers                                             */
} MDR_OTP_CNTR_REG_ACCESS_Enum;

/* ================================================  MDR_OTP CNTR SE [5..5]  ================================================= */
typedef enum {                                  /*!< MDR_OTP_CNTR_SE                                                           */
  MDR_OTP_CNTR_SE_Off                  = 0,     /*!< Off : Hold data                                                           */
  MDR_OTP_CNTR_SE_On                   = 1,     /*!< On : Read enable                                                          */
} MDR_OTP_CNTR_SE_Enum;

/* ================================================  MDR_OTP CNTR PE [6..6]  ================================================= */
typedef enum {                                  /*!< MDR_OTP_CNTR_PE                                                           */
  MDR_OTP_CNTR_PE_Off                  = 0,     /*!< Off : Hold data                                                           */
  MDR_OTP_CNTR_PE_On                   = 1,     /*!< On : Programming enable                                                   */
} MDR_OTP_CNTR_PE_Enum;

/* ==========================================================  ADR  ========================================================== */
/* =========================================================  WDATA  ========================================================= */
/* =========================================================  RDATA  ========================================================= */
/* =========================================================  ECCCS  ========================================================= */
/* ===============================================  MDR_OTP ECCCS SECC [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_OTP_ECCCS_SECC                                                        */
  MDR_OTP_ECCCS_SECC_Off               = 0,     /*!< Off : No Event detected                                                   */
  MDR_OTP_ECCCS_SECC_On                = 1,     /*!< On : Event detected                                                       */
} MDR_OTP_ECCCS_SECC_Enum;

/* ===============================================  MDR_OTP ECCCS DECC [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_OTP_ECCCS_DECC                                                        */
  MDR_OTP_ECCCS_DECC_Off               = 0,     /*!< Off : No Event detected                                                   */
  MDR_OTP_ECCCS_DECC_On                = 1,     /*!< On : Event detected                                                       */
} MDR_OTP_ECCCS_DECC_Enum;

/* =============================================  MDR_OTP ECCCS SECC_IE [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_OTP_ECCCS_SECC_IE                                                     */
  MDR_OTP_ECCCS_SECC_IE_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_OTP_ECCCS_SECC_IE_On             = 1,     /*!< On : Enable                                                               */
} MDR_OTP_ECCCS_SECC_IE_Enum;

/* =============================================  MDR_OTP ECCCS DECC_IE [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_OTP_ECCCS_DECC_IE                                                     */
  MDR_OTP_ECCCS_DECC_IE_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_OTP_ECCCS_DECC_IE_On             = 1,     /*!< On : Enable                                                               */
} MDR_OTP_ECCCS_DECC_IE_Enum;

/* =============================================  MDR_OTP ECCCS FIX_SECC [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_OTP_ECCCS_FIX_SECC                                                    */
  MDR_OTP_ECCCS_FIX_SECC_Off           = 0,     /*!< Off : Disable                                                             */
  MDR_OTP_ECCCS_FIX_SECC_On            = 1,     /*!< On : Enable                                                               */
} MDR_OTP_ECCCS_FIX_SECC_Enum;

/* =============================================  MDR_OTP ECCCS FIX_DECC [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_OTP_ECCCS_FIX_DECC                                                    */
  MDR_OTP_ECCCS_FIX_DECC_Off           = 0,     /*!< Off : Disable                                                             */
  MDR_OTP_ECCCS_FIX_DECC_On            = 1,     /*!< On : Enable                                                               */
} MDR_OTP_ECCCS_FIX_DECC_Enum;

/* ============================================  MDR_OTP ECCCS CLR_SECNT [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_OTP_ECCCS_CLR_SECNT                                                   */
  MDR_OTP_ECCCS_CLR_SECNT_Inactive     = 0,     /*!< Inactive : No Action                                                      */
  MDR_OTP_ECCCS_CLR_SECNT_Clear        = 1,     /*!< Clear : Action                                                            */
} MDR_OTP_ECCCS_CLR_SECNT_Enum;

/* ============================================  MDR_OTP ECCCS CLR_DECNT [7..7]  ============================================= */
typedef enum {                                  /*!< MDR_OTP_ECCCS_CLR_DECNT                                                   */
  MDR_OTP_ECCCS_CLR_DECNT_Inactive     = 0,     /*!< Inactive : No Action                                                      */
  MDR_OTP_ECCCS_CLR_DECNT_Clear        = 1,     /*!< Clear : Action                                                            */
} MDR_OTP_ECCCS_CLR_DECNT_Enum;

/* ========================================================  ECCADR  ========================================================= */
/* ========================================================  ECCDATA  ======================================================== */
/* ========================================================  ECCECC  ========================================================= */
/* ======================================================  TEST_TUNING  ====================================================== */
/* =============================================  MDR_OTP TEST_TUNING TE [3..4]  ============================================= */
typedef enum {                                  /*!< MDR_OTP_TEST_TUNING_TE                                                    */
  MDR_OTP_TEST_TUNING_TE_Off           = 0,     /*!< Off : Normal Operation                                                    */
  MDR_OTP_TEST_TUNING_TE_Test_1        = 1,     /*!< Test_1 : Test Mode 1                                                      */
  MDR_OTP_TEST_TUNING_TE_Test_2        = 2,     /*!< Test_2 : Test Mode 2                                                      */
  MDR_OTP_TEST_TUNING_TE_Test_3        = 3,     /*!< Test_3 : Test Mode 3                                                      */
} MDR_OTP_TEST_TUNING_TE_Enum;

/* ========================================  MDR_OTP TEST_TUNING TIME_TUNING [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_OTP_TEST_TUNING_TIME_TUNING                                           */
  MDR_OTP_TEST_TUNING_TIME_TUNING_Time_HardMax = 0,/*!< Time_HardMax : Read Timeout                                            */
  MDR_OTP_TEST_TUNING_TIME_TUNING_Time_Hard2 = 1,/*!< Time_Hard2 : Read Timeout                                                */
  MDR_OTP_TEST_TUNING_TIME_TUNING_Time_Hard1 = 2,/*!< Time_Hard1 : Read Timeout                                                */
  MDR_OTP_TEST_TUNING_TIME_TUNING_Time_Norm = 3,/*!< Time_Norm : Read Timeout                                                  */
  MDR_OTP_TEST_TUNING_TIME_TUNING_Time_Easy1 = 4,/*!< Time_Easy1 : Read Timeout                                                */
  MDR_OTP_TEST_TUNING_TIME_TUNING_Time_Easy2 = 5,/*!< Time_Easy2 : Read Timeout                                                */
  MDR_OTP_TEST_TUNING_TIME_TUNING_Time_Easy3 = 6,/*!< Time_Easy3 : Read Timeout                                                */
  MDR_OTP_TEST_TUNING_TIME_TUNING_Time_EasyMax = 7,/*!< Time_EasyMax : Read Timeout                                            */
} MDR_OTP_TEST_TUNING_TIME_TUNING_Enum;

/* =======================================  MDR_OTP TEST_TUNING REPL_TUNING [16..19]  ======================================== */
typedef enum {                                  /*!< MDR_OTP_TEST_TUNING_REPL_TUNING                                           */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_EasyMax = 0,/*!< Repl_EasyMax : Read Resistance                                         */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Easy1 = 1,/*!< Repl_Easy1 : Read Resistance                                             */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Norm = 2,/*!< Repl_Norm : Read Resistance                                               */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard1 = 3,/*!< Repl_Hard1 : Read Resistance                                             */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard2 = 4,/*!< Repl_Hard2 : Read Resistance                                             */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard3 = 5,/*!< Repl_Hard3 : Read Resistance                                             */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard4 = 6,/*!< Repl_Hard4 : Read Resistance                                             */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard5 = 7,/*!< Repl_Hard5 : Read Resistance                                             */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard6 = 8,/*!< Repl_Hard6 : Read Resistance                                             */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard7 = 9,/*!< Repl_Hard7 : Read Resistance                                             */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard8 = 10,/*!< Repl_Hard8 : Read Resistance                                            */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard9 = 11,/*!< Repl_Hard9 : Read Resistance                                            */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard10 = 12,/*!< Repl_Hard10 : Read Resistance                                          */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard11 = 13,/*!< Repl_Hard11 : Read Resistance                                          */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_Hard12 = 14,/*!< Repl_Hard12 : Read Resistance                                          */
  MDR_OTP_TEST_TUNING_REPL_TUNING_Repl_HardMax = 15,/*!< Repl_HardMax : Read Resistance                                        */
} MDR_OTP_TEST_TUNING_REPL_TUNING_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* =========================================================  RXTX  ========================================================== */
/* ==============================================  MDR_PORTA RXTX Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Pin_                                                       */
  MDR_PORTA_RXTX_Pin__Low              = 0,     /*!< Low : LOW Level Voltage                                                   */
  MDR_PORTA_RXTX_Pin__High             = 1,     /*!< High : HIGH Level Voltage                                                 */
} MDR_PORTA_RXTX_Pin__Enum;

/* =======================================================  RXTX_Set  ======================================================== */
/* ============================================  MDR_PORTA RXTX_Set Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Set_Pin_                                                   */
  MDR_PORTA_RXTX_Set_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_RXTX_Set_Pin__SET          = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_RXTX_Set_Pin__Enum;

/* ======================================================  RXTX_Clear  ======================================================= */
/* ===========================================  MDR_PORTA RXTX_Clear Pin_ [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Clear_Pin_                                                 */
  MDR_PORTA_RXTX_Clear_Pin__Off        = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_RXTX_Clear_Pin__CLEAR      = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_RXTX_Clear_Pin__Enum;

/* ==========================================================  OE  =========================================================== */
/* ===============================================  MDR_PORTA OE Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_OE_Pin_                                                         */
  MDR_PORTA_OE_Pin__IN                 = 0,     /*!< IN : Input pin                                                            */
  MDR_PORTA_OE_Pin__OUT                = 1,     /*!< OUT : Output pin                                                          */
} MDR_PORTA_OE_Pin__Enum;

/* ========================================================  OE_Set  ========================================================= */
/* =============================================  MDR_PORTA OE_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_OE_Set_Pin_                                                     */
  MDR_PORTA_OE_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_OE_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_OE_Set_Pin__Enum;

/* =======================================================  OE_Clear  ======================================================== */
/* ============================================  MDR_PORTA OE_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_OE_Clear_Pin_                                                   */
  MDR_PORTA_OE_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_OE_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_OE_Clear_Pin__Enum;

/* =========================================================  FUNC0  ========================================================= */
/* ===========================================  MDR_PORTA FUNC0 Func_Pin_ [0..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_FUNC0_Func_Pin_                                                 */
  MDR_PORTA_FUNC0_Func_Pin__PORT       = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC0_Func_Pin__Func_1     = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_2     = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_3     = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_4     = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_5     = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_6     = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_7     = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_8     = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_9     = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Func_Pin__Func_10    = 10,    /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_11    = 11,    /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_12    = 12,    /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_13    = 13,    /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_14    = 14,    /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Func_Pin__Func_15    = 15,    /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC0_Func_Pin__Enum;

/* =========================================================  FUNC1  ========================================================= */
/* ===========================================  MDR_PORTA FUNC1 Func_Pin_ [0..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_FUNC1_Func_Pin_                                                 */
  MDR_PORTA_FUNC1_Func_Pin__PORT       = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC1_Func_Pin__Func_1     = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_2     = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_3     = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_4     = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_5     = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_6     = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_7     = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_8     = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_9     = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Func_Pin__Func_10    = 10,    /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_11    = 11,    /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_12    = 12,    /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_13    = 13,    /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_14    = 14,    /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Func_Pin__Func_15    = 15,    /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC1_Func_Pin__Enum;

/* =========================================================  FUNC2  ========================================================= */
/* ===========================================  MDR_PORTA FUNC2 Func_Pin_ [0..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_FUNC2_Func_Pin_                                                 */
  MDR_PORTA_FUNC2_Func_Pin__PORT       = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC2_Func_Pin__Func_1     = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_2     = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_3     = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_4     = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_5     = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_6     = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_7     = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_8     = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_9     = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Func_Pin__Func_10    = 10,    /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_11    = 11,    /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_12    = 12,    /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_13    = 13,    /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_14    = 14,    /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Func_Pin__Func_15    = 15,    /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC2_Func_Pin__Enum;

/* =========================================================  FUNC3  ========================================================= */
/* ===========================================  MDR_PORTA FUNC3 Func_Pin_ [0..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_FUNC3_Func_Pin_                                                 */
  MDR_PORTA_FUNC3_Func_Pin__PORT       = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC3_Func_Pin__Func_1     = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_2     = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_3     = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_4     = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_5     = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_6     = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_7     = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_8     = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_9     = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Func_Pin__Func_10    = 10,    /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_11    = 11,    /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_12    = 12,    /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_13    = 13,    /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_14    = 14,    /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Func_Pin__Func_15    = 15,    /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC3_Func_Pin__Enum;

/* =======================================================  FUNC0_Set  ======================================================= */
/* =========================================  MDR_PORTA FUNC0_Set Func_Pin_ [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC0_Set_Func_Pin_                                             */
  MDR_PORTA_FUNC0_Set_Func_Pin__PORT   = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_1 = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_2 = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_3 = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_4 = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_5 = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_6 = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_7 = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_8 = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_9 = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_10 = 10,   /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_11 = 11,   /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_12 = 12,   /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_13 = 13,   /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_14 = 14,   /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC0_Set_Func_Pin__Func_15 = 15,   /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC0_Set_Func_Pin__Enum;

/* =======================================================  FUNC1_Set  ======================================================= */
/* =========================================  MDR_PORTA FUNC1_Set Func_Pin_ [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC1_Set_Func_Pin_                                             */
  MDR_PORTA_FUNC1_Set_Func_Pin__PORT   = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_1 = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_2 = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_3 = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_4 = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_5 = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_6 = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_7 = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_8 = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_9 = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_10 = 10,   /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_11 = 11,   /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_12 = 12,   /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_13 = 13,   /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_14 = 14,   /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC1_Set_Func_Pin__Func_15 = 15,   /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC1_Set_Func_Pin__Enum;

/* =======================================================  FUNC2_Set  ======================================================= */
/* =========================================  MDR_PORTA FUNC2_Set Func_Pin_ [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC2_Set_Func_Pin_                                             */
  MDR_PORTA_FUNC2_Set_Func_Pin__PORT   = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_1 = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_2 = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_3 = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_4 = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_5 = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_6 = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_7 = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_8 = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_9 = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_10 = 10,   /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_11 = 11,   /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_12 = 12,   /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_13 = 13,   /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_14 = 14,   /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC2_Set_Func_Pin__Func_15 = 15,   /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC2_Set_Func_Pin__Enum;

/* =======================================================  FUNC3_Set  ======================================================= */
/* =========================================  MDR_PORTA FUNC3_Set Func_Pin_ [0..3]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC3_Set_Func_Pin_                                             */
  MDR_PORTA_FUNC3_Set_Func_Pin__PORT   = 0,     /*!< PORT : User Pin control                                                   */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_1 = 1,     /*!< Func_1 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_2 = 2,     /*!< Func_2 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_3 = 3,     /*!< Func_3 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_4 = 4,     /*!< Func_4 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_5 = 5,     /*!< Func_5 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_6 = 6,     /*!< Func_6 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_7 = 7,     /*!< Func_7 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_8 = 8,     /*!< Func_8 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_9 = 9,     /*!< Func_9 : Function periph pin control                                      */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_10 = 10,   /*!< Func_10 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_11 = 11,   /*!< Func_11 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_12 = 12,   /*!< Func_12 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_13 = 13,   /*!< Func_13 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_14 = 14,   /*!< Func_14 : Function periph pin control                                     */
  MDR_PORTA_FUNC3_Set_Func_Pin__Func_15 = 15,   /*!< Func_15 : Function periph pin control                                     */
} MDR_PORTA_FUNC3_Set_Func_Pin__Enum;

/* ======================================================  FUNC0_Clear  ====================================================== */
/* ========================================  MDR_PORTA FUNC0_Clear Func_Pin_ [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_PORTA_FUNC0_Clear_Func_Pin_                                           */
  MDR_PORTA_FUNC0_Clear_Func_Pin__Inactive = 0, /*!< Inactive : No Action                                                      */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_1 = 1,/*!< ClrFunc_1 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_2 = 2,/*!< ClrFunc_2 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_3 = 3,/*!< ClrFunc_3 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_4 = 4,/*!< ClrFunc_4 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_5 = 5,/*!< ClrFunc_5 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_6 = 6,/*!< ClrFunc_6 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_7 = 7,/*!< ClrFunc_7 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_8 = 8,/*!< ClrFunc_8 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_9 = 9,/*!< ClrFunc_9 : Function periph pin control                                   */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_10 = 10,/*!< ClrFunc_10 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_11 = 11,/*!< ClrFunc_11 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_12 = 12,/*!< ClrFunc_12 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_13 = 13,/*!< ClrFunc_13 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClrFunc_14 = 14,/*!< ClrFunc_14 : Function periph pin control                                */
  MDR_PORTA_FUNC0_Clear_Func_Pin__ClearToPort = 15,/*!< ClearToPort : Set Pin to Port function                                 */
} MDR_PORTA_FUNC0_Clear_Func_Pin__Enum;

/* ======================================================  FUNC1_Clear  ====================================================== */
/* ========================================  MDR_PORTA FUNC1_Clear Func_Pin_ [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_PORTA_FUNC1_Clear_Func_Pin_                                           */
  MDR_PORTA_FUNC1_Clear_Func_Pin__Inactive = 0, /*!< Inactive : No Action                                                      */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_1 = 1,/*!< ClrFunc_1 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_2 = 2,/*!< ClrFunc_2 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_3 = 3,/*!< ClrFunc_3 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_4 = 4,/*!< ClrFunc_4 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_5 = 5,/*!< ClrFunc_5 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_6 = 6,/*!< ClrFunc_6 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_7 = 7,/*!< ClrFunc_7 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_8 = 8,/*!< ClrFunc_8 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_9 = 9,/*!< ClrFunc_9 : Function periph pin control                                   */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_10 = 10,/*!< ClrFunc_10 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_11 = 11,/*!< ClrFunc_11 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_12 = 12,/*!< ClrFunc_12 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_13 = 13,/*!< ClrFunc_13 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClrFunc_14 = 14,/*!< ClrFunc_14 : Function periph pin control                                */
  MDR_PORTA_FUNC1_Clear_Func_Pin__ClearToPort = 15,/*!< ClearToPort : Set Pin to Port function                                 */
} MDR_PORTA_FUNC1_Clear_Func_Pin__Enum;

/* ======================================================  FUNC2_Clear  ====================================================== */
/* ========================================  MDR_PORTA FUNC2_Clear Func_Pin_ [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_PORTA_FUNC2_Clear_Func_Pin_                                           */
  MDR_PORTA_FUNC2_Clear_Func_Pin__Inactive = 0, /*!< Inactive : No Action                                                      */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_1 = 1,/*!< ClrFunc_1 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_2 = 2,/*!< ClrFunc_2 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_3 = 3,/*!< ClrFunc_3 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_4 = 4,/*!< ClrFunc_4 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_5 = 5,/*!< ClrFunc_5 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_6 = 6,/*!< ClrFunc_6 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_7 = 7,/*!< ClrFunc_7 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_8 = 8,/*!< ClrFunc_8 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_9 = 9,/*!< ClrFunc_9 : Function periph pin control                                   */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_10 = 10,/*!< ClrFunc_10 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_11 = 11,/*!< ClrFunc_11 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_12 = 12,/*!< ClrFunc_12 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_13 = 13,/*!< ClrFunc_13 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClrFunc_14 = 14,/*!< ClrFunc_14 : Function periph pin control                                */
  MDR_PORTA_FUNC2_Clear_Func_Pin__ClearToPort = 15,/*!< ClearToPort : Set Pin to Port function                                 */
} MDR_PORTA_FUNC2_Clear_Func_Pin__Enum;

/* ======================================================  FUNC3_Clear  ====================================================== */
/* ========================================  MDR_PORTA FUNC3_Clear Func_Pin_ [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_PORTA_FUNC3_Clear_Func_Pin_                                           */
  MDR_PORTA_FUNC3_Clear_Func_Pin__Inactive = 0, /*!< Inactive : No Action                                                      */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_1 = 1,/*!< ClrFunc_1 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_2 = 2,/*!< ClrFunc_2 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_3 = 3,/*!< ClrFunc_3 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_4 = 4,/*!< ClrFunc_4 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_5 = 5,/*!< ClrFunc_5 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_6 = 6,/*!< ClrFunc_6 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_7 = 7,/*!< ClrFunc_7 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_8 = 8,/*!< ClrFunc_8 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_9 = 9,/*!< ClrFunc_9 : Function periph pin control                                   */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_10 = 10,/*!< ClrFunc_10 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_11 = 11,/*!< ClrFunc_11 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_12 = 12,/*!< ClrFunc_12 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_13 = 13,/*!< ClrFunc_13 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClrFunc_14 = 14,/*!< ClrFunc_14 : Function periph pin control                                */
  MDR_PORTA_FUNC3_Clear_Func_Pin__ClearToPort = 15,/*!< ClearToPort : Set Pin to Port function                                 */
} MDR_PORTA_FUNC3_Clear_Func_Pin__Enum;

/* ========================================================  ANALOG  ========================================================= */
/* =============================================  MDR_PORTA ANALOG Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Pin_                                                     */
  MDR_PORTA_ANALOG_Pin__Analog         = 0,     /*!< Analog : Pin Analog signal                                                */
  MDR_PORTA_ANALOG_Pin__Digital        = 1,     /*!< Digital : Pin Digital signal                                              */
} MDR_PORTA_ANALOG_Pin__Enum;

/* ======================================================  ANALOG_Set  ======================================================= */
/* ===========================================  MDR_PORTA ANALOG_Set Pin_ [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Set_Pin_                                                 */
  MDR_PORTA_ANALOG_Set_Pin__Off        = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_ANALOG_Set_Pin__SET        = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_ANALOG_Set_Pin__Enum;

/* =====================================================  ANALOG_Clear  ====================================================== */
/* ==========================================  MDR_PORTA ANALOG_Clear Pin_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Clear_Pin_                                               */
  MDR_PORTA_ANALOG_Clear_Pin__Off      = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_ANALOG_Clear_Pin__CLEAR    = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_ANALOG_Clear_Pin__Enum;

/* ========================================================  PULLUP  ========================================================= */
/* =============================================  MDR_PORTA PULLUP Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_PULLUP_Pin_                                                     */
  MDR_PORTA_PULLUP_Pin__Off            = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULLUP_Pin__UP             = 1,     /*!< UP : Pin pulled up to VDD                                                 */
} MDR_PORTA_PULLUP_Pin__Enum;

/* ======================================================  PULLUP_Set  ======================================================= */
/* ===========================================  MDR_PORTA PULLUP_Set Pin_ [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULLUP_Set_Pin_                                                 */
  MDR_PORTA_PULLUP_Set_Pin__Off        = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PULLUP_Set_Pin__SET        = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_PULLUP_Set_Pin__Enum;

/* =====================================================  PULLUP_Clear  ====================================================== */
/* ==========================================  MDR_PORTA PULLUP_Clear Pin_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULLUP_Clear_Pin_                                               */
  MDR_PORTA_PULLUP_Clear_Pin__Off      = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PULLUP_Clear_Pin__CLEAR    = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_PULLUP_Clear_Pin__Enum;

/* =======================================================  PULLDOWN  ======================================================== */
/* ============================================  MDR_PORTA PULLDOWN Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_PULLDOWN_Pin_                                                   */
  MDR_PORTA_PULLDOWN_Pin__Off          = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULLDOWN_Pin__DOWN         = 1,     /*!< DOWN : Pin pulled up to GND                                               */
} MDR_PORTA_PULLDOWN_Pin__Enum;

/* =====================================================  PULLDOWN_Set  ====================================================== */
/* ==========================================  MDR_PORTA PULLDOWN_Set Pin_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULLDOWN_Set_Pin_                                               */
  MDR_PORTA_PULLDOWN_Set_Pin__Off      = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PULLDOWN_Set_Pin__SET      = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_PULLDOWN_Set_Pin__Enum;

/* ====================================================  PULLDOWN_Clear  ===================================================== */
/* =========================================  MDR_PORTA PULLDOWN_Clear Pin_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULLDOWN_Clear_Pin_                                             */
  MDR_PORTA_PULLDOWN_Clear_Pin__Off    = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PULLDOWN_Clear_Pin__CLEAR  = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_PULLDOWN_Clear_Pin__Enum;

/* ==========================================================  PD  =========================================================== */
/* ===============================================  MDR_PORTA PD Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Pin_                                                         */
  MDR_PORTA_PD_Pin__Driver             = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Pin__OpenDrain          = 1,     /*!< OpenDrain : Drain Pulled Up Line                                          */
} MDR_PORTA_PD_Pin__Enum;

/* ========================================================  PD_Set  ========================================================= */
/* =============================================  MDR_PORTA PD_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Set_Pin_                                                     */
  MDR_PORTA_PD_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PD_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_PD_Set_Pin__Enum;

/* =======================================================  PD_Clear  ======================================================== */
/* ============================================  MDR_PORTA PD_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_PD_Clear_Pin_                                                   */
  MDR_PORTA_PD_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_PD_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_PD_Clear_Pin__Enum;

/* =========================================================  PWR0  ========================================================== */
/* ==============================================  MDR_PORTA PWR0 Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_PWR0_Pin_                                                       */
  MDR_PORTA_PWR0_Pin__Off              = 0,     /*!< Off : Level switch disabled                                               */
  MDR_PORTA_PWR0_Pin__Slow             = 1,     /*!< Slow : Front ~300ns                                                       */
  MDR_PORTA_PWR0_Pin__Fast             = 2,     /*!< Fast : Front ~100ns                                                       */
  MDR_PORTA_PWR0_Pin__MaxFast          = 3,     /*!< MaxFast : Front ~10ns                                                     */
} MDR_PORTA_PWR0_Pin__Enum;

/* =========================================================  PWR1  ========================================================== */
/* ==============================================  MDR_PORTA PWR1 Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_PWR1_Pin_                                                       */
  MDR_PORTA_PWR1_Pin__Off              = 0,     /*!< Off : Level switch disabled                                               */
  MDR_PORTA_PWR1_Pin__Slow             = 1,     /*!< Slow : Front ~300ns                                                       */
  MDR_PORTA_PWR1_Pin__Fast             = 2,     /*!< Fast : Front ~100ns                                                       */
  MDR_PORTA_PWR1_Pin__MaxFast          = 3,     /*!< MaxFast : Front ~10ns                                                     */
} MDR_PORTA_PWR1_Pin__Enum;

/* =======================================================  PWR0_Set  ======================================================== */
/* ============================================  MDR_PORTA PWR0_Set Pin_ [0..1]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_PWR0_Set_Pin_                                                   */
  MDR_PORTA_PWR0_Set_Pin__Off          = 0,     /*!< Off : Level switch disabled                                               */
  MDR_PORTA_PWR0_Set_Pin__Slow         = 1,     /*!< Slow : Front ~300ns                                                       */
  MDR_PORTA_PWR0_Set_Pin__Fast         = 2,     /*!< Fast : Front ~100ns                                                       */
  MDR_PORTA_PWR0_Set_Pin__MaxFast      = 3,     /*!< MaxFast : Front ~10ns                                                     */
} MDR_PORTA_PWR0_Set_Pin__Enum;

/* =======================================================  PWR1_Set  ======================================================== */
/* ============================================  MDR_PORTA PWR1_Set Pin_ [0..1]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_PWR1_Set_Pin_                                                   */
  MDR_PORTA_PWR1_Set_Pin__Off          = 0,     /*!< Off : Level switch disabled                                               */
  MDR_PORTA_PWR1_Set_Pin__Slow         = 1,     /*!< Slow : Front ~300ns                                                       */
  MDR_PORTA_PWR1_Set_Pin__Fast         = 2,     /*!< Fast : Front ~100ns                                                       */
  MDR_PORTA_PWR1_Set_Pin__MaxFast      = 3,     /*!< MaxFast : Front ~10ns                                                     */
} MDR_PORTA_PWR1_Set_Pin__Enum;

/* ======================================================  PWR0_Clear  ======================================================= */
/* ===========================================  MDR_PORTA PWR0_Clear Pin_ [0..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PWR0_Clear_Pin_                                                 */
  MDR_PORTA_PWR0_Clear_Pin__Inactive   = 0,     /*!< Inactive : No action                                                      */
  MDR_PORTA_PWR0_Clear_Pin__ClrSlow    = 1,     /*!< ClrSlow : Front ~300ns                                                    */
  MDR_PORTA_PWR0_Clear_Pin__ClrFast    = 2,     /*!< ClrFast : Front ~100ns                                                    */
  MDR_PORTA_PWR0_Clear_Pin__ClrToOff   = 3,     /*!< ClrToOff : Pin Power Off                                                  */
} MDR_PORTA_PWR0_Clear_Pin__Enum;

/* ======================================================  PWR1_Clear  ======================================================= */
/* ===========================================  MDR_PORTA PWR1_Clear Pin_ [0..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PWR1_Clear_Pin_                                                 */
  MDR_PORTA_PWR1_Clear_Pin__Inactive   = 0,     /*!< Inactive : No action                                                      */
  MDR_PORTA_PWR1_Clear_Pin__ClrSlow    = 1,     /*!< ClrSlow : Front ~300ns                                                    */
  MDR_PORTA_PWR1_Clear_Pin__ClrFast    = 2,     /*!< ClrFast : Front ~100ns                                                    */
  MDR_PORTA_PWR1_Clear_Pin__ClrToOff   = 3,     /*!< ClrToOff : Pin Power Off                                                  */
} MDR_PORTA_PWR1_Clear_Pin__Enum;

/* ==========================================================  CL  =========================================================== */
/* ===============================================  MDR_PORTA CL Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_CL_Pin_                                                         */
  MDR_PORTA_CL_Pin__Off                = 0,     /*!< Off : Disable                                                             */
  MDR_PORTA_CL_Pin__On                 = 1,     /*!< On : Enable                                                               */
} MDR_PORTA_CL_Pin__Enum;

/* ========================================================  CL_Set  ========================================================= */
/* =============================================  MDR_PORTA CL_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_CL_Set_Pin_                                                     */
  MDR_PORTA_CL_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_CL_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_CL_Set_Pin__Enum;

/* =======================================================  CL_Clear  ======================================================== */
/* ============================================  MDR_PORTA CL_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_CL_Clear_Pin_                                                   */
  MDR_PORTA_CL_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_CL_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_CL_Clear_Pin__Enum;

/* ==========================================================  IE  =========================================================== */
/* ===============================================  MDR_PORTA IE Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_IE_Pin_                                                         */
  MDR_PORTA_IE_Pin__Off                = 0,     /*!< Off : IRQ disabled                                                        */
  MDR_PORTA_IE_Pin__On                 = 1,     /*!< On : IRQ enable                                                           */
} MDR_PORTA_IE_Pin__Enum;

/* ========================================================  IE_Set  ========================================================= */
/* =============================================  MDR_PORTA IE_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_IE_Set_Pin_                                                     */
  MDR_PORTA_IE_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IE_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_IE_Set_Pin__Enum;

/* =======================================================  IE_Clear  ======================================================== */
/* ============================================  MDR_PORTA IE_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_IE_Clear_Pin_                                                   */
  MDR_PORTA_IE_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IE_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_IE_Clear_Pin__Enum;

/* ==========================================================  IT  =========================================================== */
/* ===============================================  MDR_PORTA IT Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_IT_Pin_                                                         */
  MDR_PORTA_IT_Pin__Low                = 0,     /*!< Low : IRQ by low level                                                    */
  MDR_PORTA_IT_Pin__HIGH               = 1,     /*!< HIGH : IRQ by High level                                                  */
} MDR_PORTA_IT_Pin__Enum;

/* ========================================================  IT_Set  ========================================================= */
/* =============================================  MDR_PORTA IT_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_IT_Set_Pin_                                                     */
  MDR_PORTA_IT_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IT_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_IT_Set_Pin__Enum;

/* =======================================================  IT_Clear  ======================================================== */
/* ============================================  MDR_PORTA IT_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_IT_Clear_Pin_                                                   */
  MDR_PORTA_IT_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IT_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_IT_Clear_Pin__Enum;

/* ==========================================================  IR  =========================================================== */
/* ===============================================  MDR_PORTA IR Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_IR_Pin_                                                         */
  MDR_PORTA_IR_Pin__Off                = 0,     /*!< Off : Inactive IRQ request                                                */
  MDR_PORTA_IR_Pin__On                 = 1,     /*!< On : Active IRQ request                                                   */
} MDR_PORTA_IR_Pin__Enum;

/* ========================================================  IR_Set  ========================================================= */
/* =============================================  MDR_PORTA IR_Set Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_IR_Set_Pin_                                                     */
  MDR_PORTA_IR_Set_Pin__Off            = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IR_Set_Pin__SET            = 1,     /*!< SET : Set pin                                                             */
} MDR_PORTA_IR_Set_Pin__Enum;

/* =======================================================  IR_Clear  ======================================================== */
/* ============================================  MDR_PORTA IR_Clear Pin_ [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_PORTA_IR_Clear_Pin_                                                   */
  MDR_PORTA_IR_Clear_Pin__Off          = 0,     /*!< Off : Do nothing                                                          */
  MDR_PORTA_IR_Clear_Pin__CLEAR        = 1,     /*!< CLEAR : Clear pin                                                         */
} MDR_PORTA_IR_Clear_Pin__Enum;

/* =========================================================  HCUR  ========================================================== */
/* ==============================================  MDR_PORTA HCUR Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_HCUR_Pin_                                                       */
  MDR_PORTA_HCUR_Pin__Off              = 0,     /*!< Off : Overcurrent is inactive                                             */
  MDR_PORTA_HCUR_Pin__On               = 1,     /*!< On : Overcurrent is active                                                */
} MDR_PORTA_HCUR_Pin__Enum;



/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CNT  ========================================================== */
/* ==========================================================  PSG  ========================================================== */
/* ==========================================================  ARR  ========================================================== */
/* =========================================================  CNTRL  ========================================================= */
/* ============================================  MDR_TIMER1 CNTRL CNT_EN [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_CNT_EN                                                   */
  MDR_TIMER1_CNTRL_CNT_EN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CNTRL_CNT_EN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CNTRL_CNT_EN_Enum;

/* ============================================  MDR_TIMER1 CNTRL ARRB_EN [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_ARRB_EN                                                  */
  MDR_TIMER1_CNTRL_ARRB_EN_Immediately = 0,     /*!< Immediately : Immediately update                                          */
  MDR_TIMER1_CNTRL_ARRB_EN_OnCompleted = 1,     /*!< OnCompleted : Update ARR when active period of CNT finished               */
} MDR_TIMER1_CNTRL_ARRB_EN_Enum;

/* ============================================  MDR_TIMER1 CNTRL WR_CMPL [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_WR_CMPL                                                  */
  MDR_TIMER1_CNTRL_WR_CMPL_Ready       = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CNTRL_WR_CMPL_BUSY        = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CNTRL_WR_CMPL_Enum;

/* ==============================================  MDR_TIMER1 CNTRL DIR [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_DIR                                                      */
  MDR_TIMER1_CNTRL_DIR_UP              = 0,     /*!< UP : CNT counts from 0 to ARR                                             */
  MDR_TIMER1_CNTRL_DIR_DOWN            = 1,     /*!< DOWN : CNT counts from ARR to 0                                           */
} MDR_TIMER1_CNTRL_DIR_Enum;

/* =============================================  MDR_TIMER1 CNTRL FDTS [4..5]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_FDTS                                                     */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div1   = 0,     /*!< TIM_CLK_div1 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div2   = 1,     /*!< TIM_CLK_div2 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div4   = 2,     /*!< TIM_CLK_div4 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div8   = 3,     /*!< TIM_CLK_div8 : TIM_Clock to FDTS scale                                    */
} MDR_TIMER1_CNTRL_FDTS_Enum;

/* ===========================================  MDR_TIMER1 CNTRL CNT_MODE [6..7]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_CNT_MODE                                                 */
  MDR_TIMER1_CNTRL_CNT_MODE_DIR_TIM_CLK = 0,    /*!< DIR_TIM_CLK : Count TIM_Clock pulses with DIR direction                   */
  MDR_TIMER1_CNTRL_CNT_MODE_UpDown_TIM_CLK = 1, /*!< UpDown_TIM_CLK : Count TIM_Clock pulses UP and Down                       */
  MDR_TIMER1_CNTRL_CNT_MODE_DIR_ExtEvents = 2,  /*!< DIR_ExtEvents : Count External Events with DIR direction                  */
} MDR_TIMER1_CNTRL_CNT_MODE_Enum;

/* ==========================================  MDR_TIMER1 CNTRL EVENT_SEL [8..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_EVENT_SEL                                                */
  MDR_TIMER1_CNTRL_EVENT_SEL_Rise_TIM_CLK = 0,  /*!< Rise_TIM_CLK : CNT counts from 0 to ARR                                   */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM1 = 1,/*!< CNT_eq_ARR_TIM1 : CNT gets ARR in Timer1                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM2 = 2,/*!< CNT_eq_ARR_TIM2 : CNT gets ARR in Timer2                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM3 = 3,/*!< CNT_eq_ARR_TIM3 : CNT gets ARR in Timer3                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch1 = 4,     /*!< Event_Ch1 : Event in Channel1                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch2 = 5,     /*!< Event_Ch2 : Event in Channel2                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch3 = 6,     /*!< Event_Ch3 : Event in Channel3                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch4 = 7,     /*!< Event_Ch4 : Event in Channel4                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Rise_ETR  = 8,     /*!< Rise_ETR : Rise front in ETR pin                                          */
  MDR_TIMER1_CNTRL_EVENT_SEL_Fall_ETR  = 9,     /*!< Fall_ETR : Fall front in ETR pin                                          */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM4 = 10,/*!< CNT_eq_ARR_TIM4 : CNT gets ARR in Timer4                                */
} MDR_TIMER1_CNTRL_EVENT_SEL_Enum;

/* =========================================================  CCR1  ========================================================== */
/* =========================================================  CCR2  ========================================================== */
/* =========================================================  CCR3  ========================================================== */
/* =========================================================  CCR4  ========================================================== */
/* =======================================================  CH1_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH1_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Rise_NextNextCH = 3,/*!< Rise_NextNextCH : Capture Event Select                                   */
} MDR_TIMER1_CH1_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH1_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH1_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH1_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH1_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH1_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_ETREN                                                */
  MDR_TIMER1_CH1_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH1_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH1_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH1_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH1_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH1_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH1_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH2_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH2_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Rise_NextNextCH = 3,/*!< Rise_NextNextCH : Capture Event Select                                   */
} MDR_TIMER1_CH2_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH2_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH2_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH2_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH2_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH2_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_ETREN                                                */
  MDR_TIMER1_CH2_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH2_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH2_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH2_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH2_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH2_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH2_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH3_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH3_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Rise_NextNextCH = 3,/*!< Rise_NextNextCH : Capture Event Select                                   */
} MDR_TIMER1_CH3_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH3_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH3_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH3_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH3_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH3_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_ETREN                                                */
  MDR_TIMER1_CH3_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH3_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH3_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH3_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH3_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH3_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH3_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH4_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH4_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Rise_NextNextCH = 3,/*!< Rise_NextNextCH : Capture Event Select                                   */
} MDR_TIMER1_CH4_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH4_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH4_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH4_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH4_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH4_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_ETREN                                                */
  MDR_TIMER1_CH4_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH4_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH4_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH4_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH4_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH4_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH4_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Enum;

/* ======================================================  CH1_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH1_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH1_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_SelO                                                */
  MDR_TIMER1_CH1_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH1_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH1_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH1_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH1_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH1_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH1_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH1_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH1_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH1_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH1_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH1_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH1_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH1_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NInv                                                */
  MDR_TIMER1_CH1_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH1_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH1_CNTRL1_NInv_Enum;

/* ======================================================  CH2_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH2_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH2_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_SelO                                                */
  MDR_TIMER1_CH2_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH2_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH2_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH2_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH2_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH2_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH2_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH2_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH2_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH2_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH2_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH2_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH2_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH2_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NInv                                                */
  MDR_TIMER1_CH2_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH2_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH2_CNTRL1_NInv_Enum;

/* ======================================================  CH3_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH3_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH3_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_SelO                                                */
  MDR_TIMER1_CH3_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH3_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH3_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH3_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH3_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH3_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH3_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH3_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH3_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH3_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH3_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH3_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH3_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH3_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NInv                                                */
  MDR_TIMER1_CH3_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH3_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH3_CNTRL1_NInv_Enum;

/* ======================================================  CH4_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH4_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH4_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_SelO                                                */
  MDR_TIMER1_CH4_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH4_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH4_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH4_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH4_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH4_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH4_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH4_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH4_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH4_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH4_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH4_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH4_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH4_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NInv                                                */
  MDR_TIMER1_CH4_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH4_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH4_CNTRL1_NInv_Enum;

/* ========================================================  CH1_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH1_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_DTG_DTG                                                    */
  MDR_TIMER1_CH1_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH1_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH1_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_DTG_EDTS                                                   */
  MDR_TIMER1_CH1_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH1_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH1_DTG_EDTS_Enum;

/* ========================================================  CH2_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH2_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_DTG_DTG                                                    */
  MDR_TIMER1_CH2_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH2_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH2_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_DTG_EDTS                                                   */
  MDR_TIMER1_CH2_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH2_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH2_DTG_EDTS_Enum;

/* ========================================================  CH3_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH3_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_DTG_DTG                                                    */
  MDR_TIMER1_CH3_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH3_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH3_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_DTG_EDTS                                                   */
  MDR_TIMER1_CH3_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH3_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH3_DTG_EDTS_Enum;

/* ========================================================  CH4_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH4_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_DTG_DTG                                                    */
  MDR_TIMER1_CH4_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH4_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH4_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_DTG_EDTS                                                   */
  MDR_TIMER1_CH4_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH4_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH4_DTG_EDTS_Enum;

/* =====================================================  BRKETR_CNTRL  ====================================================== */
/* ========================================  MDR_TIMER1 BRKETR_CNTRL BRK_INV [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_BRK_INV                                           */
  MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Normal = 0,   /*!< Normal : Signal Not Inverted                                              */
  MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Invert = 1,   /*!< Invert : Signal Inverted                                                  */
} MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Enum;

/* ========================================  MDR_TIMER1 BRKETR_CNTRL ETR_INV [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_INV                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Normal = 0,   /*!< Normal : Signal Not Inverted                                              */
  MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Invert = 1,   /*!< Invert : Signal Inverted                                                  */
} MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Enum;

/* ========================================  MDR_TIMER1 BRKETR_CNTRL ETR_PSC [2..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_PSC                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div1 = 0,     /*!< div1 : No prescaler                                                       */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div2 = 1,     /*!< div2 : Reduce freq by 2                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div4 = 2,     /*!< div4 : Reduce freq by 4                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div8 = 3,     /*!< div8 : Reduce freq by 8                                                   */
} MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Enum;

/* =======================================  MDR_TIMER1 BRKETR_CNTRL ETR_Filter [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_Filter                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_TIM_CLK = 0,/*!< TIM_CLK : Filter Value                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_2_TIM_CLK = 1,/*!< 2_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_4_TIM_CLK = 2,/*!< 4_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_TIM_CLK = 3,/*!< 8_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div2 = 4,/*!< 6_FDTS_div2 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div2 = 5,/*!< 8_FDTS_div2 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div4 = 6,/*!< 6_FDTS_div4 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div4 = 7,/*!< 8_FDTS_div4 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div8 = 8,/*!< 6_FDTS_div8 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div8 = 9,/*!< 8_FDTS_div8 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                        */
} MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ===========================================  MDR_TIMER1 STATUS CNT_ZERO [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CNT_ZERO                                                */
  MDR_TIMER1_STATUS_CNT_ZERO_Off       = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CNT_ZERO_On        = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CNT_ZERO_Enum;

/* ===========================================  MDR_TIMER1 STATUS CNT_ARR [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CNT_ARR                                                 */
  MDR_TIMER1_STATUS_CNT_ARR_Off        = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CNT_ARR_On         = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CNT_ARR_Enum;

/* ============================================  MDR_TIMER1 STATUS ETR_RE [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_ETR_RE                                                  */
  MDR_TIMER1_STATUS_ETR_RE_Off         = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_ETR_RE_On          = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_ETR_RE_Enum;

/* ============================================  MDR_TIMER1 STATUS ETR_FE [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_ETR_FE                                                  */
  MDR_TIMER1_STATUS_ETR_FE_Off         = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_ETR_FE_On          = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_ETR_FE_Enum;

/* =============================================  MDR_TIMER1 STATUS BRK [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_BRK                                                     */
  MDR_TIMER1_STATUS_BRK_Off            = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_BRK_On             = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_BRK_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH1 [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH1                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH1_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH1_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH2 [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH2                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH2_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH2_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH3 [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH3                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH3_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH3_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH4 [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH4                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH4_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH4_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH4_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_REF_CH1 [9..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH1                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH1_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH1_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH2 [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH2                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH2_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH2_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH3 [11..11]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH3                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH3_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH3_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH4 [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH4                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH4_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH4_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH4_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH1 [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH1                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH1_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH1_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH2 [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH2                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH2_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH2_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH3 [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH3                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH3_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH3_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH4 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH4                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH4_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH4_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH4_Enum;

/* ==========================================================  IE  =========================================================== */
/* ===========================================  MDR_TIMER1 IE CNT_ZERO_IE [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_IE_CNT_ZERO_IE                                                 */
  MDR_TIMER1_IE_CNT_ZERO_IE_Off        = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CNT_ZERO_IE_On         = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CNT_ZERO_IE_Enum;

/* ============================================  MDR_TIMER1 IE CNT_ARR_IE [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_IE_CNT_ARR_IE                                                  */
  MDR_TIMER1_IE_CNT_ARR_IE_Off         = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CNT_ARR_IE_On          = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CNT_ARR_IE_Enum;

/* ============================================  MDR_TIMER1 IE ETR_RE_IE [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_ETR_RE_IE                                                   */
  MDR_TIMER1_IE_ETR_RE_IE_Off          = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_ETR_RE_IE_On           = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_ETR_RE_IE_Enum;

/* ============================================  MDR_TIMER1 IE ETR_FE_IE [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_ETR_FE_IE                                                   */
  MDR_TIMER1_IE_ETR_FE_IE_Off          = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_ETR_FE_IE_On           = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_ETR_FE_IE_Enum;

/* ==============================================  MDR_TIMER1 IE BRK_IE [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_BRK_IE                                                      */
  MDR_TIMER1_IE_BRK_IE_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_BRK_IE_On              = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_BRK_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH1_IE [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH1_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH1_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH1_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH1_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH2_IE [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH2_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH2_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH2_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH2_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH3_IE [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH3_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH3_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH3_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH3_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH4_IE [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH4_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH4_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH4_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH4_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_REF_CH1_IE [9..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH1_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH1_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH1_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH1_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH2_IE [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH2_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH2_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH2_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH2_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH3_IE [11..11]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH3_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH3_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH3_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH3_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH4_IE [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH4_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH4_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH4_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH4_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH1_IE [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH1_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH1_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH2_IE [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH2_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH2_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH3_IE [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH3_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH3_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH4_IE [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH4_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH4_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Enum;

/* ========================================================  DMA_RE  ========================================================= */
/* ========================================  MDR_TIMER1 DMA_RE CNT_ZERO_DMAE [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE                                           */
  MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CNT_ARR_DMAE                                            */
  MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE ETR_RE_DMAE [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_ETR_RE_DMAE                                             */
  MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_ETR_RE_DMAE_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE ETR_FE_DMAE [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_ETR_FE_DMAE                                             */
  MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_ETR_FE_DMAE_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Enum;

/* ===========================================  MDR_TIMER1 DMA_RE BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_BRK_DMAE                                                */
  MDR_TIMER1_DMA_RE_BRK_DMAE_Off       = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_BRK_DMAE_On        = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_BRK_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH1_DMAE [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH2_DMAE [14..14]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH3_DMAE [15..15]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH4_DMAE [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Enum;

/* ======================================================  CH1_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Fall_NextCH = 2, /*!< Fall_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Fall_NextNextCH = 3,/*!< Fall_NextNextCH : Capture Event Select                                 */
} MDR_TIMER1_CH1_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH1_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH1_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH1_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH1_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH1_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH1_CNTRL2_CCRRLD_Enum;

/* =======================================  MDR_TIMER1 CH1_CNTRL2 CAP_CCR_Fix [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix                                         */
  MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_Off = 0,    /*!< Off : Inactive                                                            */
  MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_On = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_CH1_CNTRL2_CAP_CCR_Fix_Enum;

/* ======================================================  CH2_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Fall_NextCH = 2, /*!< Fall_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Fall_NextNextCH = 3,/*!< Fall_NextNextCH : Capture Event Select                                 */
} MDR_TIMER1_CH2_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH2_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH2_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH2_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH2_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH2_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH2_CNTRL2_CCRRLD_Enum;

/* =======================================  MDR_TIMER1 CH2_CNTRL2 CAP_CCR_Fix [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix                                         */
  MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_Off = 0,    /*!< Off : Inactive                                                            */
  MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_On = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_CH2_CNTRL2_CAP_CCR_Fix_Enum;

/* ======================================================  CH3_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Fall_NextCH = 2, /*!< Fall_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Fall_NextNextCH = 3,/*!< Fall_NextNextCH : Capture Event Select                                 */
} MDR_TIMER1_CH3_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH3_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH3_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH3_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH3_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH3_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH3_CNTRL2_CCRRLD_Enum;

/* =======================================  MDR_TIMER1 CH3_CNTRL2 CAP_CCR_Fix [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix                                         */
  MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_Off = 0,    /*!< Off : Inactive                                                            */
  MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_On = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_CH3_CNTRL2_CAP_CCR_Fix_Enum;

/* ======================================================  CH4_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Fall_NextCH = 2, /*!< Fall_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Fall_NextNextCH = 3,/*!< Fall_NextNextCH : Capture Event Select                                 */
} MDR_TIMER1_CH4_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH4_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH4_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH4_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH4_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH4_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH4_CNTRL2_CCRRLD_Enum;

/* =======================================  MDR_TIMER1 CH4_CNTRL2 CAP_CCR_Fix [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix                                         */
  MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_Off = 0,    /*!< Off : Inactive                                                            */
  MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_On = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_CH4_CNTRL2_CAP_CCR_Fix_Enum;

/* =========================================================  CCR11  ========================================================= */
/* =========================================================  CCR21  ========================================================= */
/* =========================================================  CCR31  ========================================================= */
/* =========================================================  CCR41  ========================================================= */
/* ========================================================  DMA_RE1  ======================================================== */
/* ========================================  MDR_TIMER1 DMA_RE1 CNT_ZERO_DMAE [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE                                          */
  MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_Off = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_On  = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CNT_ZERO_DMAE_Enum;

/* ========================================  MDR_TIMER1 DMA_RE1 CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE                                           */
  MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE1 ETR_RE_DMAE [2..2]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_ETR_RE_DMAE                                            */
  MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE1 ETR_FE_DMAE [3..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_ETR_FE_DMAE                                            */
  MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_ETR_FE_DMAE_Enum;

/* ==========================================  MDR_TIMER1 DMA_RE1 BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_BRK_DMAE                                               */
  MDR_TIMER1_DMA_RE1_BRK_DMAE_Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_BRK_DMAE_On       = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_BRK_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_CAP_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_CAP_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_CAP_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_CAP_CH4_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE1 CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_REF_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_REF_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_REF_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR1_CAP_CH1_DMAE [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE                                      */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR1_CAP_CH2_DMAE [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE                                      */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR1_CAP_CH3_DMAE [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE                                      */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE1 CCR1_CAP_CH4_DMAE [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE                                      */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE1_CCR1_CAP_CH4_DMAE_Enum;

/* ========================================================  DMA_RE2  ======================================================== */
/* ========================================  MDR_TIMER1 DMA_RE2 CNT_ZERO_DMAE [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE                                          */
  MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_Off = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_On  = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CNT_ZERO_DMAE_Enum;

/* ========================================  MDR_TIMER1 DMA_RE2 CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE                                           */
  MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE2 ETR_RE_DMAE [2..2]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_ETR_RE_DMAE                                            */
  MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE2 ETR_FE_DMAE [3..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_ETR_FE_DMAE                                            */
  MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_ETR_FE_DMAE_Enum;

/* ==========================================  MDR_TIMER1 DMA_RE2 BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_BRK_DMAE                                               */
  MDR_TIMER1_DMA_RE2_BRK_DMAE_Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_BRK_DMAE_On       = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_BRK_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_CAP_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_CAP_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_CAP_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_CAP_CH4_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE2 CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_REF_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_REF_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_REF_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR1_CAP_CH1_DMAE [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE                                      */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR1_CAP_CH2_DMAE [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE                                      */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR1_CAP_CH3_DMAE [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE                                      */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE2 CCR1_CAP_CH4_DMAE [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE                                      */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE2_CCR1_CAP_CH4_DMAE_Enum;

/* ========================================================  DMA_RE3  ======================================================== */
/* ========================================  MDR_TIMER1 DMA_RE3 CNT_ZERO_DMAE [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE                                          */
  MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_Off = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_On  = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CNT_ZERO_DMAE_Enum;

/* ========================================  MDR_TIMER1 DMA_RE3 CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE                                           */
  MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE3 ETR_RE_DMAE [2..2]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_ETR_RE_DMAE                                            */
  MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE3 ETR_FE_DMAE [3..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_ETR_FE_DMAE                                            */
  MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_ETR_FE_DMAE_Enum;

/* ==========================================  MDR_TIMER1 DMA_RE3 BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_BRK_DMAE                                               */
  MDR_TIMER1_DMA_RE3_BRK_DMAE_Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_BRK_DMAE_On       = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_BRK_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_CAP_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_CAP_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_CAP_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_CAP_CH4_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE3 CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_REF_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_REF_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_REF_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR1_CAP_CH1_DMAE [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE                                      */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR1_CAP_CH2_DMAE [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE                                      */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR1_CAP_CH3_DMAE [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE                                      */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE3 CCR1_CAP_CH4_DMAE [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE                                      */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE3_CCR1_CAP_CH4_DMAE_Enum;

/* ========================================================  DMA_RE4  ======================================================== */
/* ========================================  MDR_TIMER1 DMA_RE4 CNT_ZERO_DMAE [0..0]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE                                          */
  MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_Off = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_On  = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CNT_ZERO_DMAE_Enum;

/* ========================================  MDR_TIMER1 DMA_RE4 CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE                                           */
  MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE4 ETR_RE_DMAE [2..2]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_ETR_RE_DMAE                                            */
  MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE4 ETR_FE_DMAE [3..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_ETR_FE_DMAE                                            */
  MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_ETR_FE_DMAE_Enum;

/* ==========================================  MDR_TIMER1 DMA_RE4 BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_BRK_DMAE                                               */
  MDR_TIMER1_DMA_RE4_BRK_DMAE_Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_BRK_DMAE_On       = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_BRK_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_CAP_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_CAP_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_CAP_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_CAP_CH4_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE4 CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_REF_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_REF_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_REF_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR1_CAP_CH1_DMAE [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE                                      */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR1_CAP_CH2_DMAE [14..14]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE                                      */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR1_CAP_CH3_DMAE [15..15]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE                                      */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE4 CCR1_CAP_CH4_DMAE [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE                                      */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_Off = 0, /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_On = 1,  /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE4_CCR1_CAP_CH4_DMAE_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_CAN1                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  MDR_CAN1 CONTROL CAN_EN [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_CONTROL_CAN_EN                                                   */
  MDR_CAN1_CONTROL_CAN_EN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_CONTROL_CAN_EN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_CONTROL_CAN_EN_Enum;

/* ==============================================  MDR_CAN1 CONTROL ROM [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_CONTROL_ROM                                                      */
  MDR_CAN1_CONTROL_ROM_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_CONTROL_ROM_On              = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_CONTROL_ROM_Enum;

/* ==============================================  MDR_CAN1 CONTROL STM [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_CONTROL_STM                                                      */
  MDR_CAN1_CONTROL_STM_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_CONTROL_STM_On              = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_CONTROL_STM_Enum;

/* ==============================================  MDR_CAN1 CONTROL SAP [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_CONTROL_SAP                                                      */
  MDR_CAN1_CONTROL_SAP_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_CONTROL_SAP_On              = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_CONTROL_SAP_Enum;

/* ==============================================  MDR_CAN1 CONTROL ROP [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_CONTROL_ROP                                                      */
  MDR_CAN1_CONTROL_ROP_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_CONTROL_ROP_On              = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_CONTROL_ROP_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ============================================  MDR_CAN1 STATUS RX_Ready [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_STATUS_RX_Ready                                                  */
  MDR_CAN1_STATUS_RX_Ready_Off         = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_RX_Ready_On          = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_RX_Ready_Enum;

/* ============================================  MDR_CAN1 STATUS TX_Ready [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_STATUS_TX_Ready                                                  */
  MDR_CAN1_STATUS_TX_Ready_Off         = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_TX_Ready_On          = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_TX_Ready_Enum;

/* ============================================  MDR_CAN1 STATUS ERR_Over [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_STATUS_ERR_Over                                                  */
  MDR_CAN1_STATUS_ERR_Over_Off         = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_ERR_Over_On          = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_ERR_Over_Enum;

/* ============================================  MDR_CAN1 STATUS ERR_Bit [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_STATUS_ERR_Bit                                                   */
  MDR_CAN1_STATUS_ERR_Bit_Off          = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_ERR_Bit_On           = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_ERR_Bit_Enum;

/* ==========================================  MDR_CAN1 STATUS ERR_StuffBit [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_STATUS_ERR_StuffBit                                              */
  MDR_CAN1_STATUS_ERR_StuffBit_Off     = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_ERR_StuffBit_On      = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_ERR_StuffBit_Enum;

/* ============================================  MDR_CAN1 STATUS ERR_CRC [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_STATUS_ERR_CRC                                                   */
  MDR_CAN1_STATUS_ERR_CRC_Off          = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_ERR_CRC_On           = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_ERR_CRC_Enum;

/* ===========================================  MDR_CAN1 STATUS ERR_FRAME [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_STATUS_ERR_FRAME                                                 */
  MDR_CAN1_STATUS_ERR_FRAME_Off        = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_ERR_FRAME_On         = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_ERR_FRAME_Enum;

/* ============================================  MDR_CAN1 STATUS ERR_ACK [7..7]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_STATUS_ERR_ACK                                                   */
  MDR_CAN1_STATUS_ERR_ACK_Off          = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_ERR_ACK_On           = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_ERR_ACK_Enum;

/* ============================================  MDR_CAN1 STATUS ID_Lower [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_STATUS_ID_Lower                                                  */
  MDR_CAN1_STATUS_ID_Lower_Off         = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_ID_Lower_On          = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_ID_Lower_Enum;

/* ==========================================  MDR_CAN1 STATUS ERR_Status [9..10]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_STATUS_ERR_Status                                                */
  MDR_CAN1_STATUS_ERR_Status_Active    = 0,     /*!< Active : Active mode                                                      */
  MDR_CAN1_STATUS_ERR_Status_Passive   = 1,     /*!< Passive : Pasiive error mode                                              */
  MDR_CAN1_STATUS_ERR_Status_BusOff    = 2,     /*!< BusOff : Bus Disable                                                      */
} MDR_CAN1_STATUS_ERR_Status_Enum;

/* =========================================  MDR_CAN1 STATUS RX_ERR_CNT8 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_STATUS_RX_ERR_CNT8                                               */
  MDR_CAN1_STATUS_RX_ERR_CNT8_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_RX_ERR_CNT8_On       = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_RX_ERR_CNT8_Enum;

/* =========================================  MDR_CAN1 STATUS TX_ERR_CNT8 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_STATUS_TX_ERR_CNT8                                               */
  MDR_CAN1_STATUS_TX_ERR_CNT8_Off      = 0,     /*!< Off : Event Inactive                                                      */
  MDR_CAN1_STATUS_TX_ERR_CNT8_On       = 1,     /*!< On : Event Active                                                         */
} MDR_CAN1_STATUS_TX_ERR_CNT8_Enum;

/* ========================================================  BITTMNG  ======================================================== */
/* ============================================  MDR_CAN1 BITTMNG PSEG [16..18]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BITTMNG_PSEG                                                     */
  MDR_CAN1_BITTMNG_PSEG_1TQ            = 0,     /*!< 1TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_PSEG_2TQ            = 1,     /*!< 2TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_PSEG_3TQ            = 2,     /*!< 3TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_PSEG_4TQ            = 3,     /*!< 4TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_PSEG_5TQ            = 4,     /*!< 5TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_PSEG_6TQ            = 5,     /*!< 6TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_PSEG_7TQ            = 6,     /*!< 7TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_PSEG_8TQ            = 7,     /*!< 8TQ : Delay                                                               */
} MDR_CAN1_BITTMNG_PSEG_Enum;

/* ============================================  MDR_CAN1 BITTMNG SEG1 [19..21]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BITTMNG_SEG1                                                     */
  MDR_CAN1_BITTMNG_SEG1_1TQ            = 0,     /*!< 1TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG1_2TQ            = 1,     /*!< 2TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG1_3TQ            = 2,     /*!< 3TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG1_4TQ            = 3,     /*!< 4TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG1_5TQ            = 4,     /*!< 5TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG1_6TQ            = 5,     /*!< 6TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG1_7TQ            = 6,     /*!< 7TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG1_8TQ            = 7,     /*!< 8TQ : Delay                                                               */
} MDR_CAN1_BITTMNG_SEG1_Enum;

/* ============================================  MDR_CAN1 BITTMNG SEG2 [22..24]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BITTMNG_SEG2                                                     */
  MDR_CAN1_BITTMNG_SEG2_1TQ            = 0,     /*!< 1TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG2_2TQ            = 1,     /*!< 2TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG2_3TQ            = 2,     /*!< 3TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG2_4TQ            = 3,     /*!< 4TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG2_5TQ            = 4,     /*!< 5TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG2_6TQ            = 5,     /*!< 6TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG2_7TQ            = 6,     /*!< 7TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SEG2_8TQ            = 7,     /*!< 8TQ : Delay                                                               */
} MDR_CAN1_BITTMNG_SEG2_Enum;

/* =============================================  MDR_CAN1 BITTMNG SJW [25..26]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BITTMNG_SJW                                                      */
  MDR_CAN1_BITTMNG_SJW_1TQ             = 0,     /*!< 1TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SJW_2TQ             = 1,     /*!< 2TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SJW_3TQ             = 2,     /*!< 3TQ : Delay                                                               */
  MDR_CAN1_BITTMNG_SJW_4TQ             = 3,     /*!< 4TQ : Delay                                                               */
} MDR_CAN1_BITTMNG_SJW_Enum;

/* =============================================  MDR_CAN1 BITTMNG SB [27..27]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BITTMNG_SB                                                       */
  MDR_CAN1_BITTMNG_SB_Single           = 0,     /*!< Single : Single sampling                                                  */
  MDR_CAN1_BITTMNG_SB_Triple           = 1,     /*!< Triple : Triple sampling                                                  */
} MDR_CAN1_BITTMNG_SB_Enum;

/* ========================================================  INT_EN  ========================================================= */
/* ===========================================  MDR_CAN1 INT_EN GLB_IntEn [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_INT_EN_GLB_IntEn                                                 */
  MDR_CAN1_INT_EN_GLB_IntEn_Disabled   = 0,     /*!< Disabled : Disable IRQ                                                    */
  MDR_CAN1_INT_EN_GLB_IntEn_Enabled    = 1,     /*!< Enabled : Enable IRQ                                                      */
} MDR_CAN1_INT_EN_GLB_IntEn_Enum;

/* ============================================  MDR_CAN1 INT_EN RX_IntEn [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_INT_EN_RX_IntEn                                                  */
  MDR_CAN1_INT_EN_RX_IntEn_Disabled    = 0,     /*!< Disabled : Disable IRQ                                                    */
  MDR_CAN1_INT_EN_RX_IntEn_Enabled     = 1,     /*!< Enabled : Enable IRQ                                                      */
} MDR_CAN1_INT_EN_RX_IntEn_Enum;

/* ============================================  MDR_CAN1 INT_EN TX_IntEn [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_INT_EN_TX_IntEn                                                  */
  MDR_CAN1_INT_EN_TX_IntEn_Disabled    = 0,     /*!< Disabled : Disable IRQ                                                    */
  MDR_CAN1_INT_EN_TX_IntEn_Enabled     = 1,     /*!< Enabled : Enable IRQ                                                      */
} MDR_CAN1_INT_EN_TX_IntEn_Enum;

/* ===========================================  MDR_CAN1 INT_EN ERR_IntEn [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_INT_EN_ERR_IntEn                                                 */
  MDR_CAN1_INT_EN_ERR_IntEn_Disabled   = 0,     /*!< Disabled : Disable IRQ                                                    */
  MDR_CAN1_INT_EN_ERR_IntEn_Enabled    = 1,     /*!< Enabled : Enable IRQ                                                      */
} MDR_CAN1_INT_EN_ERR_IntEn_Enum;

/* ==========================================  MDR_CAN1 INT_EN ErrOV_IntEn [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_INT_EN_ErrOV_IntEn                                               */
  MDR_CAN1_INT_EN_ErrOV_IntEn_Disabled = 0,     /*!< Disabled : Disable IRQ                                                    */
  MDR_CAN1_INT_EN_ErrOV_IntEn_Enabled  = 1,     /*!< Enabled : Enable IRQ                                                      */
} MDR_CAN1_INT_EN_ErrOV_IntEn_Enum;

/* =========================================================  OVER  ========================================================== */
/* =========================================================  RX_ID  ========================================================= */
/* ========================================================  RX_DLC  ========================================================= */
/* ==============================================  MDR_CAN1 RX_DLC DLC [0..3]  =============================================== */
typedef enum {                                  /*!< MDR_CAN1_RX_DLC_DLC                                                       */
  MDR_CAN1_RX_DLC_DLC_NoData           = 0,     /*!< NoData : Normal Operation                                                 */
  MDR_CAN1_RX_DLC_DLC_Bytes_1          = 1,     /*!< Bytes_1 : Byte Count                                                      */
  MDR_CAN1_RX_DLC_DLC_Bytes_2          = 2,     /*!< Bytes_2 : Byte Count                                                      */
  MDR_CAN1_RX_DLC_DLC_Bytes_3          = 3,     /*!< Bytes_3 : Byte Count                                                      */
  MDR_CAN1_RX_DLC_DLC_Bytes_4          = 4,     /*!< Bytes_4 : Byte Count                                                      */
  MDR_CAN1_RX_DLC_DLC_Bytes_5          = 5,     /*!< Bytes_5 : Byte Count                                                      */
  MDR_CAN1_RX_DLC_DLC_Bytes_6          = 6,     /*!< Bytes_6 : Byte Count                                                      */
  MDR_CAN1_RX_DLC_DLC_Bytes_7          = 7,     /*!< Bytes_7 : Byte Count                                                      */
  MDR_CAN1_RX_DLC_DLC_Bytes_8          = 8,     /*!< Bytes_8 : Byte Count                                                      */
} MDR_CAN1_RX_DLC_DLC_Enum;

/* ==============================================  MDR_CAN1 RX_DLC RTR [8..8]  =============================================== */
typedef enum {                                  /*!< MDR_CAN1_RX_DLC_RTR                                                       */
  MDR_CAN1_RX_DLC_RTR_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_RX_DLC_RTR_On               = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_RX_DLC_RTR_Enum;

/* ===============================================  MDR_CAN1 RX_DLC R1 [9..9]  =============================================== */
typedef enum {                                  /*!< MDR_CAN1_RX_DLC_R1                                                        */
  MDR_CAN1_RX_DLC_R1_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_RX_DLC_R1_On                = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_RX_DLC_R1_Enum;

/* ==============================================  MDR_CAN1 RX_DLC R0 [10..10]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_RX_DLC_R0                                                        */
  MDR_CAN1_RX_DLC_R0_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_RX_DLC_R0_On                = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_RX_DLC_R0_Enum;

/* =============================================  MDR_CAN1 RX_DLC SRR [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_RX_DLC_SRR                                                       */
  MDR_CAN1_RX_DLC_SRR_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_RX_DLC_SRR_On               = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_RX_DLC_SRR_Enum;

/* =============================================  MDR_CAN1 RX_DLC IDE [12..12]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_RX_DLC_IDE                                                       */
  MDR_CAN1_RX_DLC_IDE_Standard         = 0,     /*!< Standard : Standard frame                                                 */
  MDR_CAN1_RX_DLC_IDE_Extended         = 1,     /*!< Extended : Extended frame                                                 */
} MDR_CAN1_RX_DLC_IDE_Enum;

/* =======================================================  RX_DATAL  ======================================================== */
/* =======================================================  RX_DATAH  ======================================================== */
/* =========================================================  TX_ID  ========================================================= */
/* ========================================================  TX_DLC  ========================================================= */
/* ==============================================  MDR_CAN1 TX_DLC DLC [0..3]  =============================================== */
typedef enum {                                  /*!< MDR_CAN1_TX_DLC_DLC                                                       */
  MDR_CAN1_TX_DLC_DLC_NoData           = 0,     /*!< NoData : Normal Operation                                                 */
  MDR_CAN1_TX_DLC_DLC_Bytes_1          = 1,     /*!< Bytes_1 : Byte Count                                                      */
  MDR_CAN1_TX_DLC_DLC_Bytes_2          = 2,     /*!< Bytes_2 : Byte Count                                                      */
  MDR_CAN1_TX_DLC_DLC_Bytes_3          = 3,     /*!< Bytes_3 : Byte Count                                                      */
  MDR_CAN1_TX_DLC_DLC_Bytes_4          = 4,     /*!< Bytes_4 : Byte Count                                                      */
  MDR_CAN1_TX_DLC_DLC_Bytes_5          = 5,     /*!< Bytes_5 : Byte Count                                                      */
  MDR_CAN1_TX_DLC_DLC_Bytes_6          = 6,     /*!< Bytes_6 : Byte Count                                                      */
  MDR_CAN1_TX_DLC_DLC_Bytes_7          = 7,     /*!< Bytes_7 : Byte Count                                                      */
  MDR_CAN1_TX_DLC_DLC_Bytes_8          = 8,     /*!< Bytes_8 : Byte Count                                                      */
} MDR_CAN1_TX_DLC_DLC_Enum;

/* ==============================================  MDR_CAN1 TX_DLC RTR [8..8]  =============================================== */
typedef enum {                                  /*!< MDR_CAN1_TX_DLC_RTR                                                       */
  MDR_CAN1_TX_DLC_RTR_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_TX_DLC_RTR_On               = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_TX_DLC_RTR_Enum;

/* ===============================================  MDR_CAN1 TX_DLC R1 [9..9]  =============================================== */
typedef enum {                                  /*!< MDR_CAN1_TX_DLC_R1                                                        */
  MDR_CAN1_TX_DLC_R1_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_TX_DLC_R1_On                = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_TX_DLC_R1_Enum;

/* ==============================================  MDR_CAN1 TX_DLC R0 [10..10]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_TX_DLC_R0                                                        */
  MDR_CAN1_TX_DLC_R0_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_TX_DLC_R0_On                = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_TX_DLC_R0_Enum;

/* =============================================  MDR_CAN1 TX_DLC SRR [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_TX_DLC_SRR                                                       */
  MDR_CAN1_TX_DLC_SRR_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_CAN1_TX_DLC_SRR_On               = 1,     /*!< On : Enabled                                                              */
} MDR_CAN1_TX_DLC_SRR_Enum;

/* =============================================  MDR_CAN1 TX_DLC IDE [12..12]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_TX_DLC_IDE                                                       */
  MDR_CAN1_TX_DLC_IDE_Standard         = 0,     /*!< Standard : Standard frame                                                 */
  MDR_CAN1_TX_DLC_IDE_Extended         = 1,     /*!< Extended : Extended frame                                                 */
} MDR_CAN1_TX_DLC_IDE_Enum;

/* =======================================================  TX_DATAL  ======================================================== */
/* =======================================================  TX_DATAH  ======================================================== */
/* =======================================================  BUF_CON0  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON0 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON0 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON0 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON0 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON0 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON0 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON0 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON0 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON0_OVER_WR_Enum;

/* =======================================================  BUF_CON1  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON1 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON1 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON1 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON1 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON1 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON1 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON1 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON1 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON1_OVER_WR_Enum;

/* =======================================================  BUF_CON2  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON2 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON2 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON2 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON2 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON2 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON2 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON2 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON2 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON2_OVER_WR_Enum;

/* =======================================================  BUF_CON3  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON3 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON3 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON3 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON3 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON3 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON3 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON3 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON3 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON3_OVER_WR_Enum;

/* =======================================================  BUF_CON4  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON4 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON4 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON4 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON4 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON4 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON4 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON4 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON4 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON4_OVER_WR_Enum;

/* =======================================================  BUF_CON5  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON5 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON5 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON5 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON5 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON5 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON5 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON5 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON5 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON5_OVER_WR_Enum;

/* =======================================================  BUF_CON6  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON6 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON6 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON6 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON6 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON6 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON6 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON6 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON6 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON6_OVER_WR_Enum;

/* =======================================================  BUF_CON7  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON7 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON7 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON7 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON7 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON7 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON7 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON7 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON7 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON7_OVER_WR_Enum;

/* =======================================================  BUF_CON8  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON8 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON8 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON8 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON8 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON8 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON8 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON8 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON8 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON8_OVER_WR_Enum;

/* =======================================================  BUF_CON9  ======================================================== */
/* ==============================================  MDR_CAN1 BUF_CON9 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_EN                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_EN_Off = 0, /*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_EN_On = 1,  /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON9 RX_TX [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RX_TX                                   */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RX_TX_TX = 0,/*!< TX : Output buffer                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RX_TX_RX = 1,/*!< RX : Input buffer                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON9 OVER_EN [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_OVER_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_OVER_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_OVER_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_OVER_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON9 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RTR_EN                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RTR_EN_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RTR_EN_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON9 PRIOR_OFF [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_PRIOR_OFF                               */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_PRIOR_OFF_On = 1,/*!< On : Enabled                                                         */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_PRIOR_OFF_Enum;

/* ============================================  MDR_CAN1 BUF_CON9 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_TX_REQ                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_TX_REQ_Off = 0,/*!< Off : Disabled                                                         */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_TX_REQ_On = 1,/*!< On : Enabled                                                            */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON9 RX_FULL [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RX_FULL                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RX_FULL_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RX_FULL_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON9 OVER_WR [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_OVER_WR                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_OVER_WR_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_OVER_WR_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON9_OVER_WR_Enum;

/* =======================================================  BUF_CON10  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON10 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON10 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON10 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON10 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON10 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON10 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON10 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON10 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON10_OVER_WR_Enum;

/* =======================================================  BUF_CON11  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON11 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON11 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON11 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON11 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON11 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON11 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON11 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON11 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON11_OVER_WR_Enum;

/* =======================================================  BUF_CON12  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON12 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON12 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON12 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON12 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON12 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON12 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON12 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON12 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON12_OVER_WR_Enum;

/* =======================================================  BUF_CON13  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON13 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON13 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON13 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON13 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON13 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON13 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON13 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON13 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON13_OVER_WR_Enum;

/* =======================================================  BUF_CON14  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON14 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON14 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON14 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON14 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON14 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON14 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON14 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON14 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON14_OVER_WR_Enum;

/* =======================================================  BUF_CON15  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON15 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON15 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON15 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON15 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON15 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON15 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON15 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON15 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON15_OVER_WR_Enum;

/* =======================================================  BUF_CON16  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON16 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON16 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON16 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON16 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON16 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON16 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON16 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON16 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON16_OVER_WR_Enum;

/* =======================================================  BUF_CON17  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON17 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON17 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON17 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON17 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON17 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON17 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON17 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON17 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON17_OVER_WR_Enum;

/* =======================================================  BUF_CON18  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON18 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON18 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON18 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON18 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON18 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON18 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON18 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON18 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON18_OVER_WR_Enum;

/* =======================================================  BUF_CON19  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON19 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON19 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON19 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON19 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON19 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON19 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON19 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON19 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON19_OVER_WR_Enum;

/* =======================================================  BUF_CON20  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON20 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON20 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON20 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON20 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON20 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON20 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON20 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON20 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON20_OVER_WR_Enum;

/* =======================================================  BUF_CON21  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON21 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON21 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON21 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON21 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON21 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON21 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON21 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON21 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON21_OVER_WR_Enum;

/* =======================================================  BUF_CON22  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON22 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON22 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON22 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON22 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON22 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON22 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON22 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON22 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON22_OVER_WR_Enum;

/* =======================================================  BUF_CON23  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON23 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON23 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON23 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON23 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON23 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON23 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON23 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON23 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON23_OVER_WR_Enum;

/* =======================================================  BUF_CON24  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON24 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON24 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON24 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON24 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON24 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON24 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON24 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON24 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON24_OVER_WR_Enum;

/* =======================================================  BUF_CON25  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON25 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON25 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON25 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON25 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON25 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON25 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON25 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON25 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON25_OVER_WR_Enum;

/* =======================================================  BUF_CON26  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON26 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON26 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON26 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON26 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON26 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON26 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON26 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON26 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON26_OVER_WR_Enum;

/* =======================================================  BUF_CON27  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON27 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON27 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON27 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON27 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON27 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON27 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON27 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON27 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON27_OVER_WR_Enum;

/* =======================================================  BUF_CON28  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON28 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON28 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON28 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON28 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON28 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON28 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON28 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON28 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON28_OVER_WR_Enum;

/* =======================================================  BUF_CON29  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON29 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON29 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON29 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON29 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON29 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON29 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON29 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON29 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON29_OVER_WR_Enum;

/* =======================================================  BUF_CON30  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON30 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON30 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON30 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON30 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON30 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON30 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON30 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON30 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON30_OVER_WR_Enum;

/* =======================================================  BUF_CON31  ======================================================= */
/* =============================================  MDR_CAN1 BUF_CON31 EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_EN                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_EN_Off = 0,/*!< Off : Disabled                                                            */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_EN_On = 1, /*!< On : Enabled                                                              */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_EN_Enum;

/* ============================================  MDR_CAN1 BUF_CON31 RX_TX [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RX_TX                                  */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RX_TX_TX = 0,/*!< TX : Output buffer                                                      */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RX_TX_RX = 1,/*!< RX : Input buffer                                                       */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RX_TX_Enum;

/* ===========================================  MDR_CAN1 BUF_CON31 OVER_EN [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_OVER_EN                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_OVER_EN_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_OVER_EN_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_OVER_EN_Enum;

/* ===========================================  MDR_CAN1 BUF_CON31 RTR_EN [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RTR_EN                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RTR_EN_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RTR_EN_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RTR_EN_Enum;

/* ==========================================  MDR_CAN1 BUF_CON31 PRIOR_OFF [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_PRIOR_OFF                              */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_PRIOR_OFF_Off = 0,/*!< Off : Disabled                                                     */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_PRIOR_OFF_On = 1,/*!< On : Enabled                                                        */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_PRIOR_OFF_Enum;

/* ===========================================  MDR_CAN1 BUF_CON31 TX_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_TX_REQ                                 */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_TX_REQ_Off = 0,/*!< Off : Disabled                                                        */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_TX_REQ_On = 1,/*!< On : Enabled                                                           */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_TX_REQ_Enum;

/* ===========================================  MDR_CAN1 BUF_CON31 RX_FULL [6..6]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RX_FULL                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RX_FULL_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RX_FULL_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_RX_FULL_Enum;

/* ===========================================  MDR_CAN1 BUF_CON31 OVER_WR [7..7]  =========================================== */
typedef enum {                                  /*!< MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_OVER_WR                                */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_OVER_WR_Off = 0,/*!< Off : Disabled                                                       */
  MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_OVER_WR_On = 1,/*!< On : Enabled                                                          */
} MDR_CAN1_BUF_CON_BUF_CON_BUF_CON31_OVER_WR_Enum;

/* ========================================================  INT_RX  ========================================================= */
/* ===========================================  MDR_CAN1 INT_RX RX_IRQ_En [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_INT_RX_RX_IRQ_En                                                 */
  MDR_CAN1_INT_RX_RX_IRQ_En_Off        = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_CAN1_INT_RX_RX_IRQ_En_On         = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_CAN1_INT_RX_RX_IRQ_En_Enum;

/* ==========================================================  RX  =========================================================== */
/* ==============================================  MDR_CAN1 RX RX_FULL [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_CAN1_RX_RX_FULL                                                       */
  MDR_CAN1_RX_RX_FULL_Empty            = 0,     /*!< Empty : No Data                                                           */
  MDR_CAN1_RX_RX_FULL_Full             = 1,     /*!< Full : Has Data                                                           */
} MDR_CAN1_RX_RX_FULL_Enum;

/* ========================================================  INT_TX  ========================================================= */
/* ===========================================  MDR_CAN1 INT_TX TX_IRQ_En [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_CAN1_INT_TX_TX_IRQ_En                                                 */
  MDR_CAN1_INT_TX_TX_IRQ_En_Off        = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_CAN1_INT_TX_TX_IRQ_En_On         = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_CAN1_INT_TX_TX_IRQ_En_Enum;

/* ==========================================================  TX  =========================================================== */
/* ==============================================  MDR_CAN1 TX TX_nReq [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_CAN1_TX_TX_nReq                                                       */
  MDR_CAN1_TX_TX_nReq_Active           = 0,     /*!< Active : Tx_Req is active                                                 */
  MDR_CAN1_TX_TX_nReq_Off              = 1,     /*!< Off : No req                                                              */
} MDR_CAN1_TX_TX_nReq_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_SSP1                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
/* ================================================  MDR_SSP1 CR0 DSS [0..3]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR0_DSS                                                          */
  MDR_SSP1_CR0_DSS_bits_4              = 3,     /*!< bits_4 : Word of 4 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_5              = 4,     /*!< bits_5 : Word of 5 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_6              = 5,     /*!< bits_6 : Word of 6 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_7              = 6,     /*!< bits_7 : Word of 7 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_8              = 7,     /*!< bits_8 : Word of 8 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_9              = 8,     /*!< bits_9 : Word of 9 bits                                                   */
  MDR_SSP1_CR0_DSS_bits_10             = 9,     /*!< bits_10 : Word of 10 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_11             = 10,    /*!< bits_11 : Word of 11 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_12             = 11,    /*!< bits_12 : Word of 12 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_13             = 12,    /*!< bits_13 : Word of 13 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_14             = 13,    /*!< bits_14 : Word of 14 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_15             = 14,    /*!< bits_15 : Word of 15 bits                                                 */
  MDR_SSP1_CR0_DSS_bits_16             = 15,    /*!< bits_16 : Word of 16 bits                                                 */
} MDR_SSP1_CR0_DSS_Enum;

/* ================================================  MDR_SSP1 CR0 FRF [4..5]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR0_FRF                                                          */
  MDR_SSP1_CR0_FRF_SPI                 = 0,     /*!< SPI : Motorola SPI protocol                                               */
  MDR_SSP1_CR0_FRF_SSI                 = 1,     /*!< SSI : Texas Instruments SSI protocol                                      */
  MDR_SSP1_CR0_FRF_Microwire           = 2,     /*!< Microwire : National Semiconductor Microwire protocol                     */
} MDR_SSP1_CR0_FRF_Enum;

/* ================================================  MDR_SSP1 CR0 SPO [6..6]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR0_SPO                                                          */
  MDR_SSP1_CR0_SPO_Idle_Low            = 0,     /*!< Idle_Low : Idle state is Low                                              */
  MDR_SSP1_CR0_SPO_Idle_High           = 1,     /*!< Idle_High : Idle state is High                                            */
} MDR_SSP1_CR0_SPO_Enum;

/* ================================================  MDR_SSP1 CR0 SPH [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR0_SPH                                                          */
  MDR_SSP1_CR0_SPH_Leading             = 0,     /*!< Leading : Capture data on leading edge                                    */
  MDR_SSP1_CR0_SPH_Trailing            = 1,     /*!< Trailing : Capture data on trailing edge                                  */
} MDR_SSP1_CR0_SPH_Enum;

/* ==========================================================  CR1  ========================================================== */
/* ================================================  MDR_SSP1 CR1 LBM [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR1_LBM                                                          */
  MDR_SSP1_CR1_LBM_Normal              = 0,     /*!< Normal : Normal operation                                                 */
  MDR_SSP1_CR1_LBM_LoopBack            = 1,     /*!< LoopBack : TX send to RX test mode                                        */
} MDR_SSP1_CR1_LBM_Enum;

/* ================================================  MDR_SSP1 CR1 SSE [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR1_SSE                                                          */
  MDR_SSP1_CR1_SSE_Off                 = 0,     /*!< Off : SSP Disable                                                         */
  MDR_SSP1_CR1_SSE_On                  = 1,     /*!< On : SSP Enable                                                           */
} MDR_SSP1_CR1_SSE_Enum;

/* ================================================  MDR_SSP1 CR1 MS [2..2]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_CR1_MS                                                           */
  MDR_SSP1_CR1_MS_Master               = 0,     /*!< Master : Master Mode                                                      */
  MDR_SSP1_CR1_MS_Slave                = 1,     /*!< Slave : Slave Mode                                                        */
} MDR_SSP1_CR1_MS_Enum;

/* ================================================  MDR_SSP1 CR1 SOD [3..3]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_CR1_SOD                                                          */
  MDR_SSP1_CR1_SOD_SlaveTxEna          = 0,     /*!< SlaveTxEna : Slave mode transmit enable                                   */
  MDR_SSP1_CR1_SOD_SlaveTxDis          = 1,     /*!< SlaveTxDis : Slave mode transmit disable                                  */
} MDR_SSP1_CR1_SOD_Enum;

/* ==========================================================  DR  =========================================================== */
/* ==========================================================  SR  =========================================================== */
/* ================================================  MDR_SSP1 SR TFE [0..0]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_TFE                                                           */
  MDR_SSP1_SR_TFE_TX_NotEmpty          = 0,     /*!< TX_NotEmpty : FIFO_TX is Not Empty                                        */
  MDR_SSP1_SR_TFE_TX_Empty             = 1,     /*!< TX_Empty : FIFO_TX is Empty                                               */
} MDR_SSP1_SR_TFE_Enum;

/* ================================================  MDR_SSP1 SR TNF [1..1]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_TNF                                                           */
  MDR_SSP1_SR_TNF_TX_Full              = 0,     /*!< TX_Full : FIFO_TX is Full                                                 */
  MDR_SSP1_SR_TNF_TX_NotFull           = 1,     /*!< TX_NotFull : FIFO_TX is Not Full                                          */
} MDR_SSP1_SR_TNF_Enum;

/* ================================================  MDR_SSP1 SR RNE [2..2]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_RNE                                                           */
  MDR_SSP1_SR_RNE_RX_NotEmpty          = 0,     /*!< RX_NotEmpty : FIFO_RX is Empty                                            */
  MDR_SSP1_SR_RNE_RX_Empty             = 1,     /*!< RX_Empty : FIFO_RX is Not Empty                                           */
} MDR_SSP1_SR_RNE_Enum;

/* ================================================  MDR_SSP1 SR RFF [3..3]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_RFF                                                           */
  MDR_SSP1_SR_RFF_RX_NotFull           = 0,     /*!< RX_NotFull : FIFO_RX is Not Full                                          */
  MDR_SSP1_SR_RFF_RX_Full              = 1,     /*!< RX_Full : FIFO_RX is Full                                                 */
} MDR_SSP1_SR_RFF_Enum;

/* ================================================  MDR_SSP1 SR BSY [4..4]  ================================================= */
typedef enum {                                  /*!< MDR_SSP1_SR_BSY                                                           */
  MDR_SSP1_SR_BSY_Idle                 = 0,     /*!< Idle : FIFO_RX is Not Full                                                */
  MDR_SSP1_SR_BSY_Busy                 = 1,     /*!< Busy : Transfering                                                        */
} MDR_SSP1_SR_BSY_Enum;

/* =========================================================  CPSR  ========================================================== */
/* =========================================================  IMSC  ========================================================== */
/* ==============================================  MDR_SSP1 IMSC RORIM [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_IMSC_RORIM                                                       */
  MDR_SSP1_IMSC_RORIM_NoEvent          = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_IMSC_RORIM_RX_Overrun       = 1,     /*!< RX_Overrun : Flag Active                                                  */
} MDR_SSP1_IMSC_RORIM_Enum;

/* ===============================================  MDR_SSP1 IMSC RTIM [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_IMSC_RTIM                                                        */
  MDR_SSP1_IMSC_RTIM_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_IMSC_RTIM_RX_Timeout        = 1,     /*!< RX_Timeout : Flag Active                                                  */
} MDR_SSP1_IMSC_RTIM_Enum;

/* ===============================================  MDR_SSP1 IMSC RXIM [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_IMSC_RXIM                                                        */
  MDR_SSP1_IMSC_RXIM_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_IMSC_RXIM_RX_HalfFull       = 1,     /*!< RX_HalfFull : Flag Active                                                 */
} MDR_SSP1_IMSC_RXIM_Enum;

/* ===============================================  MDR_SSP1 IMSC TXIM [3..3]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_IMSC_TXIM                                                        */
  MDR_SSP1_IMSC_TXIM_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_IMSC_TXIM_TX_HalfEmpty      = 1,     /*!< TX_HalfEmpty : Flag Active                                                */
} MDR_SSP1_IMSC_TXIM_Enum;

/* ==========================================================  RIS  ========================================================== */
/* ==============================================  MDR_SSP1 RIS RORRIS [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_RIS_RORRIS                                                       */
  MDR_SSP1_RIS_RORRIS_NoEvent          = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_RIS_RORRIS_RX_Overrun       = 1,     /*!< RX_Overrun : Flag Active                                                  */
} MDR_SSP1_RIS_RORRIS_Enum;

/* ===============================================  MDR_SSP1 RIS RTRIS [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_RIS_RTRIS                                                        */
  MDR_SSP1_RIS_RTRIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_RIS_RTRIS_RX_Timeout        = 1,     /*!< RX_Timeout : Flag Active                                                  */
} MDR_SSP1_RIS_RTRIS_Enum;

/* ===============================================  MDR_SSP1 RIS RXRIS [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_RIS_RXRIS                                                        */
  MDR_SSP1_RIS_RXRIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_RIS_RXRIS_RX_HalfFull       = 1,     /*!< RX_HalfFull : Flag Active                                                 */
} MDR_SSP1_RIS_RXRIS_Enum;

/* ===============================================  MDR_SSP1 RIS TXRIS [3..3]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_RIS_TXRIS                                                        */
  MDR_SSP1_RIS_TXRIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_RIS_TXRIS_TX_HalfEmpty      = 1,     /*!< TX_HalfEmpty : Flag Active                                                */
} MDR_SSP1_RIS_TXRIS_Enum;

/* ==========================================================  MIS  ========================================================== */
/* ==============================================  MDR_SSP1 MIS RORMIS [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_MIS_RORMIS                                                       */
  MDR_SSP1_MIS_RORMIS_NoEvent          = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_MIS_RORMIS_RX_Overrun       = 1,     /*!< RX_Overrun : Flag Active                                                  */
} MDR_SSP1_MIS_RORMIS_Enum;

/* ===============================================  MDR_SSP1 MIS RTMIS [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_MIS_RTMIS                                                        */
  MDR_SSP1_MIS_RTMIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_MIS_RTMIS_RX_Timeout        = 1,     /*!< RX_Timeout : Flag Active                                                  */
} MDR_SSP1_MIS_RTMIS_Enum;

/* ===============================================  MDR_SSP1 MIS RXMIS [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_MIS_RXMIS                                                        */
  MDR_SSP1_MIS_RXMIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_MIS_RXMIS_RX_HalfFull       = 1,     /*!< RX_HalfFull : Flag Active                                                 */
} MDR_SSP1_MIS_RXMIS_Enum;

/* ===============================================  MDR_SSP1 MIS TXMIS [3..3]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_MIS_TXMIS                                                        */
  MDR_SSP1_MIS_TXMIS_NoEvent           = 0,     /*!< NoEvent : Flag Inactive                                                   */
  MDR_SSP1_MIS_TXMIS_TX_HalfEmpty      = 1,     /*!< TX_HalfEmpty : Flag Active                                                */
} MDR_SSP1_MIS_TXMIS_Enum;

/* ==========================================================  ICR  ========================================================== */
/* ===============================================  MDR_SSP1 ICR RORIC [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_SSP1_ICR_RORIC                                                        */
  MDR_SSP1_ICR_RORIC_Inactive          = 0,     /*!< Inactive : No action                                                      */
  MDR_SSP1_ICR_RORIC_Clear             = 1,     /*!< Clear : Clear Flag                                                        */
} MDR_SSP1_ICR_RORIC_Enum;

/* ===============================================  MDR_SSP1 ICR RTIC [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_SSP1_ICR_RTIC                                                         */
  MDR_SSP1_ICR_RTIC_Inactive           = 0,     /*!< Inactive : No action                                                      */
  MDR_SSP1_ICR_RTIC_Clear              = 1,     /*!< Clear : Clear Flag                                                        */
} MDR_SSP1_ICR_RTIC_Enum;

/* =========================================================  DMACR  ========================================================= */
/* =============================================  MDR_SSP1 DMACR RXDMAE [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_SSP1_DMACR_RXDMAE                                                     */
  MDR_SSP1_DMACR_RXDMAE_Disable        = 0,     /*!< Disable : Disable DMA                                                     */
  MDR_SSP1_DMACR_RXDMAE_Enable         = 1,     /*!< Enable : Enable DMA                                                       */
} MDR_SSP1_DMACR_RXDMAE_Enum;

/* =============================================  MDR_SSP1 DMACR TXDMAE [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_SSP1_DMACR_TXDMAE                                                     */
  MDR_SSP1_DMACR_TXDMAE_Disable        = 0,     /*!< Disable : Disable DMA                                                     */
  MDR_SSP1_DMACR_TXDMAE_Enable         = 1,     /*!< Enable : Enable DMA                                                       */
} MDR_SSP1_DMACR_TXDMAE_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
/* ================================================  MDR_UART1 DR FE [8..8]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_DR_FE                                                           */
  MDR_UART1_DR_FE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_FE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_FE_Enum;

/* ================================================  MDR_UART1 DR PE [9..9]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_DR_PE                                                           */
  MDR_UART1_DR_PE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_PE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_PE_Enum;

/* ===============================================  MDR_UART1 DR BE [10..10]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_DR_BE                                                           */
  MDR_UART1_DR_BE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_BE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_BE_Enum;

/* ===============================================  MDR_UART1 DR OE [11..11]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_DR_OE                                                           */
  MDR_UART1_DR_OE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_OE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_OE_Enum;

/* ========================================================  RSR_ECR  ======================================================== */
/* ==============================================  MDR_UART1 RSR_ECR FE [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_FE                                                      */
  MDR_UART1_RSR_ECR_FE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_FE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_FE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR PE [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_PE                                                      */
  MDR_UART1_RSR_ECR_PE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_PE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_PE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR BE [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_BE                                                      */
  MDR_UART1_RSR_ECR_BE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_BE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_BE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR OE [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_OE                                                      */
  MDR_UART1_RSR_ECR_OE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_OE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_OE_Enum;

/* ==========================================================  FR  =========================================================== */
/* ================================================  MDR_UART1 FR CTS [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_CTS                                                          */
  MDR_UART1_FR_CTS_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_CTS_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_CTS_Enum;

/* ================================================  MDR_UART1 FR DSR [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_DSR                                                          */
  MDR_UART1_FR_DSR_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_DSR_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_DSR_Enum;

/* ================================================  MDR_UART1 FR DCD [2..2]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_DCD                                                          */
  MDR_UART1_FR_DCD_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_DCD_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_DCD_Enum;

/* ===============================================  MDR_UART1 FR BUSY [3..3]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_BUSY                                                         */
  MDR_UART1_FR_BUSY_Off                = 0,     /*!< Off : Inactive                                                            */
  MDR_UART1_FR_BUSY_On                 = 1,     /*!< On : Active                                                               */
} MDR_UART1_FR_BUSY_Enum;

/* ===============================================  MDR_UART1 FR RXFE [4..4]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_RXFE                                                         */
  MDR_UART1_FR_RXFE_Inactive           = 0,     /*!< Inactive : FIFO not Empty                                                 */
  MDR_UART1_FR_RXFE_Empty              = 1,     /*!< Empty : FIFO Empty                                                        */
} MDR_UART1_FR_RXFE_Enum;

/* ===============================================  MDR_UART1 FR TXFF [5..5]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_TXFF                                                         */
  MDR_UART1_FR_TXFF_Inactive           = 0,     /*!< Inactive : FIFO not Full                                                  */
  MDR_UART1_FR_TXFF_Full               = 1,     /*!< Full : FIFO Full                                                          */
} MDR_UART1_FR_TXFF_Enum;

/* ===============================================  MDR_UART1 FR RXFF [6..6]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_RXFF                                                         */
  MDR_UART1_FR_RXFF_Inactive           = 0,     /*!< Inactive : FIFO not Full                                                  */
  MDR_UART1_FR_RXFF_Full               = 1,     /*!< Full : FIFO Full                                                          */
} MDR_UART1_FR_RXFF_Enum;

/* ===============================================  MDR_UART1 FR TXFE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_TXFE                                                         */
  MDR_UART1_FR_TXFE_Inactive           = 0,     /*!< Inactive : FIFO not Empty                                                 */
  MDR_UART1_FR_TXFE_Empty              = 1,     /*!< Empty : FIFO Empty                                                        */
} MDR_UART1_FR_TXFE_Enum;

/* ================================================  MDR_UART1 FR RI [8..8]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_FR_RI                                                           */
  MDR_UART1_FR_RI_Inactive             = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_RI_Active               = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_RI_Enum;

/* =========================================================  ILPR  ========================================================== */
/* =========================================================  IBRD  ========================================================== */
/* =========================================================  FBRD  ========================================================== */
/* =========================================================  LCR_H  ========================================================= */
/* ==============================================  MDR_UART1 LCR_H BRK [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_BRK                                                       */
  MDR_UART1_LCR_H_BRK_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_BRK_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_BRK_Enum;

/* ==============================================  MDR_UART1 LCR_H PEN [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_PEN                                                       */
  MDR_UART1_LCR_H_PEN_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_PEN_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_PEN_Enum;

/* ==============================================  MDR_UART1 LCR_H EPS [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_EPS                                                       */
  MDR_UART1_LCR_H_EPS_Odd              = 0,     /*!< Odd : Odd parity bit                                                      */
  MDR_UART1_LCR_H_EPS_Even             = 1,     /*!< Even : Even parity bit                                                    */
} MDR_UART1_LCR_H_EPS_Enum;

/* ==============================================  MDR_UART1 LCR_H STP2 [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_STP2                                                      */
  MDR_UART1_LCR_H_STP2_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_STP2_On              = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_STP2_Enum;

/* ==============================================  MDR_UART1 LCR_H FEN [4..4]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_FEN                                                       */
  MDR_UART1_LCR_H_FEN_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_FEN_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_FEN_Enum;

/* ==============================================  MDR_UART1 LCR_H WLEN [5..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_WLEN                                                      */
  MDR_UART1_LCR_H_WLEN_bit_5           = 0,     /*!< bit_5 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_6           = 1,     /*!< bit_6 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_7           = 2,     /*!< bit_7 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_8           = 3,     /*!< bit_8 : Word bits length                                                  */
} MDR_UART1_LCR_H_WLEN_Enum;

/* ==============================================  MDR_UART1 LCR_H SPS [7..7]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_SPS                                                       */
  MDR_UART1_LCR_H_SPS_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_SPS_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_SPS_Enum;

/* ==========================================================  CR  =========================================================== */
/* ================================================  MDR_UART1 CR EN [0..0]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_CR_EN                                                           */
  MDR_UART1_CR_EN_Off                  = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_EN_On                   = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_EN_Enum;

/* ===============================================  MDR_UART1 CR SIREN [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_SIREN                                                        */
  MDR_UART1_CR_SIREN_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_SIREN_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_SIREN_Enum;

/* ===============================================  MDR_UART1 CR SIRLP [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_SIRLP                                                        */
  MDR_UART1_CR_SIRLP_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_SIRLP_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_SIRLP_Enum;

/* ================================================  MDR_UART1 CR LBE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_LBE                                                          */
  MDR_UART1_CR_LBE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_LBE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_LBE_Enum;

/* ================================================  MDR_UART1 CR TXE [8..8]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_TXE                                                          */
  MDR_UART1_CR_TXE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_TXE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_TXE_Enum;

/* ================================================  MDR_UART1 CR RXE [9..9]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_RXE                                                          */
  MDR_UART1_CR_RXE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_RXE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_RXE_Enum;

/* ===============================================  MDR_UART1 CR DTR [10..10]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_DTR                                                          */
  MDR_UART1_CR_DTR_Inactive            = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_DTR_Active              = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_DTR_Enum;

/* ===============================================  MDR_UART1 CR RTS [11..11]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_RTS                                                          */
  MDR_UART1_CR_RTS_Inactive            = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_RTS_Active              = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_RTS_Enum;

/* ==============================================  MDR_UART1 CR Out1 [12..12]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_Out1                                                         */
  MDR_UART1_CR_Out1_Inactive           = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_Out1_Active             = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_Out1_Enum;

/* ==============================================  MDR_UART1 CR Out2 [13..13]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_Out2                                                         */
  MDR_UART1_CR_Out2_Inactive           = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_Out2_Active             = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_Out2_Enum;

/* ==============================================  MDR_UART1 CR RTSEn [14..14]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_RTSEn                                                        */
  MDR_UART1_CR_RTSEn_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_RTSEn_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_RTSEn_Enum;

/* ==============================================  MDR_UART1 CR CTSEn [15..15]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_CTSEn                                                        */
  MDR_UART1_CR_CTSEn_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_CTSEn_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_CTSEn_Enum;

/* =========================================================  IFLS  ========================================================== */
/* ============================================  MDR_UART1 IFLS TXIFLSES [0..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IFLS_TXIFLSES                                                   */
  MDR_UART1_IFLS_TXIFLSES_Words_le4    = 0,     /*!< Words_le4 : Less or Equal words in FIFO_TX                                */
  MDR_UART1_IFLS_TXIFLSES_Words_le8    = 1,     /*!< Words_le8 : Less or Equal words in FIFO_TX                                */
  MDR_UART1_IFLS_TXIFLSES_Words_le16   = 2,     /*!< Words_le16 : Less or Equal words in FIFO_TX                               */
  MDR_UART1_IFLS_TXIFLSES_Words_le24   = 3,     /*!< Words_le24 : Less or Equal words in FIFO_TX                               */
  MDR_UART1_IFLS_TXIFLSES_Words_le32   = 4,     /*!< Words_le32 : Less or Equal words in FIFO_TX                               */
} MDR_UART1_IFLS_TXIFLSES_Enum;

/* ============================================  MDR_UART1 IFLS RXIFLSES [3..5]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IFLS_RXIFLSES                                                   */
  MDR_UART1_IFLS_RXIFLSES_Words_ge4    = 0,     /*!< Words_ge4 : Greater or Equal words in FIFO_RX                             */
  MDR_UART1_IFLS_RXIFLSES_Words_ge8    = 1,     /*!< Words_ge8 : Greater or Equal words in FIFO_RX                             */
  MDR_UART1_IFLS_RXIFLSES_Words_ge16   = 2,     /*!< Words_ge16 : Greater or Equal words in FIFO_RX                            */
  MDR_UART1_IFLS_RXIFLSES_Words_ge24   = 3,     /*!< Words_ge24 : Greater or Equal words in FIFO_RX                            */
  MDR_UART1_IFLS_RXIFLSES_Words_ge32   = 4,     /*!< Words_ge32 : Greater or Equal words in FIFO_RX                            */
} MDR_UART1_IFLS_RXIFLSES_Enum;

/* =========================================================  IMSC  ========================================================== */
/* =============================================  MDR_UART1 IMSC RIM_IM [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RIM_IM                                                     */
  MDR_UART1_IMSC_RIM_IM_Off            = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RIM_IM_On             = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RIM_IM_Enum;

/* =============================================  MDR_UART1 IMSC STCM_IM [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_STCM_IM                                                    */
  MDR_UART1_IMSC_STCM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_STCM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_STCM_IM_Enum;

/* =============================================  MDR_UART1 IMSC DCDM_IM [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_DCDM_IM                                                    */
  MDR_UART1_IMSC_DCDM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_DCDM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_DCDM_IM_Enum;

/* =============================================  MDR_UART1 IMSC DSRM_IM [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_DSRM_IM                                                    */
  MDR_UART1_IMSC_DSRM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_DSRM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_DSRM_IM_Enum;

/* ==============================================  MDR_UART1 IMSC RX_IM [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RX_IM                                                      */
  MDR_UART1_IMSC_RX_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RX_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RX_IM_Enum;

/* ==============================================  MDR_UART1 IMSC TX_IM [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_TX_IM                                                      */
  MDR_UART1_IMSC_TX_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_TX_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_TX_IM_Enum;

/* ==============================================  MDR_UART1 IMSC RT_IM [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RT_IM                                                      */
  MDR_UART1_IMSC_RT_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RT_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RT_IM_Enum;

/* ==============================================  MDR_UART1 IMSC FE_IM [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_FE_IM                                                      */
  MDR_UART1_IMSC_FE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_FE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_FE_IM_Enum;

/* ==============================================  MDR_UART1 IMSC PE_IM [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_PE_IM                                                      */
  MDR_UART1_IMSC_PE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_PE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_PE_IM_Enum;

/* ==============================================  MDR_UART1 IMSC BE_IM [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_BE_IM                                                      */
  MDR_UART1_IMSC_BE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_BE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_BE_IM_Enum;

/* =============================================  MDR_UART1 IMSC OE_IM [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_OE_IM                                                      */
  MDR_UART1_IMSC_OE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_OE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_OE_IM_Enum;

/* ==========================================================  RIS  ========================================================== */
/* =============================================  MDR_UART1 RIS RIM_RIS [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RIM_RIS                                                     */
  MDR_UART1_RIS_RIM_RIS_Off            = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RIM_RIS_On             = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RIM_RIS_Enum;

/* =============================================  MDR_UART1 RIS STCM_RIS [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_STCM_RIS                                                    */
  MDR_UART1_RIS_STCM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_STCM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_STCM_RIS_Enum;

/* =============================================  MDR_UART1 RIS DCDM_RIS [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_DCDM_RIS                                                    */
  MDR_UART1_RIS_DCDM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_DCDM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_DCDM_RIS_Enum;

/* =============================================  MDR_UART1 RIS DSRM_RIS [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_DSRM_RIS                                                    */
  MDR_UART1_RIS_DSRM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_DSRM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_DSRM_RIS_Enum;

/* ==============================================  MDR_UART1 RIS RX_RIS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RX_RIS                                                      */
  MDR_UART1_RIS_RX_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RX_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RX_RIS_Enum;

/* ==============================================  MDR_UART1 RIS TX_RIS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_TX_RIS                                                      */
  MDR_UART1_RIS_TX_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_TX_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_TX_RIS_Enum;

/* ==============================================  MDR_UART1 RIS RT_RIS [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RT_RIS                                                      */
  MDR_UART1_RIS_RT_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RT_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RT_RIS_Enum;

/* ==============================================  MDR_UART1 RIS FE_RIS [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_FE_RIS                                                      */
  MDR_UART1_RIS_FE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_FE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_FE_RIS_Enum;

/* ==============================================  MDR_UART1 RIS PE_RIS [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_PE_RIS                                                      */
  MDR_UART1_RIS_PE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_PE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_PE_RIS_Enum;

/* ==============================================  MDR_UART1 RIS BE_RIS [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_BE_RIS                                                      */
  MDR_UART1_RIS_BE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_BE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_BE_RIS_Enum;

/* =============================================  MDR_UART1 RIS OE_RIS [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_OE_RIS                                                      */
  MDR_UART1_RIS_OE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_OE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_OE_RIS_Enum;

/* ==========================================================  MIS  ========================================================== */
/* =============================================  MDR_UART1 MIS RIM_MIS [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RIM_MIS                                                     */
  MDR_UART1_MIS_RIM_MIS_Off            = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RIM_MIS_On             = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RIM_MIS_Enum;

/* =============================================  MDR_UART1 MIS STCM_MIS [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_STCM_MIS                                                    */
  MDR_UART1_MIS_STCM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_STCM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_STCM_MIS_Enum;

/* =============================================  MDR_UART1 MIS DCDM_MIS [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_DCDM_MIS                                                    */
  MDR_UART1_MIS_DCDM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_DCDM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_DCDM_MIS_Enum;

/* =============================================  MDR_UART1 MIS DSRM_MIS [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_DSRM_MIS                                                    */
  MDR_UART1_MIS_DSRM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_DSRM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_DSRM_MIS_Enum;

/* ==============================================  MDR_UART1 MIS RX_MIS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RX_MIS                                                      */
  MDR_UART1_MIS_RX_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RX_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RX_MIS_Enum;

/* ==============================================  MDR_UART1 MIS TX_MIS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_TX_MIS                                                      */
  MDR_UART1_MIS_TX_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_TX_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_TX_MIS_Enum;

/* ==============================================  MDR_UART1 MIS RT_MIS [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RT_MIS                                                      */
  MDR_UART1_MIS_RT_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RT_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RT_MIS_Enum;

/* ==============================================  MDR_UART1 MIS FE_MIS [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_FE_MIS                                                      */
  MDR_UART1_MIS_FE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_FE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_FE_MIS_Enum;

/* ==============================================  MDR_UART1 MIS PE_MIS [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_PE_MIS                                                      */
  MDR_UART1_MIS_PE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_PE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_PE_MIS_Enum;

/* ==============================================  MDR_UART1 MIS BE_MIS [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_BE_MIS                                                      */
  MDR_UART1_MIS_BE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_BE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_BE_MIS_Enum;

/* =============================================  MDR_UART1 MIS OE_MIS [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_OE_MIS                                                      */
  MDR_UART1_MIS_OE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_OE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_OE_MIS_Enum;

/* ==========================================================  ICR  ========================================================== */
/* ==============================================  MDR_UART1 ICR RIM_IC [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RIM_IC                                                      */
  MDR_UART1_ICR_RIM_IC_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RIM_IC_Clear           = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RIM_IC_Enum;

/* =============================================  MDR_UART1 ICR STCM_IC [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_STCM_IC                                                     */
  MDR_UART1_ICR_STCM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_STCM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_STCM_IC_Enum;

/* =============================================  MDR_UART1 ICR DCDM_IC [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_DCDM_IC                                                     */
  MDR_UART1_ICR_DCDM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_DCDM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_DCDM_IC_Enum;

/* =============================================  MDR_UART1 ICR DSRM_IC [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_DSRM_IC                                                     */
  MDR_UART1_ICR_DSRM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_DSRM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_DSRM_IC_Enum;

/* ==============================================  MDR_UART1 ICR RX_IC [4..4]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RX_IC                                                       */
  MDR_UART1_ICR_RX_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RX_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RX_IC_Enum;

/* ==============================================  MDR_UART1 ICR TX_IC [5..5]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_TX_IC                                                       */
  MDR_UART1_ICR_TX_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_TX_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_TX_IC_Enum;

/* ==============================================  MDR_UART1 ICR RT_IC [6..6]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RT_IC                                                       */
  MDR_UART1_ICR_RT_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RT_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RT_IC_Enum;

/* ==============================================  MDR_UART1 ICR FE_IC [7..7]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_FE_IC                                                       */
  MDR_UART1_ICR_FE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_FE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_FE_IC_Enum;

/* ==============================================  MDR_UART1 ICR PE_IC [8..8]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_PE_IC                                                       */
  MDR_UART1_ICR_PE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_PE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_PE_IC_Enum;

/* ==============================================  MDR_UART1 ICR BE_IC [9..9]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_BE_IC                                                       */
  MDR_UART1_ICR_BE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_BE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_BE_IC_Enum;

/* =============================================  MDR_UART1 ICR OE_IC [10..10]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_OE_IC                                                       */
  MDR_UART1_ICR_OE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_OE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_OE_IC_Enum;

/* =========================================================  DMACR  ========================================================= */
/* =============================================  MDR_UART1 DMACR RXDMAE [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_DMACR_RXDMAE                                                    */
  MDR_UART1_DMACR_RXDMAE_Disabled      = 0,     /*!< Disabled : DMA disabled                                                   */
  MDR_UART1_DMACR_RXDMAE_Enabled       = 1,     /*!< Enabled : DMA enabled                                                     */
} MDR_UART1_DMACR_RXDMAE_Enum;

/* =============================================  MDR_UART1 DMACR TXDMAE [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_DMACR_TXDMAE                                                    */
  MDR_UART1_DMACR_TXDMAE_Disabled      = 0,     /*!< Disabled : DMA disabled                                                   */
  MDR_UART1_DMACR_TXDMAE_Enabled       = 1,     /*!< Enabled : DMA enabled                                                     */
} MDR_UART1_DMACR_TXDMAE_Enum;

/* ============================================  MDR_UART1 DMACR DMAonErr [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_UART1_DMACR_DMAonErr                                                  */
  MDR_UART1_DMACR_DMAonErr_IgnoreError = 0,     /*!< IgnoreError : Ignore Errors                                               */
  MDR_UART1_DMACR_DMAonErr_StopOnError = 1,     /*!< StopOnError : SReq and Req disable on Error                               */
} MDR_UART1_DMACR_DMAonErr_Enum;

/* ==========================================================  TCR  ========================================================== */
/* ===============================================  MDR_UART1 TCR ITEN [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_TCR_ITEN                                                        */
  MDR_UART1_TCR_ITEN_Disabled          = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_ITEN_Enabled           = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_ITEN_Enum;

/* =============================================  MDR_UART1 TCR TestFIFO [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_TCR_TestFIFO                                                    */
  MDR_UART1_TCR_TestFIFO_Disabled      = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_TestFIFO_Enabled       = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_TestFIFO_Enum;

/* =============================================  MDR_UART1 TCR SIRTest [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_TCR_SIRTest                                                     */
  MDR_UART1_TCR_SIRTest_Disabled       = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_SIRTest_Enabled        = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_SIRTest_Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_DMA                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
/* =============================================  MDR_DMA STATUS Enable [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_DMA_STATUS_Enable                                                     */
  MDR_DMA_STATUS_Enable_Disabled       = 0,     /*!< Disabled : Block inactive                                                 */
  MDR_DMA_STATUS_Enable_Enabled        = 1,     /*!< Enabled : Block active                                                    */
} MDR_DMA_STATUS_Enable_Enum;

/* ==============================================  MDR_DMA STATUS State [4..7]  ============================================== */
typedef enum {                                  /*!< MDR_DMA_STATUS_State                                                      */
  MDR_DMA_STATUS_State_Idle            = 0,     /*!< Idle : Idle state                                                         */
  MDR_DMA_STATUS_State_RD_Ctrl         = 1,     /*!< RD_Ctrl : Reading channel controller data                                 */
  MDR_DMA_STATUS_State_RD_pSrc         = 2,     /*!< RD_pSrc : Reading source data end pointer                                 */
  MDR_DMA_STATUS_State_RD_pDest        = 3,     /*!< RD_pDest : Reading destination data end pointer                           */
  MDR_DMA_STATUS_State_RD_Data         = 4,     /*!< RD_Data : Reading source data                                             */
  MDR_DMA_STATUS_State_WR_Data         = 5,     /*!< WR_Data : writing destination data                                        */
  MDR_DMA_STATUS_State_Wait_Clr        = 6,     /*!< Wait_Clr : Waiting for DMA request to clear                               */
  MDR_DMA_STATUS_State_WR_Ctrl         = 7,     /*!< WR_Ctrl : Writing channel controller data                                 */
  MDR_DMA_STATUS_State_Stalled         = 8,     /*!< Stalled : Stalled transfer                                                */
  MDR_DMA_STATUS_State_Done            = 9,     /*!< Done : Done transfer                                                      */
  MDR_DMA_STATUS_State_ScatGath        = 10,    /*!< ScatGath : scatter-gather transition                                      */
} MDR_DMA_STATUS_State_Enum;

/* =========================================  MDR_DMA STATUS Chnls_minus1 [16..20]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_STATUS_Chnls_minus1                                               */
  MDR_DMA_STATUS_Chnls_minus1_1_channels = 0,   /*!< 1_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_2_channels = 1,   /*!< 2_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_3_channels = 2,   /*!< 3_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_4_channels = 3,   /*!< 4_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_5_channels = 4,   /*!< 5_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_6_channels = 5,   /*!< 6_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_7_channels = 6,   /*!< 7_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_8_channels = 7,   /*!< 8_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_9_channels = 8,   /*!< 9_channels : Channels Count                                               */
  MDR_DMA_STATUS_Chnls_minus1_10_channels = 9,  /*!< 10_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_11_channels = 10, /*!< 11_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_12_channels = 11, /*!< 12_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_13_channels = 12, /*!< 13_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_14_channels = 13, /*!< 14_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_15_channels = 14, /*!< 15_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_16_channels = 15, /*!< 16_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_17_channels = 16, /*!< 17_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_18_channels = 17, /*!< 18_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_19_channels = 18, /*!< 19_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_20_channels = 19, /*!< 20_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_21_channels = 20, /*!< 21_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_22_channels = 21, /*!< 22_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_23_channels = 22, /*!< 23_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_24_channels = 23, /*!< 24_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_25_channels = 24, /*!< 25_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_26_channels = 25, /*!< 26_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_27_channels = 26, /*!< 27_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_28_channels = 27, /*!< 28_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_29_channels = 28, /*!< 29_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_30_channels = 29, /*!< 30_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_31_channels = 30, /*!< 31_channels : Channels Count                                              */
  MDR_DMA_STATUS_Chnls_minus1_32_channels = 31, /*!< 32_channels : Channels Count                                              */
} MDR_DMA_STATUS_Chnls_minus1_Enum;

/* ==========================================  MDR_DMA STATUS test_status [28..28]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_STATUS_test_status                                                */
  MDR_DMA_STATUS_test_status_Unavailable = 0,   /*!< Unavailable : Test logic unavailable                                      */
  MDR_DMA_STATUS_test_status_Available = 1,     /*!< Available : Test logic available                                          */
} MDR_DMA_STATUS_test_status_Enum;

/* ==========================================================  CFG  ========================================================== */
/* ===============================================  MDR_DMA CFG Enable [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_DMA_CFG_Enable                                                        */
  MDR_DMA_CFG_Enable_Disabled          = 0,     /*!< Disabled : Block inactive                                                 */
  MDR_DMA_CFG_Enable_Enabled           = 1,     /*!< Enabled : Block active                                                    */
} MDR_DMA_CFG_Enable_Enum;

/* =============================================  MDR_DMA CFG Privileged [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_DMA_CFG_Privileged                                                    */
  MDR_DMA_CFG_Privileged_Off           = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CFG_Privileged_On            = 1,     /*!< On : Active                                                               */
} MDR_DMA_CFG_Privileged_Enum;

/* =============================================  MDR_DMA CFG Bufferable [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_DMA_CFG_Bufferable                                                    */
  MDR_DMA_CFG_Bufferable_Off           = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CFG_Bufferable_On            = 1,     /*!< On : Active                                                               */
} MDR_DMA_CFG_Bufferable_Enum;

/* ==============================================  MDR_DMA CFG Cachable [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_DMA_CFG_Cachable                                                      */
  MDR_DMA_CFG_Cachable_Off             = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CFG_Cachable_On              = 1,     /*!< On : Active                                                               */
} MDR_DMA_CFG_Cachable_Enum;

/* =====================================================  CTRL_BASE_PTR  ===================================================== */
/* ===================================================  ALT_CTRL_BASE_PTR  =================================================== */
/* ===================================================  WAITONREQ_STATUS  ==================================================== */
/* ==========================================  MDR_DMA WAITONREQ_STATUS Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_WAITONREQ_STATUS_Ch_                                              */
  MDR_DMA_WAITONREQ_STATUS_Ch__Off     = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_WAITONREQ_STATUS_Ch__On      = 1,     /*!< On : Active                                                               */
} MDR_DMA_WAITONREQ_STATUS_Ch__Enum;

/* ====================================================  CHNL_SW_REQUEST  ==================================================== */
/* ==========================================  MDR_DMA CHNL_SW_REQUEST Ch_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_SW_REQUEST_Ch_                                               */
  MDR_DMA_CHNL_SW_REQUEST_Ch__Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_SW_REQUEST_Ch__On       = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_SW_REQUEST_Ch__Enum;

/* ===================================================  CHNL_USEBURST_SET  =================================================== */
/* =========================================  MDR_DMA CHNL_USEBURST_SET Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_USEBURST_SET_Ch_                                             */
  MDR_DMA_CHNL_USEBURST_SET_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_USEBURST_SET_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_USEBURST_SET_Ch__Enum;

/* ===================================================  CHNL_USEBURST_CLR  =================================================== */
/* =========================================  MDR_DMA CHNL_USEBURST_CLR Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_USEBURST_CLR_Ch_                                             */
  MDR_DMA_CHNL_USEBURST_CLR_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_USEBURST_CLR_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_USEBURST_CLR_Ch__Enum;

/* ===================================================  CHNL_REQ_MASK_SET  =================================================== */
/* =========================================  MDR_DMA CHNL_REQ_MASK_SET Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_REQ_MASK_SET_Ch_                                             */
  MDR_DMA_CHNL_REQ_MASK_SET_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_REQ_MASK_SET_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_REQ_MASK_SET_Ch__Enum;

/* ===================================================  CHNL_REQ_MASK_CLR  =================================================== */
/* =========================================  MDR_DMA CHNL_REQ_MASK_CLR Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_REQ_MASK_CLR_Ch_                                             */
  MDR_DMA_CHNL_REQ_MASK_CLR_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_REQ_MASK_CLR_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_REQ_MASK_CLR_Ch__Enum;

/* ====================================================  CHNL_ENABLE_SET  ==================================================== */
/* ==========================================  MDR_DMA CHNL_ENABLE_SET Ch_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_ENABLE_SET_Ch_                                               */
  MDR_DMA_CHNL_ENABLE_SET_Ch__Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_ENABLE_SET_Ch__On       = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_ENABLE_SET_Ch__Enum;

/* ====================================================  CHNL_ENABLE_CLR  ==================================================== */
/* ==========================================  MDR_DMA CHNL_ENABLE_CLR Ch_ [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_ENABLE_CLR_Ch_                                               */
  MDR_DMA_CHNL_ENABLE_CLR_Ch__Off      = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_ENABLE_CLR_Ch__On       = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_ENABLE_CLR_Ch__Enum;

/* ===================================================  CHNL_PRI_ALT_SET  ==================================================== */
/* ==========================================  MDR_DMA CHNL_PRI_ALT_SET Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_PRI_ALT_SET_Ch_                                              */
  MDR_DMA_CHNL_PRI_ALT_SET_Ch__Off     = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_PRI_ALT_SET_Ch__On      = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_PRI_ALT_SET_Ch__Enum;

/* ===================================================  CHNL_PRI_ALT_CLR  ==================================================== */
/* ==========================================  MDR_DMA CHNL_PRI_ALT_CLR Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_PRI_ALT_CLR_Ch_                                              */
  MDR_DMA_CHNL_PRI_ALT_CLR_Ch__Off     = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_PRI_ALT_CLR_Ch__On      = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_PRI_ALT_CLR_Ch__Enum;

/* ===================================================  CHNL_PRIORITY_SET  =================================================== */
/* =========================================  MDR_DMA CHNL_PRIORITY_SET Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_PRIORITY_SET_Ch_                                             */
  MDR_DMA_CHNL_PRIORITY_SET_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_PRIORITY_SET_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_PRIORITY_SET_Ch__Enum;

/* ===================================================  CHNL_PRIORITY_CLR  =================================================== */
/* =========================================  MDR_DMA CHNL_PRIORITY_CLR Ch_ [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_DMA_CHNL_PRIORITY_CLR_Ch_                                             */
  MDR_DMA_CHNL_PRIORITY_CLR_Ch__Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_CHNL_PRIORITY_CLR_Ch__On     = 1,     /*!< On : Active                                                               */
} MDR_DMA_CHNL_PRIORITY_CLR_Ch__Enum;

/* ========================================================  ERR_CLR  ======================================================== */
/* ==============================================  MDR_DMA ERR_CLR Ch_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_DMA_ERR_CLR_Ch_                                                       */
  MDR_DMA_ERR_CLR_Ch__Off              = 0,     /*!< Off : Inactive                                                            */
  MDR_DMA_ERR_CLR_Ch__On               = 1,     /*!< On : Active                                                               */
} MDR_DMA_ERR_CLR_Ch__Enum;

/* ========================================================  CHMUX0  ========================================================= */
/* ========================================================  CHMUX1  ========================================================= */
/* ========================================================  CHMUX2  ========================================================= */
/* ========================================================  CHMUX3  ========================================================= */
/* ========================================================  CHMUX4  ========================================================= */
/* ========================================================  CHMUX5  ========================================================= */
/* ========================================================  CHMUX6  ========================================================= */
/* ========================================================  CHMUX7  ========================================================= */


/* =========================================================================================================================== */
/* ================                                         MDR_ETH1                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  DELIMETER  ======================================================= */
/* =========================================================  MAC_L  ========================================================= */
/* =========================================================  MAC_M  ========================================================= */
/* =========================================================  MAC_H  ========================================================= */
/* =========================================================  HASH0  ========================================================= */
/* =========================================================  HASH1  ========================================================= */
/* =========================================================  HASH2  ========================================================= */
/* =========================================================  HASH3  ========================================================= */
/* ==========================================================  IPG  ========================================================== */
/* ==========================================================  PSC  ========================================================== */
/* ==========================================================  BAG  ========================================================== */
/* =======================================================  JitterWnd  ======================================================= */
/* =========================================================  R_CFG  ========================================================= */
/* =============================================  MDR_ETH1 R_CFG MCA_En [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_MCA_En                                                     */
  MDR_ETH1_R_CFG_MCA_En_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_MCA_En_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_MCA_En_Enum;

/* =============================================  MDR_ETH1 R_CFG BCA_En [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_BCA_En                                                     */
  MDR_ETH1_R_CFG_BCA_En_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_BCA_En_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_BCA_En_Enum;

/* =============================================  MDR_ETH1 R_CFG UCA_En [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_UCA_En                                                     */
  MDR_ETH1_R_CFG_UCA_En_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_UCA_En_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_UCA_En_Enum;

/* ==============================================  MDR_ETH1 R_CFG AC_En [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_AC_En                                                      */
  MDR_ETH1_R_CFG_AC_En_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_AC_En_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_AC_En_Enum;

/* ==============================================  MDR_ETH1 R_CFG EF_En [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_EF_En                                                      */
  MDR_ETH1_R_CFG_EF_En_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_EF_En_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_EF_En_Enum;

/* ==============================================  MDR_ETH1 R_CFG CF_En [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_CF_En                                                      */
  MDR_ETH1_R_CFG_CF_En_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_CF_En_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_CF_En_Enum;

/* ==============================================  MDR_ETH1 R_CFG LF_En [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_LF_En                                                      */
  MDR_ETH1_R_CFG_LF_En_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_LF_En_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_LF_En_Enum;

/* ==============================================  MDR_ETH1 R_CFG SF_En [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_SF_En                                                      */
  MDR_ETH1_R_CFG_SF_En_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_SF_En_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_SF_En_Enum;

/* ===========================================  MDR_ETH1 R_CFG EVNT_MODE [8..10]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_EVNT_MODE                                                  */
  MDR_ETH1_R_CFG_EVNT_MODE_FIFO_Empty  = 0,     /*!< FIFO_Empty : FIFO is empty                                                */
  MDR_ETH1_R_CFG_EVNT_MODE_FIFO_AEmpty = 1,     /*!< FIFO_AEmpty : FIFO is 1/32 full                                           */
  MDR_ETH1_R_CFG_EVNT_MODE_FIFO_Half   = 2,     /*!< FIFO_Half : FIFO is 1/2 full                                              */
  MDR_ETH1_R_CFG_EVNT_MODE_FIFO_AFull  = 3,     /*!< FIFO_AFull : FIFO is 31/32 full                                           */
  MDR_ETH1_R_CFG_EVNT_MODE_FIFO_Full   = 4,     /*!< FIFO_Full : FIFO Full                                                     */
  MDR_ETH1_R_CFG_EVNT_MODE_Received    = 5,     /*!< Received : Frame received                                                 */
  MDR_ETH1_R_CFG_EVNT_MODE_Saved       = 6,     /*!< Saved : Frame saved to buff                                               */
  MDR_ETH1_R_CFG_EVNT_MODE_Fault       = 7,     /*!< Fault : Frame in wrong                                                    */
} MDR_ETH1_R_CFG_EVNT_MODE_Enum;

/* ============================================  MDR_ETH1 R_CFG MSB_1st [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_MSB_1st                                                    */
  MDR_ETH1_R_CFG_MSB_1st_LSB           = 0,     /*!< LSB : Low bit forward                                                     */
  MDR_ETH1_R_CFG_MSB_1st_MSB           = 1,     /*!< MSB : High bit forward                                                    */
} MDR_ETH1_R_CFG_MSB_1st_Enum;

/* ==============================================  MDR_ETH1 R_CFG BE [13..13]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_BE                                                         */
  MDR_ETH1_R_CFG_BE_LittleEndian       = 0,     /*!< LittleEndian : Little Endian                                              */
  MDR_ETH1_R_CFG_BE_BigEndian          = 1,     /*!< BigEndian : Big Endian                                                    */
} MDR_ETH1_R_CFG_BE_Enum;

/* ==============================================  MDR_ETH1 R_CFG EN [15..15]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_R_CFG_EN                                                         */
  MDR_ETH1_R_CFG_EN_Off                = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_R_CFG_EN_On                 = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_R_CFG_EN_Enum;

/* =========================================================  X_CFG  ========================================================= */
/* =============================================  MDR_ETH1 X_CFG IPG_En [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_X_CFG_IPG_En                                                     */
  MDR_ETH1_X_CFG_IPG_En_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_X_CFG_IPG_En_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_X_CFG_IPG_En_Enum;

/* =============================================  MDR_ETH1 X_CFG CRC_En [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_X_CFG_CRC_En                                                     */
  MDR_ETH1_X_CFG_CRC_En_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_X_CFG_CRC_En_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_X_CFG_CRC_En_Enum;

/* =============================================  MDR_ETH1 X_CFG PRE_En [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_X_CFG_PRE_En                                                     */
  MDR_ETH1_X_CFG_PRE_En_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_X_CFG_PRE_En_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_X_CFG_PRE_En_Enum;

/* =============================================  MDR_ETH1 X_CFG PAD_En [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_X_CFG_PAD_En                                                     */
  MDR_ETH1_X_CFG_PAD_En_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_X_CFG_PAD_En_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_X_CFG_PAD_En_Enum;

/* ===========================================  MDR_ETH1 X_CFG EVNT_MODE [8..10]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_X_CFG_EVNT_MODE                                                  */
  MDR_ETH1_X_CFG_EVNT_MODE_FIFO_Empty  = 0,     /*!< FIFO_Empty : FIFO is empty                                                */
  MDR_ETH1_X_CFG_EVNT_MODE_FIFO_AEmpty = 1,     /*!< FIFO_AEmpty : FIFO is 1/32 full                                           */
  MDR_ETH1_X_CFG_EVNT_MODE_FIFO_Half   = 2,     /*!< FIFO_Half : FIFO is 1/2 full                                              */
  MDR_ETH1_X_CFG_EVNT_MODE_FIFO_AFull  = 3,     /*!< FIFO_AFull : FIFO is 31/32 full                                           */
  MDR_ETH1_X_CFG_EVNT_MODE_FIFO_Full   = 4,     /*!< FIFO_Full : FIFO Full                                                     */
  MDR_ETH1_X_CFG_EVNT_MODE_Sent        = 5,     /*!< Sent : Frame sent                                                         */
  MDR_ETH1_X_CFG_EVNT_MODE_Read        = 6,     /*!< Read : Frame read from buff                                               */
  MDR_ETH1_X_CFG_EVNT_MODE_TryStarted  = 7,     /*!< TryStarted : Start sending                                                */
} MDR_ETH1_X_CFG_EVNT_MODE_Enum;

/* ============================================  MDR_ETH1 X_CFG MSB_1st [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_X_CFG_MSB_1st                                                    */
  MDR_ETH1_X_CFG_MSB_1st_LSB           = 0,     /*!< LSB : Low bit forward                                                     */
  MDR_ETH1_X_CFG_MSB_1st_MSB           = 1,     /*!< MSB : High bit forward                                                    */
} MDR_ETH1_X_CFG_MSB_1st_Enum;

/* ==============================================  MDR_ETH1 X_CFG BE [13..13]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_X_CFG_BE                                                         */
  MDR_ETH1_X_CFG_BE_LittleEndian       = 0,     /*!< LittleEndian : Little Endian                                              */
  MDR_ETH1_X_CFG_BE_BigEndian          = 1,     /*!< BigEndian : Big Endian                                                    */
} MDR_ETH1_X_CFG_BE_Enum;

/* ==============================================  MDR_ETH1 X_CFG EN [15..15]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_X_CFG_EN                                                         */
  MDR_ETH1_X_CFG_EN_Off                = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_X_CFG_EN_On                 = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_X_CFG_EN_Enum;

/* ========================================================  G_CFGL  ========================================================= */
/* ============================================  MDR_ETH1 G_CFGL Pause_En [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_G_CFGL_Pause_En                                                  */
  MDR_ETH1_G_CFGL_Pause_En_Off         = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGL_Pause_En_On          = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGL_Pause_En_Enum;

/* ============================================  MDR_ETH1 G_CFGL DTRM_En [9..9]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_G_CFGL_DTRM_En                                                   */
  MDR_ETH1_G_CFGL_DTRM_En_Off          = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGL_DTRM_En_On           = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGL_DTRM_En_Enum;

/* ============================================  MDR_ETH1 G_CFGL HD_En [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_G_CFGL_HD_En                                                     */
  MDR_ETH1_G_CFGL_HD_En_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGL_HD_En_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGL_HD_En_Enum;

/* ============================================  MDR_ETH1 G_CFGL EXT_En [11..11]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_G_CFGL_EXT_En                                                    */
  MDR_ETH1_G_CFGL_EXT_En_Off           = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGL_EXT_En_On            = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGL_EXT_En_Enum;

/* ==========================================  MDR_ETH1 G_CFGL BUFF_Mode [12..13]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_G_CFGL_BUFF_Mode                                                 */
  MDR_ETH1_G_CFGL_BUFF_Mode_Linear     = 0,     /*!< Linear : User PTR Control                                                 */
  MDR_ETH1_G_CFGL_BUFF_Mode_AutoPTR    = 1,     /*!< AutoPTR : Auto PTR Control                                                */
  MDR_ETH1_G_CFGL_BUFF_Mode_FIFO       = 2,     /*!< FIFO : FIFO Buff Control                                                  */
} MDR_ETH1_G_CFGL_BUFF_Mode_Enum;

/* ==========================================  MDR_ETH1 G_CFGL IFR_CLR_En [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_ETH1_G_CFGL_IFR_CLR_En                                                */
  MDR_ETH1_G_CFGL_IFR_CLR_En_Off       = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGL_IFR_CLR_En_On        = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGL_IFR_CLR_En_Enum;

/* ========================================================  G_CFGH  ========================================================= */
/* ==============================================  MDR_ETH1 G_CFGH XRST [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_G_CFGH_XRST                                                      */
  MDR_ETH1_G_CFGH_XRST_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGH_XRST_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGH_XRST_Enum;

/* ==============================================  MDR_ETH1 G_CFGH RRST [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_G_CFGH_RRST                                                      */
  MDR_ETH1_G_CFGH_RRST_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGH_RRST_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGH_RRST_Enum;

/* ==============================================  MDR_ETH1 G_CFGH DLB [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_G_CFGH_DLB                                                       */
  MDR_ETH1_G_CFGH_DLB_Off              = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGH_DLB_On               = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGH_DLB_Enum;

/* ==========================================  MDR_ETH1 G_CFGH DBG_RF_EN [12..12]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_G_CFGH_DBG_RF_EN                                                 */
  MDR_ETH1_G_CFGH_DBG_RF_EN_Off        = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGH_DBG_RF_EN_On         = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGH_DBG_RF_EN_Enum;

/* ==========================================  MDR_ETH1 G_CFGH DBG_TF_EN [13..13]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_G_CFGH_DBG_TF_EN                                                 */
  MDR_ETH1_G_CFGH_DBG_TF_EN_Off        = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_G_CFGH_DBG_TF_EN_On         = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_G_CFGH_DBG_TF_EN_Enum;

/* ===========================================  MDR_ETH1 G_CFGH RUN_Mode [14..15]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_G_CFGH_RUN_Mode                                                  */
  MDR_ETH1_G_CFGH_RUN_Mode_FreeRun     = 0,     /*!< FreeRun : Work mode                                                       */
  MDR_ETH1_G_CFGH_RUN_Mode_Halt        = 1,     /*!< Halt : Debug Halt mode                                                    */
  MDR_ETH1_G_CFGH_RUN_Mode_Stop        = 2,     /*!< Stop : Debug Stop mode                                                    */
} MDR_ETH1_G_CFGH_RUN_Mode_Enum;

/* ==========================================================  IMR  ========================================================== */
/* ===============================================  MDR_ETH1 IMR RF_OK [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_IMR_RF_OK                                                        */
  MDR_ETH1_IMR_RF_OK_Off               = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_RF_OK_On                = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_RF_OK_Enum;

/* =============================================  MDR_ETH1 IMR MISSED_F [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_IMR_MISSED_F                                                     */
  MDR_ETH1_IMR_MISSED_F_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_MISSED_F_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_MISSED_F_Enum;

/* ================================================  MDR_ETH1 IMR OVF [2..2]  ================================================ */
typedef enum {                                  /*!< MDR_ETH1_IMR_OVF                                                          */
  MDR_ETH1_IMR_OVF_Off                 = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_OVF_On                  = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_OVF_Enum;

/* ==============================================  MDR_ETH1 IMR SMB_Err [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_IMR_SMB_Err                                                      */
  MDR_ETH1_IMR_SMB_Err_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_SMB_Err_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_SMB_Err_Enum;

/* ==============================================  MDR_ETH1 IMR CRC_Err [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_IMR_CRC_Err                                                      */
  MDR_ETH1_IMR_CRC_Err_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_CRC_Err_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_CRC_Err_Enum;

/* ================================================  MDR_ETH1 IMR CF [5..5]  ================================================= */
typedef enum {                                  /*!< MDR_ETH1_IMR_CF                                                           */
  MDR_ETH1_IMR_CF_Off                  = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_CF_On                   = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_CF_Enum;

/* ================================================  MDR_ETH1 IMR LF [6..6]  ================================================= */
typedef enum {                                  /*!< MDR_ETH1_IMR_LF                                                           */
  MDR_ETH1_IMR_LF_Off                  = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_LF_On                   = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_LF_Enum;

/* ================================================  MDR_ETH1 IMR SF [7..7]  ================================================= */
typedef enum {                                  /*!< MDR_ETH1_IMR_SF                                                           */
  MDR_ETH1_IMR_SF_Off                  = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_SF_On                   = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_SF_Enum;

/* ===============================================  MDR_ETH1 IMR XF_Ok [8..8]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_IMR_XF_Ok                                                        */
  MDR_ETH1_IMR_XF_Ok_Off               = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_XF_Ok_On                = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_XF_Ok_Enum;

/* ==============================================  MDR_ETH1 IMR XF_Err [9..9]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_IMR_XF_Err                                                       */
  MDR_ETH1_IMR_XF_Err_Off              = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_XF_Err_On               = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_XF_Err_Enum;

/* ==============================================  MDR_ETH1 IMR UNDEF [10..10]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_IMR_UNDEF                                                        */
  MDR_ETH1_IMR_UNDEF_Off               = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_UNDEF_On                = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_UNDEF_Enum;

/* ===============================================  MDR_ETH1 IMR LC [11..11]  ================================================ */
typedef enum {                                  /*!< MDR_ETH1_IMR_LC                                                           */
  MDR_ETH1_IMR_LC_Off                  = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_LC_On                   = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_LC_Enum;

/* ============================================  MDR_ETH1 IMR CRC_Lost [12..12]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_IMR_CRC_Lost                                                     */
  MDR_ETH1_IMR_CRC_Lost_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_CRC_Lost_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_CRC_Lost_Enum;

/* ============================================  MDR_ETH1 IMR MDIO_INT [14..14]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_IMR_MDIO_INT                                                     */
  MDR_ETH1_IMR_MDIO_INT_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_MDIO_INT_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_MDIO_INT_Enum;

/* ============================================  MDR_ETH1 IMR MDIO_RDY [15..15]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_IMR_MDIO_RDY                                                     */
  MDR_ETH1_IMR_MDIO_RDY_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IMR_MDIO_RDY_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IMR_MDIO_RDY_Enum;

/* ==========================================================  IFR  ========================================================== */
/* ===============================================  MDR_ETH1 IFR RF_OK [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_IFR_RF_OK                                                        */
  MDR_ETH1_IFR_RF_OK_Off               = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_RF_OK_On                = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_RF_OK_Enum;

/* =============================================  MDR_ETH1 IFR MISSED_F [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_IFR_MISSED_F                                                     */
  MDR_ETH1_IFR_MISSED_F_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_MISSED_F_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_MISSED_F_Enum;

/* ================================================  MDR_ETH1 IFR OVF [2..2]  ================================================ */
typedef enum {                                  /*!< MDR_ETH1_IFR_OVF                                                          */
  MDR_ETH1_IFR_OVF_Off                 = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_OVF_On                  = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_OVF_Enum;

/* ==============================================  MDR_ETH1 IFR SMB_Err [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_IFR_SMB_Err                                                      */
  MDR_ETH1_IFR_SMB_Err_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_SMB_Err_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_SMB_Err_Enum;

/* ==============================================  MDR_ETH1 IFR CRC_Err [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_IFR_CRC_Err                                                      */
  MDR_ETH1_IFR_CRC_Err_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_CRC_Err_On              = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_CRC_Err_Enum;

/* ================================================  MDR_ETH1 IFR CF [5..5]  ================================================= */
typedef enum {                                  /*!< MDR_ETH1_IFR_CF                                                           */
  MDR_ETH1_IFR_CF_Off                  = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_CF_On                   = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_CF_Enum;

/* ================================================  MDR_ETH1 IFR LF [6..6]  ================================================= */
typedef enum {                                  /*!< MDR_ETH1_IFR_LF                                                           */
  MDR_ETH1_IFR_LF_Off                  = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_LF_On                   = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_LF_Enum;

/* ================================================  MDR_ETH1 IFR SF [7..7]  ================================================= */
typedef enum {                                  /*!< MDR_ETH1_IFR_SF                                                           */
  MDR_ETH1_IFR_SF_Off                  = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_SF_On                   = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_SF_Enum;

/* ===============================================  MDR_ETH1 IFR XF_Ok [8..8]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_IFR_XF_Ok                                                        */
  MDR_ETH1_IFR_XF_Ok_Off               = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_XF_Ok_On                = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_XF_Ok_Enum;

/* ==============================================  MDR_ETH1 IFR XF_Err [9..9]  =============================================== */
typedef enum {                                  /*!< MDR_ETH1_IFR_XF_Err                                                       */
  MDR_ETH1_IFR_XF_Err_Off              = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_XF_Err_On               = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_XF_Err_Enum;

/* ==============================================  MDR_ETH1 IFR UNDEF [10..10]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_IFR_UNDEF                                                        */
  MDR_ETH1_IFR_UNDEF_Off               = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_UNDEF_On                = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_UNDEF_Enum;

/* ===============================================  MDR_ETH1 IFR LC [11..11]  ================================================ */
typedef enum {                                  /*!< MDR_ETH1_IFR_LC                                                           */
  MDR_ETH1_IFR_LC_Off                  = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_LC_On                   = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_LC_Enum;

/* ============================================  MDR_ETH1 IFR CRC_Lost [12..12]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_IFR_CRC_Lost                                                     */
  MDR_ETH1_IFR_CRC_Lost_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_CRC_Lost_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_CRC_Lost_Enum;

/* ============================================  MDR_ETH1 IFR MDIO_INT [14..14]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_IFR_MDIO_INT                                                     */
  MDR_ETH1_IFR_MDIO_INT_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_MDIO_INT_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_MDIO_INT_Enum;

/* ============================================  MDR_ETH1 IFR MDIO_RDY [15..15]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_IFR_MDIO_RDY                                                     */
  MDR_ETH1_IFR_MDIO_RDY_Off            = 0,     /*!< Off : Disable                                                             */
  MDR_ETH1_IFR_MDIO_RDY_On             = 1,     /*!< On : Enable                                                               */
} MDR_ETH1_IFR_MDIO_RDY_Enum;

/* =======================================================  MDIO_CTRL  ======================================================= */
/* ============================================  MDR_ETH1 MDIO_CTRL OP [13..13]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_MDIO_CTRL_OP                                                     */
  MDR_ETH1_MDIO_CTRL_OP_RD             = 0,     /*!< RD : MDIO Read                                                            */
  MDR_ETH1_MDIO_CTRL_OP_WR             = 1,     /*!< WR : MDIO Write                                                           */
} MDR_ETH1_MDIO_CTRL_OP_Enum;

/* ==========================================  MDR_ETH1 MDIO_CTRL PRE_En [14..14]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_MDIO_CTRL_PRE_En                                                 */
  MDR_ETH1_MDIO_CTRL_PRE_En_Off        = 0,     /*!< Off : No preamble                                                         */
  MDR_ETH1_MDIO_CTRL_PRE_En_On         = 1,     /*!< On : Send preamble                                                        */
} MDR_ETH1_MDIO_CTRL_PRE_En_Enum;

/* =========================================  MDR_ETH1 MDIO_CTRL CTRL_RDY [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_ETH1_MDIO_CTRL_CTRL_RDY                                               */
  MDR_ETH1_MDIO_CTRL_CTRL_RDY_Busy     = 0,     /*!< Busy : No preamble                                                        */
  MDR_ETH1_MDIO_CTRL_CTRL_RDY_Start_Compl = 1,  /*!< Start_Compl : WR_Start and RD_completed                                   */
} MDR_ETH1_MDIO_CTRL_CTRL_RDY_Enum;

/* =======================================================  MDIO_DATA  ======================================================= */
/* ========================================================  R_HEAD  ========================================================= */
/* ========================================================  X_TAIL  ========================================================= */
/* ========================================================  R_TAIL  ========================================================= */
/* ========================================================  X_HEAD  ========================================================= */
/* =========================================================  STAT  ========================================================== */
/* =============================================  MDR_ETH1 STAT RX_Empty [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_STAT_RX_Empty                                                    */
  MDR_ETH1_STAT_RX_Empty_Off           = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_RX_Empty_On            = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_RX_Empty_Enum;

/* ============================================  MDR_ETH1 STAT RX_AEmpty [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_STAT_RX_AEmpty                                                   */
  MDR_ETH1_STAT_RX_AEmpty_Off          = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_RX_AEmpty_On           = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_RX_AEmpty_Enum;

/* =============================================  MDR_ETH1 STAT RX_Hald [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_STAT_RX_Hald                                                     */
  MDR_ETH1_STAT_RX_Hald_Off            = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_RX_Hald_On             = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_RX_Hald_Enum;

/* =============================================  MDR_ETH1 STAT RX_AFull [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_STAT_RX_AFull                                                    */
  MDR_ETH1_STAT_RX_AFull_Off           = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_RX_AFull_On            = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_RX_AFull_Enum;

/* =============================================  MDR_ETH1 STAT RX_Full [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ETH1_STAT_RX_Full                                                     */
  MDR_ETH1_STAT_RX_Full_Off            = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_RX_Full_On             = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_RX_Full_Enum;

/* =============================================  MDR_ETH1 STAT RX_Count [5..7]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_STAT_RX_Count                                                    */
  MDR_ETH1_STAT_RX_Count_FramesRD_0    = 0,     /*!< FramesRD_0 : Frames to read                                               */
  MDR_ETH1_STAT_RX_Count_FramesRD_1    = 1,     /*!< FramesRD_1 : Frames to read                                               */
  MDR_ETH1_STAT_RX_Count_FramesRD_2    = 2,     /*!< FramesRD_2 : Frames to read                                               */
  MDR_ETH1_STAT_RX_Count_FramesRD_3    = 3,     /*!< FramesRD_3 : Frames to read                                               */
  MDR_ETH1_STAT_RX_Count_FramesRD_4    = 4,     /*!< FramesRD_4 : Frames to read                                               */
  MDR_ETH1_STAT_RX_Count_FramesRD_5    = 5,     /*!< FramesRD_5 : Frames to read                                               */
  MDR_ETH1_STAT_RX_Count_FramesRD_6    = 6,     /*!< FramesRD_6 : Frames to read                                               */
  MDR_ETH1_STAT_RX_Count_FramesRD_7    = 7,     /*!< FramesRD_7 : Frames to read                                               */
} MDR_ETH1_STAT_RX_Count_Enum;

/* =============================================  MDR_ETH1 STAT TX_Empty [8..8]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_STAT_TX_Empty                                                    */
  MDR_ETH1_STAT_TX_Empty_Off           = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_TX_Empty_On            = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_TX_Empty_Enum;

/* ============================================  MDR_ETH1 STAT TX_AEmpty [9..9]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_STAT_TX_AEmpty                                                   */
  MDR_ETH1_STAT_TX_AEmpty_Off          = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_TX_AEmpty_On           = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_TX_AEmpty_Enum;

/* ============================================  MDR_ETH1 STAT TX_Hald [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_STAT_TX_Hald                                                     */
  MDR_ETH1_STAT_TX_Hald_Off            = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_TX_Hald_On             = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_TX_Hald_Enum;

/* ============================================  MDR_ETH1 STAT TX_AFull [11..11]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_STAT_TX_AFull                                                    */
  MDR_ETH1_STAT_TX_AFull_Off           = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_TX_AFull_On            = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_TX_AFull_Enum;

/* ============================================  MDR_ETH1 STAT TX_Full [12..12]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_STAT_TX_Full                                                     */
  MDR_ETH1_STAT_TX_Full_Off            = 0,     /*!< Off : No event                                                            */
  MDR_ETH1_STAT_TX_Full_On             = 1,     /*!< On : Event                                                                */
} MDR_ETH1_STAT_TX_Full_Enum;

/* =======================================================  RCOUNTER  ======================================================== */
/* ======================================================  PHY_CONTROL  ====================================================== */
/* ============================================  MDR_ETH1 PHY_CONTROL LB [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTROL_LB                                                   */
  MDR_ETH1_PHY_CONTROL_LB_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ETH1_PHY_CONTROL_LB_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ETH1_PHY_CONTROL_LB_Enum;

/* ============================================  MDR_ETH1 PHY_CONTROL DLB [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTROL_DLB                                                  */
  MDR_ETH1_PHY_CONTROL_DLB_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ETH1_PHY_CONTROL_DLB_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ETH1_PHY_CONTROL_DLB_Enum;

/* ==========================================  MDR_ETH1 PHY_CONTROL Duplex [2..2]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTROL_Duplex                                               */
  MDR_ETH1_PHY_CONTROL_Duplex_Full     = 0,     /*!< Full : Full Duplex                                                        */
  MDR_ETH1_PHY_CONTROL_Duplex_Half     = 1,     /*!< Half : Half Duplex                                                        */
} MDR_ETH1_PHY_CONTROL_Duplex_Enum;

/* ============================================  MDR_ETH1 PHY_CONTROL DIR [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTROL_DIR                                                  */
  MDR_ETH1_PHY_CONTROL_DIR_Standard    = 0,     /*!< Standard : Standard bits direction                                        */
  MDR_ETH1_PHY_CONTROL_DIR_Inverted    = 1,     /*!< Inverted : Inverted bits direction                                        */
} MDR_ETH1_PHY_CONTROL_DIR_Enum;

/* ==========================================  MDR_ETH1 PHY_CONTROL BASE_2 [5..5]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTROL_BASE_2                                               */
  MDR_ETH1_PHY_CONTROL_BASE_2_TwinPair = 0,     /*!< TwinPair : Twin Pair cable                                                */
  MDR_ETH1_PHY_CONTROL_BASE_2_Coaxial  = 1,     /*!< Coaxial : Coaxial cable                                                   */
} MDR_ETH1_PHY_CONTROL_BASE_2_Enum;

/* =========================================  MDR_ETH1 PHY_CONTROL EXT_En [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTROL_EXT_En                                               */
  MDR_ETH1_PHY_CONTROL_EXT_En_Off      = 0,     /*!< Off : Disabled                                                            */
  MDR_ETH1_PHY_CONTROL_EXT_En_On       = 1,     /*!< On : Enabled                                                              */
} MDR_ETH1_PHY_CONTROL_EXT_En_Enum;

/* ===========================================  MDR_ETH1 PHY_CONTROL RST [15..15]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTROL_RST                                                  */
  MDR_ETH1_PHY_CONTROL_RST_Reset       = 0,     /*!< Reset : Reset State                                                       */
  MDR_ETH1_PHY_CONTROL_RST_Work        = 1,     /*!< Work : Work State                                                         */
} MDR_ETH1_PHY_CONTROL_RST_Enum;

/* ======================================================  PHY_STATYS  ======================================================= */
/* ==========================================  MDR_ETH1 PHY_STATYS LED_LINK [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_STATYS_LED_LINK                                              */
  MDR_ETH1_PHY_STATYS_LED_LINK_Off     = 0,     /*!< Off : No Event                                                            */
  MDR_ETH1_PHY_STATYS_LED_LINK_On      = 1,     /*!< On : Event                                                                */
} MDR_ETH1_PHY_STATYS_LED_LINK_Enum;

/* ==========================================  MDR_ETH1 PHY_STATYS LED_COL [9..9]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_STATYS_LED_COL                                               */
  MDR_ETH1_PHY_STATYS_LED_COL_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_ETH1_PHY_STATYS_LED_COL_On       = 1,     /*!< On : Event                                                                */
} MDR_ETH1_PHY_STATYS_LED_COL_Enum;

/* =========================================  MDR_ETH1 PHY_STATYS INT_LOSS [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_ETH1_PHY_STATYS_INT_LOSS                                              */
  MDR_ETH1_PHY_STATYS_INT_LOSS_Off     = 0,     /*!< Off : No Event                                                            */
  MDR_ETH1_PHY_STATYS_INT_LOSS_On      = 1,     /*!< On : Event                                                                */
} MDR_ETH1_PHY_STATYS_INT_LOSS_Enum;

/* =========================================  MDR_ETH1 PHY_STATYS INT_POL [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_STATYS_INT_POL                                               */
  MDR_ETH1_PHY_STATYS_INT_POL_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_ETH1_PHY_STATYS_INT_POL_On       = 1,     /*!< On : Event                                                                */
} MDR_ETH1_PHY_STATYS_INT_POL_Enum;

/* =========================================  MDR_ETH1 PHY_STATYS INT_JAB [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_STATYS_INT_JAB                                               */
  MDR_ETH1_PHY_STATYS_INT_JAB_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_ETH1_PHY_STATYS_INT_JAB_On       = 1,     /*!< On : Event                                                                */
} MDR_ETH1_PHY_STATYS_INT_JAB_Enum;

/* =========================================  MDR_ETH1 PHY_STATYS INT_JAM [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_STATYS_INT_JAM                                               */
  MDR_ETH1_PHY_STATYS_INT_JAM_Off      = 0,     /*!< Off : No Event                                                            */
  MDR_ETH1_PHY_STATYS_INT_JAM_On       = 1,     /*!< On : Event                                                                */
} MDR_ETH1_PHY_STATYS_INT_JAM_Enum;

/* =====================================================  PHY_CONTORL_A  ===================================================== */
/* ==========================================  MDR_ETH1 PHY_CONTORL_A SELR [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTORL_A_SELR                                               */
  MDR_ETH1_PHY_CONTORL_A_SELR_Internal = 0,     /*!< Internal : EXTR pin in Z-state                                            */
  MDR_ETH1_PHY_CONTORL_A_SELR_External = 1,     /*!< External : Use external R on EXTR pin                                     */
} MDR_ETH1_PHY_CONTORL_A_SELR_Enum;

/* ==========================================  MDR_ETH1 PHY_CONTORL_A TRIM [1..3]  =========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTORL_A_TRIM                                               */
  MDR_ETH1_PHY_CONTORL_A_TRIM_Uref_1v25 = 0,    /*!< Uref_1v25 : Internal Uref Trim                                            */
  MDR_ETH1_PHY_CONTORL_A_TRIM_Uref_1v23 = 1,    /*!< Uref_1v23 : Internal Uref Trim                                            */
  MDR_ETH1_PHY_CONTORL_A_TRIM_Uref_1v22 = 2,    /*!< Uref_1v22 : Internal Uref Trim                                            */
  MDR_ETH1_PHY_CONTORL_A_TRIM_Uref_1v20 = 3,    /*!< Uref_1v20 : Internal Uref Trim                                            */
  MDR_ETH1_PHY_CONTORL_A_TRIM_Uref_1v19 = 4,    /*!< Uref_1v19 : Internal Uref Trim                                            */
  MDR_ETH1_PHY_CONTORL_A_TRIM_Uref_1v17 = 5,    /*!< Uref_1v17 : Internal Uref Trim                                            */
  MDR_ETH1_PHY_CONTORL_A_TRIM_Uref_1v16 = 6,    /*!< Uref_1v16 : Internal Uref Trim                                            */
  MDR_ETH1_PHY_CONTORL_A_TRIM_Uref_1v15 = 7,    /*!< Uref_1v15 : Internal Uref Trim                                            */
} MDR_ETH1_PHY_CONTORL_A_TRIM_Enum;

/* =========================================  MDR_ETH1 PHY_CONTORL_A ISRC [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTORL_A_ISRC                                               */
  MDR_ETH1_PHY_CONTORL_A_ISRC_U_le4V   = 0,     /*!< U_le4V : for Ucc less than 4V                                             */
  MDR_ETH1_PHY_CONTORL_A_ISRC_U_gt4V   = 1,     /*!< U_gt4V : for Ucc greater than 4V                                          */
} MDR_ETH1_PHY_CONTORL_A_ISRC_Enum;

/* ========================================  MDR_ETH1 PHY_CONTORL_A PHY_En [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_ETH1_PHY_CONTORL_A_PHY_En                                             */
  MDR_ETH1_PHY_CONTORL_A_PHY_En_Disable = 0,    /*!< Disable : PHY Disabled                                                    */
  MDR_ETH1_PHY_CONTORL_A_PHY_En_Enable = 1,     /*!< Enable : PHY Enabled                                                      */
} MDR_ETH1_PHY_CONTORL_A_PHY_En_Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* MDR1986VE8_H */


/** @} */ /* End of group MDR1986VE8 */

/** @} */ /* End of group Milandr */
