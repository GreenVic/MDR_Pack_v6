/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     MDR1986VE4.h
 * @brief    CMSIS HeaderFile
 * @version  2.0
 * @date     07. November 2018
 * @note     Generated by SVDConv V3.3.18 on Wednesday, 07.11.2018 13:58:26
 *           from File '../_src/MDR1986VE4.svd',
 *           last modified on Wednesday, 07.11.2018 10:58:22
 */



/** @addtogroup Milandr
  * @{
  */


/** @addtogroup MDR1986VE4
  * @{
  */


#ifndef MDR1986VE4_H
#define MDR1986VE4_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  MDR1986VE4 Specific Interrupt Numbers  ========================================= */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M0 Processor and Core Peripherals  =========================== */
#define __CM0_REV                 0x0000U       /*!< CM0 Core Revision                                                         */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0.h"                           /*!< ARM Cortex-M0 processor and core peripherals                              */
#include "system_MDR1986VE4.h"                  /*!< MDR1986VE4 System                                                         */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief EEPROM Control (MDR_EEPROM)
  */

typedef struct {                                /*!< (@ 0x40018000) MDR_EEPROM Structure                                       */
  
  union {
    __IOM uint32_t CMD;                         /*!< (@ 0x00000000) EEPROM Control register                                    */
    
    struct {
      __IOM uint32_t CON        : 1;            /*!< [0..0] Enable memory access through EEPROM controller                     */
      __IOM uint32_t WR         : 1;            /*!< [1..1] Write operation (test bit)                                         */
      __IOM uint32_t RD         : 1;            /*!< [2..2] Read operation, (test bit)                                         */
      __IOM uint32_t DELAY      : 1;            /*!< [3..3] Memory access CPU delay tacts                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t XE         : 1;            /*!< [6..6] Enable ADDR[16..9]                                                 */
      __IOM uint32_t YE         : 1;            /*!< [7..7] Enable ADDR[8..2]                                                  */
      __IOM uint32_t SE         : 1;            /*!< [8..8] RD Amplifier enable                                                */
      __IOM uint32_t IFREN      : 1;            /*!< [9..9] Select main or info memory                                         */
      __IOM uint32_t ERASE      : 1;            /*!< [10..10] Erase string at ADDR[16:0]                                       */
      __IOM uint32_t MAS1       : 1;            /*!< [11..11] Erase whole block with ERASE                                     */
      __IOM uint32_t PROG       : 1;            /*!< [12..12] Programm EEPROM_DI to ADDR[16:0]                                 */
      __IOM uint32_t NVSTR      : 1;            /*!< [13..13] Memory access mode                                               */
    } CMD_b;
  } ;
  __IOM uint32_t  ADDR;                         /*!< (@ 0x00000004) Address register                                           */
  __IOM uint32_t  DI;                           /*!< (@ 0x00000008) Write data register                                        */
  __IOM uint32_t  DO;                           /*!< (@ 0x0000000C) Read data register                                         */
  __IOM uint32_t  KEY;                          /*!< (@ 0x00000010) Unlock block register                                      */
} MDR_EEPROM_Type;                              /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLock Control (MDR_RST_CLOCK)
  */

typedef struct {                                /*!< (@ 0x40020000) MDR_RST_CLOCK Structure                                    */
  
  union {
    __IM  uint32_t CLOCK_STATUS;                /*!< (@ 0x00000000) Clock Status Register                                      */
    
    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t PLL_CPU_RDY : 1;           /*!< [1..1] PLL CPU ready                                                      */
      __IM  uint32_t HSE_RDY    : 1;            /*!< [2..2] HSE generator ready                                                */
    } CLOCK_STATUS_b;
  } ;
  
  union {
    __IOM uint32_t PLL_CONTROL;                 /*!< (@ 0x00000004) PLL Control Register                                       */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t PLL_CPU_ON : 1;            /*!< [2..2] PLL CPU Enable                                                     */
      __IOM uint32_t PLL_CPU_PLD : 1;           /*!< [3..3] PLL CPU Restart                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t PLL_CPU_MUL : 4;           /*!< [11..8] PLL CPU Mul, [x1 .. x16]                                          */
    } PLL_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t HS_CONTROL;                  /*!< (@ 0x00000008) HSE Generator Control                                      */
    
    struct {
      __IOM uint32_t HSE_ON     : 1;            /*!< [0..0] HSE Enable                                                         */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [1..1] HSE Bypass Mode                                                    */
    } HS_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CLOCK;                   /*!< (@ 0x0000000C) CPU Clock Control                                          */
    
    struct {
      __IOM uint32_t CPU_C1_SEL : 2;            /*!< [1..0] CPU_C1 mux freq select                                             */
      __IOM uint32_t CPU_C2_SEL : 1;            /*!< [2..2] CPU_C2 mux freq select                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CPU_C3_SEL : 4;            /*!< [7..4] CPU_C2 mux output freq devider, [/1, /2, /4 .. /256]               */
      __IOM uint32_t HCLK_SEL   : 2;            /*!< [9..8] Select Clock for CPU                                               */
    } CPU_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t PER1_CLOCK;                  /*!< (@ 0x00000010) Peripherials Clock Control1                                */
    
    struct {
      __IOM uint32_t PER1_C1_SEL : 2;           /*!< [1..0] PER1_C1 mux freq select                                            */
      __IOM uint32_t PER1_C2_SEL : 2;           /*!< [3..2] PER1_C2 mux freq select                                            */
      __IOM uint32_t DEBUG_EN   : 1;            /*!< [4..4] Debug clock enable                                                 */
      __IOM uint32_t DMA_EN     : 1;            /*!< [5..5] DMA clock enable                                                   */
    } PER1_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t ADC_CLOCK;                   /*!< (@ 0x00000014) ADC Clock Control                                          */
    
    struct {
      __IOM uint32_t ADC_C1_SEL : 2;            /*!< [1..0] ADC_C1 mux freq select                                             */
      __IOM uint32_t ADCIU_C1_SEL : 2;          /*!< [3..2] ADCIU_C1 mux freq select                                           */
      __IOM uint32_t ADC_C3_SEL : 4;            /*!< [7..4] ADC_C1 mux output freq devider, [/1, /2, /4 .. /256]               */
      __IOM uint32_t ADCIU_C3_SEL : 4;          /*!< [11..8] ADCIU_C1 mux output freq devider, [/1, /2, /4 .. /256]            */
      __IOM uint32_t ADCIU_CLK_EN : 1;          /*!< [12..12] ADCIU Clock Enable                                               */
      __IOM uint32_t ADC_CLK_EN : 1;            /*!< [13..13] ADC Clock Enable                                                 */
    } ADC_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CLOCK;                   /*!< (@ 0x00000018) RTC Clock Control                                          */
    
    struct {
      __IOM uint32_t HSE_SEL    : 4;            /*!< [3..0] RTC HSE freq devider, [/1, /2, /4 .. /256]                         */
      __IOM uint32_t HSI_SEL    : 4;            /*!< [7..4] RTC HSI freq devider, [/1, /2, /4 .. /256]                         */
      __IOM uint32_t HSE_RTC_EN : 1;            /*!< [8..8] RTC HSE Clock enable                                               */
      __IOM uint32_t HSI_RTC_EN : 1;            /*!< [9..9] RTC HSI Clock enable                                               */
    } RTC_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t PER2_CLOCK;                  /*!< (@ 0x0000001C) Peripherials Clock Control 2                               */
    
    struct {
      __IOM uint32_t SPI1_CLK_EN : 1;           /*!< [0..0] SPI1 Clock Enable                                                  */
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [1..1] UART1 Clock Enable                                                 */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [2..2] UART2 Clock Enable                                                 */
      __IOM uint32_t EEPROM_CLK_EN : 1;         /*!< [3..3] EEPROM Clock Enable                                                */
      __IOM uint32_t RST_CLK_EN : 1;            /*!< [4..4] RST Clock Enable                                                   */
      __IOM uint32_t DMA_CLK_EN : 1;            /*!< [5..5] DMA Clock Enable                                                   */
      __IOM uint32_t CMP_CLK_EN : 1;            /*!< [6..6] CMP Clock Enable                                                   */
      __IOM uint32_t DAC_CLK_EN : 1;            /*!< [7..7] DAC Clock Enable                                                   */
      __IOM uint32_t ADC_CLK_EN : 1;            /*!< [8..8] ADC Clock Enable                                                   */
      __IOM uint32_t WWDT_CLK_EN : 1;           /*!< [9..9] WWDT Clock Enable                                                  */
      __IOM uint32_t IWDT_CLK_EN : 1;           /*!< [10..10] IWDT Clock Enable                                                */
      __IOM uint32_t PWR_CLK_EN : 1;            /*!< [11..11] Power Clock Enable                                               */
      __IOM uint32_t BKP_CLK_EN : 1;            /*!< [12..12] Backup Clock Enable                                              */
      __IOM uint32_t ADCIU_CLK_EN : 1;          /*!< [13..13] ADCIU Clock Enable                                               */
      __IOM uint32_t TIMER1_CLK_EN : 1;         /*!< [14..14] TIMER1 Clock Enable                                              */
      __IOM uint32_t TIMER2_CLK_EN : 1;         /*!< [15..15] TIMER2 Clock Enable                                              */
      __IOM uint32_t PORTA_CLK_EN : 1;          /*!< [16..16] GPIO PORT_A Clock Enable                                         */
      __IOM uint32_t PORTB_CLK_EN : 1;          /*!< [17..17] GPIO PORT_B Clock Enable                                         */
      __IOM uint32_t PORTC_CLK_EN : 1;          /*!< [18..18] GPIO PORT_C Clock Enable                                         */
      __IOM uint32_t CRC_CLK_EN : 1;            /*!< [19..19] CRC Clock Enable                                                 */
    } PER2_CLOCK_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t TIM_CLOCK;                   /*!< (@ 0x00000024) Timer's Clock Control                                      */
    
    struct {
      __IOM uint32_t TIM1_BRG   : 3;            /*!< [2..0] PER1_C2 freq divider to get TIM1_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM2_BRG   : 3;            /*!< [10..8] PER1_C2 freq divider to get TIM2_CLOCK, [/1, /2, /4
                                                     .. /128]                                                                  */
      __IM  uint32_t            : 13;
      __IOM uint32_t TIM1_CLK_EN : 1;           /*!< [24..24] TIM1_CLOCK enable                                                */
      __IOM uint32_t TIM2_CLK_EN : 1;           /*!< [25..25] TIM2_CLOCK enable                                                */
    } TIM_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t UART_CLOCK;                  /*!< (@ 0x00000028) UART's Clock Control                                       */
    
    struct {
      __IOM uint32_t UART1_BRG  : 3;            /*!< [2..0] PER1_C2 freq divider to get UART1_CLOCK, [/1, /2, /4
                                                     .. /128]                                                                  */
      __IM  uint32_t            : 5;
      __IOM uint32_t UART2_BRG  : 3;            /*!< [10..8] PER1_C2 freq divider to get UART2_CLOCK, [/1, /2, /4
                                                     .. /128]                                                                  */
      __IM  uint32_t            : 13;
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [24..24] UART1_CLOCK enable                                               */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [25..25] UART2_CLOCK enable                                               */
    } UART_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t SSP_CLOCK;                   /*!< (@ 0x0000002C) SSP's Clock Control                                        */
    
    struct {
      __IOM uint32_t SSP1_BRG   : 3;            /*!< [2..0] PER1_C2 freq divider to get SSP1_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 21;
      __IOM uint32_t SSP1_CLK_EN : 1;           /*!< [24..24] SSP1_CLOCK Enable                                                */
    } SSP_CLOCK_b;
  } ;
} MDR_RST_CLOCK_Type;                           /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Successive Approximation ADC (MDR_ADC)
  */

typedef struct {                                /*!< (@ 0x40040000) MDR_ADC Structure                                          */
  
  union {
    __IOM uint32_t ADC1_Cfg;                    /*!< (@ 0x00000000) ADC1 config register                                       */
    
    struct {
      __IOM uint32_t ADON       : 1;            /*!< [0..0] Enable ADC                                                         */
      __IOM uint32_t GO         : 1;            /*!< [1..1] Start single ADC mesurement                                        */
      __IOM uint32_t CLKS       : 1;            /*!< [2..2] Select Clock                                                       */
      __IOM uint32_t SAMPLE     : 1;            /*!< [3..3] Single or Continuous measurement                                   */
      __IOM uint32_t CHS        : 5;            /*!< [8..4] Active channel select                                              */
      __IOM uint32_t CHCH       : 1;            /*!< [9..9] Channel switching enable                                           */
      __IOM uint32_t RGNC       : 1;            /*!< [10..10] Signal limiters enable                                           */
      __IOM uint32_t M_REF      : 1;            /*!< [11..11] Signal amplitude reference                                       */
      __IOM uint32_t DIV_CLK    : 4;            /*!< [15..12] Divider for CPU_Clock usage                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS_EN      : 1;            /*!< [17..17] Thermosensor enable                                              */
      __IOM uint32_t TS_BUFF_EN : 1;            /*!< [18..18] Thermosensor buffer enable                                       */
      __IOM uint32_t SEL_TS     : 1;            /*!< [19..19] Output temperature from Thermosensor                             */
      __IOM uint32_t SEL_VREF   : 1;            /*!< [20..20] Output Vref=1.23 from Thermosensor                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t Delay_GO   : 3;            /*!< [27..25] Delay after channels switching in CPU_CLK                        */
    } ADC1_Cfg_b;
  } ;
  
  union {
    __IOM uint32_t ADC2_Cfg;                    /*!< (@ 0x00000004) ADC2 config register                                       */
    
    struct {
      __IM  uint32_t            : 17;
      __IOM uint32_t ADC1_OP    : 1;            /*!< [17..17] ADC1 Setpoint Vref source                                        */
    } ADC2_Cfg_b;
  } ;
  
  union {
    __IOM uint32_t ADC1_H_Level;                /*!< (@ 0x00000008) ADC High limit                                             */
    
    struct {
      __IOM uint32_t Level      : 12;           /*!< [11..0] Signal limit level                                                */
    } ADC1_H_Level_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ADC1_L_Level;                /*!< (@ 0x00000010) ADC Low limit                                              */
    
    struct {
      __IOM uint32_t Level      : 12;           /*!< [11..0] Signal limit level                                                */
    } ADC1_L_Level_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IM  uint32_t ADC1_RESULT;                 /*!< (@ 0x00000018) ADC result register                                        */
    
    struct {
      __IM  uint32_t Value      : 12;           /*!< [11..0] Channel signal value                                              */
      __IM  uint32_t            : 4;
      __IM  uint32_t Channel    : 5;            /*!< [20..16] Channel index                                                    */
    } ADC1_RESULT_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t ADC1_STATUS;                 /*!< (@ 0x00000020) ADC status register                                        */
    
    struct {
      __IOM uint32_t Overwrite  : 1;            /*!< [0..0] Result overwritten flag                                            */
      __IOM uint32_t AWOIFEN    : 1;            /*!< [1..1] Signal is out of limiters range                                    */
      __IOM uint32_t EOCIF      : 1;            /*!< [2..2] Result ready to read                                               */
      __IOM uint32_t AWOIF_IE   : 1;            /*!< [3..3] Enable IRQ by AWOIFEN flag                                         */
      __IOM uint32_t EOCIF_EN   : 1;            /*!< [4..4] Enable IRQ by EOCIF flag                                           */
    } ADC1_STATUS_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t ADC1_CHSEL;                  /*!< (@ 0x00000028) ADC channels select register                               */
    
    struct {
      __IOM uint32_t Channel_0  : 1;            /*!< [0..0] Signal on PC4, Ref-                                                */
      __IOM uint32_t Channel_1  : 1;            /*!< [1..1] Signal on PC3, Ref+                                                */
      __IOM uint32_t Channel_2  : 1;            /*!< [2..2] Signal on PC2                                                      */
      __IOM uint32_t Channel_3  : 1;            /*!< [3..3] Signal on PC1                                                      */
      __IOM uint32_t Channel_4  : 1;            /*!< [4..4] Signal on PB9                                                      */
      __IOM uint32_t Channel_5  : 1;            /*!< [5..5] Signal on PB8                                                      */
      __IOM uint32_t Channel_6  : 1;            /*!< [6..6] Signal on PB7                                                      */
      __IOM uint32_t Channel_7  : 1;            /*!< [7..7] Signal on PB6                                                      */
      __IM  uint32_t            : 22;
      __IOM uint32_t Channel_30 : 1;            /*!< [30..30] VRef from Thermosensor                                           */
      __IOM uint32_t Channel_31 : 1;            /*!< [31..31] Temperature from Thermosensor                                    */
    } ADC1_CHSEL_b;
  } ;
} MDR_ADC_Type;                                 /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup and RTC Control (MDR_BKP)
  */

typedef struct {                                /*!< (@ 0x40060000) MDR_BKP Structure                                          */
  __IOM uint32_t  REG_00;                       /*!< (@ 0x00000000) User backup registers                                      */
  __IOM uint32_t  REG_01;                       /*!< (@ 0x00000004) User backup registers                                      */
  __IOM uint32_t  REG_02;                       /*!< (@ 0x00000008) User backup registers                                      */
  __IOM uint32_t  REG_03;                       /*!< (@ 0x0000000C) User backup registers                                      */
  __IOM uint32_t  REG_04;                       /*!< (@ 0x00000010) User backup registers                                      */
  __IOM uint32_t  REG_05;                       /*!< (@ 0x00000014) User backup registers                                      */
  __IOM uint32_t  REG_06;                       /*!< (@ 0x00000018) User backup registers                                      */
  __IOM uint32_t  REG_07;                       /*!< (@ 0x0000001C) User backup registers                                      */
  __IOM uint32_t  REG_08;                       /*!< (@ 0x00000020) User backup registers                                      */
  __IOM uint32_t  REG_09;                       /*!< (@ 0x00000024) User backup registers                                      */
  __IOM uint32_t  REG_0A;                       /*!< (@ 0x00000028) User backup registers                                      */
  __IOM uint32_t  REG_0B;                       /*!< (@ 0x0000002C) User backup registers                                      */
  __IOM uint32_t  REG_0C;                       /*!< (@ 0x00000030) User backup registers                                      */
  __IOM uint32_t  REG_0D;                       /*!< (@ 0x00000034) User backup registers                                      */
  
  union {
    __IOM uint32_t REG_0E;                      /*!< (@ 0x00000038) REG_OE Control register                                    */
    
    struct {
      __IOM uint32_t LOW        : 3;            /*!< [2..0] DUcc Freq control                                                  */
      __IOM uint32_t SelectRI   : 3;            /*!< [5..3] DUcc extra I, should be equals to LOW field!                       */
      __IOM uint32_t Jtag_A     : 1;            /*!< [6..6] Enable Jtag_A interface                                            */
      __IOM uint32_t Jtag_B     : 1;            /*!< [7..7] Enable Jtag_B interface                                            */
      __IOM uint32_t Trim_dDUcc : 3;            /*!< [10..8] Ducc adjust voltages                                              */
      __IOM uint32_t FPOR       : 1;            /*!< [11..11] Power Reset Flag                                                 */
      __IOM uint32_t Trim_DUcc  : 2;            /*!< [13..12] Select DUcc voltage                                              */
      __IOM uint32_t COVDET     : 1;            /*!< [14..14] Breaking access flag                                             */
      __IOM uint32_t I_LimEn    : 1;            /*!< [15..15] Enable I 150mA protection                                        */
    } REG_0E_b;
  } ;
  
  union {
    __IOM uint32_t REG_0F;                      /*!< (@ 0x0000003C) REG_OF Control register                                    */
    
    struct {
      __IOM uint32_t LSE_ON     : 1;            /*!< [0..0] LSE generator enable                                               */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE generator                                                      */
      __IOM uint32_t RTC_SEL    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_EN     : 1;            /*!< [4..4] RTC enable                                                         */
      __IOM uint32_t RTC_CAL    : 8;            /*!< [12..5] RTC calibration                                                   */
      __IM  uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE frequency ready                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSI_ON     : 1;            /*!< [15..15] LSI generator enable                                             */
      __IOM uint32_t LSI_TRIM   : 5;            /*!< [20..16] LSI frequency adjust                                             */
      __IM  uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI frequency ready                                              */
      __IOM uint32_t HSI_ON     : 1;            /*!< [22..22] HSI generator enable                                             */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI frequency ready                                              */
      __IOM uint32_t HSI_TRIM   : 6;            /*!< [29..24] HSI frequency adjust                                             */
      __IOM uint32_t Standby    : 1;            /*!< [30..30] Standby sleep mode                                               */
      __IOM uint32_t RTC_RESET  : 1;            /*!< [31..31] Reset RTC bit                                                    */
    } REG_0F_b;
  } ;
  __IOM uint32_t  RTC_CNT;                      /*!< (@ 0x00000040) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV;                     /*!< (@ 0x00000044) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL;                     /*!< (@ 0x00000048) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM;                    /*!< (@ 0x0000004C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS;                      /*!< (@ 0x00000050) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
    } RTC_CS_b;
  } ;
} MDR_BKP_Type;                                 /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Port Control (MDR_PORTA)
  */

typedef struct {                                /*!< (@ 0x40080000) MDR_PORTA Structure                                        */
  
  union {
    __IOM uint32_t RXTX;                        /*!< (@ 0x00000000) GPIO Pin Data                                              */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Pin data value                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Pin data value                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Pin data value                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Pin data value                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Pin data value                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Pin data value                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Pin data value                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Pin data value                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Pin data value                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Pin data value                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Pin data value                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Pin data value                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Pin data value                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Pin data value                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Pin data value                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Pin data value                                                   */
    } RXTX_b;
  } ;
  
  union {
    __IOM uint32_t OE;                          /*!< (@ 0x00000004) Output Enable Control                                      */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Pin data direction                                                 */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Pin data direction                                                 */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Pin data direction                                                 */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Pin data direction                                                 */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Pin data direction                                                 */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Pin data direction                                                 */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Pin data direction                                                 */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Pin data direction                                                 */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Pin data direction                                                 */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Pin data direction                                                 */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Pin data direction                                               */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Pin data direction                                               */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Pin data direction                                               */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Pin data direction                                               */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Pin data direction                                               */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Pin data direction                                               */
    } OE_b;
  } ;
  
  union {
    __IOM uint32_t FUNC;                        /*!< (@ 0x00000008) Pin Functions in Digital mode                              */
    
    struct {
      __IOM uint32_t Pin_0      : 2;            /*!< [1..0] Pin Digital Function                                               */
      __IOM uint32_t Pin_1      : 2;            /*!< [3..2] Pin Digital Function                                               */
      __IOM uint32_t Pin_2      : 2;            /*!< [5..4] Pin Digital Function                                               */
      __IOM uint32_t Pin_3      : 2;            /*!< [7..6] Pin Digital Function                                               */
      __IOM uint32_t Pin_4      : 2;            /*!< [9..8] Pin Digital Function                                               */
      __IOM uint32_t Pin_5      : 2;            /*!< [11..10] Pin Digital Function                                             */
      __IOM uint32_t Pin_6      : 2;            /*!< [13..12] Pin Digital Function                                             */
      __IOM uint32_t Pin_7      : 2;            /*!< [15..14] Pin Digital Function                                             */
      __IOM uint32_t Pin_8      : 2;            /*!< [17..16] Pin Digital Function                                             */
      __IOM uint32_t Pin_9      : 2;            /*!< [19..18] Pin Digital Function                                             */
      __IOM uint32_t Pin_10     : 2;            /*!< [21..20] Pin Digital Function                                             */
      __IOM uint32_t Pin_11     : 2;            /*!< [23..22] Pin Digital Function                                             */
      __IOM uint32_t Pin_12     : 2;            /*!< [25..24] Pin Digital Function                                             */
      __IOM uint32_t Pin_13     : 2;            /*!< [27..26] Pin Digital Function                                             */
      __IOM uint32_t Pin_14     : 2;            /*!< [29..28] Pin Digital Function                                             */
      __IOM uint32_t Pin_15     : 2;            /*!< [31..30] Pin Digital Function                                             */
    } FUNC_b;
  } ;
  
  union {
    __IOM uint32_t ANALOG;                      /*!< (@ 0x0000000C) Enable Digital Mode Control                                */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Enable Digital mode                                                */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Enable Digital mode                                                */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Enable Digital mode                                                */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Enable Digital mode                                                */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Enable Digital mode                                                */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Enable Digital mode                                                */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Enable Digital mode                                                */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Enable Digital mode                                                */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Enable Digital mode                                                */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Enable Digital mode                                                */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Enable Digital mode                                              */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Enable Digital mode                                              */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Enable Digital mode                                              */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Enable Digital mode                                              */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Enable Digital mode                                              */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Enable Digital mode                                              */
    } ANALOG_b;
  } ;
  
  union {
    __IOM uint32_t PULL;                        /*!< (@ 0x00000010) PULL Up and Down Control                                   */
    
    struct {
      __IOM uint32_t Down_Pin_0 : 1;            /*!< [0..0] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_1 : 1;            /*!< [1..1] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_2 : 1;            /*!< [2..2] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_3 : 1;            /*!< [3..3] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_4 : 1;            /*!< [4..4] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_5 : 1;            /*!< [5..5] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_6 : 1;            /*!< [6..6] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_7 : 1;            /*!< [7..7] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_8 : 1;            /*!< [8..8] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_9 : 1;            /*!< [9..9] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_10 : 1;           /*!< [10..10] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_11 : 1;           /*!< [11..11] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_12 : 1;           /*!< [12..12] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_13 : 1;           /*!< [13..13] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_14 : 1;           /*!< [14..14] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_15 : 1;           /*!< [15..15] Pull Down Enable                                                 */
      __IOM uint32_t UP_Pin_0   : 1;            /*!< [16..16] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_1   : 1;            /*!< [17..17] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_2   : 1;            /*!< [18..18] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_3   : 1;            /*!< [19..19] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_4   : 1;            /*!< [20..20] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_5   : 1;            /*!< [21..21] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_6   : 1;            /*!< [22..22] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_7   : 1;            /*!< [23..23] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_8   : 1;            /*!< [24..24] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_9   : 1;            /*!< [25..25] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_10  : 1;            /*!< [26..26] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_11  : 1;            /*!< [27..27] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_12  : 1;            /*!< [28..28] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_13  : 1;            /*!< [29..29] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_14  : 1;            /*!< [30..30] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_15  : 1;            /*!< [31..31] Pull Up Enable                                                   */
    } PULL_b;
  } ;
  
  union {
    __IOM uint32_t PD;                          /*!< (@ 0x00000014) Otput Driver Mode                                          */
    
    struct {
      __IOM uint32_t Driver_Pin_0 : 1;          /*!< [0..0] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_1 : 1;          /*!< [1..1] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_2 : 1;          /*!< [2..2] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_3 : 1;          /*!< [3..3] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_4 : 1;          /*!< [4..4] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_5 : 1;          /*!< [5..5] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_6 : 1;          /*!< [6..6] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_7 : 1;          /*!< [7..7] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_8 : 1;          /*!< [8..8] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_9 : 1;          /*!< [9..9] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_10 : 1;         /*!< [10..10] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_11 : 1;         /*!< [11..11] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_12 : 1;         /*!< [12..12] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_13 : 1;         /*!< [13..13] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_14 : 1;         /*!< [14..14] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_15 : 1;         /*!< [15..15] Driver mode for pin                                              */
      __IOM uint32_t Schmitt_Pin_0 : 1;         /*!< [16..16] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_1 : 1;         /*!< [17..17] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_2 : 1;         /*!< [18..18] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_3 : 1;         /*!< [19..19] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_4 : 1;         /*!< [20..20] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_5 : 1;         /*!< [21..21] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_6 : 1;         /*!< [22..22] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_7 : 1;         /*!< [23..23] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_8 : 1;         /*!< [24..24] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_9 : 1;         /*!< [25..25] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_10 : 1;        /*!< [26..26] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_11 : 1;        /*!< [27..27] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_12 : 1;        /*!< [28..28] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_13 : 1;        /*!< [29..29] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_14 : 1;        /*!< [30..30] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_15 : 1;        /*!< [31..31] Schmitt trigger enable                                           */
    } PD_b;
  } ;
  
  union {
    __IOM uint32_t PWR;                         /*!< (@ 0x00000018) Output voltage switch rate                                 */
    
    struct {
      __IOM uint32_t Pin_0      : 2;            /*!< [1..0] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_1      : 2;            /*!< [3..2] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_2      : 2;            /*!< [5..4] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_3      : 2;            /*!< [7..6] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_4      : 2;            /*!< [9..8] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_5      : 2;            /*!< [11..10] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_6      : 2;            /*!< [13..12] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_7      : 2;            /*!< [15..14] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_8      : 2;            /*!< [17..16] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_9      : 2;            /*!< [19..18] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_10     : 2;            /*!< [21..20] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_11     : 2;            /*!< [23..22] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_12     : 2;            /*!< [25..24] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_13     : 2;            /*!< [27..26] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_14     : 2;            /*!< [29..28] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_15     : 2;            /*!< [31..30] Voltage levels switch rate                                       */
    } PWR_b;
  } ;
  
  union {
    __IOM uint32_t GFEN;                        /*!< (@ 0x0000001C) Input pulses filter                                        */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Filter for pin                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Filter for pin                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Filter for pin                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Filter for pin                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Filter for pin                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Filter for pin                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Filter for pin                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Filter for pin                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Filter for pin                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Filter for pin                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Filter for pin                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Filter for pin                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Filter for pin                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Filter for pin                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Filter for pin                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Filter for pin                                                   */
    } GFEN_b;
  } ;
} MDR_PORTA_Type;                               /*!< Size = 32 (0x20)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define MDR_EEPROM_BASE             0x40018000UL
#define MDR_RST_CLOCK_BASE          0x40020000UL
#define MDR_ADC_BASE                0x40040000UL
#define MDR_BKP_BASE                0x40060000UL
#define MDR_PORTA_BASE              0x40080000UL
#define MDR_PORTB_BASE              0x40088000UL
#define MDR_PORTC_BASE              0x40090000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define MDR_EEPROM                  ((MDR_EEPROM_Type*)        MDR_EEPROM_BASE)
#define MDR_RST_CLOCK               ((MDR_RST_CLOCK_Type*)     MDR_RST_CLOCK_BASE)
#define MDR_ADC                     ((MDR_ADC_Type*)           MDR_ADC_BASE)
#define MDR_BKP                     ((MDR_BKP_Type*)           MDR_BKP_BASE)
#define MDR_PORTA                   ((MDR_PORTA_Type*)         MDR_PORTA_BASE)
#define MDR_PORTB                   ((MDR_PORTA_Type*)         MDR_PORTB_BASE)
#define MDR_PORTC                   ((MDR_PORTA_Type*)         MDR_PORTC_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CMD  ========================================================== */
#define MDR_EEPROM_CMD_CON_Pos            (0UL)                     /*!< MDR_EEPROM CMD: CON (Bit 0)                           */
#define MDR_EEPROM_CMD_CON_Msk            (0x1UL)                   /*!< MDR_EEPROM CMD: CON (Bitfield-Mask: 0x01)             */
#define MDR_EEPROM_CMD_WR_Pos             (1UL)                     /*!< MDR_EEPROM CMD: WR (Bit 1)                            */
#define MDR_EEPROM_CMD_WR_Msk             (0x2UL)                   /*!< MDR_EEPROM CMD: WR (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_RD_Pos             (2UL)                     /*!< MDR_EEPROM CMD: RD (Bit 2)                            */
#define MDR_EEPROM_CMD_RD_Msk             (0x4UL)                   /*!< MDR_EEPROM CMD: RD (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_DELAY_Pos          (3UL)                     /*!< MDR_EEPROM CMD: DELAY (Bit 3)                         */
#define MDR_EEPROM_CMD_DELAY_Msk          (0x8UL)                   /*!< MDR_EEPROM CMD: DELAY (Bitfield-Mask: 0x01)           */
#define MDR_EEPROM_CMD_XE_Pos             (6UL)                     /*!< MDR_EEPROM CMD: XE (Bit 6)                            */
#define MDR_EEPROM_CMD_XE_Msk             (0x40UL)                  /*!< MDR_EEPROM CMD: XE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_YE_Pos             (7UL)                     /*!< MDR_EEPROM CMD: YE (Bit 7)                            */
#define MDR_EEPROM_CMD_YE_Msk             (0x80UL)                  /*!< MDR_EEPROM CMD: YE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_SE_Pos             (8UL)                     /*!< MDR_EEPROM CMD: SE (Bit 8)                            */
#define MDR_EEPROM_CMD_SE_Msk             (0x100UL)                 /*!< MDR_EEPROM CMD: SE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_IFREN_Pos          (9UL)                     /*!< MDR_EEPROM CMD: IFREN (Bit 9)                         */
#define MDR_EEPROM_CMD_IFREN_Msk          (0x200UL)                 /*!< MDR_EEPROM CMD: IFREN (Bitfield-Mask: 0x01)           */
#define MDR_EEPROM_CMD_ERASE_Pos          (10UL)                    /*!< MDR_EEPROM CMD: ERASE (Bit 10)                        */
#define MDR_EEPROM_CMD_ERASE_Msk          (0x400UL)                 /*!< MDR_EEPROM CMD: ERASE (Bitfield-Mask: 0x01)           */
#define MDR_EEPROM_CMD_MAS1_Pos           (11UL)                    /*!< MDR_EEPROM CMD: MAS1 (Bit 11)                         */
#define MDR_EEPROM_CMD_MAS1_Msk           (0x800UL)                 /*!< MDR_EEPROM CMD: MAS1 (Bitfield-Mask: 0x01)            */
#define MDR_EEPROM_CMD_PROG_Pos           (12UL)                    /*!< MDR_EEPROM CMD: PROG (Bit 12)                         */
#define MDR_EEPROM_CMD_PROG_Msk           (0x1000UL)                /*!< MDR_EEPROM CMD: PROG (Bitfield-Mask: 0x01)            */
#define MDR_EEPROM_CMD_NVSTR_Pos          (13UL)                    /*!< MDR_EEPROM CMD: NVSTR (Bit 13)                        */
#define MDR_EEPROM_CMD_NVSTR_Msk          (0x2000UL)                /*!< MDR_EEPROM CMD: NVSTR (Bitfield-Mask: 0x01)           */
/* =========================================================  ADDR  ========================================================== */
/* ==========================================================  DI  =========================================================== */
/* ==========================================================  DO  =========================================================== */
/* ==========================================================  KEY  ========================================================== */


/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* =====================================================  CLOCK_STATUS  ====================================================== */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY_Pos (1UL)            /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_CPU_RDY (Bit 1)       */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY_Msk (0x2UL)          /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_CPU_RDY (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY_Pos (2UL)                /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE_RDY (Bit 2)           */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY_Msk (0x4UL)              /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE_RDY (Bitfield-Mask: 0x01) */
/* ======================================================  PLL_CONTROL  ====================================================== */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON_Pos (2UL)              /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_ON (Bit 2)         */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON_Msk (0x4UL)            /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD_Pos (3UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_PLD (Bit 3)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD_Msk (0x8UL)           /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_PLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL_Pos (8UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_MUL (Bit 8)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL_Msk (0xf00UL)         /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_MUL (Bitfield-Mask: 0x0f) */
/* ======================================================  HS_CONTROL  ======================================================= */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_ON_Pos (0UL)                   /*!< MDR_RST_CLOCK HS_CONTROL: HSE_ON (Bit 0)              */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_ON_Msk (0x1UL)                 /*!< MDR_RST_CLOCK HS_CONTROL: HSE_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_BYP_Pos (1UL)                  /*!< MDR_RST_CLOCK HS_CONTROL: HSE_BYP (Bit 1)             */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_BYP_Msk (0x2UL)                /*!< MDR_RST_CLOCK HS_CONTROL: HSE_BYP (Bitfield-Mask: 0x01) */
/* =======================================================  CPU_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL_Pos (2UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C2_SEL (Bit 2)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL_Msk (0x4UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C2_SEL (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C3_SEL (Bit 4)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL_Msk (0xf0UL)             /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL_Pos (8UL)                  /*!< MDR_RST_CLOCK CPU_CLOCK: HCLK_SEL (Bit 8)             */
#define MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL_Msk (0x300UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: HCLK_SEL (Bitfield-Mask: 0x03) */
/* ======================================================  PER1_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_PER1_CLOCK_PER1_C1_SEL_Pos (0UL)              /*!< MDR_RST_CLOCK PER1_CLOCK: PER1_C1_SEL (Bit 0)         */
#define MDR_RST_CLOCK_PER1_CLOCK_PER1_C1_SEL_Msk (0x3UL)            /*!< MDR_RST_CLOCK PER1_CLOCK: PER1_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_PER1_CLOCK_PER1_C2_SEL_Pos (2UL)              /*!< MDR_RST_CLOCK PER1_CLOCK: PER1_C2_SEL (Bit 2)         */
#define MDR_RST_CLOCK_PER1_CLOCK_PER1_C2_SEL_Msk (0xcUL)            /*!< MDR_RST_CLOCK PER1_CLOCK: PER1_C2_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_PER1_CLOCK_DEBUG_EN_Pos (4UL)                 /*!< MDR_RST_CLOCK PER1_CLOCK: DEBUG_EN (Bit 4)            */
#define MDR_RST_CLOCK_PER1_CLOCK_DEBUG_EN_Msk (0x10UL)              /*!< MDR_RST_CLOCK PER1_CLOCK: DEBUG_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLOCK_DMA_EN_Pos (5UL)                   /*!< MDR_RST_CLOCK PER1_CLOCK: DMA_EN (Bit 5)              */
#define MDR_RST_CLOCK_PER1_CLOCK_DMA_EN_Msk (0x20UL)                /*!< MDR_RST_CLOCK PER1_CLOCK: DMA_EN (Bitfield-Mask: 0x01) */
/* =======================================================  ADC_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C1_SEL_Pos (2UL)              /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_C1_SEL (Bit 2)         */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C1_SEL_Msk (0xcUL)            /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C3_SEL (Bit 4)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Msk (0xf0UL)             /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_Pos (8UL)              /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_C3_SEL (Bit 8)         */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_Msk (0xf00UL)          /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_CLK_EN_Pos (12UL)             /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_CLK_EN (Bit 12)        */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_CLK_EN_Msk (0x1000UL)         /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN_Pos (13UL)               /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_CLK_EN (Bit 13)          */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN_Msk (0x2000UL)           /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  RTC_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Pos (0UL)                   /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_SEL (Bit 0)              */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Msk (0xfUL)                 /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Pos (4UL)                   /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_SEL (Bit 4)              */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Msk (0xf0UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN_Pos (8UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_RTC_EN (Bit 8)           */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN_Msk (0x100UL)            /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_RTC_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN_Pos (9UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_RTC_EN (Bit 9)           */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN_Msk (0x200UL)            /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_RTC_EN (Bitfield-Mask: 0x01) */
/* ======================================================  PER2_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_PER2_CLOCK_SPI1_CLK_EN_Pos (0UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: SPI1_CLK_EN (Bit 0)         */
#define MDR_RST_CLOCK_PER2_CLOCK_SPI1_CLK_EN_Msk (0x1UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: SPI1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_Pos (1UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: UART1_CLK_EN (Bit 1)        */
#define MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_Msk (0x2UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_Pos (2UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: UART2_CLK_EN (Bit 2)        */
#define MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_Msk (0x4UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_Pos (3UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: EEPROM_CLK_EN (Bit 3)       */
#define MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_Msk (0x8UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: EEPROM_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_Pos (4UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: RST_CLK_EN (Bit 4)          */
#define MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_Msk (0x10UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: RST_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_Pos (5UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: DMA_CLK_EN (Bit 5)          */
#define MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_Msk (0x20UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: DMA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_CMP_CLK_EN_Pos (6UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: CMP_CLK_EN (Bit 6)          */
#define MDR_RST_CLOCK_PER2_CLOCK_CMP_CLK_EN_Msk (0x40UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: CMP_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_DAC_CLK_EN_Pos (7UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: DAC_CLK_EN (Bit 7)          */
#define MDR_RST_CLOCK_PER2_CLOCK_DAC_CLK_EN_Msk (0x80UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: DAC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_Pos (8UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: ADC_CLK_EN (Bit 8)          */
#define MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_Msk (0x100UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: ADC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_Pos (9UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: WWDT_CLK_EN (Bit 9)         */
#define MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_Msk (0x200UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: WWDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_Pos (10UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: IWDT_CLK_EN (Bit 10)        */
#define MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_Msk (0x400UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: IWDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_Pos (11UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: PWR_CLK_EN (Bit 11)         */
#define MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_Msk (0x800UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: PWR_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_Pos (12UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: BKP_CLK_EN (Bit 12)         */
#define MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_Msk (0x1000UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: BKP_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_Pos (13UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: ADCIU_CLK_EN (Bit 13)       */
#define MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_Msk (0x2000UL)        /*!< MDR_RST_CLOCK PER2_CLOCK: ADCIU_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_Pos (14UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: TIMER1_CLK_EN (Bit 14)      */
#define MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_Msk (0x4000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: TIMER1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_Pos (15UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: TIMER2_CLK_EN (Bit 15)      */
#define MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_Msk (0x8000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: TIMER2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_Pos (16UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: PORTA_CLK_EN (Bit 16)       */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_Msk (0x10000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: PORTA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_Pos (17UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: PORTB_CLK_EN (Bit 17)       */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_Msk (0x20000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: PORTB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_Pos (18UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: PORTC_CLK_EN (Bit 18)       */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_Msk (0x40000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: PORTC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_Pos (19UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: CRC_CLK_EN (Bit 19)         */
#define MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_Msk (0x80000UL)         /*!< MDR_RST_CLOCK PER2_CLOCK: CRC_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  TIM_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Pos (8UL)                  /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_BRG (Bit 8)             */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Msk (0x700UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN_Pos (25UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_CLK_EN (Bit 25)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN_Msk (0x2000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_CLK_EN (Bitfield-Mask: 0x01) */
/* ======================================================  UART_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Pos (0UL)                /*!< MDR_RST_CLOCK UART_CLOCK: UART1_BRG (Bit 0)           */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Msk (0x7UL)              /*!< MDR_RST_CLOCK UART_CLOCK: UART1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Pos (8UL)                /*!< MDR_RST_CLOCK UART_CLOCK: UART2_BRG (Bit 8)           */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Msk (0x700UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN_Pos (24UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART1_CLK_EN (Bit 24)       */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK UART_CLOCK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN_Pos (25UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART2_CLK_EN (Bit 25)       */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK UART_CLOCK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  SSP_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_CLK_EN (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  ADC1_Cfg  ======================================================== */
#define MDR_ADC_ADC1_Cfg_ADON_Pos         (0UL)                     /*!< MDR_ADC ADC1_Cfg: ADON (Bit 0)                        */
#define MDR_ADC_ADC1_Cfg_ADON_Msk         (0x1UL)                   /*!< MDR_ADC ADC1_Cfg: ADON (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_GO_Pos           (1UL)                     /*!< MDR_ADC ADC1_Cfg: GO (Bit 1)                          */
#define MDR_ADC_ADC1_Cfg_GO_Msk           (0x2UL)                   /*!< MDR_ADC ADC1_Cfg: GO (Bitfield-Mask: 0x01)            */
#define MDR_ADC_ADC1_Cfg_CLKS_Pos         (2UL)                     /*!< MDR_ADC ADC1_Cfg: CLKS (Bit 2)                        */
#define MDR_ADC_ADC1_Cfg_CLKS_Msk         (0x4UL)                   /*!< MDR_ADC ADC1_Cfg: CLKS (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_SAMPLE_Pos       (3UL)                     /*!< MDR_ADC ADC1_Cfg: SAMPLE (Bit 3)                      */
#define MDR_ADC_ADC1_Cfg_SAMPLE_Msk       (0x8UL)                   /*!< MDR_ADC ADC1_Cfg: SAMPLE (Bitfield-Mask: 0x01)        */
#define MDR_ADC_ADC1_Cfg_CHS_Pos          (4UL)                     /*!< MDR_ADC ADC1_Cfg: CHS (Bit 4)                         */
#define MDR_ADC_ADC1_Cfg_CHS_Msk          (0x1f0UL)                 /*!< MDR_ADC ADC1_Cfg: CHS (Bitfield-Mask: 0x1f)           */
#define MDR_ADC_ADC1_Cfg_CHCH_Pos         (9UL)                     /*!< MDR_ADC ADC1_Cfg: CHCH (Bit 9)                        */
#define MDR_ADC_ADC1_Cfg_CHCH_Msk         (0x200UL)                 /*!< MDR_ADC ADC1_Cfg: CHCH (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_RGNC_Pos         (10UL)                    /*!< MDR_ADC ADC1_Cfg: RGNC (Bit 10)                       */
#define MDR_ADC_ADC1_Cfg_RGNC_Msk         (0x400UL)                 /*!< MDR_ADC ADC1_Cfg: RGNC (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_M_REF_Pos        (11UL)                    /*!< MDR_ADC ADC1_Cfg: M_REF (Bit 11)                      */
#define MDR_ADC_ADC1_Cfg_M_REF_Msk        (0x800UL)                 /*!< MDR_ADC ADC1_Cfg: M_REF (Bitfield-Mask: 0x01)         */
#define MDR_ADC_ADC1_Cfg_DIV_CLK_Pos      (12UL)                    /*!< MDR_ADC ADC1_Cfg: DIV_CLK (Bit 12)                    */
#define MDR_ADC_ADC1_Cfg_DIV_CLK_Msk      (0xf000UL)                /*!< MDR_ADC ADC1_Cfg: DIV_CLK (Bitfield-Mask: 0x0f)       */
#define MDR_ADC_ADC1_Cfg_TS_EN_Pos        (17UL)                    /*!< MDR_ADC ADC1_Cfg: TS_EN (Bit 17)                      */
#define MDR_ADC_ADC1_Cfg_TS_EN_Msk        (0x20000UL)               /*!< MDR_ADC ADC1_Cfg: TS_EN (Bitfield-Mask: 0x01)         */
#define MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Pos   (18UL)                    /*!< MDR_ADC ADC1_Cfg: TS_BUFF_EN (Bit 18)                 */
#define MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Msk   (0x40000UL)               /*!< MDR_ADC ADC1_Cfg: TS_BUFF_EN (Bitfield-Mask: 0x01)    */
#define MDR_ADC_ADC1_Cfg_SEL_TS_Pos       (19UL)                    /*!< MDR_ADC ADC1_Cfg: SEL_TS (Bit 19)                     */
#define MDR_ADC_ADC1_Cfg_SEL_TS_Msk       (0x80000UL)               /*!< MDR_ADC ADC1_Cfg: SEL_TS (Bitfield-Mask: 0x01)        */
#define MDR_ADC_ADC1_Cfg_SEL_VREF_Pos     (20UL)                    /*!< MDR_ADC ADC1_Cfg: SEL_VREF (Bit 20)                   */
#define MDR_ADC_ADC1_Cfg_SEL_VREF_Msk     (0x100000UL)              /*!< MDR_ADC ADC1_Cfg: SEL_VREF (Bitfield-Mask: 0x01)      */
#define MDR_ADC_ADC1_Cfg_Delay_GO_Pos     (25UL)                    /*!< MDR_ADC ADC1_Cfg: Delay_GO (Bit 25)                   */
#define MDR_ADC_ADC1_Cfg_Delay_GO_Msk     (0xe000000UL)             /*!< MDR_ADC ADC1_Cfg: Delay_GO (Bitfield-Mask: 0x07)      */
/* =======================================================  ADC2_Cfg  ======================================================== */
#define MDR_ADC_ADC2_Cfg_ADC1_OP_Pos      (17UL)                    /*!< MDR_ADC ADC2_Cfg: ADC1_OP (Bit 17)                    */
#define MDR_ADC_ADC2_Cfg_ADC1_OP_Msk      (0x20000UL)               /*!< MDR_ADC ADC2_Cfg: ADC1_OP (Bitfield-Mask: 0x01)       */
/* =====================================================  ADC1_H_Level  ====================================================== */
#define MDR_ADC_ADC1_H_Level_Level_Pos    (0UL)                     /*!< MDR_ADC ADC1_H_Level: Level (Bit 0)                   */
#define MDR_ADC_ADC1_H_Level_Level_Msk    (0xfffUL)                 /*!< MDR_ADC ADC1_H_Level: Level (Bitfield-Mask: 0xfff)    */
/* =====================================================  ADC1_L_Level  ====================================================== */
#define MDR_ADC_ADC1_L_Level_Level_Pos    (0UL)                     /*!< MDR_ADC ADC1_L_Level: Level (Bit 0)                   */
#define MDR_ADC_ADC1_L_Level_Level_Msk    (0xfffUL)                 /*!< MDR_ADC ADC1_L_Level: Level (Bitfield-Mask: 0xfff)    */
/* ======================================================  ADC1_RESULT  ====================================================== */
#define MDR_ADC_ADC1_RESULT_Value_Pos     (0UL)                     /*!< MDR_ADC ADC1_RESULT: Value (Bit 0)                    */
#define MDR_ADC_ADC1_RESULT_Value_Msk     (0xfffUL)                 /*!< MDR_ADC ADC1_RESULT: Value (Bitfield-Mask: 0xfff)     */
#define MDR_ADC_ADC1_RESULT_Channel_Pos   (16UL)                    /*!< MDR_ADC ADC1_RESULT: Channel (Bit 16)                 */
#define MDR_ADC_ADC1_RESULT_Channel_Msk   (0x1f0000UL)              /*!< MDR_ADC ADC1_RESULT: Channel (Bitfield-Mask: 0x1f)    */
/* ======================================================  ADC1_STATUS  ====================================================== */
#define MDR_ADC_ADC1_STATUS_Overwrite_Pos (0UL)                     /*!< MDR_ADC ADC1_STATUS: Overwrite (Bit 0)                */
#define MDR_ADC_ADC1_STATUS_Overwrite_Msk (0x1UL)                   /*!< MDR_ADC ADC1_STATUS: Overwrite (Bitfield-Mask: 0x01)  */
#define MDR_ADC_ADC1_STATUS_AWOIFEN_Pos   (1UL)                     /*!< MDR_ADC ADC1_STATUS: AWOIFEN (Bit 1)                  */
#define MDR_ADC_ADC1_STATUS_AWOIFEN_Msk   (0x2UL)                   /*!< MDR_ADC ADC1_STATUS: AWOIFEN (Bitfield-Mask: 0x01)    */
#define MDR_ADC_ADC1_STATUS_EOCIF_Pos     (2UL)                     /*!< MDR_ADC ADC1_STATUS: EOCIF (Bit 2)                    */
#define MDR_ADC_ADC1_STATUS_EOCIF_Msk     (0x4UL)                   /*!< MDR_ADC ADC1_STATUS: EOCIF (Bitfield-Mask: 0x01)      */
#define MDR_ADC_ADC1_STATUS_AWOIF_IE_Pos  (3UL)                     /*!< MDR_ADC ADC1_STATUS: AWOIF_IE (Bit 3)                 */
#define MDR_ADC_ADC1_STATUS_AWOIF_IE_Msk  (0x8UL)                   /*!< MDR_ADC ADC1_STATUS: AWOIF_IE (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_STATUS_EOCIF_EN_Pos  (4UL)                     /*!< MDR_ADC ADC1_STATUS: EOCIF_EN (Bit 4)                 */
#define MDR_ADC_ADC1_STATUS_EOCIF_EN_Msk  (0x10UL)                  /*!< MDR_ADC ADC1_STATUS: EOCIF_EN (Bitfield-Mask: 0x01)   */
/* ======================================================  ADC1_CHSEL  ======================================================= */
#define MDR_ADC_ADC1_CHSEL_Channel_0_Pos  (0UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_0 (Bit 0)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_0_Msk  (0x1UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_0 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_1_Pos  (1UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_1 (Bit 1)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_1_Msk  (0x2UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_1 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_2_Pos  (2UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_2 (Bit 2)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_2_Msk  (0x4UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_2 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_3_Pos  (3UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_3 (Bit 3)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_3_Msk  (0x8UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_3 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_4_Pos  (4UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_4 (Bit 4)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_4_Msk  (0x10UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_4 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_5_Pos  (5UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_5 (Bit 5)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_5_Msk  (0x20UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_5 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_6_Pos  (6UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_6 (Bit 6)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_6_Msk  (0x40UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_6 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_7_Pos  (7UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_7 (Bit 7)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_7_Msk  (0x80UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_7 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_30_Pos (30UL)                    /*!< MDR_ADC ADC1_CHSEL: Channel_30 (Bit 30)               */
#define MDR_ADC_ADC1_CHSEL_Channel_30_Msk (0x40000000UL)            /*!< MDR_ADC ADC1_CHSEL: Channel_30 (Bitfield-Mask: 0x01)  */
#define MDR_ADC_ADC1_CHSEL_Channel_31_Pos (31UL)                    /*!< MDR_ADC ADC1_CHSEL: Channel_31 (Bit 31)               */
#define MDR_ADC_ADC1_CHSEL_Channel_31_Msk (0x80000000UL)            /*!< MDR_ADC ADC1_CHSEL: Channel_31 (Bitfield-Mask: 0x01)  */


/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  REG_0  ========================================================= */
/* ========================================================  REG_0E  ========================================================= */
#define MDR_BKP_REG_0E_LOW_Pos            (0UL)                     /*!< MDR_BKP REG_0E: LOW (Bit 0)                           */
#define MDR_BKP_REG_0E_LOW_Msk            (0x7UL)                   /*!< MDR_BKP REG_0E: LOW (Bitfield-Mask: 0x07)             */
#define MDR_BKP_REG_0E_SelectRI_Pos       (3UL)                     /*!< MDR_BKP REG_0E: SelectRI (Bit 3)                      */
#define MDR_BKP_REG_0E_SelectRI_Msk       (0x38UL)                  /*!< MDR_BKP REG_0E: SelectRI (Bitfield-Mask: 0x07)        */
#define MDR_BKP_REG_0E_Jtag_A_Pos         (6UL)                     /*!< MDR_BKP REG_0E: Jtag_A (Bit 6)                        */
#define MDR_BKP_REG_0E_Jtag_A_Msk         (0x40UL)                  /*!< MDR_BKP REG_0E: Jtag_A (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0E_Jtag_B_Pos         (7UL)                     /*!< MDR_BKP REG_0E: Jtag_B (Bit 7)                        */
#define MDR_BKP_REG_0E_Jtag_B_Msk         (0x80UL)                  /*!< MDR_BKP REG_0E: Jtag_B (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0E_Trim_dDUcc_Pos     (8UL)                     /*!< MDR_BKP REG_0E: Trim_dDUcc (Bit 8)                    */
#define MDR_BKP_REG_0E_Trim_dDUcc_Msk     (0x700UL)                 /*!< MDR_BKP REG_0E: Trim_dDUcc (Bitfield-Mask: 0x07)      */
#define MDR_BKP_REG_0E_FPOR_Pos           (11UL)                    /*!< MDR_BKP REG_0E: FPOR (Bit 11)                         */
#define MDR_BKP_REG_0E_FPOR_Msk           (0x800UL)                 /*!< MDR_BKP REG_0E: FPOR (Bitfield-Mask: 0x01)            */
#define MDR_BKP_REG_0E_Trim_DUcc_Pos      (12UL)                    /*!< MDR_BKP REG_0E: Trim_DUcc (Bit 12)                    */
#define MDR_BKP_REG_0E_Trim_DUcc_Msk      (0x3000UL)                /*!< MDR_BKP REG_0E: Trim_DUcc (Bitfield-Mask: 0x03)       */
#define MDR_BKP_REG_0E_COVDET_Pos         (14UL)                    /*!< MDR_BKP REG_0E: COVDET (Bit 14)                       */
#define MDR_BKP_REG_0E_COVDET_Msk         (0x4000UL)                /*!< MDR_BKP REG_0E: COVDET (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0E_I_LimEn_Pos        (15UL)                    /*!< MDR_BKP REG_0E: I_LimEn (Bit 15)                      */
#define MDR_BKP_REG_0E_I_LimEn_Msk        (0x8000UL)                /*!< MDR_BKP REG_0E: I_LimEn (Bitfield-Mask: 0x01)         */
/* ========================================================  REG_0F  ========================================================= */
#define MDR_BKP_REG_0F_LSE_ON_Pos         (0UL)                     /*!< MDR_BKP REG_0F: LSE_ON (Bit 0)                        */
#define MDR_BKP_REG_0F_LSE_ON_Msk         (0x1UL)                   /*!< MDR_BKP REG_0F: LSE_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_LSE_BYP_Pos        (1UL)                     /*!< MDR_BKP REG_0F: LSE_BYP (Bit 1)                       */
#define MDR_BKP_REG_0F_LSE_BYP_Msk        (0x2UL)                   /*!< MDR_BKP REG_0F: LSE_BYP (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_RTC_SEL_Pos        (2UL)                     /*!< MDR_BKP REG_0F: RTC_SEL (Bit 2)                       */
#define MDR_BKP_REG_0F_RTC_SEL_Msk        (0xcUL)                   /*!< MDR_BKP REG_0F: RTC_SEL (Bitfield-Mask: 0x03)         */
#define MDR_BKP_REG_0F_RTC_EN_Pos         (4UL)                     /*!< MDR_BKP REG_0F: RTC_EN (Bit 4)                        */
#define MDR_BKP_REG_0F_RTC_EN_Msk         (0x10UL)                  /*!< MDR_BKP REG_0F: RTC_EN (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_RTC_CAL_Pos        (5UL)                     /*!< MDR_BKP REG_0F: RTC_CAL (Bit 5)                       */
#define MDR_BKP_REG_0F_RTC_CAL_Msk        (0x1fe0UL)                /*!< MDR_BKP REG_0F: RTC_CAL (Bitfield-Mask: 0xff)         */
#define MDR_BKP_REG_0F_LSE_RDY_Pos        (13UL)                    /*!< MDR_BKP REG_0F: LSE_RDY (Bit 13)                      */
#define MDR_BKP_REG_0F_LSE_RDY_Msk        (0x2000UL)                /*!< MDR_BKP REG_0F: LSE_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_LSI_ON_Pos         (15UL)                    /*!< MDR_BKP REG_0F: LSI_ON (Bit 15)                       */
#define MDR_BKP_REG_0F_LSI_ON_Msk         (0x8000UL)                /*!< MDR_BKP REG_0F: LSI_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_LSI_TRIM_Pos       (16UL)                    /*!< MDR_BKP REG_0F: LSI_TRIM (Bit 16)                     */
#define MDR_BKP_REG_0F_LSI_TRIM_Msk       (0x1f0000UL)              /*!< MDR_BKP REG_0F: LSI_TRIM (Bitfield-Mask: 0x1f)        */
#define MDR_BKP_REG_0F_LSI_RDY_Pos        (21UL)                    /*!< MDR_BKP REG_0F: LSI_RDY (Bit 21)                      */
#define MDR_BKP_REG_0F_LSI_RDY_Msk        (0x200000UL)              /*!< MDR_BKP REG_0F: LSI_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_HSI_ON_Pos         (22UL)                    /*!< MDR_BKP REG_0F: HSI_ON (Bit 22)                       */
#define MDR_BKP_REG_0F_HSI_ON_Msk         (0x400000UL)              /*!< MDR_BKP REG_0F: HSI_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_HSI_RDY_Pos        (23UL)                    /*!< MDR_BKP REG_0F: HSI_RDY (Bit 23)                      */
#define MDR_BKP_REG_0F_HSI_RDY_Msk        (0x800000UL)              /*!< MDR_BKP REG_0F: HSI_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_HSI_TRIM_Pos       (24UL)                    /*!< MDR_BKP REG_0F: HSI_TRIM (Bit 24)                     */
#define MDR_BKP_REG_0F_HSI_TRIM_Msk       (0x3f000000UL)            /*!< MDR_BKP REG_0F: HSI_TRIM (Bitfield-Mask: 0x3f)        */
#define MDR_BKP_REG_0F_Standby_Pos        (30UL)                    /*!< MDR_BKP REG_0F: Standby (Bit 30)                      */
#define MDR_BKP_REG_0F_Standby_Msk        (0x40000000UL)            /*!< MDR_BKP REG_0F: Standby (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_RTC_RESET_Pos      (31UL)                    /*!< MDR_BKP REG_0F: RTC_RESET (Bit 31)                    */
#define MDR_BKP_REG_0F_RTC_RESET_Msk      (0x80000000UL)            /*!< MDR_BKP REG_0F: RTC_RESET (Bitfield-Mask: 0x01)       */
/* ========================================================  RTC_CNT  ======================================================== */
/* ========================================================  RTC_DIV  ======================================================== */
#define MDR_BKP_RTC_DIV_Value_Pos         (0UL)                     /*!< MDR_BKP RTC_DIV: Value (Bit 0)                        */
#define MDR_BKP_RTC_DIV_Value_Msk         (0xfffffUL)               /*!< MDR_BKP RTC_DIV: Value (Bitfield-Mask: 0xfffff)       */
/* ========================================================  RTC_PRL  ======================================================== */
#define MDR_BKP_RTC_PRL_Value_Pos         (0UL)                     /*!< MDR_BKP RTC_PRL: Value (Bit 0)                        */
#define MDR_BKP_RTC_PRL_Value_Msk         (0xfffffUL)               /*!< MDR_BKP RTC_PRL: Value (Bitfield-Mask: 0xfffff)       */
/* =======================================================  RTC_ALRM  ======================================================== */
#define MDR_BKP_RTC_ALRM_Value_Pos        (0UL)                     /*!< MDR_BKP RTC_ALRM: Value (Bit 0)                       */
#define MDR_BKP_RTC_ALRM_Value_Msk        (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM: Value (Bitfield-Mask: 0xffffffff)   */
/* ========================================================  RTC_CS  ========================================================= */
#define MDR_BKP_RTC_CS_OWF_Pos            (0UL)                     /*!< MDR_BKP RTC_CS: OWF (Bit 0)                           */
#define MDR_BKP_RTC_CS_OWF_Msk            (0x1UL)                   /*!< MDR_BKP RTC_CS: OWF (Bitfield-Mask: 0x01)             */
#define MDR_BKP_RTC_CS_SECF_Pos           (1UL)                     /*!< MDR_BKP RTC_CS: SECF (Bit 1)                          */
#define MDR_BKP_RTC_CS_SECF_Msk           (0x2UL)                   /*!< MDR_BKP RTC_CS: SECF (Bitfield-Mask: 0x01)            */
#define MDR_BKP_RTC_CS_ALRF_Pos           (2UL)                     /*!< MDR_BKP RTC_CS: ALRF (Bit 2)                          */
#define MDR_BKP_RTC_CS_ALRF_Msk           (0x4UL)                   /*!< MDR_BKP RTC_CS: ALRF (Bitfield-Mask: 0x01)            */
#define MDR_BKP_RTC_CS_OWF_IE_Pos         (3UL)                     /*!< MDR_BKP RTC_CS: OWF_IE (Bit 3)                        */
#define MDR_BKP_RTC_CS_OWF_IE_Msk         (0x8UL)                   /*!< MDR_BKP RTC_CS: OWF_IE (Bitfield-Mask: 0x01)          */
#define MDR_BKP_RTC_CS_SECF_IE_Pos        (4UL)                     /*!< MDR_BKP RTC_CS: SECF_IE (Bit 4)                       */
#define MDR_BKP_RTC_CS_SECF_IE_Msk        (0x10UL)                  /*!< MDR_BKP RTC_CS: SECF_IE (Bitfield-Mask: 0x01)         */
#define MDR_BKP_RTC_CS_ALRF_IE_Pos        (5UL)                     /*!< MDR_BKP RTC_CS: ALRF_IE (Bit 5)                       */
#define MDR_BKP_RTC_CS_ALRF_IE_Msk        (0x20UL)                  /*!< MDR_BKP RTC_CS: ALRF_IE (Bitfield-Mask: 0x01)         */
#define MDR_BKP_RTC_CS_WEC_Pos            (6UL)                     /*!< MDR_BKP RTC_CS: WEC (Bit 6)                           */
#define MDR_BKP_RTC_CS_WEC_Msk            (0x40UL)                  /*!< MDR_BKP RTC_CS: WEC (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  RXTX  ========================================================== */
#define MDR_PORTA_RXTX_Pin__Pos           (0UL)                     /*!< MDR_PORTA RXTX: Pin_ (Bit 0)                          */
#define MDR_PORTA_RXTX_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA RXTX: Pin_ (Bitfield-Mask: 0x01)            */
/* ==========================================================  OE  =========================================================== */
#define MDR_PORTA_OE_Pin__Pos             (0UL)                     /*!< MDR_PORTA OE: Pin_ (Bit 0)                            */
#define MDR_PORTA_OE_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA OE: Pin_ (Bitfield-Mask: 0x01)              */
/* =========================================================  FUNC  ========================================================== */
#define MDR_PORTA_FUNC_Pin__Pos           (0UL)                     /*!< MDR_PORTA FUNC: Pin_ (Bit 0)                          */
#define MDR_PORTA_FUNC_Pin__Msk           (0x3UL)                   /*!< MDR_PORTA FUNC: Pin_ (Bitfield-Mask: 0x03)            */
/* ========================================================  ANALOG  ========================================================= */
#define MDR_PORTA_ANALOG_Pin__Pos         (0UL)                     /*!< MDR_PORTA ANALOG: Pin_ (Bit 0)                        */
#define MDR_PORTA_ANALOG_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA ANALOG: Pin_ (Bitfield-Mask: 0x01)          */
/* =========================================================  PULL  ========================================================== */
#define MDR_PORTA_PULL_Down_Pin_0_Pos     (0UL)                     /*!< MDR_PORTA PULL: Down_Pin_0 (Bit 0)                    */
#define MDR_PORTA_PULL_Down_Pin_0_Msk     (0x1UL)                   /*!< MDR_PORTA PULL: Down_Pin_0 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_1_Pos     (1UL)                     /*!< MDR_PORTA PULL: Down_Pin_1 (Bit 1)                    */
#define MDR_PORTA_PULL_Down_Pin_1_Msk     (0x2UL)                   /*!< MDR_PORTA PULL: Down_Pin_1 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_2_Pos     (2UL)                     /*!< MDR_PORTA PULL: Down_Pin_2 (Bit 2)                    */
#define MDR_PORTA_PULL_Down_Pin_2_Msk     (0x4UL)                   /*!< MDR_PORTA PULL: Down_Pin_2 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_3_Pos     (3UL)                     /*!< MDR_PORTA PULL: Down_Pin_3 (Bit 3)                    */
#define MDR_PORTA_PULL_Down_Pin_3_Msk     (0x8UL)                   /*!< MDR_PORTA PULL: Down_Pin_3 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_4_Pos     (4UL)                     /*!< MDR_PORTA PULL: Down_Pin_4 (Bit 4)                    */
#define MDR_PORTA_PULL_Down_Pin_4_Msk     (0x10UL)                  /*!< MDR_PORTA PULL: Down_Pin_4 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_5_Pos     (5UL)                     /*!< MDR_PORTA PULL: Down_Pin_5 (Bit 5)                    */
#define MDR_PORTA_PULL_Down_Pin_5_Msk     (0x20UL)                  /*!< MDR_PORTA PULL: Down_Pin_5 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_6_Pos     (6UL)                     /*!< MDR_PORTA PULL: Down_Pin_6 (Bit 6)                    */
#define MDR_PORTA_PULL_Down_Pin_6_Msk     (0x40UL)                  /*!< MDR_PORTA PULL: Down_Pin_6 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_7_Pos     (7UL)                     /*!< MDR_PORTA PULL: Down_Pin_7 (Bit 7)                    */
#define MDR_PORTA_PULL_Down_Pin_7_Msk     (0x80UL)                  /*!< MDR_PORTA PULL: Down_Pin_7 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_8_Pos     (8UL)                     /*!< MDR_PORTA PULL: Down_Pin_8 (Bit 8)                    */
#define MDR_PORTA_PULL_Down_Pin_8_Msk     (0x100UL)                 /*!< MDR_PORTA PULL: Down_Pin_8 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_9_Pos     (9UL)                     /*!< MDR_PORTA PULL: Down_Pin_9 (Bit 9)                    */
#define MDR_PORTA_PULL_Down_Pin_9_Msk     (0x200UL)                 /*!< MDR_PORTA PULL: Down_Pin_9 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_10_Pos    (10UL)                    /*!< MDR_PORTA PULL: Down_Pin_10 (Bit 10)                  */
#define MDR_PORTA_PULL_Down_Pin_10_Msk    (0x400UL)                 /*!< MDR_PORTA PULL: Down_Pin_10 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_11_Pos    (11UL)                    /*!< MDR_PORTA PULL: Down_Pin_11 (Bit 11)                  */
#define MDR_PORTA_PULL_Down_Pin_11_Msk    (0x800UL)                 /*!< MDR_PORTA PULL: Down_Pin_11 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_12_Pos    (12UL)                    /*!< MDR_PORTA PULL: Down_Pin_12 (Bit 12)                  */
#define MDR_PORTA_PULL_Down_Pin_12_Msk    (0x1000UL)                /*!< MDR_PORTA PULL: Down_Pin_12 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_13_Pos    (13UL)                    /*!< MDR_PORTA PULL: Down_Pin_13 (Bit 13)                  */
#define MDR_PORTA_PULL_Down_Pin_13_Msk    (0x2000UL)                /*!< MDR_PORTA PULL: Down_Pin_13 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_14_Pos    (14UL)                    /*!< MDR_PORTA PULL: Down_Pin_14 (Bit 14)                  */
#define MDR_PORTA_PULL_Down_Pin_14_Msk    (0x4000UL)                /*!< MDR_PORTA PULL: Down_Pin_14 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_15_Pos    (15UL)                    /*!< MDR_PORTA PULL: Down_Pin_15 (Bit 15)                  */
#define MDR_PORTA_PULL_Down_Pin_15_Msk    (0x8000UL)                /*!< MDR_PORTA PULL: Down_Pin_15 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_UP_Pin__Pos        (16UL)                    /*!< MDR_PORTA PULL: UP_Pin_ (Bit 16)                      */
#define MDR_PORTA_PULL_UP_Pin__Msk        (0x10000UL)               /*!< MDR_PORTA PULL: UP_Pin_ (Bitfield-Mask: 0x01)         */
/* ==========================================================  PD  =========================================================== */
#define MDR_PORTA_PD_Driver_Pin_0_Pos     (0UL)                     /*!< MDR_PORTA PD: Driver_Pin_0 (Bit 0)                    */
#define MDR_PORTA_PD_Driver_Pin_0_Msk     (0x1UL)                   /*!< MDR_PORTA PD: Driver_Pin_0 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_1_Pos     (1UL)                     /*!< MDR_PORTA PD: Driver_Pin_1 (Bit 1)                    */
#define MDR_PORTA_PD_Driver_Pin_1_Msk     (0x2UL)                   /*!< MDR_PORTA PD: Driver_Pin_1 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_2_Pos     (2UL)                     /*!< MDR_PORTA PD: Driver_Pin_2 (Bit 2)                    */
#define MDR_PORTA_PD_Driver_Pin_2_Msk     (0x4UL)                   /*!< MDR_PORTA PD: Driver_Pin_2 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_3_Pos     (3UL)                     /*!< MDR_PORTA PD: Driver_Pin_3 (Bit 3)                    */
#define MDR_PORTA_PD_Driver_Pin_3_Msk     (0x8UL)                   /*!< MDR_PORTA PD: Driver_Pin_3 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_4_Pos     (4UL)                     /*!< MDR_PORTA PD: Driver_Pin_4 (Bit 4)                    */
#define MDR_PORTA_PD_Driver_Pin_4_Msk     (0x10UL)                  /*!< MDR_PORTA PD: Driver_Pin_4 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_5_Pos     (5UL)                     /*!< MDR_PORTA PD: Driver_Pin_5 (Bit 5)                    */
#define MDR_PORTA_PD_Driver_Pin_5_Msk     (0x20UL)                  /*!< MDR_PORTA PD: Driver_Pin_5 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_6_Pos     (6UL)                     /*!< MDR_PORTA PD: Driver_Pin_6 (Bit 6)                    */
#define MDR_PORTA_PD_Driver_Pin_6_Msk     (0x40UL)                  /*!< MDR_PORTA PD: Driver_Pin_6 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_7_Pos     (7UL)                     /*!< MDR_PORTA PD: Driver_Pin_7 (Bit 7)                    */
#define MDR_PORTA_PD_Driver_Pin_7_Msk     (0x80UL)                  /*!< MDR_PORTA PD: Driver_Pin_7 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_8_Pos     (8UL)                     /*!< MDR_PORTA PD: Driver_Pin_8 (Bit 8)                    */
#define MDR_PORTA_PD_Driver_Pin_8_Msk     (0x100UL)                 /*!< MDR_PORTA PD: Driver_Pin_8 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_9_Pos     (9UL)                     /*!< MDR_PORTA PD: Driver_Pin_9 (Bit 9)                    */
#define MDR_PORTA_PD_Driver_Pin_9_Msk     (0x200UL)                 /*!< MDR_PORTA PD: Driver_Pin_9 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_10_Pos    (10UL)                    /*!< MDR_PORTA PD: Driver_Pin_10 (Bit 10)                  */
#define MDR_PORTA_PD_Driver_Pin_10_Msk    (0x400UL)                 /*!< MDR_PORTA PD: Driver_Pin_10 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_11_Pos    (11UL)                    /*!< MDR_PORTA PD: Driver_Pin_11 (Bit 11)                  */
#define MDR_PORTA_PD_Driver_Pin_11_Msk    (0x800UL)                 /*!< MDR_PORTA PD: Driver_Pin_11 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_12_Pos    (12UL)                    /*!< MDR_PORTA PD: Driver_Pin_12 (Bit 12)                  */
#define MDR_PORTA_PD_Driver_Pin_12_Msk    (0x1000UL)                /*!< MDR_PORTA PD: Driver_Pin_12 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_13_Pos    (13UL)                    /*!< MDR_PORTA PD: Driver_Pin_13 (Bit 13)                  */
#define MDR_PORTA_PD_Driver_Pin_13_Msk    (0x2000UL)                /*!< MDR_PORTA PD: Driver_Pin_13 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_14_Pos    (14UL)                    /*!< MDR_PORTA PD: Driver_Pin_14 (Bit 14)                  */
#define MDR_PORTA_PD_Driver_Pin_14_Msk    (0x4000UL)                /*!< MDR_PORTA PD: Driver_Pin_14 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_15_Pos    (15UL)                    /*!< MDR_PORTA PD: Driver_Pin_15 (Bit 15)                  */
#define MDR_PORTA_PD_Driver_Pin_15_Msk    (0x8000UL)                /*!< MDR_PORTA PD: Driver_Pin_15 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Schmitt_Pin__Pos     (16UL)                    /*!< MDR_PORTA PD: Schmitt_Pin_ (Bit 16)                   */
#define MDR_PORTA_PD_Schmitt_Pin__Msk     (0x10000UL)               /*!< MDR_PORTA PD: Schmitt_Pin_ (Bitfield-Mask: 0x01)      */
/* ==========================================================  PWR  ========================================================== */
#define MDR_PORTA_PWR_Pin__Pos            (0UL)                     /*!< MDR_PORTA PWR: Pin_ (Bit 0)                           */
#define MDR_PORTA_PWR_Pin__Msk            (0x3UL)                   /*!< MDR_PORTA PWR: Pin_ (Bitfield-Mask: 0x03)             */
/* =========================================================  GFEN  ========================================================== */
#define MDR_PORTA_GFEN_Pin__Pos           (0UL)                     /*!< MDR_PORTA GFEN: Pin_ (Bit 0)                          */
#define MDR_PORTA_GFEN_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA GFEN: Pin_ (Bitfield-Mask: 0x01)            */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CMD  ========================================================== */
/* ===============================================  MDR_EEPROM CMD CON [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_CON                                                        */
  MDR_EEPROM_CMD__CON__Normal Access   = 0,     /*!< Normal Access : Normal access to memory                                   */
  MDR_EEPROM_CMD__CON__Controller Access = 1,   /*!< Controller Access : Access to memory though registers                     */
} MDR_EEPROM_CMD__CON__Enum;

/* ===============================================  MDR_EEPROM CMD WR [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_WR                                                         */
  MDR_EEPROM_CMD__WR__Inactive         = 0,     /*!< Inactive : No write operation                                             */
  MDR_EEPROM_CMD__WR__Active           = 1,     /*!< Active : Write operation                                                  */
} MDR_EEPROM_CMD__WR__Enum;

/* ===============================================  MDR_EEPROM CMD RD [2..2]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_RD                                                         */
  MDR_EEPROM_CMD__RD__Inactive         = 0,     /*!< Inactive : No read operation                                              */
  MDR_EEPROM_CMD__RD__Active           = 1,     /*!< Active : Read operation                                                   */
} MDR_EEPROM_CMD__RD__Enum;

/* ==============================================  MDR_EEPROM CMD DELAY [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_DELAY                                                      */
  MDR_EEPROM_CMD__DELAY__le18MHz       = 0,     /*!< le18MHz : CPU freq is up to 18MHz                                         */
  MDR_EEPROM_CMD__DELAY__le36MHz       = 1,     /*!< le36MHz : CPU freq is up to 36MHz                                         */
} MDR_EEPROM_CMD__DELAY__Enum;

/* ===============================================  MDR_EEPROM CMD XE [6..6]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_XE                                                         */
  MDR_EEPROM_CMD__XE__Off              = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD__XE__On               = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD__XE__Enum;

/* ===============================================  MDR_EEPROM CMD YE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_YE                                                         */
  MDR_EEPROM_CMD_YE_Off                = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_YE_On                 = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_YE_Enum;

/* ===============================================  MDR_EEPROM CMD SE [8..8]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_SE                                                         */
  MDR_EEPROM_CMD_SE_Off                = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_SE_On                 = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_SE_Enum;

/* ==============================================  MDR_EEPROM CMD IFREN [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_IFREN                                                      */
  MDR_EEPROM_CMD__IFREN__Main          = 0,     /*!< Main : Main memory                                                        */
  MDR_EEPROM_CMD__IFREN__Info          = 1,     /*!< Info : Info memory                                                        */
} MDR_EEPROM_CMD__IFREN__Enum;

/* =============================================  MDR_EEPROM CMD ERASE [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_EEPROM_CMD_ERASE                                                      */
  MDR_EEPROM_CMD__ERASE__Inactive      = 0,     /*!< Inactive : No erase operation                                             */
  MDR_EEPROM_CMD__ERASE__Active        = 1,     /*!< Active : Erase operation                                                  */
} MDR_EEPROM_CMD__ERASE__Enum;

/* =============================================  MDR_EEPROM CMD MAS1 [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_MAS1                                                       */
  MDR_EEPROM_CMD_MAS1_Off              = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_MAS1_On               = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_MAS1_Enum;

/* =============================================  MDR_EEPROM CMD PROG [12..12]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_PROG                                                       */
  MDR_EEPROM_CMD__PROG__Inactive       = 0,     /*!< Inactive : No programm operation                                          */
  MDR_EEPROM_CMD__PROG__Active         = 1,     /*!< Active : Programm operation                                               */
} MDR_EEPROM_CMD__PROG__Enum;

/* =============================================  MDR_EEPROM CMD NVSTR [13..13]  ============================================= */
typedef enum {                                  /*!< MDR_EEPROM_CMD_NVSTR                                                      */
  MDR_EEPROM_CMD__NVSTR__Read          = 0,     /*!< Read : Read mode                                                          */
  MDR_EEPROM_CMD__NVSTR__Write         = 1,     /*!< Write : Programming or erase mode                                         */
} MDR_EEPROM_CMD__NVSTR__Enum;

/* =========================================================  ADDR  ========================================================== */
/* ==========================================================  DI  =========================================================== */
/* ==========================================================  DO  =========================================================== */
/* ==========================================================  KEY  ========================================================== */


/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* =====================================================  CLOCK_STATUS  ====================================================== */
/* =====================================  MDR_RST_CLOCK CLOCK_STATUS PLL_CPU_RDY [1..1]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY                                    */
  MDR_RST__STATUS__PLL_CPU_RDY__NotReady = 0,   /*!< NotReady : PLL not ready                                                  */
  MDR_RST__STATUS__PLL_CPU_RDY__Ready  = 1,     /*!< Ready : PLL ready                                                         */
} MDR_RST__STATUS__PLL_CPU_RDY__Enum;

/* =======================================  MDR_RST_CLOCK CLOCK_STATUS HSE_RDY [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY                                        */
  MDR_RST__STATUS__HSE_RDY__NotReady   = 0,     /*!< NotReady : HSE not ready                                                  */
  MDR_RST__STATUS__HSE_RDY__Ready      = 1,     /*!< Ready : HSE ready                                                         */
} MDR_RST__STATUS__HSE_RDY__Enum;

/* ======================================================  PLL_CONTROL  ====================================================== */
/* ======================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_ON [2..2]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON                                      */
  MDR_RST__PLL__CPU_EN__Off            = 0,     /*!< Off : PLL Off                                                             */
  MDR_RST__PLL__CPU_EN__On             = 1,     /*!< On : PLL On                                                               */
} MDR_RST__PLL__CPU_EN__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_PLD [3..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD                                     */
  MDR_RST__PLL__CPU_PLD__RestartOff    = 0,     /*!< RestartOff : PLL restart inactive                                         */
  MDR_RST__PLL__CPU_PLD__DoRestart     = 1,     /*!< DoRestart : PLL Do Restart                                                */
} MDR_RST__PLL__CPU_PLD__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_MUL [8..11]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL                                     */
  MDR_RST__PLL__CPU_MUL__x1            = 0,     /*!< x1 : PLL mul x1                                                           */
  MDR_RST__PLL__CPU_MUL__x2            = 1,     /*!< x2 : PLL mul x2                                                           */
  MDR_RST__PLL__CPU_MUL__x3            = 2,     /*!< x3 : PLL mul x3                                                           */
  MDR_RST__PLL__CPU_MUL__x4            = 3,     /*!< x4 : PLL mul x4                                                           */
  MDR_RST__PLL__CPU_MUL__x5            = 4,     /*!< x5 : PLL mul x5                                                           */
  MDR_RST__PLL__CPU_MUL__x6            = 5,     /*!< x6 : PLL mul x6                                                           */
  MDR_RST__PLL__CPU_MUL__x7            = 6,     /*!< x7 : PLL mul x7                                                           */
  MDR_RST__PLL__CPU_MUL__x8            = 7,     /*!< x8 : PLL mul x8                                                           */
  MDR_RST__PLL__CPU_MUL__x9            = 8,     /*!< x9 : PLL mul x9                                                           */
  MDR_RST__PLL__CPU_MUL__x10           = 9,     /*!< x10 : PLL mul x10                                                         */
  MDR_RST__PLL__CPU_MUL__x11           = 10,    /*!< x11 : PLL mul x11                                                         */
  MDR_RST__PLL__CPU_MUL__x12           = 11,    /*!< x12 : PLL mul x12                                                         */
  MDR_RST__PLL__CPU_MUL__x13           = 12,    /*!< x13 : PLL mul x13                                                         */
  MDR_RST__PLL__CPU_MUL__x14           = 13,    /*!< x14 : PLL mul x14                                                         */
  MDR_RST__PLL__CPU_MUL__x15           = 14,    /*!< x15 : PLL mul x15                                                         */
  MDR_RST__PLL__CPU_MUL__x16           = 15,    /*!< x16 : PLL mul x16                                                         */
} MDR_RST__PLL__CPU_MUL__Enum;

/* ======================================================  HS_CONTROL  ======================================================= */
/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE_ON [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE_ON                                           */
  MDR_RST__HS__HSE_EN__Off             = 0,     /*!< Off : HSE Off                                                             */
  MDR_RST__HS__HSE_EN__On              = 1,     /*!< On : HSE On                                                               */
} MDR_RST__HS__HSE_EN__Enum;

/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE_BYP [1..1]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE_BYP                                          */
  MDR_RST__HS__HSE_BYP__Off            = 0,     /*!< Off : HSE forms Clock from external oscillator                            */
  MDR_RST__HS__HSE_BYP__On             = 1,     /*!< On : HSE passes Clock from external generator                             */
} MDR_RST__HS__HSE_BYP__Enum;

/* =======================================================  CPU_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL                                        */
  MDR_RST__CPU__C1__HSI                = 0,     /*!< HSI : CPU_C1 output is HSI                                                */
  MDR_RST__CPU__C1__HSI/2              = 1,     /*!< HSI/2 : CPU_C1 output is HSI/2                                            */
  MDR_RST__CPU__C1__HSE                = 2,     /*!< HSE : CPU_C1 output is HSE                                                */
  MDR_RST__CPU__C1__HSE/2              = 3,     /*!< HSE/2 : CPU_C1 output is HSE/2                                            */
} MDR_RST__CPU__C1__Enum;

/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C2_SEL [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL                                        */
  MDR_RST__CPU__C2__CPU_C1             = 0,     /*!< CPU_C1 : Freq from CPU_C1 mux direct                                      */
  MDR_RST__CPU__C2__PLLCPUo            = 1,     /*!< PLLCPUo : Freq from CPU_C1 mux through PLL                                */
} MDR_RST__CPU__C2__Enum;

/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C3_SEL [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL                                        */
  MDR_RST__CPU__C3__div1_0             = 0,     /*!< div1_0 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_1             = 1,     /*!< div1_1 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_2             = 2,     /*!< div1_2 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_3             = 3,     /*!< div1_3 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_4             = 4,     /*!< div1_4 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_5             = 5,     /*!< div1_5 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_6             = 6,     /*!< div1_6 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_7             = 7,     /*!< div1_7 : div by 1                                                         */
  MDR_RST__CPU__C3__div2               = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST__CPU__C3__div4               = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST__CPU__C3__div8               = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST__CPU__C3__div16              = 11,    /*!< div16 : div by 16                                                         */
  MDR_RST__CPU__C3__div32              = 12,    /*!< div32 : div by 32                                                         */
  MDR_RST__CPU__C3__div64              = 13,    /*!< div64 : div by 64                                                         */
  MDR_RST__CPU__C3__div128             = 14,    /*!< div128 : div by 128                                                       */
  MDR_RST__CPU__C3__div256             = 15,    /*!< div256 : div by 256                                                       */
} MDR_RST__CPU__C3__Enum;

/* ========================================  MDR_RST_CLOCK CPU_CLOCK HCLK_SEL [8..9]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL                                          */
  MDR_RST__CPU__HCLK__HSI              = 0,     /*!< HSI : CPU clock is HSI                                                    */
  MDR_RST__CPU__HCLK__CPU_C3           = 1,     /*!< CPU_C3 : CPU clock is CPU_C3 output                                       */
  MDR_RST__CPU__HCLK__LSE              = 2,     /*!< LSE : CPU clock is LSE                                                    */
  MDR_RST__CPU__HCLK__LSI              = 3,     /*!< LSI : CPU clock is LSI                                                    */
} MDR_RST__CPU__HCLK__Enum;

/* ======================================================  PER1_CLOCK  ======================================================= */
/* ======================================  MDR_RST_CLOCK PER1_CLOCK PER1_C1_SEL [0..1]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLOCK_PER1_C1_SEL                                      */
  MDR_RST__PER1__C1__LSI               = 0,     /*!< LSI : PER1_C1 output is LSI                                               */
  MDR_RST__PER1__C1__LSI/2             = 1,     /*!< LSI/2 : PER1_C1 output is LSI/2                                           */
  MDR_RST__PER1__C1__LSE               = 2,     /*!< LSE : PER1_C1 output is LSE                                               */
  MDR_RST__PER1__C1__LSE/2             = 3,     /*!< LSE/2 : PER1_C1 output is LSE/2                                           */
} MDR_RST__PER1__C1__Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLOCK PER1_C2_SEL [2..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLOCK_PER1_C2_SEL                                      */
  MDR_RST__PER1__C2__CPU_C1            = 0,     /*!< CPU_C1 : PER1_C2 output is CPU_C1                                         */
  MDR_RST__PER1__C2__PER1_C1           = 1,     /*!< PER1_C1 : PER1_C2 output is PER1_C1                                       */
  MDR_RST__PER1__C2__PLLCPUo           = 2,     /*!< PLLCPUo : PER1_C2 output is PLLCPUo                                       */
  MDR_RST__PER1__C2__HSI_C1            = 3,     /*!< HSI_C1 : PER1_C2 output is HSI_C1                                         */
} MDR_RST__PER1__C2__Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLOCK DEBUG_EN [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLOCK_DEBUG_EN                                         */
  MDR_RST__PER1__DEBUG_CLK_Off         = 0,     /*!< Off : Debug disabled                                                      */
  MDR_RST__PER1__DEBUG_CLK_On          = 1,     /*!< On : Debug enabled                                                        */
} MDR_RST__PER1__DEBUG_CLK_Enum;

/* ========================================  MDR_RST_CLOCK PER1_CLOCK DMA_EN [5..5]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLOCK_DMA_EN                                           */
  MDR_RST__PER1__DMA_CLK__Off          = 0,     /*!< Off : DMA clock disabled                                                  */
  MDR_RST__PER1__DMA_CLK__On           = 1,     /*!< On : DMA clock enabled                                                    */
} MDR_RST__PER1__DMA_CLK__Enum;

/* =======================================================  ADC_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL                                        */
  MDR_RST__ADC__C1__CPU_C1             = 0,     /*!< CPU_C1 : ADC_C1 output is CPU_C1                                          */
  MDR_RST__ADC__C1__PER1_C1            = 1,     /*!< PER1_C1 : ADC_C1 output is PER1_C1                                        */
  MDR_RST__ADC__C1__PLLCPUo            = 2,     /*!< PLLCPUo : ADC_C1 output is PLLCPUo                                        */
  MDR_RST__ADC__C1__HSI_C1             = 3,     /*!< HSI_C1 : ADC_C1 output is HSI_C1                                          */
} MDR_RST__ADC__C1__Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK ADCIU_C1_SEL [2..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C1_SEL                                      */
  MDR_RST__ADCIU__C1__CPU_C1           = 0,     /*!< CPU_C1 : ADCIU_C1 output is CPU_C1                                        */
  MDR_RST__ADCIU__C1__PER1_C1          = 1,     /*!< PER1_C1 : ADCIU_C1 output is PER1_C1                                      */
  MDR_RST__ADCIU__C1__PLLCPUo          = 2,     /*!< PLLCPUo : ADCIU_C1 output is PLLCPUo                                      */
  MDR_RST__ADCIU__C1__HSI_C1           = 3,     /*!< HSI_C1 : ADCIU_C1 output is HSI_C1                                        */
} MDR_RST__ADCIU__C1__Enum;

/* =======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C3_SEL [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL                                        */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_0 = 0,/*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_1 = 1,/*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_2 = 2,/*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_3 = 3,/*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_4 = 4,/*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_5 = 5,/*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_6 = 6,/*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_7 = 7,/*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div2 = 8,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div4 = 9,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div8 = 10, /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div16 = 11,/*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div32 = 12,/*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div64 = 13,/*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div128 = 14,/*!< div128 : div by 128                                                      */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div256 = 15,/*!< div256 : div by 256                                                      */
} MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Enum;

/* =====================================  MDR_RST_CLOCK ADC_CLOCK ADCIU_C3_SEL [8..11]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL                                      */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_0 = 0,/*!< div1_0 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_1 = 1,/*!< div1_1 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_2 = 2,/*!< div1_2 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_3 = 3,/*!< div1_3 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_4 = 4,/*!< div1_4 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_5 = 5,/*!< div1_5 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_6 = 6,/*!< div1_6 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_7 = 7,/*!< div1_7 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div2 = 8,/*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div4 = 9,/*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div8 = 10,/*!< div8 : div by 8                                                          */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div16 = 11,/*!< div16 : div by 16                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div32 = 12,/*!< div32 : div by 32                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div64 = 13,/*!< div64 : div by 64                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div128 = 14,/*!< div128 : div by 128                                                    */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div256 = 15,/*!< div256 : div by 256                                                    */
} MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_Enum;

/* =====================================  MDR_RST_CLOCK ADC_CLOCK ADCIU_CLK_EN [12..12]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADCIU_CLK_EN                                      */
  MDR_RST__ADCIU__CLK_EN__Off          = 0,     /*!< Off : ADCIU clock disabled                                                */
  MDR_RST__ADCIU__CLK_EN__On           = 1,     /*!< On : ADCIU clock enabled                                                  */
} MDR_RST__ADCIU__CLK_EN__Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK ADC_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN                                        */
  MDR_RST__ADC__CLK_EN__Off            = 0,     /*!< Off : ADC clock disabled                                                  */
  MDR_RST__ADC__CLK_EN__On             = 1,     /*!< On : ADC clock enabled                                                    */
} MDR_RST__ADC__CLK_EN__Enum;

/* =======================================================  RTC_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK RTC_CLOCK HSE_SEL [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_0 = 0,   /*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_1 = 1,   /*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_2 = 2,   /*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_3 = 3,   /*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_4 = 4,   /*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_5 = 5,   /*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_6 = 6,   /*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_7 = 7,   /*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div2 = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div4 = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div8 = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div16 = 11,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div32 = 12,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div64 = 13,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div128 = 14,  /*!< div128 : div by 128                                                       */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div256 = 15,  /*!< div256 : div by 256                                                       */
} MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Enum;

/* ========================================  MDR_RST_CLOCK RTC_CLOCK HSI_SEL [4..7]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_0 = 0,   /*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_1 = 1,   /*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_2 = 2,   /*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_3 = 3,   /*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_4 = 4,   /*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_5 = 5,   /*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_6 = 6,   /*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_7 = 7,   /*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div2 = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div4 = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div8 = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div16 = 11,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div32 = 12,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div64 = 13,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div128 = 14,  /*!< div128 : div by 128                                                       */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div256 = 15,  /*!< div256 : div by 256                                                       */
} MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Enum;

/* =======================================  MDR_RST_CLOCK RTC_CLOCK HSE_RTC_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN                                        */
  MDR_RST__RTC__HSE_RTC_CLOCK__Off     = 0,     /*!< Off : RTC HSE Clock Disabled                                              */
  MDR_RST__RTC__HSE_RTC_CLOCK__On      = 1,     /*!< On : RTC HSE Clock Enabled                                                */
} MDR_RST__RTC__HSE_RTC_CLOCK__Enum;

/* =======================================  MDR_RST_CLOCK RTC_CLOCK HSI_RTC_EN [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN                                        */
  MDR_RST__RTC__HSI_RTC_CLOCK__Off     = 0,     /*!< Off : RTC HSI Clock Disabled                                              */
  MDR_RST__RTC__HSI_RTC_CLOCK__On      = 1,     /*!< On : RTC HSI Clock Enabled                                                */
} MDR_RST__RTC__HSI_RTC_CLOCK__Enum;

/* ======================================================  PER2_CLOCK  ======================================================= */
/* ======================================  MDR_RST_CLOCK PER2_CLOCK SPI1_CLK_EN [0..0]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_SPI1_CLK_EN                                      */
  MDR_RST__PER2__SPI1_CLOCK__Off       = 0,     /*!< Off : Clock Disabled                                                      */
  MDR_RST__PER2__SPI1_CLOCK__On        = 1,     /*!< On : Clock Enabled                                                        */
} MDR_RST__PER2__SPI1_CLOCK__Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK UART1_CLK_EN [1..1]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK UART2_CLK_EN [2..2]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK EEPROM_CLK_EN [3..3]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN                                    */
  MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                     */
  MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_On = 1,/*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK RST_CLK_EN [4..4]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK DMA_CLK_EN [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK CMP_CLK_EN [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_CMP_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_CMP_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_CMP_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_CMP_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK DAC_CLK_EN [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_DAC_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_DAC_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_DAC_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_DAC_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK ADC_CLK_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK WWDT_CLK_EN [9..9]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN                                      */
  MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK IWDT_CLK_EN [10..10]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN                                      */
  MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK PWR_CLK_EN [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK BKP_CLK_EN [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK ADCIU_CLK_EN [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK TIMER1_CLK_EN [14..14]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN                                    */
  MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                     */
  MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_On = 1,/*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK TIMER2_CLK_EN [15..15]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN                                    */
  MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                     */
  MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_On = 1,/*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK PORTA_CLK_EN [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK PORTB_CLK_EN [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK PORTC_CLK_EN [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK CRC_CLK_EN [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_Enum;

/* =======================================================  TIM_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK TIM_CLOCK TIM1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG                                          */
  MDR_RST__TIM1__BRG__div1             = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST__TIM1__BRG__div2             = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST__TIM1__BRG__div4             = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST__TIM1__BRG__div8             = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST__TIM1__BRG__div16            = 4,     /*!< div16 : div by 16                                                         */
  MDR_RST__TIM1__BRG__div32            = 5,     /*!< div32 : div by 32                                                         */
  MDR_RST__TIM1__BRG__div64            = 6,     /*!< div64 : div by 64                                                         */
  MDR_RST__TIM1__BRG__div128           = 7,     /*!< div128 : div by 128                                                       */
} MDR_RST__TIM1__BRG__Enum;

/* =======================================  MDR_RST_CLOCK TIM_CLOCK TIM2_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG                                          */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN                                       */
  MDR_RST__TIM__TIM1_CLK__Off          = 0,     /*!< Off : Timer1 Clock Disabled                                               */
  MDR_RST__TIM__TIM1_CLK__On           = 1,     /*!< On : Timer1 Clock Enabled                                                 */
} MDR_RST__TIM__TIM1_CLK__Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN                                       */
  MDR_RST__TIM__TIM2_CLK__Off          = 0,     /*!< Off : Timer2 Clock Disabled                                               */
  MDR_RST__TIM__TIM2_CLK__On           = 1,     /*!< On : Timer2 Clock Enabled                                                 */
} MDR_RST__TIM__TIM2_CLK__Enum;

/* ======================================================  UART_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK UART_CLOCK UART1_BRG [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART1_BRG                                        */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div1 = 0,  /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div2 = 1,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div4 = 2,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div8 = 3,  /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div16 = 4, /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div32 = 5, /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div64 = 6, /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div128 = 7,/*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Enum;

/* ======================================  MDR_RST_CLOCK UART_CLOCK UART2_BRG [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART2_BRG                                        */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div1 = 0,  /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div2 = 1,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div4 = 2,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div8 = 3,  /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div16 = 4, /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div32 = 5, /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div64 = 6, /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div128 = 7,/*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Enum;

/* ====================================  MDR_RST_CLOCK UART_CLOCK UART1_CLK_EN [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN                                     */
  MDR_RST__UART__UART1_CLK__Off        = 0,     /*!< Off : UART1 Clock Disabled                                                */
  MDR_RST__UART__UART1_CLK__On         = 1,     /*!< On : UART1 Clock Enabled                                                  */
} MDR_RST__UART__UART1_CLK__Enum;

/* ====================================  MDR_RST_CLOCK UART_CLOCK UART2_CLK_EN [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN                                     */
  MDR_RST__UART__UART2_CLK__Off        = 0,     /*!< Off : UART2 Clock Disabled                                                */
  MDR_RST__UART__UART2_CLK__On         = 1,     /*!< On : UART2 Clock Enabled                                                  */
} MDR_RST__UART__UART2_CLK__Enum;

/* =======================================================  SSP_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK SSP_CLOCK SSP1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG                                          */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Enum;

/* =====================================  MDR_RST_CLOCK SSP_CLOCK SSP1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN                                       */
  MDR_RST__SSP__SSP1_CLK__Off          = 0,     /*!< Off : SSP1 Clock Disabled                                                 */
  MDR_RST__SSP__SSP1_CLK__On           = 1,     /*!< On : SSP1 Clock Enabled                                                   */
} MDR_RST__SSP__SSP1_CLK__Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  ADC1_Cfg  ======================================================== */
/* =============================================  MDR_ADC ADC1_Cfg ADON [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_ADON                                                     */
  MDR_ADC_ADC1_Cfg_ADON_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADC_ADC1_Cfg_ADON_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADC_ADC1_Cfg_ADON_Enum;

/* ==============================================  MDR_ADC ADC1_Cfg GO [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_GO                                                       */
  MDR_ADC_ADC1_Cfg_GO_Inactive         = 0,     /*!< Inactive : Autoclear to zero after start                                  */
  MDR_ADC_ADC1_Cfg_GO_Start            = 1,     /*!< Start : Start measurement                                                 */
} MDR_ADC_ADC1_Cfg_GO_Enum;

/* =============================================  MDR_ADC ADC1_Cfg CLKS [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CLKS                                                     */
  MDR_ADC_ADC1_Cfg_CLKS_CPU_Clock      = 0,     /*!< CPU_Clock : CPU_Clock used                                                */
  MDR_ADC_ADC1_Cfg_CLKS_ADC_Clock      = 1,     /*!< ADC_Clock : ADC_Clock used                                                */
} MDR_ADC_ADC1_Cfg_CLKS_Enum;

/* ============================================  MDR_ADC ADC1_Cfg SAMPLE [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SAMPLE                                                   */
  MDR_ADC_ADC1_Cfg_SAMPLE_Single       = 0,     /*!< Single : Single measurement by GO                                         */
  MDR_ADC_ADC1_Cfg_SAMPLE_Continuouse  = 1,     /*!< Continuouse : Continuous measurement, until stop by ADON                  */
} MDR_ADC_ADC1_Cfg_SAMPLE_Enum;

/* ==============================================  MDR_ADC ADC1_Cfg CHS [4..8]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CHS                                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_0_RefN  = 0,     /*!< Channel_0_RefN : Signal on PC4, Ref-                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_1_RefP  = 1,     /*!< Channel_1_RefP : Signal on PC3, Ref+                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_2       = 2,     /*!< Channel_2 : Signal on PC2                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_3       = 3,     /*!< Channel_3 : Signal on PC1                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_4       = 4,     /*!< Channel_4 : Signal on PB9                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_5       = 5,     /*!< Channel_5 : Signal on PB8                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_6       = 6,     /*!< Channel_6 : Signal on PB7                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_7       = 7,     /*!< Channel_7 : Signal on PB6                                                 */
  MDR_ADC_ADC1_Cfg_CHS_TS_VRef_1.23    = 30,    /*!< TS_VRef_1.23 : Signal from Thermosensor                                   */
  MDR_ADC_ADC1_Cfg_CHS_TS_Temperature  = 31,    /*!< TS_Temperature : Signal from Thermosensor                                 */
} MDR_ADC_ADC1_Cfg_CHS_Enum;

/* =============================================  MDR_ADC ADC1_Cfg CHCH [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CHCH                                                     */
  MDR_ADC_ADC1_Cfg_CHCH_Disable        = 0,     /*!< Disable : Measure only CHS channel                                        */
  MDR_ADC_ADC1_Cfg_CHCH_Enable         = 1,     /*!< Enable : Measure channels selected in reg CHSEL                           */
} MDR_ADC_ADC1_Cfg_CHCH_Enum;

/* ============================================  MDR_ADC ADC1_Cfg RGNC [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_RGNC                                                     */
  MDR_ADC_ADC1_Cfg_RGNC_Disable        = 0,     /*!< Disable : Flag STATUSx.AWOIFEN inactive                                   */
  MDR_ADC_ADC1_Cfg_RGNC_Enable         = 1,     /*!< Enable : Flag STATUSx.AWOIFEN enable                                      */
} MDR_ADC_ADC1_Cfg_RGNC_Enum;

/* ============================================  MDR_ADC ADC1_Cfg M_REF [11..11]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_M_REF                                                    */
  MDR_ADC_ADC1_Cfg_M_REF_Internal      = 0,     /*!< Internal : Signal in [GND..AUcc]                                          */
  MDR_ADC_ADC1_Cfg_M_REF_External      = 1,     /*!< External : Signal in [ADC_Ref-..ADC_Ref+]                                 */
} MDR_ADC_ADC1_Cfg_M_REF_Enum;

/* ===========================================  MDR_ADC ADC1_Cfg DIV_CLK [12..15]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_DIV_CLK                                                  */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_1       = 0,     /*!< div_1 : CLK = CPU_CLK                                                     */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_2       = 1,     /*!< div_2 : CLK = CPU_CLK/2                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_4       = 2,     /*!< div_4 : CLK = CPU_CLK/4                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_8       = 3,     /*!< div_8 : CLK = CPU_CLK/8                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_16      = 4,     /*!< div_16 : CLK = CPU_CLK/16                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_32      = 5,     /*!< div_32 : CLK = CPU_CLK/32                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_64      = 6,     /*!< div_64 : CLK = CPU_CLK/64                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_128     = 7,     /*!< div_128 : CLK = CPU_CLK/128                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_256     = 8,     /*!< div_256 : CLK = CPU_CLK/256                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_512     = 9,     /*!< div_512 : CLK = CPU_CLK/512                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_1024    = 10,    /*!< div_1024 : CLK = CPU_CLK/1024                                             */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_2048    = 11,    /*!< div_2048 : CLK = CPU_CLK/2048                                             */
} MDR_ADC_ADC1_Cfg_DIV_CLK_Enum;

/* ============================================  MDR_ADC ADC1_Cfg TS_EN [17..17]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_TS_EN                                                    */
  MDR_ADC_ADC1_Cfg_TS_EN_Disable       = 0,     /*!< Disable : Thermosensor power off                                          */
  MDR_ADC_ADC1_Cfg_TS_EN_Enable        = 1,     /*!< Enable : Thermosensor power on                                            */
} MDR_ADC_ADC1_Cfg_TS_EN_Enum;

/* =========================================  MDR_ADC ADC1_Cfg TS_BUFF_EN [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_TS_BUFF_EN                                               */
  MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Disable  = 0,     /*!< Disable : Thermosensor buffer disabled                                    */
  MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Enable   = 1,     /*!< Enable : Thermosensor buffer enabled                                      */
} MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Enum;

/* ===========================================  MDR_ADC ADC1_Cfg SEL_TS [19..19]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SEL_TS                                                   */
  MDR_ADC_ADC1_Cfg_SEL_TS_Disable      = 0,     /*!< Disable : Channel 31 signal is undefined                                  */
  MDR_ADC_ADC1_Cfg_SEL_TS_Selected     = 1,     /*!< Selected : Channel 31 signal is temperature                               */
} MDR_ADC_ADC1_Cfg_SEL_TS_Enum;

/* ==========================================  MDR_ADC ADC1_Cfg SEL_VREF [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SEL_VREF                                                 */
  MDR_ADC_ADC1_Cfg_SEL_VREF_Disable    = 0,     /*!< Disable : Channel 30 signal is undefined                                  */
  MDR_ADC_ADC1_Cfg_SEL_VREF_Selected   = 1,     /*!< Selected : Channel 30 signal is VRef                                      */
} MDR_ADC_ADC1_Cfg_SEL_VREF_Enum;

/* ==========================================  MDR_ADC ADC1_Cfg Delay_GO [25..27]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_Delay_GO                                                 */
  MDR_ADC_ADC1_Cfg_Delay_GO_1          = 0,     /*!< 1 : 1 period of CPU_CLK                                                   */
  MDR_ADC_ADC1_Cfg_Delay_GO_2          = 1,     /*!< 2 : 2 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_3          = 2,     /*!< 3 : 3 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_4          = 3,     /*!< 4 : 4 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_5          = 4,     /*!< 5 : 5 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_6          = 5,     /*!< 6 : 6 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_7          = 6,     /*!< 7 : 7 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_8          = 7,     /*!< 8 : 8 periods of CPU_CLK                                                  */
} MDR_ADC_ADC1_Cfg_Delay_GO_Enum;

/* =======================================================  ADC2_Cfg  ======================================================== */
/* ===========================================  MDR_ADC ADC2_Cfg ADC1_OP [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC2_Cfg_ADC1_OP                                                  */
  MDR_ADC_ADC2_Cfg_ADC1_OP_Own         = 0,     /*!< Own : Own setpoint Vref                                                   */
  MDR_ADC_ADC2_Cfg_ADC1_OP_Thermosensor = 1,    /*!< Thermosensor : Setpoint Vref from Thermosensor                            */
} MDR_ADC_ADC2_Cfg_ADC1_OP_Enum;

/* =====================================================  ADC1_H_Level  ====================================================== */
/* =====================================================  ADC1_L_Level  ====================================================== */
/* ======================================================  ADC1_RESULT  ====================================================== */
/* =========================================  MDR_ADC ADC1_RESULT Channel [16..20]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_RESULT_Channel                                               */
  MDR_ADC_ADC1_RESULT_Channel_Channel_0_RefN = 0,/*!< Channel_0_RefN : Signal on PC4, Ref-                                     */
  MDR_ADC_ADC1_RESULT_Channel_Channel_1_RefP = 1,/*!< Channel_1_RefP : Signal on PC3, Ref+                                     */
  MDR_ADC_ADC1_RESULT_Channel_Channel_2 = 2,    /*!< Channel_2 : Signal on PC2                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_3 = 3,    /*!< Channel_3 : Signal on PC1                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_4 = 4,    /*!< Channel_4 : Signal on PB9                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_5 = 5,    /*!< Channel_5 : Signal on PB8                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_6 = 6,    /*!< Channel_6 : Signal on PB7                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_7 = 7,    /*!< Channel_7 : Signal on PB6                                                 */
  MDR_ADC_ADC1_RESULT_Channel_TS_VRef_1.23 = 30,/*!< TS_VRef_1.23 : Signal from Thermosensor                                   */
  MDR_ADC_ADC1_RESULT_Channel_TS_Temperature = 31,/*!< TS_Temperature : Signal from Thermosensor                               */
} MDR_ADC_ADC1_RESULT_Channel_Enum;

/* ======================================================  ADC1_STATUS  ====================================================== */
/* =========================================  MDR_ADC ADC1_STATUS Overwrite [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_Overwrite                                             */
  MDR_ADC_ADC1_STATUS_Overwrite_Normal = 0,     /*!< Normal : No overwritten occure                                            */
  MDR_ADC_ADC1_STATUS_Overwrite_Overwrite = 1,  /*!< Overwrite : Result overwritten                                            */
} MDR_ADC_ADC1_STATUS_Overwrite_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS AWOIFEN [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_AWOIFEN                                               */
  MDR_ADC_ADC1_STATUS_AWOIFEN_InRange  = 0,     /*!< InRange : Signal in range                                                 */
  MDR_ADC_ADC1_STATUS_AWOIFEN_OutOfRange = 1,   /*!< OutOfRange : Signal is out of range                                       */
} MDR_ADC_ADC1_STATUS_AWOIFEN_Enum;

/* ===========================================  MDR_ADC ADC1_STATUS EOCIF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_EOCIF                                                 */
  MDR_ADC_ADC1_STATUS_EOCIF_NoResult   = 0,     /*!< NoResult : Result is not ready                                            */
  MDR_ADC_ADC1_STATUS_EOCIF_Ready      = 1,     /*!< Ready : Signal is ready to read                                           */
} MDR_ADC_ADC1_STATUS_EOCIF_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS AWOIF_IE [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_AWOIF_IE                                              */
  MDR_ADC_ADC1_STATUS_AWOIF_IE_Disable = 0,     /*!< Disable : IRQ Disable                                                     */
  MDR_ADC_ADC1_STATUS_AWOIF_IE_Enable  = 1,     /*!< Enable : IRQ Enable                                                       */
} MDR_ADC_ADC1_STATUS_AWOIF_IE_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS EOCIF_EN [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_EOCIF_EN                                              */
  MDR_ADC_ADC1_STATUS_EOCIF_EN_Disable = 0,     /*!< Disable : IRQ Disable                                                     */
  MDR_ADC_ADC1_STATUS_EOCIF_EN_Enable  = 1,     /*!< Enable : IRQ Enable                                                       */
} MDR_ADC_ADC1_STATUS_EOCIF_EN_Enum;

/* ======================================================  ADC1_CHSEL  ======================================================= */
/* ==========================================  MDR_ADC ADC1_CHSEL Channel_0 [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_0                                              */
  MDR_ADC_ADC1_CHSEL_Channel_0_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_0_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_0_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_1 [1..1]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_1                                              */
  MDR_ADC_ADC1_CHSEL_Channel_1_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_1_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_1_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_2 [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_2                                              */
  MDR_ADC_ADC1_CHSEL_Channel_2_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_2_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_2_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_3 [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_3                                              */
  MDR_ADC_ADC1_CHSEL_Channel_3_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_3_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_3_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_4 [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_4                                              */
  MDR_ADC_ADC1_CHSEL_Channel_4_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_4_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_4_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_5 [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_5                                              */
  MDR_ADC_ADC1_CHSEL_Channel_5_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_5_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_5_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_6 [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_6                                              */
  MDR_ADC_ADC1_CHSEL_Channel_6_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_6_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_6_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_7 [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_7                                              */
  MDR_ADC_ADC1_CHSEL_Channel_7_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_7_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_7_Enum;

/* ========================================  MDR_ADC ADC1_CHSEL Channel_30 [30..30]  ========================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_30                                             */
  MDR_ADC_ADC1_CHSEL_Channel_30_Off    = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_30_Selected = 1,   /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_30_Enum;

/* ========================================  MDR_ADC ADC1_CHSEL Channel_31 [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_31                                             */
  MDR_ADC_ADC1_CHSEL_Channel_31_Off    = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_31_Selected = 1,   /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_31_Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  REG_00  ========================================================= */
/* ========================================================  REG_01  ========================================================= */
/* ========================================================  REG_02  ========================================================= */
/* ========================================================  REG_03  ========================================================= */
/* ========================================================  REG_04  ========================================================= */
/* ========================================================  REG_05  ========================================================= */
/* ========================================================  REG_06  ========================================================= */
/* ========================================================  REG_07  ========================================================= */
/* ========================================================  REG_08  ========================================================= */
/* ========================================================  REG_09  ========================================================= */
/* ========================================================  REG_0A  ========================================================= */
/* ========================================================  REG_0B  ========================================================= */
/* ========================================================  REG_0C  ========================================================= */
/* ========================================================  REG_0D  ========================================================= */
/* ========================================================  REG_0E  ========================================================= */
/* ===============================================  MDR_BKP REG_0E LOW [0..2]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_LOW                                                        */
  MDR_BKP_0E__LOW__10MHz               = 0,     /*!< 10MHz : CPU Clock less then 10MHz                                         */
  MDR_BKP_0E__LOW__200KHz              = 1,     /*!< 200KHz : CPU Clock less then 200KHz                                       */
  MDR_BKP_0E__LOW__500KHz              = 2,     /*!< 500KHz : CPU Clock less then 500KHz                                       */
  MDR_BKP_0E__LOW__1MHz                = 3,     /*!< 1MHz : CPU Clock less then 1MHz                                           */
  MDR_BKP_0E__LOW__GensOffz            = 4,     /*!< GensOffz : Generators Off                                                 */
  MDR_BKP_0E__LOW__40MHz               = 5,     /*!< 40MHz : CPU Clock less then 40MHz                                         */
  MDR_BKP_0E__LOW__80MHz               = 6,     /*!< 80MHz : CPU Clock less then 80MHz                                         */
  MDR_BKP_0E__LOW__above_80MHz         = 7,     /*!< above_80MHz : CPU Clock above 10MHz                                       */
} MDR_BKP_0E__LOW__Enum;

/* ============================================  MDR_BKP REG_0E SelectRI [3..5]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0E_SelectRI                                                   */
  MDR_BKP_0E__SelRI__10MHz             = 0,     /*!< 10MHz : Additional I ~ 300uA                                              */
  MDR_BKP_0E__SelRI__200KHz            = 1,     /*!< 200KHz : Additional I ~ 6.6uA                                             */
  MDR_BKP_0E__SelRI__500KHz            = 2,     /*!< 500KHz : Additional I ~ 20A                                               */
  MDR_BKP_0E__SelRI__1MHz              = 3,     /*!< 1MHz : Additional I ~ 80uA                                                */
  MDR_BKP_0E__SelRI__GensOffz          = 4,     /*!< GensOffz : Additional I ~ 2uA                                             */
  MDR_BKP_0E__SelRI__40MHz             = 5,     /*!< 40MHz : Additional I ~ 900uA                                              */
  MDR_BKP_0E__SelRI__80MHz             = 6,     /*!< 80MHz : Additional I ~ 4.4mA                                              */
  MDR_BKP_0E__SelRI__above_80MHz       = 7,     /*!< above_80MHz : Additional I ~ 19mA                                         */
} MDR_BKP_0E__SelRI__Enum;

/* =============================================  MDR_BKP REG_0E Jtag_A [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Jtag_A                                                     */
  MDR_BKP_0E__JtagA__Disable           = 0,     /*!< Disable : Disabled                                                        */
  MDR_BKP_0E__JtagA__Enable            = 1,     /*!< Enable : Enabled                                                          */
} MDR_BKP_0E__JtagA__Enum;

/* =============================================  MDR_BKP REG_0E Jtag_B [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Jtag_B                                                     */
  MDR_BKP_0E__JtagB__Disable           = 0,     /*!< Disable : Disabled                                                        */
  MDR_BKP_0E__JtagB__Enable            = 1,     /*!< Enable : Enabled                                                          */
} MDR_BKP_0E__JtagB__Enum;

/* ===========================================  MDR_BKP REG_0E Trim_dDUcc [8..10]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Trim_dDUcc                                                 */
  MDR_BKP_0E__dDUcc__+0.1              = 0,     /*!< +0.1 : DUcc += 0.1 V                                                      */
  MDR_BKP_0E__dDUcc__+0.06             = 1,     /*!< +0.06 : DUcc += 0.06 V                                                    */
  MDR_BKP_0E__dDUcc__+0.04             = 2,     /*!< +0.04 : DUcc += 0.04 V                                                    */
  MDR_BKP_0E__dDUcc__+0.01             = 3,     /*!< +0.01 : DUcc += 0.01 V                                                    */
  MDR_BKP_0E__dDUcc__-0.01             = 4,     /*!< -0.01 : DUcc -= 0.01 V                                                    */
  MDR_BKP_0E__dDUcc__-0.04             = 5,     /*!< -0.04 : DUcc -= 0.04 V                                                    */
  MDR_BKP_0E__dDUcc__-0.6              = 6,     /*!< -0.6 : DUcc -= 0.06 V                                                     */
  MDR_BKP_0E__dDUcc__-0.1              = 7,     /*!< -0.1 : DUcc -= 0.1 V                                                      */
} MDR_BKP_0E__dDUcc__Enum;

/* =============================================  MDR_BKP REG_0E FPOR [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_FPOR                                                       */
  MDR_BKP_0E__FPOR__Low                = 0,     /*!< Low : No Bootloader                                                       */
  MDR_BKP_0E__FPOR__High               = 1,     /*!< High : Bootloader completed                                               */
} MDR_BKP_0E__FPOR__Enum;

/* ===========================================  MDR_BKP REG_0E Trim_DUcc [12..13]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Trim_DUcc                                                  */
  MDR_BKP_0E__DUcc__1.8                = 0,     /*!< 1.8 : DUcc = 1.8 V                                                        */
  MDR_BKP_0E__DUcc__1.6                = 1,     /*!< 1.6 : DUcc = 1.6 V                                                        */
  MDR_BKP_0E__DUcc__1.4                = 2,     /*!< 1.4 : DUcc = 1.4 V                                                        */
  MDR_BKP_0E__DUcc__1.2                = 3,     /*!< 1.2 : DUcc = 1.2 V                                                        */
} MDR_BKP_0E__DUcc__Enum;

/* ============================================  MDR_BKP REG_0E COVDET [14..14]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0E_COVDET                                                     */
  MDR_BKP_0E__COVDET__Off              = 0,     /*!< Off : No dreaking access detected                                         */
  MDR_BKP_0E__COVDET__On               = 1,     /*!< On : Breaking access detected                                             */
} MDR_BKP_0E__COVDET__Enum;

/* ============================================  MDR_BKP REG_0E I_LimEn [15..15]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0E_I_LimEn                                                    */
  MDR_BKP_0E__Ilim__Disable            = 0,     /*!< Disable : Disabled                                                        */
  MDR_BKP_0E__Ilim__Enable             = 1,     /*!< Enable : Enabled                                                          */
} MDR_BKP_0E__Ilim__Enum;

/* ========================================================  REG_0F  ========================================================= */
/* =============================================  MDR_BKP REG_0F LSE_ON [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_ON                                                     */
  MDR_RTC__LSE_ON__Off                 = 0,     /*!< Off : Disable state                                                       */
  MDR_RTC__LSE_ON__On                  = 1,     /*!< On : Enable state                                                         */
} MDR_RTC__LSE_ON__Enum;

/* =============================================  MDR_BKP REG_0F LSE_BYP [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_BYP                                                    */
  MDR_RTC__LSE_BYP__Off                = 0,     /*!< Off : Use for external resonator                                          */
  MDR_RTC__LSE_BYP__On                 = 1,     /*!< On : Use for external generator                                           */
} MDR_RTC__LSE_BYP__Enum;

/* =============================================  MDR_BKP REG_0F RTC_SEL [2..3]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_SEL                                                    */
  MDR_BKP_REG_0F_RTC_SEL_LSI           = 0,     /*!< LSI : RTC use LSI clock                                                   */
  MDR_BKP_REG_0F_RTC_SEL_LSE           = 1,     /*!< LSE : RTC use LSE clock                                                   */
  MDR_BKP_REG_0F_RTC_SEL_HSIRTC        = 2,     /*!< HSIRTC : RTC use HSIRTC clock                                             */
  MDR_BKP_REG_0F_RTC_SEL_HSERTC        = 3,     /*!< HSERTC : RTC use HSERTC clock                                             */
} MDR_BKP_REG_0F_RTC_SEL_Enum;

/* =============================================  MDR_BKP REG_0F RTC_EN [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_EN                                                     */
  MDR_BKP_REG_0F_RTC_EN_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_RTC_EN_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_RTC_EN_Enum;

/* ============================================  MDR_BKP REG_0F LSE_RDY [13..13]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_RDY                                                    */
  MDR_BKP_REG_0F_LSE_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_LSE_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_LSE_RDY_Enum;

/* ============================================  MDR_BKP REG_0F LSI_ON [15..15]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_ON                                                     */
  MDR_BKP_REG_0F_LSI_ON_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_LSI_ON_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_LSI_ON_Enum;

/* ===========================================  MDR_BKP REG_0F LSI_TRIM [16..20]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_TRIM                                                   */
  MDR_BKP_REG_0F_LSI_TRIM_69KHz        = 0,     /*!< 69KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_65KHz        = 1,     /*!< 65KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_60KHz        = 2,     /*!< 60KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_58KHz        = 3,     /*!< 58KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_52KHz        = 4,     /*!< 52KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_50KHz        = 5,     /*!< 50KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_49KHz        = 6,     /*!< 49KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_45KHz        = 7,     /*!< 45KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_44KHz        = 8,     /*!< 44KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_42KHz        = 9,     /*!< 42KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_40KHz        = 10,    /*!< 40KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_39KHz        = 11,    /*!< 39KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_37KHz        = 12,    /*!< 37KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_36KHz        = 13,    /*!< 36KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_35KHz        = 14,    /*!< 35KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_33KHz        = 15,    /*!< 33KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_32KHz        = 16,    /*!< 32KHz : LSI frequency tuner                                               */
} MDR_BKP_REG_0F_LSI_TRIM_Enum;

/* ============================================  MDR_BKP REG_0F LSI_RDY [21..21]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_RDY                                                    */
  MDR_BKP_REG_0F_LSI_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_LSI_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_LSI_RDY_Enum;

/* ============================================  MDR_BKP REG_0F HSI_ON [22..22]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_HSI_ON                                                     */
  MDR_BKP_REG_0F_HSI_ON_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_HSI_ON_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_HSI_ON_Enum;

/* ============================================  MDR_BKP REG_0F HSI_RDY [23..23]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_HSI_RDY                                                    */
  MDR_BKP_REG_0F_HSI_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_HSI_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_HSI_RDY_Enum;

/* ============================================  MDR_BKP REG_0F Standby [30..30]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_Standby                                                    */
  MDR_BKP_REG_0F_Standby_Disable       = 0,     /*!< Disable : Normal mode, DUcc is On                                         */
  MDR_BKP_REG_0F_Standby_Enable        = 1,     /*!< Enable : Standby mode, DUcc is Off                                        */
} MDR_BKP_REG_0F_Standby_Enum;

/* ===========================================  MDR_BKP REG_0F RTC_RESET [31..31]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_RESET                                                  */
  MDR_BKP_REG_0F_RTC_RESET_Active      = 0,     /*!< Active : RTC active state                                                 */
  MDR_BKP_REG_0F_RTC_RESET_Reset       = 1,     /*!< Reset : RTC in Reset state                                                */
} MDR_BKP_REG_0F_RTC_RESET_Enum;

/* ========================================================  RTC_CNT  ======================================================== */
/* ========================================================  RTC_DIV  ======================================================== */
/* ========================================================  RTC_PRL  ======================================================== */
/* =======================================================  RTC_ALRM  ======================================================== */
/* ========================================================  RTC_CS  ========================================================= */
/* ===============================================  MDR_BKP RTC_CS OWF [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_OWF                                                        */
  MDR_BKP_RTC_CS_OWF_Off               = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_OWF_On                = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_OWF_Enum;

/* ==============================================  MDR_BKP RTC_CS SECF [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_SECF                                                       */
  MDR_BKP_RTC_CS_SECF_Off              = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_SECF_On               = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_SECF_Enum;

/* ==============================================  MDR_BKP RTC_CS ALRF [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_ALRF                                                       */
  MDR_BKP_RTC_CS_ALRF_Off              = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_ALRF_On               = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_ALRF_Enum;

/* =============================================  MDR_BKP RTC_CS OWF_IE [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_OWF_IE                                                     */
  MDR_BKP_RTC_CS_OWF_IE_Off            = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_OWF_IE_On             = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_OWF_IE_Enum;

/* =============================================  MDR_BKP RTC_CS SECF_IE [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_SECF_IE                                                    */
  MDR_BKP_RTC_CS_SECF_IE_Off           = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_SECF_IE_On            = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_SECF_IE_Enum;

/* =============================================  MDR_BKP RTC_CS ALRF_IE [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_ALRF_IE                                                    */
  MDR_BKP_RTC_CS_ALRF_IE_Off           = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_ALRF_IE_On            = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_ALRF_IE_Enum;

/* ===============================================  MDR_BKP RTC_CS WEC [6..6]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_WEC                                                        */
  MDR_BKP_RTC_CS_WEC_Ready             = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_WEC_Busy              = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_WEC_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  RXTX  ========================================================== */
/* ==============================================  MDR_PORTA RXTX Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Pin_                                                       */
  MDR_GPIO__PIN_DATA__Low              = 0,     /*!< Low : LOW Level Voltage                                                   */
  MDR_GPIO__PIN_DATA__High             = 1,     /*!< High : HIGH Level Voltage                                                 */
} MDR_GPIO__PIN_DATA__Enum;

/* ==========================================================  OE  =========================================================== */
/* ===============================================  MDR_PORTA OE Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_OE_Pin_                                                         */
  MDR_GPIO__PIN_DIR__IN                = 0,     /*!< IN : Input pin                                                            */
  MDR_GPIO__PIN_DIR__OUT               = 1,     /*!< OUT : Output pin                                                          */
} MDR_GPIO__PIN_DIR__Enum;

/* =========================================================  FUNC  ========================================================== */
/* ==============================================  MDR_PORTA FUNC Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC_Pin_                                                       */
  MDR_GPIO__PIN_FUNC__Port             = 0,     /*!< Port : RXTX defined pin                                                   */
  MDR_GPIO__PIN_FUNC__Main             = 1,     /*!< Main : Main Periph defined pin                                            */
  MDR_GPIO__PIN_FUNC__Alter            = 2,     /*!< Alter : Alter Periph defined pin                                          */
  MDR_GPIO__PIN_FUNC__Override         = 3,     /*!< Override : Override Periph defined pin                                    */
} MDR_GPIO__PIN_FUNC__Enum;

/* ========================================================  ANALOG  ========================================================= */
/* =============================================  MDR_PORTA ANALOG Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Pin_                                                     */
  MDR_GPIO__PIN_DIGIT__Analog          = 0,     /*!< Analog : Pin works with Analog signal                                     */
  MDR_GPIO__PIN_DIGIT__Digital         = 1,     /*!< Digital : Pin works with Digital signal                                   */
} MDR_GPIO__PIN_DIGIT__Enum;

/* =========================================================  PULL  ========================================================== */
/* ===========================================  MDR_PORTA PULL Down_Pin_0 [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_0                                                 */
  MDR_GPIO__PIN_DOWN__Off              = 0,     /*!< Off : No pull selected                                                    */
  MDR_GPIO__PIN_DOWN__DOWN             = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_GPIO__PIN_DOWN__Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_1 [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_1                                                 */
  MDR_PORTA_PULL_Down_Pin_1_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_1_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_1_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_2 [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_2                                                 */
  MDR_PORTA_PULL_Down_Pin_2_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_2_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_2_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_3 [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_3                                                 */
  MDR_PORTA_PULL_Down_Pin_3_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_3_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_3_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_4 [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_4                                                 */
  MDR_PORTA_PULL_Down_Pin_4_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_4_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_4_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_5 [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_5                                                 */
  MDR_PORTA_PULL_Down_Pin_5_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_5_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_5_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_6 [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_6                                                 */
  MDR_PORTA_PULL_Down_Pin_6_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_6_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_6_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_7 [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_7                                                 */
  MDR_PORTA_PULL_Down_Pin_7_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_7_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_7_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_8 [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_8                                                 */
  MDR_PORTA_PULL_Down_Pin_8_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_8_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_8_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_9 [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_9                                                 */
  MDR_PORTA_PULL_Down_Pin_9_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_9_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_9_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_10 [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_10                                                */
  MDR_PORTA_PULL_Down_Pin_10_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_10_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_10_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_11 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_11                                                */
  MDR_PORTA_PULL_Down_Pin_11_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_11_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_11_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_12 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_12                                                */
  MDR_PORTA_PULL_Down_Pin_12_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_12_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_12_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_13 [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_13                                                */
  MDR_PORTA_PULL_Down_Pin_13_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_13_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_13_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_14 [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_14                                                */
  MDR_PORTA_PULL_Down_Pin_14_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_14_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_14_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_15 [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_15                                                */
  MDR_PORTA_PULL_Down_Pin_15_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_15_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_15_Enum;

/* ============================================  MDR_PORTA PULL UP_Pin_ [16..16]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_UP_Pin_                                                    */
  MDR_PORTA_PULL_UP_Pin__Off           = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_UP_Pin__UP            = 1,     /*!< UP : Pin pulled up to Ucc                                                 */
} MDR_PORTA_PULL_UP_Pin__Enum;

/* ==========================================================  PD  =========================================================== */
/* ===========================================  MDR_PORTA PD Driver_Pin_0 [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_0                                                 */
  MDR_GPIO__PIN_DRIVER__Driver         = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_GPIO__PIN_DRIVER__OpenDrain      = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_GPIO__PIN_DRIVER__Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_1 [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_1                                                 */
  MDR_PORTA_PD_Driver_Pin_1_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_1_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_1_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_2 [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_2                                                 */
  MDR_PORTA_PD_Driver_Pin_2_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_2_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_2_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_3 [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_3                                                 */
  MDR_PORTA_PD_Driver_Pin_3_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_3_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_3_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_4 [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_4                                                 */
  MDR_PORTA_PD_Driver_Pin_4_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_4_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_4_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_5 [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_5                                                 */
  MDR_PORTA_PD_Driver_Pin_5_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_5_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_5_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_6 [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_6                                                 */
  MDR_PORTA_PD_Driver_Pin_6_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_6_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_6_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_7 [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_7                                                 */
  MDR_PORTA_PD_Driver_Pin_7_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_7_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_7_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_8 [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_8                                                 */
  MDR_PORTA_PD_Driver_Pin_8_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_8_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_8_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_9 [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_9                                                 */
  MDR_PORTA_PD_Driver_Pin_9_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_9_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_9_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_10 [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_10                                                */
  MDR_PORTA_PD_Driver_Pin_10_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_10_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_10_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_11 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_11                                                */
  MDR_PORTA_PD_Driver_Pin_11_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_11_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_11_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_12 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_12                                                */
  MDR_PORTA_PD_Driver_Pin_12_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_12_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_12_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_13 [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_13                                                */
  MDR_PORTA_PD_Driver_Pin_13_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_13_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_13_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_14 [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_14                                                */
  MDR_PORTA_PD_Driver_Pin_14_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_14_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_14_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_15 [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_15                                                */
  MDR_PORTA_PD_Driver_Pin_15_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_15_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_15_Enum;

/* ==========================================  MDR_PORTA PD Schmitt_Pin_ [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Schmitt_Pin_                                                 */
  MDR_GPIO__PIN_SHMITT__Off            = 0,     /*!< Off : Schmitt 200mv                                                       */
  MDR_GPIO__PIN_SHMITT__On             = 1,     /*!< On : Schmitt 400mv                                                        */
} MDR_GPIO__PIN_SHMITT__Enum;

/* ==========================================================  PWR  ========================================================== */
/* ===============================================  MDR_PORTA PWR Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_PWR_Pin_                                                        */
  MDR_GPIO__PIN_PWR__Off               = 0,     /*!< Off : Level switch disabled                                               */
  MDR_GPIO__PIN_PWR__Slow              = 1,     /*!< Slow : Levels switch rate about 100ns                                     */
  MDR_GPIO__PIN_PWR__Fast              = 2,     /*!< Fast : Levels switch rate about 20ns                                      */
  MDR_GPIO__PIN_PWR__MaxFast           = 3,     /*!< MaxFast : Levels switch rate about 10ns                                   */
} MDR_GPIO__PIN_PWR__Enum;

/* =========================================================  GFEN  ========================================================== */
/* ==============================================  MDR_PORTA GFEN Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_GFEN_Pin_                                                       */
  MDR_GPIO__PIN_GFEN__Off              = 0,     /*!< Off : Filter Off                                                          */
  MDR_GPIO__PIN_GFEN__On               = 1,     /*!< On : Filter pulses less then 10 ns                                        */
} MDR_GPIO__PIN_GFEN__Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* MDR1986VE4_H */


/** @} */ /* End of group MDR1986VE4 */

/** @} */ /* End of group Milandr */
