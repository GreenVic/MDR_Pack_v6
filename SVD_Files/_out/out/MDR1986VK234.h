/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     MDR1986VK234.h
 * @brief    CMSIS HeaderFile
 * @version  2.0
 * @date     18. February 2019
 * @note     Generated by SVDConv V3.3.18 on Monday, 18.02.2019 15:33:17
 *           from File '../_src/MDR1986VK234.svd',
 *           last modified on Monday, 18.02.2019 12:33:10
 */



/** @addtogroup Milandr
  * @{
  */


/** @addtogroup MDR1986VK234
  * @{
  */


#ifndef MDR1986VK234_H
#define MDR1986VK234_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ========================================  MDR1986VK234 Specific Interrupt Numbers  ======================================== */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M0 Processor and Core Peripherals  =========================== */
#define __CM0_REV                 0x0000U       /*!< CM0 Core Revision                                                         */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0.h"                           /*!< ARM Cortex-M0 processor and core peripherals                              */
#include "system_MDR1986VK234.h"                /*!< MDR1986VK234 System                                                       */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief EEPROM Control (MDR_EEPROM)
  */

typedef struct {                                /*!< (@ 0x40018000) MDR_EEPROM Structure                                       */
  
  union {
    __IOM uint32_t CMD;                         /*!< (@ 0x00000000) EEPROM Control register                                    */
    
    struct {
      __IOM uint32_t CON        : 1;            /*!< [0..0] Enable memory access through EEPROM controller                     */
      __IOM uint32_t WR         : 1;            /*!< [1..1] Write operation (test bit)                                         */
      __IOM uint32_t RD         : 1;            /*!< [2..2] Read operation, (test bit)                                         */
      __IOM uint32_t DELAY      : 1;            /*!< [3..3] Memory access CPU delay tacts                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t XE         : 1;            /*!< [6..6] Enable ADDR[16..9]                                                 */
      __IOM uint32_t YE         : 1;            /*!< [7..7] Enable ADDR[8..2]                                                  */
      __IOM uint32_t SE         : 1;            /*!< [8..8] RD Amplifier enable                                                */
      __IOM uint32_t IFREN      : 1;            /*!< [9..9] Select main or info memory                                         */
      __IOM uint32_t ERASE      : 1;            /*!< [10..10] Erase string at ADDR[16:0]                                       */
      __IOM uint32_t MAS1       : 1;            /*!< [11..11] Erase whole block with ERASE                                     */
      __IOM uint32_t PROG       : 1;            /*!< [12..12] Programm EEPROM_DI to ADDR[16:0]                                 */
      __IOM uint32_t NVSTR      : 1;            /*!< [13..13] Memory access mode                                               */
    } CMD_b;
  } ;
  __IOM uint32_t  ADDR;                         /*!< (@ 0x00000004) Address register                                           */
  __IOM uint32_t  DI;                           /*!< (@ 0x00000008) Write data register                                        */
  __IOM uint32_t  DO;                           /*!< (@ 0x0000000C) Read data register                                         */
  __IOM uint32_t  KEY;                          /*!< (@ 0x00000010) Unlock block register                                      */
} MDR_EEPROM_Type;                              /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLock Control (MDR_RST_CLOCK)
  */

typedef struct {                                /*!< (@ 0x40020000) MDR_RST_CLOCK Structure                                    */
  
  union {
    __IM  uint32_t CLOCK_STATUS;                /*!< (@ 0x00000000) Clock Status Register                                      */
    
    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t PLL_CPU_RDY : 1;           /*!< [1..1] PLL CPU ready                                                      */
      __IM  uint32_t HSE_RDY    : 1;            /*!< [2..2] HSE generator ready                                                */
    } CLOCK_STATUS_b;
  } ;
  
  union {
    __IOM uint32_t PLL_CONTROL;                 /*!< (@ 0x00000004) PLL Control Register                                       */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t PLL_CPU_ON : 1;            /*!< [2..2] PLL CPU Enable                                                     */
      __IOM uint32_t PLL_CPU_PLD : 1;           /*!< [3..3] PLL CPU Restart                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t PLL_CPU_MUL : 4;           /*!< [11..8] PLL CPU Mul, [x1 .. x16]                                          */
    } PLL_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t HS_CONTROL;                  /*!< (@ 0x00000008) HSE Generator Control                                      */
    
    struct {
      __IOM uint32_t HSE_ON     : 1;            /*!< [0..0] HSE Enable                                                         */
      __IOM uint32_t HSE_BYP    : 1;            /*!< [1..1] HSE Bypass Mode                                                    */
    } HS_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t CPU_CLOCK;                   /*!< (@ 0x0000000C) CPU Clock Control                                          */
    
    struct {
      __IOM uint32_t CPU_C1_SEL : 2;            /*!< [1..0] CPU_C1 mux freq select                                             */
      __IOM uint32_t CPU_C2_SEL : 1;            /*!< [2..2] CPU_C2 mux freq select                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CPU_C3_SEL : 4;            /*!< [7..4] CPU_C2 mux output freq devider, [/1, /2, /4 .. /256]               */
      __IOM uint32_t HCLK_SEL   : 2;            /*!< [9..8] Select Clock for CPU                                               */
    } CPU_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t PER1_CLOCK;                  /*!< (@ 0x00000010) Peripherials Clock Control1                                */
    
    struct {
      __IOM uint32_t PER1_C1_SEL : 2;           /*!< [1..0] PER1_C1 mux freq select                                            */
      __IOM uint32_t PER1_C2_SEL : 2;           /*!< [3..2] PER1_C2 mux freq select                                            */
      __IOM uint32_t DEBUG_EN   : 1;            /*!< [4..4] Debug clock enable                                                 */
      __IOM uint32_t DMA_EN     : 1;            /*!< [5..5] DMA clock enable                                                   */
    } PER1_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t ADC_CLOCK;                   /*!< (@ 0x00000014) ADC Clock Control                                          */
    
    struct {
      __IOM uint32_t ADC_C1_SEL : 2;            /*!< [1..0] ADC_C1 mux freq select                                             */
      __IOM uint32_t ADCIU_C1_SEL : 2;          /*!< [3..2] ADCIU_C1 mux freq select                                           */
      __IOM uint32_t ADC_C3_SEL : 4;            /*!< [7..4] ADC_C1 mux output freq devider, [/1, /2, /4 .. /256]               */
      __IOM uint32_t ADCIU_C3_SEL : 4;          /*!< [11..8] ADCIU_C1 mux output freq devider, [/1, /2, /4 .. /256]            */
      __IOM uint32_t ADCIU_CLK_EN : 1;          /*!< [12..12] ADCIU Clock Enable                                               */
      __IOM uint32_t ADC_CLK_EN : 1;            /*!< [13..13] ADC Clock Enable                                                 */
    } ADC_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CLOCK;                   /*!< (@ 0x00000018) RTC Clock Control                                          */
    
    struct {
      __IOM uint32_t HSE_SEL    : 4;            /*!< [3..0] RTC HSE freq devider, [/1, /2, /4 .. /256]                         */
      __IOM uint32_t HSI_SEL    : 4;            /*!< [7..4] RTC HSI freq devider, [/1, /2, /4 .. /256]                         */
      __IOM uint32_t HSE_RTC_EN : 1;            /*!< [8..8] RTC HSE Clock enable                                               */
      __IOM uint32_t HSI_RTC_EN : 1;            /*!< [9..9] RTC HSI Clock enable                                               */
    } RTC_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t PER2_CLOCK;                  /*!< (@ 0x0000001C) Peripherials Clock Control 2                               */
    
    struct {
      __IOM uint32_t SPI1_CLK_EN : 1;           /*!< [0..0] SPI1 Clock Enable                                                  */
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [1..1] UART1 Clock Enable                                                 */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [2..2] UART2 Clock Enable                                                 */
      __IOM uint32_t EEPROM_CLK_EN : 1;         /*!< [3..3] EEPROM Clock Enable                                                */
      __IOM uint32_t RST_CLK_EN : 1;            /*!< [4..4] RST Clock Enable                                                   */
      __IOM uint32_t DMA_CLK_EN : 1;            /*!< [5..5] DMA Clock Enable                                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADC_CLK_EN : 1;            /*!< [8..8] ADC Clock Enable                                                   */
      __IOM uint32_t WWDT_CLK_EN : 1;           /*!< [9..9] WWDT Clock Enable                                                  */
      __IOM uint32_t IWDT_CLK_EN : 1;           /*!< [10..10] IWDT Clock Enable                                                */
      __IOM uint32_t PWR_CLK_EN : 1;            /*!< [11..11] Power Clock Enable                                               */
      __IOM uint32_t BKP_CLK_EN : 1;            /*!< [12..12] Backup Clock Enable                                              */
      __IOM uint32_t ADCIU_CLK_EN : 1;          /*!< [13..13] ADCIU Clock Enable                                               */
      __IOM uint32_t TIMER1_CLK_EN : 1;         /*!< [14..14] TIMER1 Clock Enable                                              */
      __IOM uint32_t TIMER2_CLK_EN : 1;         /*!< [15..15] TIMER2 Clock Enable                                              */
      __IOM uint32_t PORTA_CLK_EN : 1;          /*!< [16..16] GPIO PORT_A Clock Enable                                         */
      __IOM uint32_t PORTB_CLK_EN : 1;          /*!< [17..17] GPIO PORT_B Clock Enable                                         */
      __IOM uint32_t PORTC_CLK_EN : 1;          /*!< [18..18] GPIO PORT_C Clock Enable                                         */
      __IOM uint32_t CRC_CLK_EN : 1;            /*!< [19..19] CRC Clock Enable                                                 */
    } PER2_CLOCK_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t TIM_CLOCK;                   /*!< (@ 0x00000024) Timer's Clock Control                                      */
    
    struct {
      __IOM uint32_t TIM1_BRG   : 3;            /*!< [2..0] PER1_C2 freq divider to get TIM1_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM2_BRG   : 3;            /*!< [10..8] PER1_C2 freq divider to get TIM2_CLOCK, [/1, /2, /4
                                                     .. /128]                                                                  */
      __IM  uint32_t            : 13;
      __IOM uint32_t TIM1_CLK_EN : 1;           /*!< [24..24] TIM1_CLOCK enable                                                */
      __IOM uint32_t TIM2_CLK_EN : 1;           /*!< [25..25] TIM2_CLOCK enable                                                */
    } TIM_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t UART_CLOCK;                  /*!< (@ 0x00000028) UART's Clock Control                                       */
    
    struct {
      __IOM uint32_t UART1_BRG  : 3;            /*!< [2..0] PER1_C2 freq divider to get UART1_CLOCK, [/1, /2, /4
                                                     .. /128]                                                                  */
      __IM  uint32_t            : 5;
      __IOM uint32_t UART2_BRG  : 3;            /*!< [10..8] PER1_C2 freq divider to get UART2_CLOCK, [/1, /2, /4
                                                     .. /128]                                                                  */
      __IM  uint32_t            : 13;
      __IOM uint32_t UART1_CLK_EN : 1;          /*!< [24..24] UART1_CLOCK enable                                               */
      __IOM uint32_t UART2_CLK_EN : 1;          /*!< [25..25] UART2_CLOCK enable                                               */
    } UART_CLOCK_b;
  } ;
  
  union {
    __IOM uint32_t SSP_CLOCK;                   /*!< (@ 0x0000002C) SSP's Clock Control                                        */
    
    struct {
      __IOM uint32_t SSP1_BRG   : 3;            /*!< [2..0] PER1_C2 freq divider to get SSP1_CLOCK, [/1, /2, /4 ..
                                                     /128]                                                                     */
      __IM  uint32_t            : 21;
      __IOM uint32_t SSP1_CLK_EN : 1;           /*!< [24..24] SSP1_CLOCK Enable                                                */
    } SSP_CLOCK_b;
  } ;
} MDR_RST_CLOCK_Type;                           /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                         MDR_WWDT                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Window Watchdog Timer (MDR_WWDT)
  */

typedef struct {                                /*!< (@ 0x40048000) MDR_WWDT Structure                                         */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) WWDT Control register                                      */
    
    struct {
      __IOM uint32_t T          : 7;            /*!< [6..0] Counter                                                            */
      __IOM uint32_t WDGA       : 1;            /*!< [7..7] Enable                                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t CFR;                         /*!< (@ 0x00000004) WWDT Config register                                       */
    
    struct {
      __IOM uint32_t W          : 7;            /*!< [6..0] Window value                                                       */
      __IOM uint32_t WGTB       : 2;            /*!< [8..7] Clock Divider                                                      */
      __IOM uint32_t EWI        : 1;            /*!< [9..9] Early Window Interrupt                                             */
    } CFR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000008) WWDT Status register                                       */
    
    struct {
      __IOM uint32_t EWIF       : 1;            /*!< [0..0] Early Window Flag                                                  */
    } SR_b;
  } ;
} MDR_WWDT_Type;                                /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                         MDR_IWDT                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent Watchdog Timer (MDR_IWDT)
  */

typedef struct {                                /*!< (@ 0x40050000) MDR_IWDT Structure                                         */
  
  union {
    __OM  uint32_t KR;                          /*!< (@ 0x00000000) Key register                                               */
    
    struct {
      __OM  uint32_t KEY        : 16;           /*!< [15..0] Enable, start and reload control                                  */
    } KR_b;
  } ;
  
  union {
    __IOM uint32_t PR;                          /*!< (@ 0x00000004) Clock Prescaler register                                   */
    
    struct {
      __IOM uint32_t PR         : 3;            /*!< [2..0] Prescaler Register                                                 */
    } PR_b;
  } ;
  
  union {
    __IOM uint32_t RLR;                         /*!< (@ 0x00000008) Reload Period Register                                     */
    
    struct {
      __IOM uint32_t PRL        : 12;           /*!< [11..0] Timer Period Value                                                */
    } RLR_b;
  } ;
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x0000000C) Status Regster                                             */
    
    struct {
      __IM  uint32_t PVU        : 1;            /*!< [0..0] PR busy                                                            */
      __IM  uint32_t RVU        : 1;            /*!< [1..1] PRL busy                                                           */
    } SR_b;
  } ;
} MDR_IWDT_Type;                                /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Successive Approximation ADC (MDR_ADC)
  */

typedef struct {                                /*!< (@ 0x40040000) MDR_ADC Structure                                          */
  
  union {
    __IOM uint32_t ADC1_Cfg;                    /*!< (@ 0x00000000) ADC1 config register                                       */
    
    struct {
      __IOM uint32_t ADON       : 1;            /*!< [0..0] Enable ADC                                                         */
      __IOM uint32_t GO         : 1;            /*!< [1..1] Start single ADC mesurement                                        */
      __IOM uint32_t CLKS       : 1;            /*!< [2..2] Select Clock                                                       */
      __IOM uint32_t SAMPLE     : 1;            /*!< [3..3] Single or Continuous measurement                                   */
      __IOM uint32_t CHS        : 5;            /*!< [8..4] Active channel select                                              */
      __IOM uint32_t CHCH       : 1;            /*!< [9..9] Channel switching enable                                           */
      __IOM uint32_t RGNC       : 1;            /*!< [10..10] Signal limiters enable                                           */
      __IOM uint32_t M_REF      : 1;            /*!< [11..11] Signal amplitude reference                                       */
      __IOM uint32_t DIV_CLK    : 4;            /*!< [15..12] Divider for CPU_Clock usage                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS_EN      : 1;            /*!< [17..17] Thermosensor enable                                              */
      __IOM uint32_t TS_BUFF_EN : 1;            /*!< [18..18] Thermosensor buffer enable                                       */
      __IOM uint32_t SEL_TS     : 1;            /*!< [19..19] Output temperature from Thermosensor                             */
      __IOM uint32_t SEL_VREF   : 1;            /*!< [20..20] Output Vref=1.23 from Thermosensor                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t Delay_GO   : 3;            /*!< [27..25] Delay after channels switching in CPU_CLK                        */
    } ADC1_Cfg_b;
  } ;
  
  union {
    __IOM uint32_t ADC2_Cfg;                    /*!< (@ 0x00000004) ADC2 config register                                       */
    
    struct {
      __IM  uint32_t            : 17;
      __IOM uint32_t ADC1_OP    : 1;            /*!< [17..17] ADC1 Setpoint Vref source                                        */
    } ADC2_Cfg_b;
  } ;
  
  union {
    __IOM uint32_t ADC1_H_Level;                /*!< (@ 0x00000008) ADC High limit                                             */
    
    struct {
      __IOM uint32_t Level      : 12;           /*!< [11..0] Signal limit level                                                */
    } ADC1_H_Level_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ADC1_L_Level;                /*!< (@ 0x00000010) ADC Low limit                                              */
    
    struct {
      __IOM uint32_t Level      : 12;           /*!< [11..0] Signal limit level                                                */
    } ADC1_L_Level_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IM  uint32_t ADC1_RESULT;                 /*!< (@ 0x00000018) ADC result register                                        */
    
    struct {
      __IM  uint32_t Value      : 12;           /*!< [11..0] Channel signal value                                              */
      __IM  uint32_t            : 4;
      __IM  uint32_t Channel    : 5;            /*!< [20..16] Channel index                                                    */
    } ADC1_RESULT_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t ADC1_STATUS;                 /*!< (@ 0x00000020) ADC status register                                        */
    
    struct {
      __IOM uint32_t Overwrite  : 1;            /*!< [0..0] Result overwritten flag                                            */
      __IOM uint32_t AWOIFEN    : 1;            /*!< [1..1] Signal is out of limiters range                                    */
      __IOM uint32_t EOCIF      : 1;            /*!< [2..2] Result ready to read                                               */
      __IOM uint32_t AWOIF_IE   : 1;            /*!< [3..3] Enable IRQ by AWOIFEN flag                                         */
      __IOM uint32_t EOCIF_EN   : 1;            /*!< [4..4] Enable IRQ by EOCIF flag                                           */
    } ADC1_STATUS_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t ADC1_CHSEL;                  /*!< (@ 0x00000028) ADC channels select register                               */
    
    struct {
      __IOM uint32_t Channel_0  : 1;            /*!< [0..0] Signal on PC4, Ref-                                                */
      __IOM uint32_t Channel_1  : 1;            /*!< [1..1] Signal on PC3, Ref+                                                */
      __IOM uint32_t Channel_2  : 1;            /*!< [2..2] Signal on PC2                                                      */
      __IOM uint32_t Channel_3  : 1;            /*!< [3..3] Signal on PC1                                                      */
      __IOM uint32_t Channel_4  : 1;            /*!< [4..4] Signal on PB9                                                      */
      __IOM uint32_t Channel_5  : 1;            /*!< [5..5] Signal on PB8                                                      */
      __IOM uint32_t Channel_6  : 1;            /*!< [6..6] Signal on PB7                                                      */
      __IOM uint32_t Channel_7  : 1;            /*!< [7..7] Signal on PB6                                                      */
      __IM  uint32_t            : 22;
      __IOM uint32_t Channel_30 : 1;            /*!< [30..30] VRef from Thermosensor                                           */
      __IOM uint32_t Channel_31 : 1;            /*!< [31..31] Temperature from Thermosensor                                    */
    } ADC1_CHSEL_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t ADC1_TRIM;                   /*!< (@ 0x00000030) ADC TS_Vref trim register                                  */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t TS_Trim    : 5;            /*!< [5..1] Trim Vref from Thermosensor                                        */
      __IOM uint32_t SEL_VREF_BUF : 1;          /*!< [6..6] Output Vref_Buf=1.23 from Thermosensor                             */
    } ADC1_TRIM_b;
  } ;
} MDR_ADC_Type;                                 /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup and RTC Control (MDR_BKP)
  */

typedef struct {                                /*!< (@ 0x40060000) MDR_BKP Structure                                          */
  __IOM uint32_t  REG_00;                       /*!< (@ 0x00000000) User backup registers                                      */
  __IOM uint32_t  REG_01;                       /*!< (@ 0x00000004) User backup registers                                      */
  __IOM uint32_t  REG_02;                       /*!< (@ 0x00000008) User backup registers                                      */
  __IOM uint32_t  REG_03;                       /*!< (@ 0x0000000C) User backup registers                                      */
  __IOM uint32_t  REG_04;                       /*!< (@ 0x00000010) User backup registers                                      */
  __IOM uint32_t  REG_05;                       /*!< (@ 0x00000014) User backup registers                                      */
  __IOM uint32_t  REG_06;                       /*!< (@ 0x00000018) User backup registers                                      */
  __IOM uint32_t  REG_07;                       /*!< (@ 0x0000001C) User backup registers                                      */
  __IOM uint32_t  REG_08;                       /*!< (@ 0x00000020) User backup registers                                      */
  __IOM uint32_t  REG_09;                       /*!< (@ 0x00000024) User backup registers                                      */
  __IOM uint32_t  REG_0A;                       /*!< (@ 0x00000028) User backup registers                                      */
  __IOM uint32_t  REG_0B;                       /*!< (@ 0x0000002C) User backup registers                                      */
  __IOM uint32_t  REG_0C;                       /*!< (@ 0x00000030) User backup registers                                      */
  __IOM uint32_t  REG_0D;                       /*!< (@ 0x00000034) User backup registers                                      */
  
  union {
    __IOM uint32_t REG_0E;                      /*!< (@ 0x00000038) REG_OE Control register                                    */
    
    struct {
      __IOM uint32_t LOW        : 3;            /*!< [2..0] DUcc Freq control                                                  */
      __IOM uint32_t SelectRI   : 3;            /*!< [5..3] DUcc extra I, should be equals to LOW field!                       */
      __IOM uint32_t Jtag_A     : 1;            /*!< [6..6] Enable Jtag_A interface                                            */
      __IOM uint32_t Jtag_B     : 1;            /*!< [7..7] Enable Jtag_B interface                                            */
      __IOM uint32_t Trim_dDUcc : 3;            /*!< [10..8] Ducc adjust voltages                                              */
      __IOM uint32_t FPOR       : 1;            /*!< [11..11] Power Reset Flag                                                 */
      __IOM uint32_t Trim_DUcc  : 2;            /*!< [13..12] Select DUcc voltage                                              */
      __IOM uint32_t COVDET     : 1;            /*!< [14..14] Breaking access flag                                             */
      __IOM uint32_t I_LimEn    : 1;            /*!< [15..15] Enable I 150mA protection                                        */
    } REG_0E_b;
  } ;
  
  union {
    __IOM uint32_t REG_0F;                      /*!< (@ 0x0000003C) REG_OF Control register                                    */
    
    struct {
      __IOM uint32_t LSE_ON     : 1;            /*!< [0..0] LSE generator enable                                               */
      __IOM uint32_t LSE_BYP    : 1;            /*!< [1..1] LSE generator                                                      */
      __IOM uint32_t RTC_SEL    : 2;            /*!< [3..2] Select Clock for RTC                                               */
      __IOM uint32_t RTC_EN     : 1;            /*!< [4..4] RTC enable                                                         */
      __IOM uint32_t RTC_CAL    : 8;            /*!< [12..5] RTC calibration                                                   */
      __IM  uint32_t LSE_RDY    : 1;            /*!< [13..13] LSE frequency ready                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSI_ON     : 1;            /*!< [15..15] LSI generator enable                                             */
      __IOM uint32_t LSI_TRIM   : 5;            /*!< [20..16] LSI frequency adjust                                             */
      __IM  uint32_t LSI_RDY    : 1;            /*!< [21..21] LSI frequency ready                                              */
      __IOM uint32_t HSI_ON     : 1;            /*!< [22..22] HSI generator enable                                             */
      __IOM uint32_t HSI_RDY    : 1;            /*!< [23..23] HSI frequency ready                                              */
      __IOM uint32_t HSI_TRIM   : 6;            /*!< [29..24] HSI frequency adjust                                             */
      __IOM uint32_t Standby    : 1;            /*!< [30..30] Standby sleep mode                                               */
      __IOM uint32_t RTC_RESET  : 1;            /*!< [31..31] Reset RTC bit                                                    */
    } REG_0F_b;
  } ;
  __IOM uint32_t  RTC_CNT;                      /*!< (@ 0x00000040) Count periods of PRL                                       */
  
  union {
    __IOM uint32_t RTC_DIV;                     /*!< (@ 0x00000044) Counts RTC Clock to get PRL value                          */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC DIV value                                                     */
    } RTC_DIV_b;
  } ;
  
  union {
    __IOM uint32_t RTC_PRL;                     /*!< (@ 0x00000048) Period value for DIV counter                               */
    
    struct {
      __IOM uint32_t Value      : 20;           /*!< [19..0] RTC PRL value                                                     */
    } RTC_PRL_b;
  } ;
  
  union {
    __IOM uint32_t RTC_ALRM;                    /*!< (@ 0x0000004C) Event value for CNT counter                                */
    
    struct {
      __IOM uint32_t Value      : 32;           /*!< [31..0] Alarm value of CNT                                                */
    } RTC_ALRM_b;
  } ;
  
  union {
    __IOM uint32_t RTC_CS;                      /*!< (@ 0x00000050) RTC Control and Status                                     */
    
    struct {
      __IOM uint32_t OWF        : 1;            /*!< [0..0] CNT Overflow flag, clear by set 1                                  */
      __IOM uint32_t SECF       : 1;            /*!< [1..1] DIV == PRL Event, clear by set 1                                   */
      __IOM uint32_t ALRF       : 1;            /*!< [2..2] CNT == ALRM Event, clear by set 1                                  */
      __IOM uint32_t OWF_IE     : 1;            /*!< [3..3] Enable IRQ by OWF                                                  */
      __IOM uint32_t SECF_IE    : 1;            /*!< [4..4] Enable IRQ by SECF                                                 */
      __IOM uint32_t ALRF_IE    : 1;            /*!< [5..5] Enable IRQ by ALRF                                                 */
      __IOM uint32_t WEC        : 1;            /*!< [6..6] RTC Busy flag                                                      */
    } RTC_CS_b;
  } ;
} MDR_BKP_Type;                                 /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                         MDR_ADCUI                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Energy Counter Block (MDR_ADCUI)
  */

typedef struct {                                /*!< (@ 0x40068000) MDR_ADCUI Structure                                        */
  
  union {
    __IOM uint32_t CTRL1;                       /*!< (@ 0x00000000) ADCUI Control1 Register                                    */
    
    struct {
      __IOM uint32_t I0EN       : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t V0EN       : 1;            /*!< [1..1] Channel enable                                                     */
      __IOM uint32_t I1EN       : 1;            /*!< [2..2] Channel enable                                                     */
      __IOM uint32_t V1EN       : 1;            /*!< [3..3] Channel enable                                                     */
      __IOM uint32_t I2EN       : 1;            /*!< [4..4] Channel enable                                                     */
      __IOM uint32_t V2EN       : 1;            /*!< [5..5] Channel enable                                                     */
      __IOM uint32_t I3EN       : 1;            /*!< [6..6] Channel enable                                                     */
      __IOM uint32_t RESOL      : 1;            /*!< [7..7] Data resolution                                                    */
      __IOM uint32_t ZXLPF      : 1;            /*!< [8..8] V0 cross zero LPF enable                                           */
      __IOM uint32_t PER_Length : 3;            /*!< [11..9] Period to calc aver period and dPhase                             */
      __IOM uint32_t APNOLOAD   : 2;            /*!< [13..12] Active Energy min level to accumulate                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t VARNOLOAD  : 2;            /*!< [16..15] Reactive Energy min level to accumulate                          */
      __IOM uint32_t VANOLOAD   : 2;            /*!< [18..17] Full Energy min level to accumulate                              */
      __IOM uint32_t FREQSEL    : 1;            /*!< [19..19] Enable V0 period detection to FxMD0.PER_FREQ                     */
      __IOM uint32_t VREF_SEL   : 1;            /*!< [20..20] ADC Vref select                                                  */
      __IOM uint32_t BUF_BYP    : 1;            /*!< [21..21] Bypass Vref buffer                                               */
      __IOM uint32_t CHOP_EN    : 1;            /*!< [22..22] Chopper Mode Select                                              */
      __IOM uint32_t CHOP_FREQ  : 2;            /*!< [24..23] Chopper Frequency                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t ZXRMS      : 1;            /*!< [27..27] RMS Update mode                                                  */
      __IOM uint32_t RESET_DIG  : 1;            /*!< [28..28] Digital Logic Reset                                              */
      __IOM uint32_t IBOOST     : 1;            /*!< [29..29] Boost I mode                                                     */
      __IOM uint32_t OSR_CONF   : 2;            /*!< [31..30] ADC Output Sampling Rate                                         */
    } CTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CTRL2;                       /*!< (@ 0x00000004) ADCUI Control2 Register                                    */
    
    struct {
      __IOM uint32_t SAGLVL     : 16;           /*!< [15..0] V0 min OK level                                                   */
      __IOM uint32_t SAGCYC     : 8;            /*!< [23..16] Count of V0 half periods to calc V0 level                        */
    } CTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CTRL3;                       /*!< (@ 0x00000008) ADCUI Control3 Register                                    */
    
    struct {
      __IOM uint32_t ZTXOUT     : 12;           /*!< [11..0] V0 cross zero timeout                                             */
    } CTRL3_b;
  } ;
  
  union {
    __IOM uint32_t F0CTR;                       /*!< (@ 0x0000000C) FxCTR register                                             */
    
    struct {
      __IOM uint32_t I0NTEN     : 1;            /*!< [0..0] Integrator enable                                                  */
      __IOM uint32_t I3NTEN     : 1;            /*!< [1..1] Integrator enable                                                  */
      __IOM uint32_t VASEL      : 1;            /*!< [2..2] Select source for FullEnergy                                       */
      __OM  uint32_t RARS       : 1;            /*!< [3..3] Active Energy Accumulator Reset                                    */
      __OM  uint32_t RRRS       : 1;            /*!< [4..4] Reactive Energy Accumulator Reset                                  */
      __OM  uint32_t RVRS       : 1;            /*!< [5..5] Full Energy Accumulator Reset                                      */
      __IOM uint32_t I0GAIN     : 2;            /*!< [7..6] PGA value                                                          */
      __IOM uint32_t VGAIN      : 2;            /*!< [9..8] PGA value                                                          */
      __IOM uint32_t VPHASE     : 8;            /*!< [17..10] Phase V0 adjustment by step of +-124us                           */
      __IOM uint32_t I3GAIN     : 2;            /*!< [19..18] PGA value                                                        */
      __IOM uint32_t IRMSOS     : 12;           /*!< [31..20] RMS calibration of channel I                                     */
    } F0CTR_b;
  } ;
  
  union {
    __IOM uint32_t F0WC;                        /*!< (@ 0x00000010) Active energy calibration                                  */
    
    struct {
      __IOM uint32_t WATTOS     : 16;           /*!< [15..0] Calibr bias of active energy                                      */
      __IOM uint32_t WGAIN      : 12;           /*!< [27..16] Calibr gain of active energy                                     */
    } F0WC_b;
  } ;
  
  union {
    __IM  uint32_t F0WATTP;                     /*!< (@ 0x00000014) Positive Active Energy accumulator                         */
    
    struct {
      __IM  uint32_t WATTHRP    : 32;           /*!< [31..0] High 32 bits of Accumulator                                       */
    } F0WATTP_b;
  } ;
  
  union {
    __IM  uint32_t F0WATTN;                     /*!< (@ 0x00000018) Negative Active Energy accumulator                         */
    
    struct {
      __IM  uint32_t WATTHRN    : 32;           /*!< [31..0] High 32 bits of 57bits Accumulator                                */
    } F0WATTN_b;
  } ;
  
  union {
    __IOM uint32_t F0VC;                        /*!< (@ 0x0000001C) Reactive energy calibration                                */
    
    struct {
      __IOM uint32_t VAROS      : 16;           /*!< [15..0] Calibr bias of reactive energy                                    */
      __IOM uint32_t VARGAIN    : 12;           /*!< [27..16] Calibr gain of reactive energy                                   */
    } F0VC_b;
  } ;
  
  union {
    __IM  uint32_t F0VARP;                      /*!< (@ 0x00000020) Positive Reactive Energy accumulator                       */
    
    struct {
      __IM  uint32_t VARHRP     : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F0VARP_b;
  } ;
  
  union {
    __IM  uint32_t F0VARN;                      /*!< (@ 0x00000024) Negative Reactive Energy accumulator                       */
    
    struct {
      __IM  uint32_t VARHRN     : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F0VARN_b;
  } ;
  
  union {
    __IOM uint32_t F0AC;                        /*!< (@ 0x00000028) V0 RMS calibration                                         */
    
    struct {
      __IOM uint32_t VRMSOS     : 12;           /*!< [11..0] Calibr bias of V0 RMS                                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t VAGAIN     : 12;           /*!< [27..16] Calibr gain of Full energy                                       */
    } F0AC_b;
  } ;
  
  union {
    __IM  uint32_t F0VR;                        /*!< (@ 0x0000002C) Full Energy accumulator                                    */
    
    struct {
      __IM  uint32_t VAHR       : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F0VR_b;
  } ;
  
  union {
    __IOM uint32_t F0MD0;                       /*!< (@ 0x00000030) FxMD0 register                                             */
    
    struct {
      __IOM uint32_t VSEL       : 2;            /*!< [1..0] Select source for FxVDAT                                           */
      __IOM uint32_t ISEL       : 2;            /*!< [3..2] Select source for FxI0DAT                                          */
      __IM  uint32_t ACTS       : 1;            /*!< [4..4] Active Energy sign in last period                                  */
      __IM  uint32_t REACTS     : 1;            /*!< [5..5] Reactive Energy sign in last period                                */
      __IOM uint32_t IOGAIN     : 1;            /*!< [6..6] ADC Decimation gain                                                */
      __IOM uint32_t V0GAIN     : 1;            /*!< [7..7] ADC Decimation gain                                                */
      __IOM uint32_t I3GAIN     : 1;            /*!< [8..8] ADC Decimation gain                                                */
      __IM  uint32_t            : 3;
      __IM  uint32_t PER_FREQ   : 17;           /*!< [28..12] Measured period of V                                             */
      __IOM uint32_t I3SEL      : 1;            /*!< [29..29] Select source for FxI3DAT                                        */
      __IOM uint32_t SEL_I_CH   : 2;            /*!< [31..30] Select I for calc power                                          */
    } F0MD0_b;
  } ;
  
  union {
    __IOM uint32_t F0MD1;                       /*!< (@ 0x00000034) FxMD1 register                                             */
    
    struct {
      __IOM uint32_t IPKLVL     : 16;           /*!< [15..0] Imax level                                                        */
      __IOM uint32_t VPKLVL     : 16;           /*!< [31..16] Vmax level                                                       */
    } F0MD1_b;
  } ;
  
  union {
    __IOM uint32_t F0VPEAK;                     /*!< (@ 0x00000038) VPEAK Result register                                      */
    
    struct {
      __IOM uint32_t IPEAK      : 24;           /*!< [23..0] Vmax measured, write any to clear                                 */
    } F0VPEAK_b;
  } ;
  
  union {
    __IOM uint32_t F0IPEAK;                     /*!< (@ 0x0000003C) IPEAK Result register                                      */
    
    struct {
      __IOM uint32_t IPEAK      : 24;           /*!< [23..0] Imax measured, write any to clear                                 */
    } F0IPEAK_b;
  } ;
  
  union {
    __IM  uint32_t F0VDAT;                      /*!< (@ 0x00000040) VDAT Result register                                       */
    
    struct {
      __IM  uint32_t VDAT       : 24;           /*!< [23..0] FIFO of V or Power                                                */
    } F0VDAT_b;
  } ;
  
  union {
    __IM  uint32_t F0I0DAT;                     /*!< (@ 0x00000044) I0DAT Result register                                      */
    
    struct {
      __IM  uint32_t I0DAT      : 24;           /*!< [23..0] FIFO of I0 or Power                                               */
    } F0I0DAT_b;
  } ;
  
  union {
    __IM  uint32_t F0I3DAT;                     /*!< (@ 0x00000048) I3DAT Result register                                      */
    
    struct {
      __IM  uint32_t I3DAT      : 24;           /*!< [23..0] FIFO of I3 or Power                                               */
    } F0I3DAT_b;
  } ;
  
  union {
    __IM  uint32_t F0VRMS;                      /*!< (@ 0x0000004C) VRMS Result register                                       */
    
    struct {
      __IM  uint32_t VRMS       : 24;           /*!< [23..0] RMS of V                                                          */
    } F0VRMS_b;
  } ;
  
  union {
    __IM  uint32_t F0VRMS2;                     /*!< (@ 0x00000050) VRMS^2 Result register                                     */
    
    struct {
      __IM  uint32_t VRMS2      : 24;           /*!< [23..0] RMS of V^2                                                        */
    } F0VRMS2_b;
  } ;
  
  union {
    __IM  uint32_t F0IRMS;                      /*!< (@ 0x00000054) IRMS Result register                                       */
    
    struct {
      __IM  uint32_t IRMS       : 24;           /*!< [23..0] RMS of I                                                          */
    } F0IRMS_b;
  } ;
  
  union {
    __IM  uint32_t F0IRMS2;                     /*!< (@ 0x00000058) IRMS^2 Result register                                     */
    
    struct {
      __IM  uint32_t IRMS2      : 24;           /*!< [23..0] RMS of I^2                                                        */
    } F0IRMS2_b;
  } ;
  
  union {
    __IOM uint32_t F0STAT;                      /*!< (@ 0x0000005C) Status Register                                            */
    
    struct {
      __IM  uint32_t VF_EMP     : 1;            /*!< [0..0] FIFO_VDAT is Empty                                                 */
      __IM  uint32_t VF_FLL     : 1;            /*!< [1..1] FIFO_VDAT is Full                                                  */
      __IOM uint32_t VF_OVER    : 1;            /*!< [2..2] FIFO_VDAT is Overflow                                              */
      __IM  uint32_t IF_EMP     : 1;            /*!< [3..3] FIFO_IDAT is Empty                                                 */
      __IM  uint32_t IF_FLL     : 1;            /*!< [4..4] FIFO_IDAT is Full                                                  */
      __IOM uint32_t IF_OVER    : 1;            /*!< [5..5] FIFO_IDAT is Overflow                                              */
      __IOM uint32_t SAGF       : 1;            /*!< [6..6] V is less than CTRL2.SAGLVL                                        */
      __IOM uint32_t PEAKVF     : 1;            /*!< [7..7] V exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t PEAKIF     : 1;            /*!< [8..8] I exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t WATTOVP    : 1;            /*!< [9..9] FxWATTP value overflow                                             */
      __IOM uint32_t VAROVP     : 1;            /*!< [10..10] FxVARP value overflow                                            */
      __IOM uint32_t VAOV       : 1;            /*!< [11..11] FxVR value overflow                                              */
      __IOM uint32_t ZTXVF      : 1;            /*!< [12..12] Timeout of V cross zero                                          */
      __IM  uint32_t ICHANNEL   : 1;            /*!< [13..13] Timeout of V cross zero                                          */
      __IOM uint32_t FAULTCON   : 1;            /*!< [14..14] Active I switched                                                */
      __IOM uint32_t APSIGN     : 1;            /*!< [15..15] ActivePower sign changed                                         */
      __IM  uint32_t APNLDFL    : 1;            /*!< [16..16] ActivePower less CNTL1.APNOLOAD                                  */
      __IOM uint32_t VARSIGN    : 1;            /*!< [17..17] ReactivePower sign changed                                       */
      __IM  uint32_t VARNLDFL   : 1;            /*!< [18..18] ReactivePower less CNTL1.VARNOLOAD                               */
      __IM  uint32_t            : 1;
      __IM  uint32_t VANLDFL    : 1;            /*!< [20..20] FullPower less CNTL1.VANOLOAD                                    */
      __IOM uint32_t ZEROCRS    : 1;            /*!< [21..21] V crossed zero                                                   */
      __IM  uint32_t I3F_EMP    : 1;            /*!< [22..22] FIFO_I3DAT is Empty                                              */
      __IM  uint32_t I3F_FLL    : 1;            /*!< [23..23] FIFO_I3DAT is Full                                               */
      __IOM uint32_t I3F_OVER   : 1;            /*!< [24..24] FIFO_I3DAT is Overflow                                           */
      __IOM uint32_t WATTOVN    : 1;            /*!< [25..25] FxWATTN value overflow                                           */
      __IOM uint32_t VAROVN     : 1;            /*!< [26..26] FxVARN value overflow                                            */
    } F0STAT_b;
  } ;
  
  union {
    __IOM uint32_t F0MASK;                      /*!< (@ 0x00000060) IRQ Mask Register                                          */
    
    struct {
      __IOM uint32_t VF_EMPM    : 1;            /*!< [0..0] FIFO_VDAT is Empty                                                 */
      __IOM uint32_t VF_FLLM    : 1;            /*!< [1..1] FIFO_VDAT is Full                                                  */
      __IOM uint32_t VF_OVERM   : 1;            /*!< [2..2] FIFO_VDAT is Overflow                                              */
      __IOM uint32_t IF_EMPM    : 1;            /*!< [3..3] FIFO_IDAT is Empty                                                 */
      __IOM uint32_t IF_FLLM    : 1;            /*!< [4..4] FIFO_IDAT is Full                                                  */
      __IOM uint32_t IF_OVERM   : 1;            /*!< [5..5] FIFO_IDAT is Overflow                                              */
      __IOM uint32_t SAGFM      : 1;            /*!< [6..6] V is less than CTRL2.SAGLVL                                        */
      __IOM uint32_t PEAKVFM    : 1;            /*!< [7..7] V exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t PEAKIFM    : 1;            /*!< [8..8] I exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t WATTOVPM   : 1;            /*!< [9..9] FxWATTP value overflow                                             */
      __IOM uint32_t VAROVPM    : 1;            /*!< [10..10] FxVARP value overflow                                            */
      __IOM uint32_t VAOVM      : 1;            /*!< [11..11] FxVR value overflow                                              */
      __IOM uint32_t ZTXVFM     : 1;            /*!< [12..12] Timeout of V cross zero                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t FAULTCONM  : 1;            /*!< [14..14] Active I switched                                                */
      __IOM uint32_t APSIGNM    : 1;            /*!< [15..15] ActivePower sign changed                                         */
      __IOM uint32_t APNLDFLM   : 1;            /*!< [16..16] ActivePower less CNTL1.APNOLOAD                                  */
      __IOM uint32_t VARSIGNM   : 1;            /*!< [17..17] ReactivePower sign changed                                       */
      __IOM uint32_t VARNLDFLM  : 1;            /*!< [18..18] ReactivePower less CNTL1.VARNOLOAD                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t VANLDFLM   : 1;            /*!< [20..20] FullPower less CNTL1.VANOLOAD                                    */
      __IOM uint32_t ZEROCRSM   : 1;            /*!< [21..21] V crossed zero                                                   */
      __IOM uint32_t I3F_EMPM   : 1;            /*!< [22..22] FIFO_I3DAT is Empty                                              */
      __IOM uint32_t I3F_FLLM   : 1;            /*!< [23..23] FIFO_I3DAT is Full                                               */
      __IOM uint32_t I3F_OVERM  : 1;            /*!< [24..24] FIFO_I3DAT is Overflow                                           */
      __IOM uint32_t WATTOVNM   : 1;            /*!< [25..25] FxWATTN value overflow                                           */
      __IOM uint32_t VAROVNM    : 1;            /*!< [26..26] FxVARN value overflow                                            */
    } F0MASK_b;
  } ;
  
  union {
    __IOM uint32_t F1CTR;                       /*!< (@ 0x00000064) FxCTR register                                             */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Integrator enable                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t VASEL      : 1;            /*!< [2..2] Select source for FullEnergy                                       */
      __OM  uint32_t RARS       : 1;            /*!< [3..3] Active Energy Accumulator Reset                                    */
      __OM  uint32_t RRRS       : 1;            /*!< [4..4] Reactive Energy Accumulator Reset                                  */
      __OM  uint32_t RVRS       : 1;            /*!< [5..5] Full Energy Accumulator Reset                                      */
      __IOM uint32_t IGAIN      : 2;            /*!< [7..6] PGA value                                                          */
      __IOM uint32_t VGAIN      : 2;            /*!< [9..8] PGA value                                                          */
      __IOM uint32_t VPHASE     : 8;            /*!< [17..10] Phase V adjustment by step of +-124us                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t IRMSOS     : 12;           /*!< [31..20] RMS calibration of channel I                                     */
    } F1CTR_b;
  } ;
  
  union {
    __IOM uint32_t F1WC;                        /*!< (@ 0x00000068) Active energy calibration                                  */
    
    struct {
      __IOM uint32_t WATTOS     : 16;           /*!< [15..0] Calibr bias of active energy                                      */
      __IOM uint32_t WGAIN      : 12;           /*!< [27..16] Calibr gain of active energy                                     */
    } F1WC_b;
  } ;
  
  union {
    __IM  uint32_t F1WATTP;                     /*!< (@ 0x0000006C) Positive Active Energy accumulator                         */
    
    struct {
      __IM  uint32_t WATTHRP    : 32;           /*!< [31..0] High 32 bits of Accumulator                                       */
    } F1WATTP_b;
  } ;
  
  union {
    __IM  uint32_t F1WATTN;                     /*!< (@ 0x00000070) Negative Active Energy accumulator                         */
    
    struct {
      __IM  uint32_t WATTHRN    : 32;           /*!< [31..0] High 32 bits of 57bits Accumulator                                */
    } F1WATTN_b;
  } ;
  
  union {
    __IOM uint32_t F1VC;                        /*!< (@ 0x00000074) Reactive energy calibration                                */
    
    struct {
      __IOM uint32_t VAROS      : 16;           /*!< [15..0] Calibr bias of reactive energy                                    */
      __IOM uint32_t VARGAIN    : 12;           /*!< [27..16] Calibr gain of reactive energy                                   */
    } F1VC_b;
  } ;
  
  union {
    __IM  uint32_t F1VARP;                      /*!< (@ 0x00000078) Positive Reactive Energy accumulator                       */
    
    struct {
      __IM  uint32_t VARHRP     : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F1VARP_b;
  } ;
  
  union {
    __IM  uint32_t F1VARN;                      /*!< (@ 0x0000007C) Negative Reactive Energy accumulator                       */
    
    struct {
      __IM  uint32_t VARHRN     : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F1VARN_b;
  } ;
  
  union {
    __IOM uint32_t F1AC;                        /*!< (@ 0x00000080) V RMS calibration                                          */
    
    struct {
      __IOM uint32_t VRMSOS     : 12;           /*!< [11..0] Calibr bias of V RMS                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t VAGAIN     : 12;           /*!< [27..16] Calibr gain of Full energy                                       */
    } F1AC_b;
  } ;
  
  union {
    __IM  uint32_t F1VR;                        /*!< (@ 0x00000084) Full Energy accumulator                                    */
    
    struct {
      __IM  uint32_t VAHR       : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F1VR_b;
  } ;
  
  union {
    __IOM uint32_t F1MD0;                       /*!< (@ 0x00000088) FxMD0 register                                             */
    
    struct {
      __IOM uint32_t VSEL       : 2;            /*!< [1..0] Select source for FxVDAT                                           */
      __IOM uint32_t ISEL       : 2;            /*!< [3..2] Select source for FxI0DAT                                          */
      __IM  uint32_t ACTS       : 1;            /*!< [4..4] Active Energy sign in last period                                  */
      __IM  uint32_t REACTS     : 1;            /*!< [5..5] Reactive Energy sign in last period                                */
      __IOM uint32_t IGAIN      : 1;            /*!< [6..6] ADC Decimation gain                                                */
      __IOM uint32_t VGAIN      : 1;            /*!< [7..7] ADC Decimation gain                                                */
      __IM  uint32_t            : 4;
      __IM  uint32_t PER_FREQ   : 17;           /*!< [28..12] Measured period of V                                             */
    } F1MD0_b;
  } ;
  
  union {
    __IOM uint32_t F1MD1;                       /*!< (@ 0x0000008C) FxMD1 register                                             */
    
    struct {
      __IOM uint32_t IPKLVL     : 16;           /*!< [15..0] Imax level                                                        */
      __IOM uint32_t VPKLVL     : 16;           /*!< [31..16] Vmax level                                                       */
    } F1MD1_b;
  } ;
  
  union {
    __IM  uint32_t F1MD2;                       /*!< (@ 0x00000090) FxMD2 register                                             */
    
    struct {
      __IM  uint32_t PhaseV_toV0 : 17;          /*!< [16..0] Phase V1 ref to V0                                                */
    } F1MD2_b;
  } ;
  
  union {
    __IOM uint32_t F1VPEAK;                     /*!< (@ 0x00000094) VPEAK Result register                                      */
    
    struct {
      __IOM uint32_t IPEAK      : 24;           /*!< [23..0] Vmax measured, write any to clear                                 */
    } F1VPEAK_b;
  } ;
  
  union {
    __IOM uint32_t F1IPEAK;                     /*!< (@ 0x00000098) IPEAK Result register                                      */
    
    struct {
      __IOM uint32_t IPEAK      : 24;           /*!< [23..0] Imax measured, write any to clear                                 */
    } F1IPEAK_b;
  } ;
  
  union {
    __IM  uint32_t F1VDAT;                      /*!< (@ 0x0000009C) VDAT Result register                                       */
    
    struct {
      __IM  uint32_t VDAT       : 24;           /*!< [23..0] FIFO of V or Power                                                */
    } F1VDAT_b;
  } ;
  
  union {
    __IM  uint32_t F1IDAT;                      /*!< (@ 0x000000A0) IDAT Result register                                       */
    
    struct {
      __IM  uint32_t IDAT       : 24;           /*!< [23..0] FIFO of I or Power                                                */
    } F1IDAT_b;
  } ;
  
  union {
    __IM  uint32_t F1VRMS;                      /*!< (@ 0x000000A4) VRMS Result register                                       */
    
    struct {
      __IM  uint32_t VRMS       : 24;           /*!< [23..0] RMS of V                                                          */
    } F1VRMS_b;
  } ;
  
  union {
    __IM  uint32_t F1VRMS2;                     /*!< (@ 0x000000A8) VRMS^2 Result register                                     */
    
    struct {
      __IM  uint32_t VRMS2      : 24;           /*!< [23..0] RMS of V^2                                                        */
    } F1VRMS2_b;
  } ;
  
  union {
    __IM  uint32_t F1IRMS;                      /*!< (@ 0x000000AC) IRMS Result register                                       */
    
    struct {
      __IM  uint32_t IRMS       : 24;           /*!< [23..0] RMS of I                                                          */
    } F1IRMS_b;
  } ;
  
  union {
    __IM  uint32_t F1IRMS2;                     /*!< (@ 0x000000B0) IRMS^2 Result register                                     */
    
    struct {
      __IM  uint32_t IRMS2      : 24;           /*!< [23..0] RMS of I^2                                                        */
    } F1IRMS2_b;
  } ;
  
  union {
    __IOM uint32_t F1STAT;                      /*!< (@ 0x000000B4) Status Register                                            */
    
    struct {
      __IM  uint32_t VF_EMP     : 1;            /*!< [0..0] FIFO_VDAT is Empty                                                 */
      __IM  uint32_t VF_FLL     : 1;            /*!< [1..1] FIFO_VDAT is Full                                                  */
      __IOM uint32_t VF_OVER    : 1;            /*!< [2..2] FIFO_VDAT is Overflow                                              */
      __IM  uint32_t IF_EMP     : 1;            /*!< [3..3] FIFO_IDAT is Empty                                                 */
      __IM  uint32_t IF_FLL     : 1;            /*!< [4..4] FIFO_IDAT is Full                                                  */
      __IOM uint32_t IF_OVER    : 1;            /*!< [5..5] FIFO_IDAT is Overflow                                              */
      __IOM uint32_t SAGF       : 1;            /*!< [6..6] V is less than CTRL2.SAGLVL                                        */
      __IOM uint32_t PEAKVF     : 1;            /*!< [7..7] V exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t PEAKIF     : 1;            /*!< [8..8] I exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t WATTOVP    : 1;            /*!< [9..9] FxWATTP value overflow                                             */
      __IOM uint32_t VAROVP     : 1;            /*!< [10..10] FxVARP value overflow                                            */
      __IOM uint32_t VAOV       : 1;            /*!< [11..11] FxVR value overflow                                              */
      __IOM uint32_t ZTXVF      : 1;            /*!< [12..12] Timeout of V cross zero                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t APSIGN     : 1;            /*!< [15..15] ActivePower sign changed                                         */
      __IM  uint32_t APNLDFL    : 1;            /*!< [16..16] ActivePower less CNTL1.APNOLOAD                                  */
      __IOM uint32_t VARSIGN    : 1;            /*!< [17..17] ReactivePower sign changed                                       */
      __IM  uint32_t VARNLDFL   : 1;            /*!< [18..18] ReactivePower less CNTL1.VARNOLOAD                               */
      __IM  uint32_t            : 1;
      __IM  uint32_t VANLDFL    : 1;            /*!< [20..20] FullPower less CNTL1.VANOLOAD                                    */
      __IOM uint32_t ZEROCRS    : 1;            /*!< [21..21] V crossed zero                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t WATTOVN    : 1;            /*!< [25..25] FxWATTN value overflow                                           */
      __IOM uint32_t VAROVN     : 1;            /*!< [26..26] FxVARN value overflow                                            */
    } F1STAT_b;
  } ;
  
  union {
    __IOM uint32_t F1MASK;                      /*!< (@ 0x000000B8) IRQ Mask Register                                          */
    
    struct {
      __IOM uint32_t VF_EMPM    : 1;            /*!< [0..0] FIFO_VDAT is Empty                                                 */
      __IOM uint32_t VF_FLLM    : 1;            /*!< [1..1] FIFO_VDAT is Full                                                  */
      __IOM uint32_t VF_OVERM   : 1;            /*!< [2..2] FIFO_VDAT is Overflow                                              */
      __IOM uint32_t IF_EMPM    : 1;            /*!< [3..3] FIFO_IDAT is Empty                                                 */
      __IOM uint32_t IF_FLLM    : 1;            /*!< [4..4] FIFO_IDAT is Full                                                  */
      __IOM uint32_t IF_OVERM   : 1;            /*!< [5..5] FIFO_IDAT is Overflow                                              */
      __IOM uint32_t SAGFM      : 1;            /*!< [6..6] V is less than CTRL2.SAGLVL                                        */
      __IOM uint32_t PEAKVFM    : 1;            /*!< [7..7] V exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t PEAKIFM    : 1;            /*!< [8..8] I exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t WATTOVPM   : 1;            /*!< [9..9] FxWATTP value overflow                                             */
      __IOM uint32_t VAROVPM    : 1;            /*!< [10..10] FxVARP value overflow                                            */
      __IOM uint32_t VAOVM      : 1;            /*!< [11..11] FxVR value overflow                                              */
      __IOM uint32_t ZTXVFM     : 1;            /*!< [12..12] Timeout of V cross zero                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t APSIGNM    : 1;            /*!< [15..15] ActivePower sign changed                                         */
      __IOM uint32_t APNLDFLM   : 1;            /*!< [16..16] ActivePower less CNTL1.APNOLOAD                                  */
      __IOM uint32_t VARSIGNM   : 1;            /*!< [17..17] ReactivePower sign changed                                       */
      __IOM uint32_t VARNLDFLM  : 1;            /*!< [18..18] ReactivePower less CNTL1.VARNOLOAD                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t VANLDFLM   : 1;            /*!< [20..20] FullPower less CNTL1.VANOLOAD                                    */
      __IOM uint32_t ZEROCRSM   : 1;            /*!< [21..21] V crossed zero                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t WATTOVNM   : 1;            /*!< [25..25] FxWATTN value overflow                                           */
      __IOM uint32_t VAROVNM    : 1;            /*!< [26..26] FxVARN value overflow                                            */
    } F1MASK_b;
  } ;
  
  union {
    __IOM uint32_t F2CTR;                       /*!< (@ 0x000000BC) FxCTR register                                             */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Integrator enable                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t VASEL      : 1;            /*!< [2..2] Select source for FullEnergy                                       */
      __OM  uint32_t RARS       : 1;            /*!< [3..3] Active Energy Accumulator Reset                                    */
      __OM  uint32_t RRRS       : 1;            /*!< [4..4] Reactive Energy Accumulator Reset                                  */
      __OM  uint32_t RVRS       : 1;            /*!< [5..5] Full Energy Accumulator Reset                                      */
      __IOM uint32_t IGAIN      : 2;            /*!< [7..6] PGA value                                                          */
      __IOM uint32_t VGAIN      : 2;            /*!< [9..8] PGA value                                                          */
      __IOM uint32_t VPHASE     : 8;            /*!< [17..10] Phase V adjustment by step of +-124us                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t IRMSOS     : 12;           /*!< [31..20] RMS calibration of channel I                                     */
    } F2CTR_b;
  } ;
  
  union {
    __IOM uint32_t F2WC;                        /*!< (@ 0x000000C0) Active energy calibration                                  */
    
    struct {
      __IOM uint32_t WATTOS     : 16;           /*!< [15..0] Calibr bias of active energy                                      */
      __IOM uint32_t WGAIN      : 12;           /*!< [27..16] Calibr gain of active energy                                     */
    } F2WC_b;
  } ;
  
  union {
    __IM  uint32_t F2WATTP;                     /*!< (@ 0x000000C4) Positive Active Energy accumulator                         */
    
    struct {
      __IM  uint32_t WATTHRP    : 32;           /*!< [31..0] High 32 bits of Accumulator                                       */
    } F2WATTP_b;
  } ;
  
  union {
    __IM  uint32_t F2WATTN;                     /*!< (@ 0x000000C8) Negative Active Energy accumulator                         */
    
    struct {
      __IM  uint32_t WATTHRN    : 32;           /*!< [31..0] High 32 bits of 57bits Accumulator                                */
    } F2WATTN_b;
  } ;
  
  union {
    __IOM uint32_t F2VC;                        /*!< (@ 0x000000CC) Reactive energy calibration                                */
    
    struct {
      __IOM uint32_t VAROS      : 16;           /*!< [15..0] Calibr bias of reactive energy                                    */
      __IOM uint32_t VARGAIN    : 12;           /*!< [27..16] Calibr gain of reactive energy                                   */
    } F2VC_b;
  } ;
  
  union {
    __IM  uint32_t F2VARP;                      /*!< (@ 0x000000D0) Positive Reactive Energy accumulator                       */
    
    struct {
      __IM  uint32_t VARHRP     : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F2VARP_b;
  } ;
  
  union {
    __IM  uint32_t F2VARN;                      /*!< (@ 0x000000D4) Negative Reactive Energy accumulator                       */
    
    struct {
      __IM  uint32_t VARHRN     : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F2VARN_b;
  } ;
  
  union {
    __IOM uint32_t F2AC;                        /*!< (@ 0x000000D8) V RMS calibration                                          */
    
    struct {
      __IOM uint32_t VRMSOS     : 12;           /*!< [11..0] Calibr bias of V RMS                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t VAGAIN     : 12;           /*!< [27..16] Calibr gain of Full energy                                       */
    } F2AC_b;
  } ;
  
  union {
    __IM  uint32_t F2VR;                        /*!< (@ 0x000000DC) Full Energy accumulator                                    */
    
    struct {
      __IM  uint32_t VAHR       : 32;           /*!< [31..0] High 32 bits of of 57bits Accumulator                             */
    } F2VR_b;
  } ;
  
  union {
    __IOM uint32_t F2MD0;                       /*!< (@ 0x000000E0) FxMD0 register                                             */
    
    struct {
      __IOM uint32_t VSEL       : 2;            /*!< [1..0] Select source for FxVDAT                                           */
      __IOM uint32_t ISEL       : 2;            /*!< [3..2] Select source for FxI0DAT                                          */
      __IM  uint32_t ACTS       : 1;            /*!< [4..4] Active Energy sign in last period                                  */
      __IM  uint32_t REACTS     : 1;            /*!< [5..5] Reactive Energy sign in last period                                */
      __IOM uint32_t IGAIN      : 1;            /*!< [6..6] ADC Decimation gain                                                */
      __IOM uint32_t VGAIN      : 1;            /*!< [7..7] ADC Decimation gain                                                */
      __IM  uint32_t            : 4;
      __IM  uint32_t PER_FREQ   : 17;           /*!< [28..12] Measured period of V                                             */
    } F2MD0_b;
  } ;
  
  union {
    __IOM uint32_t F2MD1;                       /*!< (@ 0x000000E4) FxMD1 register                                             */
    
    struct {
      __IOM uint32_t IPKLVL     : 16;           /*!< [15..0] Imax level                                                        */
      __IOM uint32_t VPKLVL     : 16;           /*!< [31..16] Vmax level                                                       */
    } F2MD1_b;
  } ;
  
  union {
    __IM  uint32_t F2MD2;                       /*!< (@ 0x000000E8) FxMD2 register                                             */
    
    struct {
      __IM  uint32_t PhaseV_toV0 : 17;          /*!< [16..0] Phase V1 ref to V0                                                */
    } F2MD2_b;
  } ;
  
  union {
    __IOM uint32_t F2VPEAK;                     /*!< (@ 0x000000EC) VPEAK Result register                                      */
    
    struct {
      __IOM uint32_t IPEAK      : 24;           /*!< [23..0] Vmax measured, write any to clear                                 */
    } F2VPEAK_b;
  } ;
  
  union {
    __IOM uint32_t F2IPEAK;                     /*!< (@ 0x000000F0) IPEAK Result register                                      */
    
    struct {
      __IOM uint32_t IPEAK      : 24;           /*!< [23..0] Imax measured, write any to clear                                 */
    } F2IPEAK_b;
  } ;
  
  union {
    __IM  uint32_t F2VDAT;                      /*!< (@ 0x000000F4) VDAT Result register                                       */
    
    struct {
      __IM  uint32_t VDAT       : 24;           /*!< [23..0] FIFO of V or Power                                                */
    } F2VDAT_b;
  } ;
  
  union {
    __IM  uint32_t F2IDAT;                      /*!< (@ 0x000000F8) IDAT Result register                                       */
    
    struct {
      __IM  uint32_t IDAT       : 24;           /*!< [23..0] FIFO of I or Power                                                */
    } F2IDAT_b;
  } ;
  
  union {
    __IM  uint32_t F2VRMS;                      /*!< (@ 0x000000FC) VRMS Result register                                       */
    
    struct {
      __IM  uint32_t VRMS       : 24;           /*!< [23..0] RMS of V                                                          */
    } F2VRMS_b;
  } ;
  
  union {
    __IM  uint32_t F2VRMS2;                     /*!< (@ 0x00000100) VRMS^2 Result register                                     */
    
    struct {
      __IM  uint32_t VRMS2      : 24;           /*!< [23..0] RMS of V^2                                                        */
    } F2VRMS2_b;
  } ;
  
  union {
    __IM  uint32_t F2IRMS;                      /*!< (@ 0x00000104) IRMS Result register                                       */
    
    struct {
      __IM  uint32_t IRMS       : 24;           /*!< [23..0] RMS of I                                                          */
    } F2IRMS_b;
  } ;
  
  union {
    __IM  uint32_t F2IRMS2;                     /*!< (@ 0x00000108) IRMS^2 Result register                                     */
    
    struct {
      __IM  uint32_t IRMS2      : 24;           /*!< [23..0] RMS of I^2                                                        */
    } F2IRMS2_b;
  } ;
  
  union {
    __IOM uint32_t F2STAT;                      /*!< (@ 0x0000010C) Status Register                                            */
    
    struct {
      __IM  uint32_t VF_EMP     : 1;            /*!< [0..0] FIFO_VDAT is Empty                                                 */
      __IM  uint32_t VF_FLL     : 1;            /*!< [1..1] FIFO_VDAT is Full                                                  */
      __IOM uint32_t VF_OVER    : 1;            /*!< [2..2] FIFO_VDAT is Overflow                                              */
      __IM  uint32_t IF_EMP     : 1;            /*!< [3..3] FIFO_IDAT is Empty                                                 */
      __IM  uint32_t IF_FLL     : 1;            /*!< [4..4] FIFO_IDAT is Full                                                  */
      __IOM uint32_t IF_OVER    : 1;            /*!< [5..5] FIFO_IDAT is Overflow                                              */
      __IOM uint32_t SAGF       : 1;            /*!< [6..6] V is less than CTRL2.SAGLVL                                        */
      __IOM uint32_t PEAKVF     : 1;            /*!< [7..7] V exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t PEAKIF     : 1;            /*!< [8..8] I exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t WATTOVP    : 1;            /*!< [9..9] FxWATTP value overflow                                             */
      __IOM uint32_t VAROVP     : 1;            /*!< [10..10] FxVARP value overflow                                            */
      __IOM uint32_t VAOV       : 1;            /*!< [11..11] FxVR value overflow                                              */
      __IOM uint32_t ZTXVF      : 1;            /*!< [12..12] Timeout of V cross zero                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t APSIGN     : 1;            /*!< [15..15] ActivePower sign changed                                         */
      __IM  uint32_t APNLDFL    : 1;            /*!< [16..16] ActivePower less CNTL1.APNOLOAD                                  */
      __IOM uint32_t VARSIGN    : 1;            /*!< [17..17] ReactivePower sign changed                                       */
      __IM  uint32_t VARNLDFL   : 1;            /*!< [18..18] ReactivePower less CNTL1.VARNOLOAD                               */
      __IM  uint32_t            : 1;
      __IM  uint32_t VANLDFL    : 1;            /*!< [20..20] FullPower less CNTL1.VANOLOAD                                    */
      __IOM uint32_t ZEROCRS    : 1;            /*!< [21..21] V crossed zero                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t WATTOVN    : 1;            /*!< [25..25] FxWATTN value overflow                                           */
      __IOM uint32_t VAROVN     : 1;            /*!< [26..26] FxVARN value overflow                                            */
    } F2STAT_b;
  } ;
  
  union {
    __IOM uint32_t F2MASK;                      /*!< (@ 0x00000110) IRQ Mask Register                                          */
    
    struct {
      __IOM uint32_t VF_EMPM    : 1;            /*!< [0..0] FIFO_VDAT is Empty                                                 */
      __IOM uint32_t VF_FLLM    : 1;            /*!< [1..1] FIFO_VDAT is Full                                                  */
      __IOM uint32_t VF_OVERM   : 1;            /*!< [2..2] FIFO_VDAT is Overflow                                              */
      __IOM uint32_t IF_EMPM    : 1;            /*!< [3..3] FIFO_IDAT is Empty                                                 */
      __IOM uint32_t IF_FLLM    : 1;            /*!< [4..4] FIFO_IDAT is Full                                                  */
      __IOM uint32_t IF_OVERM   : 1;            /*!< [5..5] FIFO_IDAT is Overflow                                              */
      __IOM uint32_t SAGFM      : 1;            /*!< [6..6] V is less than CTRL2.SAGLVL                                        */
      __IOM uint32_t PEAKVFM    : 1;            /*!< [7..7] V exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t PEAKIFM    : 1;            /*!< [8..8] I exceeds F0MD1.VPKLVL                                             */
      __IOM uint32_t WATTOVPM   : 1;            /*!< [9..9] FxWATTP value overflow                                             */
      __IOM uint32_t VAROVPM    : 1;            /*!< [10..10] FxVARP value overflow                                            */
      __IOM uint32_t VAOVM      : 1;            /*!< [11..11] FxVR value overflow                                              */
      __IOM uint32_t ZTXVFM     : 1;            /*!< [12..12] Timeout of V cross zero                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t APSIGNM    : 1;            /*!< [15..15] ActivePower sign changed                                         */
      __IOM uint32_t APNLDFLM   : 1;            /*!< [16..16] ActivePower less CNTL1.APNOLOAD                                  */
      __IOM uint32_t VARSIGNM   : 1;            /*!< [17..17] ReactivePower sign changed                                       */
      __IOM uint32_t VARNLDFLM  : 1;            /*!< [18..18] ReactivePower less CNTL1.VARNOLOAD                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t VANLDFLM   : 1;            /*!< [20..20] FullPower less CNTL1.VANOLOAD                                    */
      __IOM uint32_t ZEROCRSM   : 1;            /*!< [21..21] V crossed zero                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t WATTOVNM   : 1;            /*!< [25..25] FxWATTN value overflow                                           */
      __IOM uint32_t VAROVNM    : 1;            /*!< [26..26] FxVARN value overflow                                            */
    } F2MASK_b;
  } ;
  
  union {
    __IOM uint32_t CCAL1;                       /*!< (@ 0x00000114) Calibration Register 1                                     */
    
    struct {
      __IOM uint32_t V0BGAIN    : 12;           /*!< [11..0] V0 calibration gain                                               */
      __IOM uint32_t I0BGAIN    : 12;           /*!< [23..12] I0 calibration gain                                              */
    } CCAL1_b;
  } ;
  
  union {
    __IOM uint32_t CCAL2;                       /*!< (@ 0x00000118) Calibration Register 2                                     */
    
    struct {
      __IOM uint32_t V1BGAIN    : 12;           /*!< [11..0] V1 calibration gain                                               */
      __IOM uint32_t I1BGAIN    : 12;           /*!< [23..12] I1 calibration gain                                              */
    } CCAL2_b;
  } ;
  
  union {
    __IOM uint32_t CCAL3;                       /*!< (@ 0x0000011C) Calibration Register 3                                     */
    
    struct {
      __IOM uint32_t V2BGAIN    : 12;           /*!< [11..0] V2 calibration gain                                               */
      __IOM uint32_t I2BGAIN    : 12;           /*!< [23..12] I2 calibration gain                                              */
    } CCAL3_b;
  } ;
  
  union {
    __IOM uint32_t CCAL4;                       /*!< (@ 0x00000120) Calibration Register 4                                     */
    
    struct {
      __IOM uint32_t I3BGAIN    : 12;           /*!< [11..0] I3 calibration gain                                               */
    } CCAL4_b;
  } ;
} MDR_ADCUI_Type;                               /*!< Size = 292 (0x124)                                                        */



/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief UART Control (MDR_UART1)
  */

typedef struct {                                /*!< (@ 0x40008000) MDR_UART1 Structure                                        */
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000000) Data Register                                              */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Data FIFO access                                                   */
      __IOM uint32_t FE         : 1;            /*!< [8..8] Stop Bit Error                                                     */
      __IOM uint32_t PE         : 1;            /*!< [9..9] Parity Error                                                       */
      __IOM uint32_t BE         : 1;            /*!< [10..10] Break Error                                                      */
      __IOM uint32_t OE         : 1;            /*!< [11..11] Overrun FIFO_RX                                                  */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t RSR_ECR;                     /*!< (@ 0x00000004) Receive Status and Error Clear Register                    */
    
    struct {
      __IOM uint32_t FE         : 1;            /*!< [0..0] Stop Bit Error                                                     */
      __IOM uint32_t PE         : 1;            /*!< [1..1] Parity Error                                                       */
      __IOM uint32_t BE         : 1;            /*!< [2..2] Break Error                                                        */
      __IOM uint32_t OE         : 1;            /*!< [3..3] Overrun FIFO_RX                                                    */
    } RSR_ECR_b;
  } ;
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IM  uint32_t FR;                          /*!< (@ 0x00000018) Flag Register                                              */
    
    struct {
      __IM  uint32_t CTS        : 1;            /*!< [0..0] Modem Clear To Send                                                */
      __IM  uint32_t DSR        : 1;            /*!< [1..1] Modem Data Set Ready                                               */
      __IM  uint32_t DCD        : 1;            /*!< [2..2] Modem Data Carrier Detect                                          */
      __IM  uint32_t BUSY       : 1;            /*!< [3..3] Transmitting data                                                  */
      __IM  uint32_t RXFE       : 1;            /*!< [4..4] FIFO_RX Empty status                                               */
      __IM  uint32_t TXFF       : 1;            /*!< [5..5] FIFO_TX Full Status                                                */
      __IM  uint32_t RXFF       : 1;            /*!< [6..6] FIFO_RX Full Status                                                */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] FIFO_RX Empty status                                               */
      __IM  uint32_t RI         : 1;            /*!< [8..8] Modem Ring Indicator                                               */
    } FR_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t ILPR;                        /*!< (@ 0x00000020) IrDA Low-Power Counter                                     */
    
    struct {
      __IOM uint32_t DVSR       : 8;            /*!< [7..0] Div of SampleRate                                                  */
    } ILPR_b;
  } ;
  
  union {
    __IOM uint32_t IBRD;                        /*!< (@ 0x00000024) Integer BaudRate Divisor                                   */
    
    struct {
      __IOM uint32_t Baud_DivInt : 16;          /*!< [15..0] Integer part of Rate divisor                                      */
    } IBRD_b;
  } ;
  
  union {
    __IOM uint32_t FBRD;                        /*!< (@ 0x00000028) Fractional BaudRate Divisor                                */
    
    struct {
      __IOM uint32_t Baud_DivFrac : 6;          /*!< [5..0] Fractional part of Rate divisor                                    */
    } FBRD_b;
  } ;
  
  union {
    __IOM uint32_t LCR_H;                       /*!< (@ 0x0000002C) Line Control Register                                      */
    
    struct {
      __IOM uint32_t BRK        : 1;            /*!< [0..0] Send Break - TX LOW for 2 words                                    */
      __IOM uint32_t PEN        : 1;            /*!< [1..1] Parity Enable                                                      */
      __IOM uint32_t EPS        : 1;            /*!< [2..2] Even Parity Select                                                 */
      __IOM uint32_t STP2       : 1;            /*!< [3..3] Double Stop Bits Enable                                            */
      __IOM uint32_t FEN        : 1;            /*!< [4..4] FIFOs Enable                                                       */
      __IOM uint32_t WLEN       : 2;            /*!< [6..5] Word Length                                                        */
      __IOM uint32_t SPS        : 1;            /*!< [7..7] Stick Parity Select                                                */
    } LCR_H_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000030) Control Register                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable UART                                                        */
      __IOM uint32_t SIREN      : 1;            /*!< [1..1] IrDA Enable                                                        */
      __IOM uint32_t SIRLP      : 1;            /*!< [2..2] IrDA Low-Power Enable                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t LBE        : 1;            /*!< [7..7] LoopBack Enable                                                    */
      __IOM uint32_t TXE        : 1;            /*!< [8..8] Transmitter Enable                                                 */
      __IOM uint32_t RXE        : 1;            /*!< [9..9] Receiver Enable                                                    */
      __IOM uint32_t DTR        : 1;            /*!< [10..10] Data Transmit Ready                                              */
      __IOM uint32_t RTS        : 1;            /*!< [11..11] Request To Send                                                  */
      __IOM uint32_t Out1       : 1;            /*!< [12..12] Custom Modem Output1 - DCD                                       */
      __IOM uint32_t Out2       : 1;            /*!< [13..13] Custom Modem Output2 - RI                                        */
      __IOM uint32_t RTSEn      : 1;            /*!< [14..14] Hardware RTS Control                                             */
      __IOM uint32_t CTSEn      : 1;            /*!< [15..15] Hardware CTS Control                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IFLS;                        /*!< (@ 0x00000034) IRQ FIFO Level                                             */
    
    struct {
      __IOM uint32_t TXIFLSES   : 3;            /*!< [2..0] IRQ FIFO_TX level                                                  */
      __IOM uint32_t RXIFLSES   : 3;            /*!< [5..3] IRQ FIFO_RX level                                                  */
    } IFLS_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000038) IRQ Mask Set Clear                                         */
    
    struct {
      __IOM uint32_t RIM_IM     : 1;            /*!< [0..0] RI Modem IRQ Mask                                                  */
      __IOM uint32_t STCM_IM    : 1;            /*!< [1..1] STC Modem IRQ Mask                                                 */
      __IOM uint32_t DCDM_IM    : 1;            /*!< [2..2] DCD Modem IRQ Mask                                                 */
      __IOM uint32_t DSRM_IM    : 1;            /*!< [3..3] DSR Modem IRQ Mask                                                 */
      __IOM uint32_t RX_IM      : 1;            /*!< [4..4] RX IRQ Mask                                                        */
      __IOM uint32_t TX_IM      : 1;            /*!< [5..5] TX IRQ Mask                                                        */
      __IOM uint32_t RT_IM      : 1;            /*!< [6..6] RX Timeout IRQ Mask                                                */
      __IOM uint32_t FE_IM      : 1;            /*!< [7..7] Frame Error IRQ Mask                                               */
      __IOM uint32_t PE_IM      : 1;            /*!< [8..8] Parity Error IRQ Mask                                              */
      __IOM uint32_t BE_IM      : 1;            /*!< [9..9] BreakLine IRQ Mask                                                 */
      __IOM uint32_t OE_IM      : 1;            /*!< [10..10] Overrun FIFO_RX IRQ Mask                                         */
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x0000003C) Raw IQR Status Register                                    */
    
    struct {
      __IM  uint32_t RIM_RIS    : 1;            /*!< [0..0] RI Modem Event                                                     */
      __IM  uint32_t STCM_RIS   : 1;            /*!< [1..1] STC Modem Event                                                    */
      __IM  uint32_t DCDM_RIS   : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __IM  uint32_t DSRM_RIS   : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __IM  uint32_t RX_RIS     : 1;            /*!< [4..4] RX Event                                                           */
      __IM  uint32_t TX_RIS     : 1;            /*!< [5..5] TX Event                                                           */
      __IM  uint32_t RT_RIS     : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __IM  uint32_t FE_RIS     : 1;            /*!< [7..7] Frame Error Event                                                  */
      __IM  uint32_t PE_RIS     : 1;            /*!< [8..8] Parity Error Event                                                 */
      __IM  uint32_t BE_RIS     : 1;            /*!< [9..9] BreakLine Event                                                    */
      __IM  uint32_t OE_RIS     : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x00000040) Masked IQR Status Register                                 */
    
    struct {
      __IM  uint32_t RIM_MIS    : 1;            /*!< [0..0] RI Modem Event                                                     */
      __IM  uint32_t STCM_MIS   : 1;            /*!< [1..1] STC Modem Event                                                    */
      __IM  uint32_t DCDM_MIS   : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __IM  uint32_t DSRM_MIS   : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __IM  uint32_t RX_MIS     : 1;            /*!< [4..4] RX Event                                                           */
      __IM  uint32_t TX_MIS     : 1;            /*!< [5..5] TX Event                                                           */
      __IM  uint32_t RT_MIS     : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __IM  uint32_t FE_MIS     : 1;            /*!< [7..7] Frame Error Event                                                  */
      __IM  uint32_t PE_MIS     : 1;            /*!< [8..8] Parity Error Event                                                 */
      __IM  uint32_t BE_MIS     : 1;            /*!< [9..9] BreakLine Event                                                    */
      __IM  uint32_t OE_MIS     : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000044) IRQ Clear Register                                         */
    
    struct {
      __OM  uint32_t RIM_IC     : 1;            /*!< [0..0] RI Modem Event                                                     */
      __OM  uint32_t STCM_IC    : 1;            /*!< [1..1] STC Modem Event                                                    */
      __OM  uint32_t DCDM_IC    : 1;            /*!< [2..2] DCD Modem Event                                                    */
      __OM  uint32_t DSRM_IC    : 1;            /*!< [3..3] DSR Modem Event                                                    */
      __OM  uint32_t RX_IC      : 1;            /*!< [4..4] RX Event                                                           */
      __OM  uint32_t TX_IC      : 1;            /*!< [5..5] TX Event                                                           */
      __OM  uint32_t RT_IC      : 1;            /*!< [6..6] RX Timeout Event                                                   */
      __OM  uint32_t FE_IC      : 1;            /*!< [7..7] Frame Error Event                                                  */
      __OM  uint32_t PE_IC      : 1;            /*!< [8..8] Parity Error Event                                                 */
      __OM  uint32_t BE_IC      : 1;            /*!< [9..9] BreakLine Event                                                    */
      __OM  uint32_t OE_IC      : 1;            /*!< [10..10] Overrun FIFO_RX Event                                            */
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000048) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] RX DMA Enable                                                      */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] TX DMA Enable                                                      */
      __IOM uint32_t DMAonErr   : 1;            /*!< [2..2] Disable DMA req on Error                                           */
    } DMACR_b;
  } ;
  __IM  uint32_t  RESERVED2[13];
  
  union {
    __IOM uint32_t TCR;                         /*!< (@ 0x00000080) Test Control Register                                      */
    
    struct {
      __IOM uint32_t ITEN       : 1;            /*!< [0..0] Test Mode Enable                                                   */
      __IOM uint32_t TestFIFO   : 1;            /*!< [1..1] FIFO test mode                                                     */
      __IOM uint32_t SIRTest    : 1;            /*!< [2..2] IrDA test mode                                                     */
    } TCR_b;
  } ;
} MDR_UART1_Type;                               /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief TIMER Control (MDR_TIMER1)
  */

typedef struct {                                /*!< (@ 0x40070000) MDR_TIMER1 Structure                                       */
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000000) Counter register                                           */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Counter Value                                                     */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t PSG;                         /*!< (@ 0x00000004) Presample Gain                                             */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Inc CNT by PSG clocks of TIM_CLOCK                                */
    } PSG_b;
  } ;
  
  union {
    __IOM uint32_t ARR;                         /*!< (@ 0x00000008) Counter Period                                             */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Counter Value                                                     */
    } ARR_b;
  } ;
  
  union {
    __IOM uint32_t CNTRL;                       /*!< (@ 0x0000000C) Timer Control                                              */
    
    struct {
      __IOM uint32_t CNT_EN     : 1;            /*!< [0..0] Timer Enable                                                       */
      __IOM uint32_t ARRB_EN    : 1;            /*!< [1..1] ARR update mode                                                    */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [2..2] Can write to CNT, ARR, PSG                                         */
      __IOM uint32_t DIR        : 1;            /*!< [3..3] Count Direction                                                    */
      __IOM uint32_t FDTS       : 2;            /*!< [5..4] Select Data Sampling frequency                                     */
      __IOM uint32_t CNT_MODE   : 2;            /*!< [7..6] Counting mode                                                      */
      __IOM uint32_t EVENT_SEL  : 4;            /*!< [11..8] Events for counting                                               */
    } CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CCR1;                        /*!< (@ 0x00000010) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Captured or PWM Value                                             */
    } CCR1_b;
  } ;
  
  union {
    __IOM uint32_t CCR2;                        /*!< (@ 0x00000014) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Captured or PWM Value                                             */
    } CCR2_b;
  } ;
  
  union {
    __IOM uint32_t CCR3;                        /*!< (@ 0x00000018) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Captured or PWM Value                                             */
    } CCR3_b;
  } ;
  
  union {
    __IOM uint32_t CCR4;                        /*!< (@ 0x0000001C) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Captured or PWM Value                                             */
    } CCR4_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL;                   /*!< (@ 0x00000020) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH1_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL;                   /*!< (@ 0x00000024) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH2_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL;                   /*!< (@ 0x00000028) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH3_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL;                   /*!< (@ 0x0000002C) Capture and PWM Channel Control                            */
    
    struct {
      __IOM uint32_t CHFLTR     : 4;            /*!< [3..0] Front hold to set Event                                            */
      __IOM uint32_t CHSEL      : 2;            /*!< [5..4] Event to capture in CCR                                            */
      __IOM uint32_t CHPSC      : 2;            /*!< [7..6] Capture event decimation                                           */
      __IOM uint32_t OCCE       : 1;            /*!< [8..8] ETR pin Enable                                                     */
      __IOM uint32_t OCCM       : 3;            /*!< [11..9] PWM Generate modes                                                */
      __IOM uint32_t BRKEN      : 1;            /*!< [12..12] Clear Ref by BRK                                                 */
      __IOM uint32_t ETREN      : 1;            /*!< [13..13] Clear Ref by BRK                                                 */
      __IOM uint32_t WR_CMPL    : 1;            /*!< [14..14] Can write to CCRx                                                */
      __IOM uint32_t CAP_nPWM   : 1;            /*!< [15..15] CAP or PWM Mode                                                  */
    } CH4_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL1;                  /*!< (@ 0x00000030) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH1_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL1;                  /*!< (@ 0x00000034) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH2_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL1;                  /*!< (@ 0x00000038) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH3_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL1;                  /*!< (@ 0x0000003C) PWM Driver Control                                         */
    
    struct {
      __IOM uint32_t SelOE      : 2;            /*!< [1..0] Select Pin Output Enable                                           */
      __IOM uint32_t SelO       : 2;            /*!< [3..2] Select Output Signal                                               */
      __IOM uint32_t Inv        : 1;            /*!< [4..4] Invert Output Signal                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t NSelOE     : 2;            /*!< [9..8] Select Pin Output Enable                                           */
      __IOM uint32_t NSelO      : 2;            /*!< [11..10] Select Output Signal                                             */
      __IOM uint32_t NInv       : 1;            /*!< [12..12] Invert Output Signal                                             */
    } CH4_CNTRL1_b;
  } ;
  
  union {
    __IOM uint32_t CH1_DTG;                     /*!< (@ 0x00000040) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH1_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH2_DTG;                     /*!< (@ 0x00000044) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH2_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH3_DTG;                     /*!< (@ 0x00000048) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH3_DTG_b;
  } ;
  
  union {
    __IOM uint32_t CH4_DTG;                     /*!< (@ 0x0000004C) Dead Time Generator                                        */
    
    struct {
      __IOM uint32_t DTG        : 4;            /*!< [3..0] DTG Prescaller                                                     */
      __IOM uint32_t EDTS       : 1;            /*!< [4..4] DTG Clock Select                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DTGx       : 8;            /*!< [15..8] DTGx scale, Delay = DTGx*(DTG + 1)                                */
    } CH4_DTG_b;
  } ;
  
  union {
    __IOM uint32_t BRKETR_CNTRL;                /*!< (@ 0x00000050) Break and External Count Control                           */
    
    struct {
      __IOM uint32_t BRK_INV    : 1;            /*!< [0..0] Invert Break Signal                                                */
      __IOM uint32_t ETR_INV    : 1;            /*!< [1..1] Invert External Count Signal                                       */
      __IOM uint32_t ETR_PSC    : 2;            /*!< [3..2] External Count Div                                                 */
      __IOM uint32_t ETR_Filter : 4;            /*!< [7..4] External Count Signal Filter                                       */
    } BRKETR_CNTRL_b;
  } ;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000054) Status Register                                            */
    
    struct {
      __IOM uint32_t CNT_ZERO   : 1;            /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR    : 1;            /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE     : 1;            /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE     : 1;            /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK        : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1 : 1;           /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2 : 1;           /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3 : 1;           /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4 : 1;           /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1 : 1;           /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2 : 1;           /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3 : 1;           /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4 : 1;           /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1 : 1;          /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2 : 1;          /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3 : 1;          /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4 : 1;          /*!< [16..16] Captured to CCR1                                                 */
    } STATUS_b;
  } ;
  
  union {
    __IOM uint32_t IE;                          /*!< (@ 0x00000058) IRQ Enable                                                 */
    
    struct {
      __IOM uint32_t CNT_ZERO_IE : 1;           /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_IE : 1;            /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_IE  : 1;            /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_IE  : 1;            /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_IE     : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_IE : 1;        /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_IE : 1;        /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_IE : 1;        /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_IE : 1;        /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_IE : 1;        /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_IE : 1;        /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_IE : 1;        /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_IE : 1;        /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_IE : 1;       /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_IE : 1;       /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_IE : 1;       /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_IE : 1;       /*!< [16..16] Captured to CCR1                                                 */
    } IE_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RE;                      /*!< (@ 0x0000005C) DMA Request Enable for TIMx_DMA_REQ                        */
    
    struct {
      __IOM uint32_t CNT_ZERO_DMAE : 1;         /*!< [0..0] CNT Zero                                                           */
      __IOM uint32_t CNT_ARR_DMAE : 1;          /*!< [1..1] CNT eq ARR                                                         */
      __IOM uint32_t ETR_RE_DMAE : 1;           /*!< [2..2] ETR Rise Front                                                     */
      __IOM uint32_t ETR_FE_DMAE : 1;           /*!< [3..3] ETR Fall Front                                                     */
      __IOM uint32_t BRK_DMAE   : 1;            /*!< [4..4] BRK High Level                                                     */
      __IOM uint32_t CCR_CAP_CH1_DMAE : 1;      /*!< [5..5] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH2_DMAE : 1;      /*!< [6..6] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH3_DMAE : 1;      /*!< [7..7] Captured to CCR                                                    */
      __IOM uint32_t CCR_CAP_CH4_DMAE : 1;      /*!< [8..8] Captured to CCR                                                    */
      __IOM uint32_t CCR_REF_CH1_DMAE : 1;      /*!< [9..9] PWM Rise Front                                                     */
      __IOM uint32_t CCR_REF_CH2_DMAE : 1;      /*!< [10..10] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH3_DMAE : 1;      /*!< [11..11] PWM Rise Front                                                   */
      __IOM uint32_t CCR_REF_CH4_DMAE : 1;      /*!< [12..12] PWM Rise Front                                                   */
      __IOM uint32_t CCR1_CAP_CH1_DMAE : 1;     /*!< [13..13] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH2_DMAE : 1;     /*!< [14..14] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH3_DMAE : 1;     /*!< [15..15] Captured to CCR1                                                 */
      __IOM uint32_t CCR1_CAP_CH4_DMAE : 1;     /*!< [16..16] Captured to CCR1                                                 */
    } DMA_RE_b;
  } ;
  
  union {
    __IOM uint32_t CH1_CNTRL2;                  /*!< (@ 0x00000060) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
    } CH1_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH2_CNTRL2;                  /*!< (@ 0x00000064) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
    } CH2_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH3_CNTRL2;                  /*!< (@ 0x00000068) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
    } CH3_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CH4_CNTRL2;                  /*!< (@ 0x0000006C) CCR1 Control                                               */
    
    struct {
      __IOM uint32_t CHSel1     : 2;            /*!< [1..0] Event to capture in CCR1                                           */
      __IOM uint32_t CCR1_En    : 1;            /*!< [2..2] Enable CCR1                                                        */
      __IOM uint32_t CCRRLD     : 1;            /*!< [3..3] CCR Reload Mode                                                    */
    } CH4_CNTRL2_b;
  } ;
  
  union {
    __IOM uint32_t CCR11;                       /*!< (@ 0x00000070) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Captured or PWM Value                                             */
    } CCR11_b;
  } ;
  
  union {
    __IOM uint32_t CCR21;                       /*!< (@ 0x00000074) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Captured or PWM Value                                             */
    } CCR21_b;
  } ;
  
  union {
    __IOM uint32_t CCR31;                       /*!< (@ 0x00000078) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Captured or PWM Value                                             */
    } CCR31_b;
  } ;
  
  union {
    __IOM uint32_t CCR41;                       /*!< (@ 0x0000007C) CNT Compare Register                                       */
    
    struct {
      __IOM uint32_t Value      : 16;           /*!< [15..0] Captured or PWM Value                                             */
    } CCR41_b;
  } ;
} MDR_TIMER1_Type;                              /*!< Size = 128 (0x80)                                                         */



/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Port Control (MDR_PORTA)
  */

typedef struct {                                /*!< (@ 0x40080000) MDR_PORTA Structure                                        */
  
  union {
    __IOM uint32_t RXTX;                        /*!< (@ 0x00000000) GPIO Pin Data                                              */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Pin data value                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Pin data value                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Pin data value                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Pin data value                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Pin data value                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Pin data value                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Pin data value                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Pin data value                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Pin data value                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Pin data value                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Pin data value                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Pin data value                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Pin data value                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Pin data value                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Pin data value                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Pin data value                                                   */
    } RXTX_b;
  } ;
  
  union {
    __IOM uint32_t OE;                          /*!< (@ 0x00000004) Output Enable Control                                      */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Pin data direction                                                 */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Pin data direction                                                 */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Pin data direction                                                 */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Pin data direction                                                 */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Pin data direction                                                 */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Pin data direction                                                 */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Pin data direction                                                 */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Pin data direction                                                 */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Pin data direction                                                 */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Pin data direction                                                 */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Pin data direction                                               */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Pin data direction                                               */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Pin data direction                                               */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Pin data direction                                               */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Pin data direction                                               */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Pin data direction                                               */
    } OE_b;
  } ;
  
  union {
    __IOM uint32_t FUNC;                        /*!< (@ 0x00000008) Pin Functions in Digital mode                              */
    
    struct {
      __IOM uint32_t Pin_0      : 2;            /*!< [1..0] Pin Digital Function                                               */
      __IOM uint32_t Pin_1      : 2;            /*!< [3..2] Pin Digital Function                                               */
      __IOM uint32_t Pin_2      : 2;            /*!< [5..4] Pin Digital Function                                               */
      __IOM uint32_t Pin_3      : 2;            /*!< [7..6] Pin Digital Function                                               */
      __IOM uint32_t Pin_4      : 2;            /*!< [9..8] Pin Digital Function                                               */
      __IOM uint32_t Pin_5      : 2;            /*!< [11..10] Pin Digital Function                                             */
      __IOM uint32_t Pin_6      : 2;            /*!< [13..12] Pin Digital Function                                             */
      __IOM uint32_t Pin_7      : 2;            /*!< [15..14] Pin Digital Function                                             */
      __IOM uint32_t Pin_8      : 2;            /*!< [17..16] Pin Digital Function                                             */
      __IOM uint32_t Pin_9      : 2;            /*!< [19..18] Pin Digital Function                                             */
      __IOM uint32_t Pin_10     : 2;            /*!< [21..20] Pin Digital Function                                             */
      __IOM uint32_t Pin_11     : 2;            /*!< [23..22] Pin Digital Function                                             */
      __IOM uint32_t Pin_12     : 2;            /*!< [25..24] Pin Digital Function                                             */
      __IOM uint32_t Pin_13     : 2;            /*!< [27..26] Pin Digital Function                                             */
      __IOM uint32_t Pin_14     : 2;            /*!< [29..28] Pin Digital Function                                             */
      __IOM uint32_t Pin_15     : 2;            /*!< [31..30] Pin Digital Function                                             */
    } FUNC_b;
  } ;
  
  union {
    __IOM uint32_t ANALOG;                      /*!< (@ 0x0000000C) Enable Digital Mode Control                                */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Enable Digital mode                                                */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Enable Digital mode                                                */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Enable Digital mode                                                */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Enable Digital mode                                                */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Enable Digital mode                                                */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Enable Digital mode                                                */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Enable Digital mode                                                */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Enable Digital mode                                                */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Enable Digital mode                                                */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Enable Digital mode                                                */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Enable Digital mode                                              */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Enable Digital mode                                              */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Enable Digital mode                                              */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Enable Digital mode                                              */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Enable Digital mode                                              */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Enable Digital mode                                              */
    } ANALOG_b;
  } ;
  
  union {
    __IOM uint32_t PULL;                        /*!< (@ 0x00000010) PULL Up and Down Control                                   */
    
    struct {
      __IOM uint32_t Down_Pin_0 : 1;            /*!< [0..0] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_1 : 1;            /*!< [1..1] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_2 : 1;            /*!< [2..2] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_3 : 1;            /*!< [3..3] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_4 : 1;            /*!< [4..4] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_5 : 1;            /*!< [5..5] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_6 : 1;            /*!< [6..6] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_7 : 1;            /*!< [7..7] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_8 : 1;            /*!< [8..8] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_9 : 1;            /*!< [9..9] Pull Down Enable                                                   */
      __IOM uint32_t Down_Pin_10 : 1;           /*!< [10..10] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_11 : 1;           /*!< [11..11] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_12 : 1;           /*!< [12..12] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_13 : 1;           /*!< [13..13] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_14 : 1;           /*!< [14..14] Pull Down Enable                                                 */
      __IOM uint32_t Down_Pin_15 : 1;           /*!< [15..15] Pull Down Enable                                                 */
      __IOM uint32_t UP_Pin_0   : 1;            /*!< [16..16] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_1   : 1;            /*!< [17..17] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_2   : 1;            /*!< [18..18] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_3   : 1;            /*!< [19..19] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_4   : 1;            /*!< [20..20] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_5   : 1;            /*!< [21..21] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_6   : 1;            /*!< [22..22] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_7   : 1;            /*!< [23..23] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_8   : 1;            /*!< [24..24] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_9   : 1;            /*!< [25..25] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_10  : 1;            /*!< [26..26] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_11  : 1;            /*!< [27..27] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_12  : 1;            /*!< [28..28] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_13  : 1;            /*!< [29..29] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_14  : 1;            /*!< [30..30] Pull Up Enable                                                   */
      __IOM uint32_t UP_Pin_15  : 1;            /*!< [31..31] Pull Up Enable                                                   */
    } PULL_b;
  } ;
  
  union {
    __IOM uint32_t PD;                          /*!< (@ 0x00000014) Otput Driver Mode                                          */
    
    struct {
      __IOM uint32_t Driver_Pin_0 : 1;          /*!< [0..0] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_1 : 1;          /*!< [1..1] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_2 : 1;          /*!< [2..2] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_3 : 1;          /*!< [3..3] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_4 : 1;          /*!< [4..4] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_5 : 1;          /*!< [5..5] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_6 : 1;          /*!< [6..6] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_7 : 1;          /*!< [7..7] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_8 : 1;          /*!< [8..8] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_9 : 1;          /*!< [9..9] Driver mode for pin                                                */
      __IOM uint32_t Driver_Pin_10 : 1;         /*!< [10..10] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_11 : 1;         /*!< [11..11] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_12 : 1;         /*!< [12..12] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_13 : 1;         /*!< [13..13] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_14 : 1;         /*!< [14..14] Driver mode for pin                                              */
      __IOM uint32_t Driver_Pin_15 : 1;         /*!< [15..15] Driver mode for pin                                              */
      __IOM uint32_t Schmitt_Pin_0 : 1;         /*!< [16..16] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_1 : 1;         /*!< [17..17] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_2 : 1;         /*!< [18..18] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_3 : 1;         /*!< [19..19] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_4 : 1;         /*!< [20..20] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_5 : 1;         /*!< [21..21] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_6 : 1;         /*!< [22..22] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_7 : 1;         /*!< [23..23] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_8 : 1;         /*!< [24..24] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_9 : 1;         /*!< [25..25] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_10 : 1;        /*!< [26..26] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_11 : 1;        /*!< [27..27] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_12 : 1;        /*!< [28..28] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_13 : 1;        /*!< [29..29] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_14 : 1;        /*!< [30..30] Schmitt trigger enable                                           */
      __IOM uint32_t Schmitt_Pin_15 : 1;        /*!< [31..31] Schmitt trigger enable                                           */
    } PD_b;
  } ;
  
  union {
    __IOM uint32_t PWR;                         /*!< (@ 0x00000018) Output voltage switch rate                                 */
    
    struct {
      __IOM uint32_t Pin_0      : 2;            /*!< [1..0] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_1      : 2;            /*!< [3..2] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_2      : 2;            /*!< [5..4] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_3      : 2;            /*!< [7..6] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_4      : 2;            /*!< [9..8] Voltage levels switch rate                                         */
      __IOM uint32_t Pin_5      : 2;            /*!< [11..10] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_6      : 2;            /*!< [13..12] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_7      : 2;            /*!< [15..14] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_8      : 2;            /*!< [17..16] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_9      : 2;            /*!< [19..18] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_10     : 2;            /*!< [21..20] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_11     : 2;            /*!< [23..22] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_12     : 2;            /*!< [25..24] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_13     : 2;            /*!< [27..26] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_14     : 2;            /*!< [29..28] Voltage levels switch rate                                       */
      __IOM uint32_t Pin_15     : 2;            /*!< [31..30] Voltage levels switch rate                                       */
    } PWR_b;
  } ;
  
  union {
    __IOM uint32_t GFEN;                        /*!< (@ 0x0000001C) Input pulses filter                                        */
    
    struct {
      __IOM uint32_t Pin_0      : 1;            /*!< [0..0] Filter for pin                                                     */
      __IOM uint32_t Pin_1      : 1;            /*!< [1..1] Filter for pin                                                     */
      __IOM uint32_t Pin_2      : 1;            /*!< [2..2] Filter for pin                                                     */
      __IOM uint32_t Pin_3      : 1;            /*!< [3..3] Filter for pin                                                     */
      __IOM uint32_t Pin_4      : 1;            /*!< [4..4] Filter for pin                                                     */
      __IOM uint32_t Pin_5      : 1;            /*!< [5..5] Filter for pin                                                     */
      __IOM uint32_t Pin_6      : 1;            /*!< [6..6] Filter for pin                                                     */
      __IOM uint32_t Pin_7      : 1;            /*!< [7..7] Filter for pin                                                     */
      __IOM uint32_t Pin_8      : 1;            /*!< [8..8] Filter for pin                                                     */
      __IOM uint32_t Pin_9      : 1;            /*!< [9..9] Filter for pin                                                     */
      __IOM uint32_t Pin_10     : 1;            /*!< [10..10] Filter for pin                                                   */
      __IOM uint32_t Pin_11     : 1;            /*!< [11..11] Filter for pin                                                   */
      __IOM uint32_t Pin_12     : 1;            /*!< [12..12] Filter for pin                                                   */
      __IOM uint32_t Pin_13     : 1;            /*!< [13..13] Filter for pin                                                   */
      __IOM uint32_t Pin_14     : 1;            /*!< [14..14] Filter for pin                                                   */
      __IOM uint32_t Pin_15     : 1;            /*!< [15..15] Filter for pin                                                   */
    } GFEN_b;
  } ;
} MDR_PORTA_Type;                               /*!< Size = 32 (0x20)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define MDR_EEPROM_BASE             0x40018000UL
#define MDR_RST_CLOCK_BASE          0x40020000UL
#define MDR_WWDT_BASE               0x40048000UL
#define MDR_IWDT_BASE               0x40050000UL
#define MDR_ADC_BASE                0x40040000UL
#define MDR_BKP_BASE                0x40060000UL
#define MDR_ADCUI_BASE              0x40068000UL
#define MDR_UART1_BASE              0x40008000UL
#define MDR_UART2_BASE              0x40010000UL
#define MDR_TIMER1_BASE             0x40070000UL
#define MDR_TIMER2_BASE             0x40078000UL
#define MDR_PORTA_BASE              0x40080000UL
#define MDR_PORTB_BASE              0x40088000UL
#define MDR_PORTC_BASE              0x40090000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define MDR_EEPROM                  ((MDR_EEPROM_Type*)        MDR_EEPROM_BASE)
#define MDR_RST_CLOCK               ((MDR_RST_CLOCK_Type*)     MDR_RST_CLOCK_BASE)
#define MDR_WWDT                    ((MDR_WWDT_Type*)          MDR_WWDT_BASE)
#define MDR_IWDT                    ((MDR_IWDT_Type*)          MDR_IWDT_BASE)
#define MDR_ADC                     ((MDR_ADC_Type*)           MDR_ADC_BASE)
#define MDR_BKP                     ((MDR_BKP_Type*)           MDR_BKP_BASE)
#define MDR_ADCUI                   ((MDR_ADCUI_Type*)         MDR_ADCUI_BASE)
#define MDR_UART1                   ((MDR_UART1_Type*)         MDR_UART1_BASE)
#define MDR_UART2                   ((MDR_UART1_Type*)         MDR_UART2_BASE)
#define MDR_TIMER1                  ((MDR_TIMER1_Type*)        MDR_TIMER1_BASE)
#define MDR_TIMER2                  ((MDR_TIMER1_Type*)        MDR_TIMER2_BASE)
#define MDR_PORTA                   ((MDR_PORTA_Type*)         MDR_PORTA_BASE)
#define MDR_PORTB                   ((MDR_PORTA_Type*)         MDR_PORTB_BASE)
#define MDR_PORTC                   ((MDR_PORTA_Type*)         MDR_PORTC_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CMD  ========================================================== */
#define MDR_EEPROM_CMD_CON_Pos            (0UL)                     /*!< MDR_EEPROM CMD: CON (Bit 0)                           */
#define MDR_EEPROM_CMD_CON_Msk            (0x1UL)                   /*!< MDR_EEPROM CMD: CON (Bitfield-Mask: 0x01)             */
#define MDR_EEPROM_CMD_WR_Pos             (1UL)                     /*!< MDR_EEPROM CMD: WR (Bit 1)                            */
#define MDR_EEPROM_CMD_WR_Msk             (0x2UL)                   /*!< MDR_EEPROM CMD: WR (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_RD_Pos             (2UL)                     /*!< MDR_EEPROM CMD: RD (Bit 2)                            */
#define MDR_EEPROM_CMD_RD_Msk             (0x4UL)                   /*!< MDR_EEPROM CMD: RD (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_DELAY_Pos          (3UL)                     /*!< MDR_EEPROM CMD: DELAY (Bit 3)                         */
#define MDR_EEPROM_CMD_DELAY_Msk          (0x8UL)                   /*!< MDR_EEPROM CMD: DELAY (Bitfield-Mask: 0x01)           */
#define MDR_EEPROM_CMD_XE_Pos             (6UL)                     /*!< MDR_EEPROM CMD: XE (Bit 6)                            */
#define MDR_EEPROM_CMD_XE_Msk             (0x40UL)                  /*!< MDR_EEPROM CMD: XE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_YE_Pos             (7UL)                     /*!< MDR_EEPROM CMD: YE (Bit 7)                            */
#define MDR_EEPROM_CMD_YE_Msk             (0x80UL)                  /*!< MDR_EEPROM CMD: YE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_SE_Pos             (8UL)                     /*!< MDR_EEPROM CMD: SE (Bit 8)                            */
#define MDR_EEPROM_CMD_SE_Msk             (0x100UL)                 /*!< MDR_EEPROM CMD: SE (Bitfield-Mask: 0x01)              */
#define MDR_EEPROM_CMD_IFREN_Pos          (9UL)                     /*!< MDR_EEPROM CMD: IFREN (Bit 9)                         */
#define MDR_EEPROM_CMD_IFREN_Msk          (0x200UL)                 /*!< MDR_EEPROM CMD: IFREN (Bitfield-Mask: 0x01)           */
#define MDR_EEPROM_CMD_ERASE_Pos          (10UL)                    /*!< MDR_EEPROM CMD: ERASE (Bit 10)                        */
#define MDR_EEPROM_CMD_ERASE_Msk          (0x400UL)                 /*!< MDR_EEPROM CMD: ERASE (Bitfield-Mask: 0x01)           */
#define MDR_EEPROM_CMD_MAS1_Pos           (11UL)                    /*!< MDR_EEPROM CMD: MAS1 (Bit 11)                         */
#define MDR_EEPROM_CMD_MAS1_Msk           (0x800UL)                 /*!< MDR_EEPROM CMD: MAS1 (Bitfield-Mask: 0x01)            */
#define MDR_EEPROM_CMD_PROG_Pos           (12UL)                    /*!< MDR_EEPROM CMD: PROG (Bit 12)                         */
#define MDR_EEPROM_CMD_PROG_Msk           (0x1000UL)                /*!< MDR_EEPROM CMD: PROG (Bitfield-Mask: 0x01)            */
#define MDR_EEPROM_CMD_NVSTR_Pos          (13UL)                    /*!< MDR_EEPROM CMD: NVSTR (Bit 13)                        */
#define MDR_EEPROM_CMD_NVSTR_Msk          (0x2000UL)                /*!< MDR_EEPROM CMD: NVSTR (Bitfield-Mask: 0x01)           */
/* =========================================================  ADDR  ========================================================== */
/* ==========================================================  DI  =========================================================== */
/* ==========================================================  DO  =========================================================== */
/* ==========================================================  KEY  ========================================================== */


/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* =====================================================  CLOCK_STATUS  ====================================================== */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY_Pos (1UL)            /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_CPU_RDY (Bit 1)       */
#define MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY_Msk (0x2UL)          /*!< MDR_RST_CLOCK CLOCK_STATUS: PLL_CPU_RDY (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY_Pos (2UL)                /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE_RDY (Bit 2)           */
#define MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY_Msk (0x4UL)              /*!< MDR_RST_CLOCK CLOCK_STATUS: HSE_RDY (Bitfield-Mask: 0x01) */
/* ======================================================  PLL_CONTROL  ====================================================== */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON_Pos (2UL)              /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_ON (Bit 2)         */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON_Msk (0x4UL)            /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD_Pos (3UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_PLD (Bit 3)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD_Msk (0x8UL)           /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_PLD (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL_Pos (8UL)             /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_MUL (Bit 8)        */
#define MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL_Msk (0xf00UL)         /*!< MDR_RST_CLOCK PLL_CONTROL: PLL_CPU_MUL (Bitfield-Mask: 0x0f) */
/* ======================================================  HS_CONTROL  ======================================================= */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_ON_Pos (0UL)                   /*!< MDR_RST_CLOCK HS_CONTROL: HSE_ON (Bit 0)              */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_ON_Msk (0x1UL)                 /*!< MDR_RST_CLOCK HS_CONTROL: HSE_ON (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_BYP_Pos (1UL)                  /*!< MDR_RST_CLOCK HS_CONTROL: HSE_BYP (Bit 1)             */
#define MDR_RST_CLOCK_HS_CONTROL_HSE_BYP_Msk (0x2UL)                /*!< MDR_RST_CLOCK HS_CONTROL: HSE_BYP (Bitfield-Mask: 0x01) */
/* =======================================================  CPU_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL_Pos (2UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C2_SEL (Bit 2)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL_Msk (0x4UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C2_SEL (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C3_SEL (Bit 4)           */
#define MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL_Msk (0xf0UL)             /*!< MDR_RST_CLOCK CPU_CLOCK: CPU_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL_Pos (8UL)                  /*!< MDR_RST_CLOCK CPU_CLOCK: HCLK_SEL (Bit 8)             */
#define MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL_Msk (0x300UL)              /*!< MDR_RST_CLOCK CPU_CLOCK: HCLK_SEL (Bitfield-Mask: 0x03) */
/* ======================================================  PER1_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_PER1_CLOCK_PER1_C1_SEL_Pos (0UL)              /*!< MDR_RST_CLOCK PER1_CLOCK: PER1_C1_SEL (Bit 0)         */
#define MDR_RST_CLOCK_PER1_CLOCK_PER1_C1_SEL_Msk (0x3UL)            /*!< MDR_RST_CLOCK PER1_CLOCK: PER1_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_PER1_CLOCK_PER1_C2_SEL_Pos (2UL)              /*!< MDR_RST_CLOCK PER1_CLOCK: PER1_C2_SEL (Bit 2)         */
#define MDR_RST_CLOCK_PER1_CLOCK_PER1_C2_SEL_Msk (0xcUL)            /*!< MDR_RST_CLOCK PER1_CLOCK: PER1_C2_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_PER1_CLOCK_DEBUG_EN_Pos (4UL)                 /*!< MDR_RST_CLOCK PER1_CLOCK: DEBUG_EN (Bit 4)            */
#define MDR_RST_CLOCK_PER1_CLOCK_DEBUG_EN_Msk (0x10UL)              /*!< MDR_RST_CLOCK PER1_CLOCK: DEBUG_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER1_CLOCK_DMA_EN_Pos (5UL)                   /*!< MDR_RST_CLOCK PER1_CLOCK: DMA_EN (Bit 5)              */
#define MDR_RST_CLOCK_PER1_CLOCK_DMA_EN_Msk (0x20UL)                /*!< MDR_RST_CLOCK PER1_CLOCK: DMA_EN (Bitfield-Mask: 0x01) */
/* =======================================================  ADC_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL_Pos (0UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C1_SEL (Bit 0)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL_Msk (0x3UL)              /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C1_SEL_Pos (2UL)              /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_C1_SEL (Bit 2)         */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C1_SEL_Msk (0xcUL)            /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_C1_SEL (Bitfield-Mask: 0x03) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Pos (4UL)                /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C3_SEL (Bit 4)           */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Msk (0xf0UL)             /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_Pos (8UL)              /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_C3_SEL (Bit 8)         */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_Msk (0xf00UL)          /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_C3_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_CLK_EN_Pos (12UL)             /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_CLK_EN (Bit 12)        */
#define MDR_RST_CLOCK_ADC_CLOCK_ADCIU_CLK_EN_Msk (0x1000UL)         /*!< MDR_RST_CLOCK ADC_CLOCK: ADCIU_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN_Pos (13UL)               /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_CLK_EN (Bit 13)          */
#define MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN_Msk (0x2000UL)           /*!< MDR_RST_CLOCK ADC_CLOCK: ADC_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  RTC_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Pos (0UL)                   /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_SEL (Bit 0)              */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Msk (0xfUL)                 /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Pos (4UL)                   /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_SEL (Bit 4)              */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Msk (0xf0UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_SEL (Bitfield-Mask: 0x0f) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN_Pos (8UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_RTC_EN (Bit 8)           */
#define MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN_Msk (0x100UL)            /*!< MDR_RST_CLOCK RTC_CLOCK: HSE_RTC_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN_Pos (9UL)                /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_RTC_EN (Bit 9)           */
#define MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN_Msk (0x200UL)            /*!< MDR_RST_CLOCK RTC_CLOCK: HSI_RTC_EN (Bitfield-Mask: 0x01) */
/* ======================================================  PER2_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_PER2_CLOCK_SPI1_CLK_EN_Pos (0UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: SPI1_CLK_EN (Bit 0)         */
#define MDR_RST_CLOCK_PER2_CLOCK_SPI1_CLK_EN_Msk (0x1UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: SPI1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_Pos (1UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: UART1_CLK_EN (Bit 1)        */
#define MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_Msk (0x2UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_Pos (2UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: UART2_CLK_EN (Bit 2)        */
#define MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_Msk (0x4UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_Pos (3UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: EEPROM_CLK_EN (Bit 3)       */
#define MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_Msk (0x8UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: EEPROM_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_Pos (4UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: RST_CLK_EN (Bit 4)          */
#define MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_Msk (0x10UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: RST_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_Pos (5UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: DMA_CLK_EN (Bit 5)          */
#define MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_Msk (0x20UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: DMA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_Pos (8UL)               /*!< MDR_RST_CLOCK PER2_CLOCK: ADC_CLK_EN (Bit 8)          */
#define MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_Msk (0x100UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: ADC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_Pos (9UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: WWDT_CLK_EN (Bit 9)         */
#define MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_Msk (0x200UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: WWDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_Pos (10UL)             /*!< MDR_RST_CLOCK PER2_CLOCK: IWDT_CLK_EN (Bit 10)        */
#define MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_Msk (0x400UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: IWDT_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_Pos (11UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: PWR_CLK_EN (Bit 11)         */
#define MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_Msk (0x800UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: PWR_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_Pos (12UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: BKP_CLK_EN (Bit 12)         */
#define MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_Msk (0x1000UL)          /*!< MDR_RST_CLOCK PER2_CLOCK: BKP_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_Pos (13UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: ADCIU_CLK_EN (Bit 13)       */
#define MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_Msk (0x2000UL)        /*!< MDR_RST_CLOCK PER2_CLOCK: ADCIU_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_Pos (14UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: TIMER1_CLK_EN (Bit 14)      */
#define MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_Msk (0x4000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: TIMER1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_Pos (15UL)           /*!< MDR_RST_CLOCK PER2_CLOCK: TIMER2_CLK_EN (Bit 15)      */
#define MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_Msk (0x8000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: TIMER2_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_Pos (16UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: PORTA_CLK_EN (Bit 16)       */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_Msk (0x10000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: PORTA_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_Pos (17UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: PORTB_CLK_EN (Bit 17)       */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_Msk (0x20000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: PORTB_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_Pos (18UL)            /*!< MDR_RST_CLOCK PER2_CLOCK: PORTC_CLK_EN (Bit 18)       */
#define MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_Msk (0x40000UL)       /*!< MDR_RST_CLOCK PER2_CLOCK: PORTC_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_Pos (19UL)              /*!< MDR_RST_CLOCK PER2_CLOCK: CRC_CLK_EN (Bit 19)         */
#define MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_Msk (0x80000UL)         /*!< MDR_RST_CLOCK PER2_CLOCK: CRC_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  TIM_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Pos (8UL)                  /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_BRG (Bit 8)             */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Msk (0x700UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN_Pos (25UL)              /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_CLK_EN (Bit 25)         */
#define MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN_Msk (0x2000000UL)       /*!< MDR_RST_CLOCK TIM_CLOCK: TIM2_CLK_EN (Bitfield-Mask: 0x01) */
/* ======================================================  UART_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Pos (0UL)                /*!< MDR_RST_CLOCK UART_CLOCK: UART1_BRG (Bit 0)           */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Msk (0x7UL)              /*!< MDR_RST_CLOCK UART_CLOCK: UART1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Pos (8UL)                /*!< MDR_RST_CLOCK UART_CLOCK: UART2_BRG (Bit 8)           */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Msk (0x700UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART2_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN_Pos (24UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART1_CLK_EN (Bit 24)       */
#define MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN_Msk (0x1000000UL)     /*!< MDR_RST_CLOCK UART_CLOCK: UART1_CLK_EN (Bitfield-Mask: 0x01) */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN_Pos (25UL)            /*!< MDR_RST_CLOCK UART_CLOCK: UART2_CLK_EN (Bit 25)       */
#define MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN_Msk (0x2000000UL)     /*!< MDR_RST_CLOCK UART_CLOCK: UART2_CLK_EN (Bitfield-Mask: 0x01) */
/* =======================================================  SSP_CLOCK  ======================================================= */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Pos (0UL)                  /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_BRG (Bit 0)             */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Msk (0x7UL)                /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_BRG (Bitfield-Mask: 0x07) */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN_Pos (24UL)              /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_CLK_EN (Bit 24)         */
#define MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN_Msk (0x1000000UL)       /*!< MDR_RST_CLOCK SSP_CLOCK: SSP1_CLK_EN (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                         MDR_WWDT                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define MDR_WWDT_CR_T_Pos                 (0UL)                     /*!< MDR_WWDT CR: T (Bit 0)                                */
#define MDR_WWDT_CR_T_Msk                 (0x7fUL)                  /*!< MDR_WWDT CR: T (Bitfield-Mask: 0x7f)                  */
#define MDR_WWDT_CR_WDGA_Pos              (7UL)                     /*!< MDR_WWDT CR: WDGA (Bit 7)                             */
#define MDR_WWDT_CR_WDGA_Msk              (0x80UL)                  /*!< MDR_WWDT CR: WDGA (Bitfield-Mask: 0x01)               */
/* ==========================================================  CFR  ========================================================== */
#define MDR_WWDT_CFR_W_Pos                (0UL)                     /*!< MDR_WWDT CFR: W (Bit 0)                               */
#define MDR_WWDT_CFR_W_Msk                (0x7fUL)                  /*!< MDR_WWDT CFR: W (Bitfield-Mask: 0x7f)                 */
#define MDR_WWDT_CFR_WGTB_Pos             (7UL)                     /*!< MDR_WWDT CFR: WGTB (Bit 7)                            */
#define MDR_WWDT_CFR_WGTB_Msk             (0x180UL)                 /*!< MDR_WWDT CFR: WGTB (Bitfield-Mask: 0x03)              */
#define MDR_WWDT_CFR_EWI_Pos              (9UL)                     /*!< MDR_WWDT CFR: EWI (Bit 9)                             */
#define MDR_WWDT_CFR_EWI_Msk              (0x200UL)                 /*!< MDR_WWDT CFR: EWI (Bitfield-Mask: 0x01)               */
/* ==========================================================  SR  =========================================================== */
#define MDR_WWDT_SR_EWIF_Pos              (0UL)                     /*!< MDR_WWDT SR: EWIF (Bit 0)                             */
#define MDR_WWDT_SR_EWIF_Msk              (0x1UL)                   /*!< MDR_WWDT SR: EWIF (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                         MDR_IWDT                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  KR  =========================================================== */
#define MDR_IWDT_KR_KEY_Pos               (0UL)                     /*!< MDR_IWDT KR: KEY (Bit 0)                              */
#define MDR_IWDT_KR_KEY_Msk               (0xffffUL)                /*!< MDR_IWDT KR: KEY (Bitfield-Mask: 0xffff)              */
/* ==========================================================  PR  =========================================================== */
#define MDR_IWDT_PR_PR_Pos                (0UL)                     /*!< MDR_IWDT PR: PR (Bit 0)                               */
#define MDR_IWDT_PR_PR_Msk                (0x7UL)                   /*!< MDR_IWDT PR: PR (Bitfield-Mask: 0x07)                 */
/* ==========================================================  RLR  ========================================================== */
#define MDR_IWDT_RLR_PRL_Pos              (0UL)                     /*!< MDR_IWDT RLR: PRL (Bit 0)                             */
#define MDR_IWDT_RLR_PRL_Msk              (0xfffUL)                 /*!< MDR_IWDT RLR: PRL (Bitfield-Mask: 0xfff)              */
/* ==========================================================  SR  =========================================================== */
#define MDR_IWDT_SR_PVU_Pos               (0UL)                     /*!< MDR_IWDT SR: PVU (Bit 0)                              */
#define MDR_IWDT_SR_PVU_Msk               (0x1UL)                   /*!< MDR_IWDT SR: PVU (Bitfield-Mask: 0x01)                */
#define MDR_IWDT_SR_RVU_Pos               (1UL)                     /*!< MDR_IWDT SR: RVU (Bit 1)                              */
#define MDR_IWDT_SR_RVU_Msk               (0x2UL)                   /*!< MDR_IWDT SR: RVU (Bitfield-Mask: 0x01)                */


/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  ADC1_Cfg  ======================================================== */
#define MDR_ADC_ADC1_Cfg_ADON_Pos         (0UL)                     /*!< MDR_ADC ADC1_Cfg: ADON (Bit 0)                        */
#define MDR_ADC_ADC1_Cfg_ADON_Msk         (0x1UL)                   /*!< MDR_ADC ADC1_Cfg: ADON (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_GO_Pos           (1UL)                     /*!< MDR_ADC ADC1_Cfg: GO (Bit 1)                          */
#define MDR_ADC_ADC1_Cfg_GO_Msk           (0x2UL)                   /*!< MDR_ADC ADC1_Cfg: GO (Bitfield-Mask: 0x01)            */
#define MDR_ADC_ADC1_Cfg_CLKS_Pos         (2UL)                     /*!< MDR_ADC ADC1_Cfg: CLKS (Bit 2)                        */
#define MDR_ADC_ADC1_Cfg_CLKS_Msk         (0x4UL)                   /*!< MDR_ADC ADC1_Cfg: CLKS (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_SAMPLE_Pos       (3UL)                     /*!< MDR_ADC ADC1_Cfg: SAMPLE (Bit 3)                      */
#define MDR_ADC_ADC1_Cfg_SAMPLE_Msk       (0x8UL)                   /*!< MDR_ADC ADC1_Cfg: SAMPLE (Bitfield-Mask: 0x01)        */
#define MDR_ADC_ADC1_Cfg_CHS_Pos          (4UL)                     /*!< MDR_ADC ADC1_Cfg: CHS (Bit 4)                         */
#define MDR_ADC_ADC1_Cfg_CHS_Msk          (0x1f0UL)                 /*!< MDR_ADC ADC1_Cfg: CHS (Bitfield-Mask: 0x1f)           */
#define MDR_ADC_ADC1_Cfg_CHCH_Pos         (9UL)                     /*!< MDR_ADC ADC1_Cfg: CHCH (Bit 9)                        */
#define MDR_ADC_ADC1_Cfg_CHCH_Msk         (0x200UL)                 /*!< MDR_ADC ADC1_Cfg: CHCH (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_RGNC_Pos         (10UL)                    /*!< MDR_ADC ADC1_Cfg: RGNC (Bit 10)                       */
#define MDR_ADC_ADC1_Cfg_RGNC_Msk         (0x400UL)                 /*!< MDR_ADC ADC1_Cfg: RGNC (Bitfield-Mask: 0x01)          */
#define MDR_ADC_ADC1_Cfg_M_REF_Pos        (11UL)                    /*!< MDR_ADC ADC1_Cfg: M_REF (Bit 11)                      */
#define MDR_ADC_ADC1_Cfg_M_REF_Msk        (0x800UL)                 /*!< MDR_ADC ADC1_Cfg: M_REF (Bitfield-Mask: 0x01)         */
#define MDR_ADC_ADC1_Cfg_DIV_CLK_Pos      (12UL)                    /*!< MDR_ADC ADC1_Cfg: DIV_CLK (Bit 12)                    */
#define MDR_ADC_ADC1_Cfg_DIV_CLK_Msk      (0xf000UL)                /*!< MDR_ADC ADC1_Cfg: DIV_CLK (Bitfield-Mask: 0x0f)       */
#define MDR_ADC_ADC1_Cfg_TS_EN_Pos        (17UL)                    /*!< MDR_ADC ADC1_Cfg: TS_EN (Bit 17)                      */
#define MDR_ADC_ADC1_Cfg_TS_EN_Msk        (0x20000UL)               /*!< MDR_ADC ADC1_Cfg: TS_EN (Bitfield-Mask: 0x01)         */
#define MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Pos   (18UL)                    /*!< MDR_ADC ADC1_Cfg: TS_BUFF_EN (Bit 18)                 */
#define MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Msk   (0x40000UL)               /*!< MDR_ADC ADC1_Cfg: TS_BUFF_EN (Bitfield-Mask: 0x01)    */
#define MDR_ADC_ADC1_Cfg_SEL_TS_Pos       (19UL)                    /*!< MDR_ADC ADC1_Cfg: SEL_TS (Bit 19)                     */
#define MDR_ADC_ADC1_Cfg_SEL_TS_Msk       (0x80000UL)               /*!< MDR_ADC ADC1_Cfg: SEL_TS (Bitfield-Mask: 0x01)        */
#define MDR_ADC_ADC1_Cfg_SEL_VREF_Pos     (20UL)                    /*!< MDR_ADC ADC1_Cfg: SEL_VREF (Bit 20)                   */
#define MDR_ADC_ADC1_Cfg_SEL_VREF_Msk     (0x100000UL)              /*!< MDR_ADC ADC1_Cfg: SEL_VREF (Bitfield-Mask: 0x01)      */
#define MDR_ADC_ADC1_Cfg_Delay_GO_Pos     (25UL)                    /*!< MDR_ADC ADC1_Cfg: Delay_GO (Bit 25)                   */
#define MDR_ADC_ADC1_Cfg_Delay_GO_Msk     (0xe000000UL)             /*!< MDR_ADC ADC1_Cfg: Delay_GO (Bitfield-Mask: 0x07)      */
/* =======================================================  ADC2_Cfg  ======================================================== */
#define MDR_ADC_ADC2_Cfg_ADC1_OP_Pos      (17UL)                    /*!< MDR_ADC ADC2_Cfg: ADC1_OP (Bit 17)                    */
#define MDR_ADC_ADC2_Cfg_ADC1_OP_Msk      (0x20000UL)               /*!< MDR_ADC ADC2_Cfg: ADC1_OP (Bitfield-Mask: 0x01)       */
/* =====================================================  ADC1_H_Level  ====================================================== */
#define MDR_ADC_ADC1_H_Level_Level_Pos    (0UL)                     /*!< MDR_ADC ADC1_H_Level: Level (Bit 0)                   */
#define MDR_ADC_ADC1_H_Level_Level_Msk    (0xfffUL)                 /*!< MDR_ADC ADC1_H_Level: Level (Bitfield-Mask: 0xfff)    */
/* =====================================================  ADC1_L_Level  ====================================================== */
#define MDR_ADC_ADC1_L_Level_Level_Pos    (0UL)                     /*!< MDR_ADC ADC1_L_Level: Level (Bit 0)                   */
#define MDR_ADC_ADC1_L_Level_Level_Msk    (0xfffUL)                 /*!< MDR_ADC ADC1_L_Level: Level (Bitfield-Mask: 0xfff)    */
/* ======================================================  ADC1_RESULT  ====================================================== */
#define MDR_ADC_ADC1_RESULT_Value_Pos     (0UL)                     /*!< MDR_ADC ADC1_RESULT: Value (Bit 0)                    */
#define MDR_ADC_ADC1_RESULT_Value_Msk     (0xfffUL)                 /*!< MDR_ADC ADC1_RESULT: Value (Bitfield-Mask: 0xfff)     */
#define MDR_ADC_ADC1_RESULT_Channel_Pos   (16UL)                    /*!< MDR_ADC ADC1_RESULT: Channel (Bit 16)                 */
#define MDR_ADC_ADC1_RESULT_Channel_Msk   (0x1f0000UL)              /*!< MDR_ADC ADC1_RESULT: Channel (Bitfield-Mask: 0x1f)    */
/* ======================================================  ADC1_STATUS  ====================================================== */
#define MDR_ADC_ADC1_STATUS_Overwrite_Pos (0UL)                     /*!< MDR_ADC ADC1_STATUS: Overwrite (Bit 0)                */
#define MDR_ADC_ADC1_STATUS_Overwrite_Msk (0x1UL)                   /*!< MDR_ADC ADC1_STATUS: Overwrite (Bitfield-Mask: 0x01)  */
#define MDR_ADC_ADC1_STATUS_AWOIFEN_Pos   (1UL)                     /*!< MDR_ADC ADC1_STATUS: AWOIFEN (Bit 1)                  */
#define MDR_ADC_ADC1_STATUS_AWOIFEN_Msk   (0x2UL)                   /*!< MDR_ADC ADC1_STATUS: AWOIFEN (Bitfield-Mask: 0x01)    */
#define MDR_ADC_ADC1_STATUS_EOCIF_Pos     (2UL)                     /*!< MDR_ADC ADC1_STATUS: EOCIF (Bit 2)                    */
#define MDR_ADC_ADC1_STATUS_EOCIF_Msk     (0x4UL)                   /*!< MDR_ADC ADC1_STATUS: EOCIF (Bitfield-Mask: 0x01)      */
#define MDR_ADC_ADC1_STATUS_AWOIF_IE_Pos  (3UL)                     /*!< MDR_ADC ADC1_STATUS: AWOIF_IE (Bit 3)                 */
#define MDR_ADC_ADC1_STATUS_AWOIF_IE_Msk  (0x8UL)                   /*!< MDR_ADC ADC1_STATUS: AWOIF_IE (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_STATUS_EOCIF_EN_Pos  (4UL)                     /*!< MDR_ADC ADC1_STATUS: EOCIF_EN (Bit 4)                 */
#define MDR_ADC_ADC1_STATUS_EOCIF_EN_Msk  (0x10UL)                  /*!< MDR_ADC ADC1_STATUS: EOCIF_EN (Bitfield-Mask: 0x01)   */
/* ======================================================  ADC1_CHSEL  ======================================================= */
#define MDR_ADC_ADC1_CHSEL_Channel_0_Pos  (0UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_0 (Bit 0)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_0_Msk  (0x1UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_0 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_1_Pos  (1UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_1 (Bit 1)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_1_Msk  (0x2UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_1 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_2_Pos  (2UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_2 (Bit 2)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_2_Msk  (0x4UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_2 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_3_Pos  (3UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_3 (Bit 3)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_3_Msk  (0x8UL)                   /*!< MDR_ADC ADC1_CHSEL: Channel_3 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_4_Pos  (4UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_4 (Bit 4)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_4_Msk  (0x10UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_4 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_5_Pos  (5UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_5 (Bit 5)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_5_Msk  (0x20UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_5 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_6_Pos  (6UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_6 (Bit 6)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_6_Msk  (0x40UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_6 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_7_Pos  (7UL)                     /*!< MDR_ADC ADC1_CHSEL: Channel_7 (Bit 7)                 */
#define MDR_ADC_ADC1_CHSEL_Channel_7_Msk  (0x80UL)                  /*!< MDR_ADC ADC1_CHSEL: Channel_7 (Bitfield-Mask: 0x01)   */
#define MDR_ADC_ADC1_CHSEL_Channel_30_Pos (30UL)                    /*!< MDR_ADC ADC1_CHSEL: Channel_30 (Bit 30)               */
#define MDR_ADC_ADC1_CHSEL_Channel_30_Msk (0x40000000UL)            /*!< MDR_ADC ADC1_CHSEL: Channel_30 (Bitfield-Mask: 0x01)  */
#define MDR_ADC_ADC1_CHSEL_Channel_31_Pos (31UL)                    /*!< MDR_ADC ADC1_CHSEL: Channel_31 (Bit 31)               */
#define MDR_ADC_ADC1_CHSEL_Channel_31_Msk (0x80000000UL)            /*!< MDR_ADC ADC1_CHSEL: Channel_31 (Bitfield-Mask: 0x01)  */
/* =======================================================  ADC1_TRIM  ======================================================= */
#define MDR_ADC_ADC1_TRIM_TS_Trim_Pos     (1UL)                     /*!< MDR_ADC ADC1_TRIM: TS_Trim (Bit 1)                    */
#define MDR_ADC_ADC1_TRIM_TS_Trim_Msk     (0x3eUL)                  /*!< MDR_ADC ADC1_TRIM: TS_Trim (Bitfield-Mask: 0x1f)      */
#define MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Pos (6UL)                    /*!< MDR_ADC ADC1_TRIM: SEL_VREF_BUF (Bit 6)               */
#define MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Msk (0x40UL)                 /*!< MDR_ADC ADC1_TRIM: SEL_VREF_BUF (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  REG_0  ========================================================= */
/* ========================================================  REG_0E  ========================================================= */
#define MDR_BKP_REG_0E_LOW_Pos            (0UL)                     /*!< MDR_BKP REG_0E: LOW (Bit 0)                           */
#define MDR_BKP_REG_0E_LOW_Msk            (0x7UL)                   /*!< MDR_BKP REG_0E: LOW (Bitfield-Mask: 0x07)             */
#define MDR_BKP_REG_0E_SelectRI_Pos       (3UL)                     /*!< MDR_BKP REG_0E: SelectRI (Bit 3)                      */
#define MDR_BKP_REG_0E_SelectRI_Msk       (0x38UL)                  /*!< MDR_BKP REG_0E: SelectRI (Bitfield-Mask: 0x07)        */
#define MDR_BKP_REG_0E_Jtag_A_Pos         (6UL)                     /*!< MDR_BKP REG_0E: Jtag_A (Bit 6)                        */
#define MDR_BKP_REG_0E_Jtag_A_Msk         (0x40UL)                  /*!< MDR_BKP REG_0E: Jtag_A (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0E_Jtag_B_Pos         (7UL)                     /*!< MDR_BKP REG_0E: Jtag_B (Bit 7)                        */
#define MDR_BKP_REG_0E_Jtag_B_Msk         (0x80UL)                  /*!< MDR_BKP REG_0E: Jtag_B (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0E_Trim_dDUcc_Pos     (8UL)                     /*!< MDR_BKP REG_0E: Trim_dDUcc (Bit 8)                    */
#define MDR_BKP_REG_0E_Trim_dDUcc_Msk     (0x700UL)                 /*!< MDR_BKP REG_0E: Trim_dDUcc (Bitfield-Mask: 0x07)      */
#define MDR_BKP_REG_0E_FPOR_Pos           (11UL)                    /*!< MDR_BKP REG_0E: FPOR (Bit 11)                         */
#define MDR_BKP_REG_0E_FPOR_Msk           (0x800UL)                 /*!< MDR_BKP REG_0E: FPOR (Bitfield-Mask: 0x01)            */
#define MDR_BKP_REG_0E_Trim_DUcc_Pos      (12UL)                    /*!< MDR_BKP REG_0E: Trim_DUcc (Bit 12)                    */
#define MDR_BKP_REG_0E_Trim_DUcc_Msk      (0x3000UL)                /*!< MDR_BKP REG_0E: Trim_DUcc (Bitfield-Mask: 0x03)       */
#define MDR_BKP_REG_0E_COVDET_Pos         (14UL)                    /*!< MDR_BKP REG_0E: COVDET (Bit 14)                       */
#define MDR_BKP_REG_0E_COVDET_Msk         (0x4000UL)                /*!< MDR_BKP REG_0E: COVDET (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0E_I_LimEn_Pos        (15UL)                    /*!< MDR_BKP REG_0E: I_LimEn (Bit 15)                      */
#define MDR_BKP_REG_0E_I_LimEn_Msk        (0x8000UL)                /*!< MDR_BKP REG_0E: I_LimEn (Bitfield-Mask: 0x01)         */
/* ========================================================  REG_0F  ========================================================= */
#define MDR_BKP_REG_0F_LSE_ON_Pos         (0UL)                     /*!< MDR_BKP REG_0F: LSE_ON (Bit 0)                        */
#define MDR_BKP_REG_0F_LSE_ON_Msk         (0x1UL)                   /*!< MDR_BKP REG_0F: LSE_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_LSE_BYP_Pos        (1UL)                     /*!< MDR_BKP REG_0F: LSE_BYP (Bit 1)                       */
#define MDR_BKP_REG_0F_LSE_BYP_Msk        (0x2UL)                   /*!< MDR_BKP REG_0F: LSE_BYP (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_RTC_SEL_Pos        (2UL)                     /*!< MDR_BKP REG_0F: RTC_SEL (Bit 2)                       */
#define MDR_BKP_REG_0F_RTC_SEL_Msk        (0xcUL)                   /*!< MDR_BKP REG_0F: RTC_SEL (Bitfield-Mask: 0x03)         */
#define MDR_BKP_REG_0F_RTC_EN_Pos         (4UL)                     /*!< MDR_BKP REG_0F: RTC_EN (Bit 4)                        */
#define MDR_BKP_REG_0F_RTC_EN_Msk         (0x10UL)                  /*!< MDR_BKP REG_0F: RTC_EN (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_RTC_CAL_Pos        (5UL)                     /*!< MDR_BKP REG_0F: RTC_CAL (Bit 5)                       */
#define MDR_BKP_REG_0F_RTC_CAL_Msk        (0x1fe0UL)                /*!< MDR_BKP REG_0F: RTC_CAL (Bitfield-Mask: 0xff)         */
#define MDR_BKP_REG_0F_LSE_RDY_Pos        (13UL)                    /*!< MDR_BKP REG_0F: LSE_RDY (Bit 13)                      */
#define MDR_BKP_REG_0F_LSE_RDY_Msk        (0x2000UL)                /*!< MDR_BKP REG_0F: LSE_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_LSI_ON_Pos         (15UL)                    /*!< MDR_BKP REG_0F: LSI_ON (Bit 15)                       */
#define MDR_BKP_REG_0F_LSI_ON_Msk         (0x8000UL)                /*!< MDR_BKP REG_0F: LSI_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_LSI_TRIM_Pos       (16UL)                    /*!< MDR_BKP REG_0F: LSI_TRIM (Bit 16)                     */
#define MDR_BKP_REG_0F_LSI_TRIM_Msk       (0x1f0000UL)              /*!< MDR_BKP REG_0F: LSI_TRIM (Bitfield-Mask: 0x1f)        */
#define MDR_BKP_REG_0F_LSI_RDY_Pos        (21UL)                    /*!< MDR_BKP REG_0F: LSI_RDY (Bit 21)                      */
#define MDR_BKP_REG_0F_LSI_RDY_Msk        (0x200000UL)              /*!< MDR_BKP REG_0F: LSI_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_HSI_ON_Pos         (22UL)                    /*!< MDR_BKP REG_0F: HSI_ON (Bit 22)                       */
#define MDR_BKP_REG_0F_HSI_ON_Msk         (0x400000UL)              /*!< MDR_BKP REG_0F: HSI_ON (Bitfield-Mask: 0x01)          */
#define MDR_BKP_REG_0F_HSI_RDY_Pos        (23UL)                    /*!< MDR_BKP REG_0F: HSI_RDY (Bit 23)                      */
#define MDR_BKP_REG_0F_HSI_RDY_Msk        (0x800000UL)              /*!< MDR_BKP REG_0F: HSI_RDY (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_HSI_TRIM_Pos       (24UL)                    /*!< MDR_BKP REG_0F: HSI_TRIM (Bit 24)                     */
#define MDR_BKP_REG_0F_HSI_TRIM_Msk       (0x3f000000UL)            /*!< MDR_BKP REG_0F: HSI_TRIM (Bitfield-Mask: 0x3f)        */
#define MDR_BKP_REG_0F_Standby_Pos        (30UL)                    /*!< MDR_BKP REG_0F: Standby (Bit 30)                      */
#define MDR_BKP_REG_0F_Standby_Msk        (0x40000000UL)            /*!< MDR_BKP REG_0F: Standby (Bitfield-Mask: 0x01)         */
#define MDR_BKP_REG_0F_RTC_RESET_Pos      (31UL)                    /*!< MDR_BKP REG_0F: RTC_RESET (Bit 31)                    */
#define MDR_BKP_REG_0F_RTC_RESET_Msk      (0x80000000UL)            /*!< MDR_BKP REG_0F: RTC_RESET (Bitfield-Mask: 0x01)       */
/* ========================================================  RTC_CNT  ======================================================== */
/* ========================================================  RTC_DIV  ======================================================== */
#define MDR_BKP_RTC_DIV_Value_Pos         (0UL)                     /*!< MDR_BKP RTC_DIV: Value (Bit 0)                        */
#define MDR_BKP_RTC_DIV_Value_Msk         (0xfffffUL)               /*!< MDR_BKP RTC_DIV: Value (Bitfield-Mask: 0xfffff)       */
/* ========================================================  RTC_PRL  ======================================================== */
#define MDR_BKP_RTC_PRL_Value_Pos         (0UL)                     /*!< MDR_BKP RTC_PRL: Value (Bit 0)                        */
#define MDR_BKP_RTC_PRL_Value_Msk         (0xfffffUL)               /*!< MDR_BKP RTC_PRL: Value (Bitfield-Mask: 0xfffff)       */
/* =======================================================  RTC_ALRM  ======================================================== */
#define MDR_BKP_RTC_ALRM_Value_Pos        (0UL)                     /*!< MDR_BKP RTC_ALRM: Value (Bit 0)                       */
#define MDR_BKP_RTC_ALRM_Value_Msk        (0xffffffffUL)            /*!< MDR_BKP RTC_ALRM: Value (Bitfield-Mask: 0xffffffff)   */
/* ========================================================  RTC_CS  ========================================================= */
#define MDR_BKP_RTC_CS_OWF_Pos            (0UL)                     /*!< MDR_BKP RTC_CS: OWF (Bit 0)                           */
#define MDR_BKP_RTC_CS_OWF_Msk            (0x1UL)                   /*!< MDR_BKP RTC_CS: OWF (Bitfield-Mask: 0x01)             */
#define MDR_BKP_RTC_CS_SECF_Pos           (1UL)                     /*!< MDR_BKP RTC_CS: SECF (Bit 1)                          */
#define MDR_BKP_RTC_CS_SECF_Msk           (0x2UL)                   /*!< MDR_BKP RTC_CS: SECF (Bitfield-Mask: 0x01)            */
#define MDR_BKP_RTC_CS_ALRF_Pos           (2UL)                     /*!< MDR_BKP RTC_CS: ALRF (Bit 2)                          */
#define MDR_BKP_RTC_CS_ALRF_Msk           (0x4UL)                   /*!< MDR_BKP RTC_CS: ALRF (Bitfield-Mask: 0x01)            */
#define MDR_BKP_RTC_CS_OWF_IE_Pos         (3UL)                     /*!< MDR_BKP RTC_CS: OWF_IE (Bit 3)                        */
#define MDR_BKP_RTC_CS_OWF_IE_Msk         (0x8UL)                   /*!< MDR_BKP RTC_CS: OWF_IE (Bitfield-Mask: 0x01)          */
#define MDR_BKP_RTC_CS_SECF_IE_Pos        (4UL)                     /*!< MDR_BKP RTC_CS: SECF_IE (Bit 4)                       */
#define MDR_BKP_RTC_CS_SECF_IE_Msk        (0x10UL)                  /*!< MDR_BKP RTC_CS: SECF_IE (Bitfield-Mask: 0x01)         */
#define MDR_BKP_RTC_CS_ALRF_IE_Pos        (5UL)                     /*!< MDR_BKP RTC_CS: ALRF_IE (Bit 5)                       */
#define MDR_BKP_RTC_CS_ALRF_IE_Msk        (0x20UL)                  /*!< MDR_BKP RTC_CS: ALRF_IE (Bitfield-Mask: 0x01)         */
#define MDR_BKP_RTC_CS_WEC_Pos            (6UL)                     /*!< MDR_BKP RTC_CS: WEC (Bit 6)                           */
#define MDR_BKP_RTC_CS_WEC_Msk            (0x40UL)                  /*!< MDR_BKP RTC_CS: WEC (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                         MDR_ADCUI                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL1  ========================================================= */
#define MDR_ADCUI_CTRL1_I0EN_Pos          (0UL)                     /*!< MDR_ADCUI CTRL1: I0EN (Bit 0)                         */
#define MDR_ADCUI_CTRL1_I0EN_Msk          (0x1UL)                   /*!< MDR_ADCUI CTRL1: I0EN (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_CTRL1_V0EN_Pos          (1UL)                     /*!< MDR_ADCUI CTRL1: V0EN (Bit 1)                         */
#define MDR_ADCUI_CTRL1_V0EN_Msk          (0x2UL)                   /*!< MDR_ADCUI CTRL1: V0EN (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_CTRL1_I1EN_Pos          (2UL)                     /*!< MDR_ADCUI CTRL1: I1EN (Bit 2)                         */
#define MDR_ADCUI_CTRL1_I1EN_Msk          (0x4UL)                   /*!< MDR_ADCUI CTRL1: I1EN (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_CTRL1_V1EN_Pos          (3UL)                     /*!< MDR_ADCUI CTRL1: V1EN (Bit 3)                         */
#define MDR_ADCUI_CTRL1_V1EN_Msk          (0x8UL)                   /*!< MDR_ADCUI CTRL1: V1EN (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_CTRL1_I2EN_Pos          (4UL)                     /*!< MDR_ADCUI CTRL1: I2EN (Bit 4)                         */
#define MDR_ADCUI_CTRL1_I2EN_Msk          (0x10UL)                  /*!< MDR_ADCUI CTRL1: I2EN (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_CTRL1_V2EN_Pos          (5UL)                     /*!< MDR_ADCUI CTRL1: V2EN (Bit 5)                         */
#define MDR_ADCUI_CTRL1_V2EN_Msk          (0x20UL)                  /*!< MDR_ADCUI CTRL1: V2EN (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_CTRL1_I3EN_Pos          (6UL)                     /*!< MDR_ADCUI CTRL1: I3EN (Bit 6)                         */
#define MDR_ADCUI_CTRL1_I3EN_Msk          (0x40UL)                  /*!< MDR_ADCUI CTRL1: I3EN (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_CTRL1_RESOL_Pos         (7UL)                     /*!< MDR_ADCUI CTRL1: RESOL (Bit 7)                        */
#define MDR_ADCUI_CTRL1_RESOL_Msk         (0x80UL)                  /*!< MDR_ADCUI CTRL1: RESOL (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_CTRL1_ZXLPF_Pos         (8UL)                     /*!< MDR_ADCUI CTRL1: ZXLPF (Bit 8)                        */
#define MDR_ADCUI_CTRL1_ZXLPF_Msk         (0x100UL)                 /*!< MDR_ADCUI CTRL1: ZXLPF (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_CTRL1_PER_Length_Pos    (9UL)                     /*!< MDR_ADCUI CTRL1: PER_Length (Bit 9)                   */
#define MDR_ADCUI_CTRL1_PER_Length_Msk    (0xe00UL)                 /*!< MDR_ADCUI CTRL1: PER_Length (Bitfield-Mask: 0x07)     */
#define MDR_ADCUI_CTRL1_APNOLOAD_Pos      (12UL)                    /*!< MDR_ADCUI CTRL1: APNOLOAD (Bit 12)                    */
#define MDR_ADCUI_CTRL1_APNOLOAD_Msk      (0x3000UL)                /*!< MDR_ADCUI CTRL1: APNOLOAD (Bitfield-Mask: 0x03)       */
#define MDR_ADCUI_CTRL1_VARNOLOAD_Pos     (15UL)                    /*!< MDR_ADCUI CTRL1: VARNOLOAD (Bit 15)                   */
#define MDR_ADCUI_CTRL1_VARNOLOAD_Msk     (0x18000UL)               /*!< MDR_ADCUI CTRL1: VARNOLOAD (Bitfield-Mask: 0x03)      */
#define MDR_ADCUI_CTRL1_VANOLOAD_Pos      (17UL)                    /*!< MDR_ADCUI CTRL1: VANOLOAD (Bit 17)                    */
#define MDR_ADCUI_CTRL1_VANOLOAD_Msk      (0x60000UL)               /*!< MDR_ADCUI CTRL1: VANOLOAD (Bitfield-Mask: 0x03)       */
#define MDR_ADCUI_CTRL1_FREQSEL_Pos       (19UL)                    /*!< MDR_ADCUI CTRL1: FREQSEL (Bit 19)                     */
#define MDR_ADCUI_CTRL1_FREQSEL_Msk       (0x80000UL)               /*!< MDR_ADCUI CTRL1: FREQSEL (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_CTRL1_VREF_SEL_Pos      (20UL)                    /*!< MDR_ADCUI CTRL1: VREF_SEL (Bit 20)                    */
#define MDR_ADCUI_CTRL1_VREF_SEL_Msk      (0x100000UL)              /*!< MDR_ADCUI CTRL1: VREF_SEL (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_CTRL1_BUF_BYP_Pos       (21UL)                    /*!< MDR_ADCUI CTRL1: BUF_BYP (Bit 21)                     */
#define MDR_ADCUI_CTRL1_BUF_BYP_Msk       (0x200000UL)              /*!< MDR_ADCUI CTRL1: BUF_BYP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_CTRL1_CHOP_EN_Pos       (22UL)                    /*!< MDR_ADCUI CTRL1: CHOP_EN (Bit 22)                     */
#define MDR_ADCUI_CTRL1_CHOP_EN_Msk       (0x400000UL)              /*!< MDR_ADCUI CTRL1: CHOP_EN (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_CTRL1_CHOP_FREQ_Pos     (23UL)                    /*!< MDR_ADCUI CTRL1: CHOP_FREQ (Bit 23)                   */
#define MDR_ADCUI_CTRL1_CHOP_FREQ_Msk     (0x1800000UL)             /*!< MDR_ADCUI CTRL1: CHOP_FREQ (Bitfield-Mask: 0x03)      */
#define MDR_ADCUI_CTRL1_ZXRMS_Pos         (27UL)                    /*!< MDR_ADCUI CTRL1: ZXRMS (Bit 27)                       */
#define MDR_ADCUI_CTRL1_ZXRMS_Msk         (0x8000000UL)             /*!< MDR_ADCUI CTRL1: ZXRMS (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_CTRL1_RESET_DIG_Pos     (28UL)                    /*!< MDR_ADCUI CTRL1: RESET_DIG (Bit 28)                   */
#define MDR_ADCUI_CTRL1_RESET_DIG_Msk     (0x10000000UL)            /*!< MDR_ADCUI CTRL1: RESET_DIG (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_CTRL1_IBOOST_Pos        (29UL)                    /*!< MDR_ADCUI CTRL1: IBOOST (Bit 29)                      */
#define MDR_ADCUI_CTRL1_IBOOST_Msk        (0x20000000UL)            /*!< MDR_ADCUI CTRL1: IBOOST (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_CTRL1_OSR_CONF_Pos      (30UL)                    /*!< MDR_ADCUI CTRL1: OSR_CONF (Bit 30)                    */
#define MDR_ADCUI_CTRL1_OSR_CONF_Msk      (0xc0000000UL)            /*!< MDR_ADCUI CTRL1: OSR_CONF (Bitfield-Mask: 0x03)       */
/* =========================================================  CTRL2  ========================================================= */
#define MDR_ADCUI_CTRL2_SAGLVL_Pos        (0UL)                     /*!< MDR_ADCUI CTRL2: SAGLVL (Bit 0)                       */
#define MDR_ADCUI_CTRL2_SAGLVL_Msk        (0xffffUL)                /*!< MDR_ADCUI CTRL2: SAGLVL (Bitfield-Mask: 0xffff)       */
#define MDR_ADCUI_CTRL2_SAGCYC_Pos        (16UL)                    /*!< MDR_ADCUI CTRL2: SAGCYC (Bit 16)                      */
#define MDR_ADCUI_CTRL2_SAGCYC_Msk        (0xff0000UL)              /*!< MDR_ADCUI CTRL2: SAGCYC (Bitfield-Mask: 0xff)         */
/* =========================================================  CTRL3  ========================================================= */
#define MDR_ADCUI_CTRL3_ZTXOUT_Pos        (0UL)                     /*!< MDR_ADCUI CTRL3: ZTXOUT (Bit 0)                       */
#define MDR_ADCUI_CTRL3_ZTXOUT_Msk        (0xfffUL)                 /*!< MDR_ADCUI CTRL3: ZTXOUT (Bitfield-Mask: 0xfff)        */
/* =========================================================  F0CTR  ========================================================= */
#define MDR_ADCUI_F0CTR_I0NTEN_Pos        (0UL)                     /*!< MDR_ADCUI F0CTR: I0NTEN (Bit 0)                       */
#define MDR_ADCUI_F0CTR_I0NTEN_Msk        (0x1UL)                   /*!< MDR_ADCUI F0CTR: I0NTEN (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0CTR_I3NTEN_Pos        (1UL)                     /*!< MDR_ADCUI F0CTR: I3NTEN (Bit 1)                       */
#define MDR_ADCUI_F0CTR_I3NTEN_Msk        (0x2UL)                   /*!< MDR_ADCUI F0CTR: I3NTEN (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0CTR_VASEL_Pos         (2UL)                     /*!< MDR_ADCUI F0CTR: VASEL (Bit 2)                        */
#define MDR_ADCUI_F0CTR_VASEL_Msk         (0x4UL)                   /*!< MDR_ADCUI F0CTR: VASEL (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F0CTR_RARS_Pos          (3UL)                     /*!< MDR_ADCUI F0CTR: RARS (Bit 3)                         */
#define MDR_ADCUI_F0CTR_RARS_Msk          (0x8UL)                   /*!< MDR_ADCUI F0CTR: RARS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F0CTR_RRRS_Pos          (4UL)                     /*!< MDR_ADCUI F0CTR: RRRS (Bit 4)                         */
#define MDR_ADCUI_F0CTR_RRRS_Msk          (0x10UL)                  /*!< MDR_ADCUI F0CTR: RRRS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F0CTR_RVRS_Pos          (5UL)                     /*!< MDR_ADCUI F0CTR: RVRS (Bit 5)                         */
#define MDR_ADCUI_F0CTR_RVRS_Msk          (0x20UL)                  /*!< MDR_ADCUI F0CTR: RVRS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F0CTR_I0GAIN_Pos        (6UL)                     /*!< MDR_ADCUI F0CTR: I0GAIN (Bit 6)                       */
#define MDR_ADCUI_F0CTR_I0GAIN_Msk        (0xc0UL)                  /*!< MDR_ADCUI F0CTR: I0GAIN (Bitfield-Mask: 0x03)         */
#define MDR_ADCUI_F0CTR_VGAIN_Pos         (8UL)                     /*!< MDR_ADCUI F0CTR: VGAIN (Bit 8)                        */
#define MDR_ADCUI_F0CTR_VGAIN_Msk         (0x300UL)                 /*!< MDR_ADCUI F0CTR: VGAIN (Bitfield-Mask: 0x03)          */
#define MDR_ADCUI_F0CTR_VPHASE_Pos        (10UL)                    /*!< MDR_ADCUI F0CTR: VPHASE (Bit 10)                      */
#define MDR_ADCUI_F0CTR_VPHASE_Msk        (0x3fc00UL)               /*!< MDR_ADCUI F0CTR: VPHASE (Bitfield-Mask: 0xff)         */
#define MDR_ADCUI_F0CTR_I3GAIN_Pos        (18UL)                    /*!< MDR_ADCUI F0CTR: I3GAIN (Bit 18)                      */
#define MDR_ADCUI_F0CTR_I3GAIN_Msk        (0xc0000UL)               /*!< MDR_ADCUI F0CTR: I3GAIN (Bitfield-Mask: 0x03)         */
#define MDR_ADCUI_F0CTR_IRMSOS_Pos        (20UL)                    /*!< MDR_ADCUI F0CTR: IRMSOS (Bit 20)                      */
#define MDR_ADCUI_F0CTR_IRMSOS_Msk        (0xfff00000UL)            /*!< MDR_ADCUI F0CTR: IRMSOS (Bitfield-Mask: 0xfff)        */
/* =========================================================  F0WC  ========================================================== */
#define MDR_ADCUI_F0WC_WATTOS_Pos         (0UL)                     /*!< MDR_ADCUI F0WC: WATTOS (Bit 0)                        */
#define MDR_ADCUI_F0WC_WATTOS_Msk         (0xffffUL)                /*!< MDR_ADCUI F0WC: WATTOS (Bitfield-Mask: 0xffff)        */
#define MDR_ADCUI_F0WC_WGAIN_Pos          (16UL)                    /*!< MDR_ADCUI F0WC: WGAIN (Bit 16)                        */
#define MDR_ADCUI_F0WC_WGAIN_Msk          (0xfff0000UL)             /*!< MDR_ADCUI F0WC: WGAIN (Bitfield-Mask: 0xfff)          */
/* ========================================================  F0WATTP  ======================================================== */
#define MDR_ADCUI_F0WATTP_WATTHRP_Pos     (0UL)                     /*!< MDR_ADCUI F0WATTP: WATTHRP (Bit 0)                    */
#define MDR_ADCUI_F0WATTP_WATTHRP_Msk     (0xffffffffUL)            /*!< MDR_ADCUI F0WATTP: WATTHRP (Bitfield-Mask: 0xffffffff) */
/* ========================================================  F0WATTN  ======================================================== */
#define MDR_ADCUI_F0WATTN_WATTHRN_Pos     (0UL)                     /*!< MDR_ADCUI F0WATTN: WATTHRN (Bit 0)                    */
#define MDR_ADCUI_F0WATTN_WATTHRN_Msk     (0xffffffffUL)            /*!< MDR_ADCUI F0WATTN: WATTHRN (Bitfield-Mask: 0xffffffff) */
/* =========================================================  F0VC  ========================================================== */
#define MDR_ADCUI_F0VC_VAROS_Pos          (0UL)                     /*!< MDR_ADCUI F0VC: VAROS (Bit 0)                         */
#define MDR_ADCUI_F0VC_VAROS_Msk          (0xffffUL)                /*!< MDR_ADCUI F0VC: VAROS (Bitfield-Mask: 0xffff)         */
#define MDR_ADCUI_F0VC_VARGAIN_Pos        (16UL)                    /*!< MDR_ADCUI F0VC: VARGAIN (Bit 16)                      */
#define MDR_ADCUI_F0VC_VARGAIN_Msk        (0xfff0000UL)             /*!< MDR_ADCUI F0VC: VARGAIN (Bitfield-Mask: 0xfff)        */
/* ========================================================  F0VARP  ========================================================= */
#define MDR_ADCUI_F0VARP_VARHRP_Pos       (0UL)                     /*!< MDR_ADCUI F0VARP: VARHRP (Bit 0)                      */
#define MDR_ADCUI_F0VARP_VARHRP_Msk       (0xffffffffUL)            /*!< MDR_ADCUI F0VARP: VARHRP (Bitfield-Mask: 0xffffffff)  */
/* ========================================================  F0VARN  ========================================================= */
#define MDR_ADCUI_F0VARN_VARHRN_Pos       (0UL)                     /*!< MDR_ADCUI F0VARN: VARHRN (Bit 0)                      */
#define MDR_ADCUI_F0VARN_VARHRN_Msk       (0xffffffffUL)            /*!< MDR_ADCUI F0VARN: VARHRN (Bitfield-Mask: 0xffffffff)  */
/* =========================================================  F0AC  ========================================================== */
#define MDR_ADCUI_F0AC_VRMSOS_Pos         (0UL)                     /*!< MDR_ADCUI F0AC: VRMSOS (Bit 0)                        */
#define MDR_ADCUI_F0AC_VRMSOS_Msk         (0xfffUL)                 /*!< MDR_ADCUI F0AC: VRMSOS (Bitfield-Mask: 0xfff)         */
#define MDR_ADCUI_F0AC_VAGAIN_Pos         (16UL)                    /*!< MDR_ADCUI F0AC: VAGAIN (Bit 16)                       */
#define MDR_ADCUI_F0AC_VAGAIN_Msk         (0xfff0000UL)             /*!< MDR_ADCUI F0AC: VAGAIN (Bitfield-Mask: 0xfff)         */
/* =========================================================  F0VR  ========================================================== */
#define MDR_ADCUI_F0VR_VAHR_Pos           (0UL)                     /*!< MDR_ADCUI F0VR: VAHR (Bit 0)                          */
#define MDR_ADCUI_F0VR_VAHR_Msk           (0xffffffffUL)            /*!< MDR_ADCUI F0VR: VAHR (Bitfield-Mask: 0xffffffff)      */
/* =========================================================  F0MD0  ========================================================= */
#define MDR_ADCUI_F0MD0_VSEL_Pos          (0UL)                     /*!< MDR_ADCUI F0MD0: VSEL (Bit 0)                         */
#define MDR_ADCUI_F0MD0_VSEL_Msk          (0x3UL)                   /*!< MDR_ADCUI F0MD0: VSEL (Bitfield-Mask: 0x03)           */
#define MDR_ADCUI_F0MD0_ISEL_Pos          (2UL)                     /*!< MDR_ADCUI F0MD0: ISEL (Bit 2)                         */
#define MDR_ADCUI_F0MD0_ISEL_Msk          (0xcUL)                   /*!< MDR_ADCUI F0MD0: ISEL (Bitfield-Mask: 0x03)           */
#define MDR_ADCUI_F0MD0_ACTS_Pos          (4UL)                     /*!< MDR_ADCUI F0MD0: ACTS (Bit 4)                         */
#define MDR_ADCUI_F0MD0_ACTS_Msk          (0x10UL)                  /*!< MDR_ADCUI F0MD0: ACTS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F0MD0_REACTS_Pos        (5UL)                     /*!< MDR_ADCUI F0MD0: REACTS (Bit 5)                       */
#define MDR_ADCUI_F0MD0_REACTS_Msk        (0x20UL)                  /*!< MDR_ADCUI F0MD0: REACTS (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0MD0_IOGAIN_Pos        (6UL)                     /*!< MDR_ADCUI F0MD0: IOGAIN (Bit 6)                       */
#define MDR_ADCUI_F0MD0_IOGAIN_Msk        (0x40UL)                  /*!< MDR_ADCUI F0MD0: IOGAIN (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0MD0_V0GAIN_Pos        (7UL)                     /*!< MDR_ADCUI F0MD0: V0GAIN (Bit 7)                       */
#define MDR_ADCUI_F0MD0_V0GAIN_Msk        (0x80UL)                  /*!< MDR_ADCUI F0MD0: V0GAIN (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0MD0_I3GAIN_Pos        (8UL)                     /*!< MDR_ADCUI F0MD0: I3GAIN (Bit 8)                       */
#define MDR_ADCUI_F0MD0_I3GAIN_Msk        (0x100UL)                 /*!< MDR_ADCUI F0MD0: I3GAIN (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0MD0_PER_FREQ_Pos      (12UL)                    /*!< MDR_ADCUI F0MD0: PER_FREQ (Bit 12)                    */
#define MDR_ADCUI_F0MD0_PER_FREQ_Msk      (0x1ffff000UL)            /*!< MDR_ADCUI F0MD0: PER_FREQ (Bitfield-Mask: 0x1ffff)    */
#define MDR_ADCUI_F0MD0_I3SEL_Pos         (29UL)                    /*!< MDR_ADCUI F0MD0: I3SEL (Bit 29)                       */
#define MDR_ADCUI_F0MD0_I3SEL_Msk         (0x20000000UL)            /*!< MDR_ADCUI F0MD0: I3SEL (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F0MD0_SEL_I_CH_Pos      (30UL)                    /*!< MDR_ADCUI F0MD0: SEL_I_CH (Bit 30)                    */
#define MDR_ADCUI_F0MD0_SEL_I_CH_Msk      (0xc0000000UL)            /*!< MDR_ADCUI F0MD0: SEL_I_CH (Bitfield-Mask: 0x03)       */
/* =========================================================  F0MD1  ========================================================= */
#define MDR_ADCUI_F0MD1_IPKLVL_Pos        (0UL)                     /*!< MDR_ADCUI F0MD1: IPKLVL (Bit 0)                       */
#define MDR_ADCUI_F0MD1_IPKLVL_Msk        (0xffffUL)                /*!< MDR_ADCUI F0MD1: IPKLVL (Bitfield-Mask: 0xffff)       */
#define MDR_ADCUI_F0MD1_VPKLVL_Pos        (16UL)                    /*!< MDR_ADCUI F0MD1: VPKLVL (Bit 16)                      */
#define MDR_ADCUI_F0MD1_VPKLVL_Msk        (0xffff0000UL)            /*!< MDR_ADCUI F0MD1: VPKLVL (Bitfield-Mask: 0xffff)       */
/* ========================================================  F0VPEAK  ======================================================== */
#define MDR_ADCUI_F0VPEAK_IPEAK_Pos       (0UL)                     /*!< MDR_ADCUI F0VPEAK: IPEAK (Bit 0)                      */
#define MDR_ADCUI_F0VPEAK_IPEAK_Msk       (0xffffffUL)              /*!< MDR_ADCUI F0VPEAK: IPEAK (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F0IPEAK  ======================================================== */
#define MDR_ADCUI_F0IPEAK_IPEAK_Pos       (0UL)                     /*!< MDR_ADCUI F0IPEAK: IPEAK (Bit 0)                      */
#define MDR_ADCUI_F0IPEAK_IPEAK_Msk       (0xffffffUL)              /*!< MDR_ADCUI F0IPEAK: IPEAK (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F0VDAT  ========================================================= */
#define MDR_ADCUI_F0VDAT_VDAT_Pos         (0UL)                     /*!< MDR_ADCUI F0VDAT: VDAT (Bit 0)                        */
#define MDR_ADCUI_F0VDAT_VDAT_Msk         (0xffffffUL)              /*!< MDR_ADCUI F0VDAT: VDAT (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F0I0DAT  ======================================================== */
#define MDR_ADCUI_F0I0DAT_I0DAT_Pos       (0UL)                     /*!< MDR_ADCUI F0I0DAT: I0DAT (Bit 0)                      */
#define MDR_ADCUI_F0I0DAT_I0DAT_Msk       (0xffffffUL)              /*!< MDR_ADCUI F0I0DAT: I0DAT (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F0I3DAT  ======================================================== */
#define MDR_ADCUI_F0I3DAT_I3DAT_Pos       (0UL)                     /*!< MDR_ADCUI F0I3DAT: I3DAT (Bit 0)                      */
#define MDR_ADCUI_F0I3DAT_I3DAT_Msk       (0xffffffUL)              /*!< MDR_ADCUI F0I3DAT: I3DAT (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F0VRMS  ========================================================= */
#define MDR_ADCUI_F0VRMS_VRMS_Pos         (0UL)                     /*!< MDR_ADCUI F0VRMS: VRMS (Bit 0)                        */
#define MDR_ADCUI_F0VRMS_VRMS_Msk         (0xffffffUL)              /*!< MDR_ADCUI F0VRMS: VRMS (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F0VRMS2  ======================================================== */
#define MDR_ADCUI_F0VRMS2_VRMS2_Pos       (0UL)                     /*!< MDR_ADCUI F0VRMS2: VRMS2 (Bit 0)                      */
#define MDR_ADCUI_F0VRMS2_VRMS2_Msk       (0xffffffUL)              /*!< MDR_ADCUI F0VRMS2: VRMS2 (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F0IRMS  ========================================================= */
#define MDR_ADCUI_F0IRMS_IRMS_Pos         (0UL)                     /*!< MDR_ADCUI F0IRMS: IRMS (Bit 0)                        */
#define MDR_ADCUI_F0IRMS_IRMS_Msk         (0xffffffUL)              /*!< MDR_ADCUI F0IRMS: IRMS (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F0IRMS2  ======================================================== */
#define MDR_ADCUI_F0IRMS2_IRMS2_Pos       (0UL)                     /*!< MDR_ADCUI F0IRMS2: IRMS2 (Bit 0)                      */
#define MDR_ADCUI_F0IRMS2_IRMS2_Msk       (0xffffffUL)              /*!< MDR_ADCUI F0IRMS2: IRMS2 (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F0STAT  ========================================================= */
#define MDR_ADCUI_F0STAT_VF_EMP_Pos       (0UL)                     /*!< MDR_ADCUI F0STAT: VF_EMP (Bit 0)                      */
#define MDR_ADCUI_F0STAT_VF_EMP_Msk       (0x1UL)                   /*!< MDR_ADCUI F0STAT: VF_EMP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0STAT_VF_FLL_Pos       (1UL)                     /*!< MDR_ADCUI F0STAT: VF_FLL (Bit 1)                      */
#define MDR_ADCUI_F0STAT_VF_FLL_Msk       (0x2UL)                   /*!< MDR_ADCUI F0STAT: VF_FLL (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0STAT_VF_OVER_Pos      (2UL)                     /*!< MDR_ADCUI F0STAT: VF_OVER (Bit 2)                     */
#define MDR_ADCUI_F0STAT_VF_OVER_Msk      (0x4UL)                   /*!< MDR_ADCUI F0STAT: VF_OVER (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_IF_EMP_Pos       (3UL)                     /*!< MDR_ADCUI F0STAT: IF_EMP (Bit 3)                      */
#define MDR_ADCUI_F0STAT_IF_EMP_Msk       (0x8UL)                   /*!< MDR_ADCUI F0STAT: IF_EMP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0STAT_IF_FLL_Pos       (4UL)                     /*!< MDR_ADCUI F0STAT: IF_FLL (Bit 4)                      */
#define MDR_ADCUI_F0STAT_IF_FLL_Msk       (0x10UL)                  /*!< MDR_ADCUI F0STAT: IF_FLL (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0STAT_IF_OVER_Pos      (5UL)                     /*!< MDR_ADCUI F0STAT: IF_OVER (Bit 5)                     */
#define MDR_ADCUI_F0STAT_IF_OVER_Msk      (0x20UL)                  /*!< MDR_ADCUI F0STAT: IF_OVER (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_SAGF_Pos         (6UL)                     /*!< MDR_ADCUI F0STAT: SAGF (Bit 6)                        */
#define MDR_ADCUI_F0STAT_SAGF_Msk         (0x40UL)                  /*!< MDR_ADCUI F0STAT: SAGF (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F0STAT_PEAKVF_Pos       (7UL)                     /*!< MDR_ADCUI F0STAT: PEAKVF (Bit 7)                      */
#define MDR_ADCUI_F0STAT_PEAKVF_Msk       (0x80UL)                  /*!< MDR_ADCUI F0STAT: PEAKVF (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0STAT_PEAKIF_Pos       (8UL)                     /*!< MDR_ADCUI F0STAT: PEAKIF (Bit 8)                      */
#define MDR_ADCUI_F0STAT_PEAKIF_Msk       (0x100UL)                 /*!< MDR_ADCUI F0STAT: PEAKIF (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0STAT_WATTOVP_Pos      (9UL)                     /*!< MDR_ADCUI F0STAT: WATTOVP (Bit 9)                     */
#define MDR_ADCUI_F0STAT_WATTOVP_Msk      (0x200UL)                 /*!< MDR_ADCUI F0STAT: WATTOVP (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_VAROVP_Pos       (10UL)                    /*!< MDR_ADCUI F0STAT: VAROVP (Bit 10)                     */
#define MDR_ADCUI_F0STAT_VAROVP_Msk       (0x400UL)                 /*!< MDR_ADCUI F0STAT: VAROVP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0STAT_VAOV_Pos         (11UL)                    /*!< MDR_ADCUI F0STAT: VAOV (Bit 11)                       */
#define MDR_ADCUI_F0STAT_VAOV_Msk         (0x800UL)                 /*!< MDR_ADCUI F0STAT: VAOV (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F0STAT_ZTXVF_Pos        (12UL)                    /*!< MDR_ADCUI F0STAT: ZTXVF (Bit 12)                      */
#define MDR_ADCUI_F0STAT_ZTXVF_Msk        (0x1000UL)                /*!< MDR_ADCUI F0STAT: ZTXVF (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0STAT_ICHANNEL_Pos     (13UL)                    /*!< MDR_ADCUI F0STAT: ICHANNEL (Bit 13)                   */
#define MDR_ADCUI_F0STAT_ICHANNEL_Msk     (0x2000UL)                /*!< MDR_ADCUI F0STAT: ICHANNEL (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0STAT_FAULTCON_Pos     (14UL)                    /*!< MDR_ADCUI F0STAT: FAULTCON (Bit 14)                   */
#define MDR_ADCUI_F0STAT_FAULTCON_Msk     (0x4000UL)                /*!< MDR_ADCUI F0STAT: FAULTCON (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0STAT_APSIGN_Pos       (15UL)                    /*!< MDR_ADCUI F0STAT: APSIGN (Bit 15)                     */
#define MDR_ADCUI_F0STAT_APSIGN_Msk       (0x8000UL)                /*!< MDR_ADCUI F0STAT: APSIGN (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0STAT_APNLDFL_Pos      (16UL)                    /*!< MDR_ADCUI F0STAT: APNLDFL (Bit 16)                    */
#define MDR_ADCUI_F0STAT_APNLDFL_Msk      (0x10000UL)               /*!< MDR_ADCUI F0STAT: APNLDFL (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_VARSIGN_Pos      (17UL)                    /*!< MDR_ADCUI F0STAT: VARSIGN (Bit 17)                    */
#define MDR_ADCUI_F0STAT_VARSIGN_Msk      (0x20000UL)               /*!< MDR_ADCUI F0STAT: VARSIGN (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_VARNLDFL_Pos     (18UL)                    /*!< MDR_ADCUI F0STAT: VARNLDFL (Bit 18)                   */
#define MDR_ADCUI_F0STAT_VARNLDFL_Msk     (0x40000UL)               /*!< MDR_ADCUI F0STAT: VARNLDFL (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0STAT_VANLDFL_Pos      (20UL)                    /*!< MDR_ADCUI F0STAT: VANLDFL (Bit 20)                    */
#define MDR_ADCUI_F0STAT_VANLDFL_Msk      (0x100000UL)              /*!< MDR_ADCUI F0STAT: VANLDFL (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_ZEROCRS_Pos      (21UL)                    /*!< MDR_ADCUI F0STAT: ZEROCRS (Bit 21)                    */
#define MDR_ADCUI_F0STAT_ZEROCRS_Msk      (0x200000UL)              /*!< MDR_ADCUI F0STAT: ZEROCRS (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_I3F_EMP_Pos      (22UL)                    /*!< MDR_ADCUI F0STAT: I3F_EMP (Bit 22)                    */
#define MDR_ADCUI_F0STAT_I3F_EMP_Msk      (0x400000UL)              /*!< MDR_ADCUI F0STAT: I3F_EMP (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_I3F_FLL_Pos      (23UL)                    /*!< MDR_ADCUI F0STAT: I3F_FLL (Bit 23)                    */
#define MDR_ADCUI_F0STAT_I3F_FLL_Msk      (0x800000UL)              /*!< MDR_ADCUI F0STAT: I3F_FLL (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_I3F_OVER_Pos     (24UL)                    /*!< MDR_ADCUI F0STAT: I3F_OVER (Bit 24)                   */
#define MDR_ADCUI_F0STAT_I3F_OVER_Msk     (0x1000000UL)             /*!< MDR_ADCUI F0STAT: I3F_OVER (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0STAT_WATTOVN_Pos      (25UL)                    /*!< MDR_ADCUI F0STAT: WATTOVN (Bit 25)                    */
#define MDR_ADCUI_F0STAT_WATTOVN_Msk      (0x2000000UL)             /*!< MDR_ADCUI F0STAT: WATTOVN (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0STAT_VAROVN_Pos       (26UL)                    /*!< MDR_ADCUI F0STAT: VAROVN (Bit 26)                     */
#define MDR_ADCUI_F0STAT_VAROVN_Msk       (0x4000000UL)             /*!< MDR_ADCUI F0STAT: VAROVN (Bitfield-Mask: 0x01)        */
/* ========================================================  F0MASK  ========================================================= */
#define MDR_ADCUI_F0MASK_VF_EMPM_Pos      (0UL)                     /*!< MDR_ADCUI F0MASK: VF_EMPM (Bit 0)                     */
#define MDR_ADCUI_F0MASK_VF_EMPM_Msk      (0x1UL)                   /*!< MDR_ADCUI F0MASK: VF_EMPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0MASK_VF_FLLM_Pos      (1UL)                     /*!< MDR_ADCUI F0MASK: VF_FLLM (Bit 1)                     */
#define MDR_ADCUI_F0MASK_VF_FLLM_Msk      (0x2UL)                   /*!< MDR_ADCUI F0MASK: VF_FLLM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0MASK_VF_OVERM_Pos     (2UL)                     /*!< MDR_ADCUI F0MASK: VF_OVERM (Bit 2)                    */
#define MDR_ADCUI_F0MASK_VF_OVERM_Msk     (0x4UL)                   /*!< MDR_ADCUI F0MASK: VF_OVERM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_IF_EMPM_Pos      (3UL)                     /*!< MDR_ADCUI F0MASK: IF_EMPM (Bit 3)                     */
#define MDR_ADCUI_F0MASK_IF_EMPM_Msk      (0x8UL)                   /*!< MDR_ADCUI F0MASK: IF_EMPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0MASK_IF_FLLM_Pos      (4UL)                     /*!< MDR_ADCUI F0MASK: IF_FLLM (Bit 4)                     */
#define MDR_ADCUI_F0MASK_IF_FLLM_Msk      (0x10UL)                  /*!< MDR_ADCUI F0MASK: IF_FLLM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0MASK_IF_OVERM_Pos     (5UL)                     /*!< MDR_ADCUI F0MASK: IF_OVERM (Bit 5)                    */
#define MDR_ADCUI_F0MASK_IF_OVERM_Msk     (0x20UL)                  /*!< MDR_ADCUI F0MASK: IF_OVERM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_SAGFM_Pos        (6UL)                     /*!< MDR_ADCUI F0MASK: SAGFM (Bit 6)                       */
#define MDR_ADCUI_F0MASK_SAGFM_Msk        (0x40UL)                  /*!< MDR_ADCUI F0MASK: SAGFM (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0MASK_PEAKVFM_Pos      (7UL)                     /*!< MDR_ADCUI F0MASK: PEAKVFM (Bit 7)                     */
#define MDR_ADCUI_F0MASK_PEAKVFM_Msk      (0x80UL)                  /*!< MDR_ADCUI F0MASK: PEAKVFM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0MASK_PEAKIFM_Pos      (8UL)                     /*!< MDR_ADCUI F0MASK: PEAKIFM (Bit 8)                     */
#define MDR_ADCUI_F0MASK_PEAKIFM_Msk      (0x100UL)                 /*!< MDR_ADCUI F0MASK: PEAKIFM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0MASK_WATTOVPM_Pos     (9UL)                     /*!< MDR_ADCUI F0MASK: WATTOVPM (Bit 9)                    */
#define MDR_ADCUI_F0MASK_WATTOVPM_Msk     (0x200UL)                 /*!< MDR_ADCUI F0MASK: WATTOVPM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_VAROVPM_Pos      (10UL)                    /*!< MDR_ADCUI F0MASK: VAROVPM (Bit 10)                    */
#define MDR_ADCUI_F0MASK_VAROVPM_Msk      (0x400UL)                 /*!< MDR_ADCUI F0MASK: VAROVPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0MASK_VAOVM_Pos        (11UL)                    /*!< MDR_ADCUI F0MASK: VAOVM (Bit 11)                      */
#define MDR_ADCUI_F0MASK_VAOVM_Msk        (0x800UL)                 /*!< MDR_ADCUI F0MASK: VAOVM (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F0MASK_ZTXVFM_Pos       (12UL)                    /*!< MDR_ADCUI F0MASK: ZTXVFM (Bit 12)                     */
#define MDR_ADCUI_F0MASK_ZTXVFM_Msk       (0x1000UL)                /*!< MDR_ADCUI F0MASK: ZTXVFM (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F0MASK_FAULTCONM_Pos    (14UL)                    /*!< MDR_ADCUI F0MASK: FAULTCONM (Bit 14)                  */
#define MDR_ADCUI_F0MASK_FAULTCONM_Msk    (0x4000UL)                /*!< MDR_ADCUI F0MASK: FAULTCONM (Bitfield-Mask: 0x01)     */
#define MDR_ADCUI_F0MASK_APSIGNM_Pos      (15UL)                    /*!< MDR_ADCUI F0MASK: APSIGNM (Bit 15)                    */
#define MDR_ADCUI_F0MASK_APSIGNM_Msk      (0x8000UL)                /*!< MDR_ADCUI F0MASK: APSIGNM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F0MASK_APNLDFLM_Pos     (16UL)                    /*!< MDR_ADCUI F0MASK: APNLDFLM (Bit 16)                   */
#define MDR_ADCUI_F0MASK_APNLDFLM_Msk     (0x10000UL)               /*!< MDR_ADCUI F0MASK: APNLDFLM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_VARSIGNM_Pos     (17UL)                    /*!< MDR_ADCUI F0MASK: VARSIGNM (Bit 17)                   */
#define MDR_ADCUI_F0MASK_VARSIGNM_Msk     (0x20000UL)               /*!< MDR_ADCUI F0MASK: VARSIGNM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_VARNLDFLM_Pos    (18UL)                    /*!< MDR_ADCUI F0MASK: VARNLDFLM (Bit 18)                  */
#define MDR_ADCUI_F0MASK_VARNLDFLM_Msk    (0x40000UL)               /*!< MDR_ADCUI F0MASK: VARNLDFLM (Bitfield-Mask: 0x01)     */
#define MDR_ADCUI_F0MASK_VANLDFLM_Pos     (20UL)                    /*!< MDR_ADCUI F0MASK: VANLDFLM (Bit 20)                   */
#define MDR_ADCUI_F0MASK_VANLDFLM_Msk     (0x100000UL)              /*!< MDR_ADCUI F0MASK: VANLDFLM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_ZEROCRSM_Pos     (21UL)                    /*!< MDR_ADCUI F0MASK: ZEROCRSM (Bit 21)                   */
#define MDR_ADCUI_F0MASK_ZEROCRSM_Msk     (0x200000UL)              /*!< MDR_ADCUI F0MASK: ZEROCRSM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_I3F_EMPM_Pos     (22UL)                    /*!< MDR_ADCUI F0MASK: I3F_EMPM (Bit 22)                   */
#define MDR_ADCUI_F0MASK_I3F_EMPM_Msk     (0x400000UL)              /*!< MDR_ADCUI F0MASK: I3F_EMPM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_I3F_FLLM_Pos     (23UL)                    /*!< MDR_ADCUI F0MASK: I3F_FLLM (Bit 23)                   */
#define MDR_ADCUI_F0MASK_I3F_FLLM_Msk     (0x800000UL)              /*!< MDR_ADCUI F0MASK: I3F_FLLM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_I3F_OVERM_Pos    (24UL)                    /*!< MDR_ADCUI F0MASK: I3F_OVERM (Bit 24)                  */
#define MDR_ADCUI_F0MASK_I3F_OVERM_Msk    (0x1000000UL)             /*!< MDR_ADCUI F0MASK: I3F_OVERM (Bitfield-Mask: 0x01)     */
#define MDR_ADCUI_F0MASK_WATTOVNM_Pos     (25UL)                    /*!< MDR_ADCUI F0MASK: WATTOVNM (Bit 25)                   */
#define MDR_ADCUI_F0MASK_WATTOVNM_Msk     (0x2000000UL)             /*!< MDR_ADCUI F0MASK: WATTOVNM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F0MASK_VAROVNM_Pos      (26UL)                    /*!< MDR_ADCUI F0MASK: VAROVNM (Bit 26)                    */
#define MDR_ADCUI_F0MASK_VAROVNM_Msk      (0x4000000UL)             /*!< MDR_ADCUI F0MASK: VAROVNM (Bitfield-Mask: 0x01)       */
/* =========================================================  F1CTR  ========================================================= */
#define MDR_ADCUI_F1CTR_INTEN_Pos         (0UL)                     /*!< MDR_ADCUI F1CTR: INTEN (Bit 0)                        */
#define MDR_ADCUI_F1CTR_INTEN_Msk         (0x1UL)                   /*!< MDR_ADCUI F1CTR: INTEN (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F1CTR_VASEL_Pos         (2UL)                     /*!< MDR_ADCUI F1CTR: VASEL (Bit 2)                        */
#define MDR_ADCUI_F1CTR_VASEL_Msk         (0x4UL)                   /*!< MDR_ADCUI F1CTR: VASEL (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F1CTR_RARS_Pos          (3UL)                     /*!< MDR_ADCUI F1CTR: RARS (Bit 3)                         */
#define MDR_ADCUI_F1CTR_RARS_Msk          (0x8UL)                   /*!< MDR_ADCUI F1CTR: RARS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F1CTR_RRRS_Pos          (4UL)                     /*!< MDR_ADCUI F1CTR: RRRS (Bit 4)                         */
#define MDR_ADCUI_F1CTR_RRRS_Msk          (0x10UL)                  /*!< MDR_ADCUI F1CTR: RRRS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F1CTR_RVRS_Pos          (5UL)                     /*!< MDR_ADCUI F1CTR: RVRS (Bit 5)                         */
#define MDR_ADCUI_F1CTR_RVRS_Msk          (0x20UL)                  /*!< MDR_ADCUI F1CTR: RVRS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F1CTR_IGAIN_Pos         (6UL)                     /*!< MDR_ADCUI F1CTR: IGAIN (Bit 6)                        */
#define MDR_ADCUI_F1CTR_IGAIN_Msk         (0xc0UL)                  /*!< MDR_ADCUI F1CTR: IGAIN (Bitfield-Mask: 0x03)          */
#define MDR_ADCUI_F1CTR_VGAIN_Pos         (8UL)                     /*!< MDR_ADCUI F1CTR: VGAIN (Bit 8)                        */
#define MDR_ADCUI_F1CTR_VGAIN_Msk         (0x300UL)                 /*!< MDR_ADCUI F1CTR: VGAIN (Bitfield-Mask: 0x03)          */
#define MDR_ADCUI_F1CTR_VPHASE_Pos        (10UL)                    /*!< MDR_ADCUI F1CTR: VPHASE (Bit 10)                      */
#define MDR_ADCUI_F1CTR_VPHASE_Msk        (0x3fc00UL)               /*!< MDR_ADCUI F1CTR: VPHASE (Bitfield-Mask: 0xff)         */
#define MDR_ADCUI_F1CTR_IRMSOS_Pos        (20UL)                    /*!< MDR_ADCUI F1CTR: IRMSOS (Bit 20)                      */
#define MDR_ADCUI_F1CTR_IRMSOS_Msk        (0xfff00000UL)            /*!< MDR_ADCUI F1CTR: IRMSOS (Bitfield-Mask: 0xfff)        */
/* =========================================================  F1WC  ========================================================== */
#define MDR_ADCUI_F1WC_WATTOS_Pos         (0UL)                     /*!< MDR_ADCUI F1WC: WATTOS (Bit 0)                        */
#define MDR_ADCUI_F1WC_WATTOS_Msk         (0xffffUL)                /*!< MDR_ADCUI F1WC: WATTOS (Bitfield-Mask: 0xffff)        */
#define MDR_ADCUI_F1WC_WGAIN_Pos          (16UL)                    /*!< MDR_ADCUI F1WC: WGAIN (Bit 16)                        */
#define MDR_ADCUI_F1WC_WGAIN_Msk          (0xfff0000UL)             /*!< MDR_ADCUI F1WC: WGAIN (Bitfield-Mask: 0xfff)          */
/* ========================================================  F1WATTP  ======================================================== */
#define MDR_ADCUI_F1WATTP_WATTHRP_Pos     (0UL)                     /*!< MDR_ADCUI F1WATTP: WATTHRP (Bit 0)                    */
#define MDR_ADCUI_F1WATTP_WATTHRP_Msk     (0xffffffffUL)            /*!< MDR_ADCUI F1WATTP: WATTHRP (Bitfield-Mask: 0xffffffff) */
/* ========================================================  F1WATTN  ======================================================== */
#define MDR_ADCUI_F1WATTN_WATTHRN_Pos     (0UL)                     /*!< MDR_ADCUI F1WATTN: WATTHRN (Bit 0)                    */
#define MDR_ADCUI_F1WATTN_WATTHRN_Msk     (0xffffffffUL)            /*!< MDR_ADCUI F1WATTN: WATTHRN (Bitfield-Mask: 0xffffffff) */
/* =========================================================  F1VC  ========================================================== */
#define MDR_ADCUI_F1VC_VAROS_Pos          (0UL)                     /*!< MDR_ADCUI F1VC: VAROS (Bit 0)                         */
#define MDR_ADCUI_F1VC_VAROS_Msk          (0xffffUL)                /*!< MDR_ADCUI F1VC: VAROS (Bitfield-Mask: 0xffff)         */
#define MDR_ADCUI_F1VC_VARGAIN_Pos        (16UL)                    /*!< MDR_ADCUI F1VC: VARGAIN (Bit 16)                      */
#define MDR_ADCUI_F1VC_VARGAIN_Msk        (0xfff0000UL)             /*!< MDR_ADCUI F1VC: VARGAIN (Bitfield-Mask: 0xfff)        */
/* ========================================================  F1VARP  ========================================================= */
#define MDR_ADCUI_F1VARP_VARHRP_Pos       (0UL)                     /*!< MDR_ADCUI F1VARP: VARHRP (Bit 0)                      */
#define MDR_ADCUI_F1VARP_VARHRP_Msk       (0xffffffffUL)            /*!< MDR_ADCUI F1VARP: VARHRP (Bitfield-Mask: 0xffffffff)  */
/* ========================================================  F1VARN  ========================================================= */
#define MDR_ADCUI_F1VARN_VARHRN_Pos       (0UL)                     /*!< MDR_ADCUI F1VARN: VARHRN (Bit 0)                      */
#define MDR_ADCUI_F1VARN_VARHRN_Msk       (0xffffffffUL)            /*!< MDR_ADCUI F1VARN: VARHRN (Bitfield-Mask: 0xffffffff)  */
/* =========================================================  F1AC  ========================================================== */
#define MDR_ADCUI_F1AC_VRMSOS_Pos         (0UL)                     /*!< MDR_ADCUI F1AC: VRMSOS (Bit 0)                        */
#define MDR_ADCUI_F1AC_VRMSOS_Msk         (0xfffUL)                 /*!< MDR_ADCUI F1AC: VRMSOS (Bitfield-Mask: 0xfff)         */
#define MDR_ADCUI_F1AC_VAGAIN_Pos         (16UL)                    /*!< MDR_ADCUI F1AC: VAGAIN (Bit 16)                       */
#define MDR_ADCUI_F1AC_VAGAIN_Msk         (0xfff0000UL)             /*!< MDR_ADCUI F1AC: VAGAIN (Bitfield-Mask: 0xfff)         */
/* =========================================================  F1VR  ========================================================== */
#define MDR_ADCUI_F1VR_VAHR_Pos           (0UL)                     /*!< MDR_ADCUI F1VR: VAHR (Bit 0)                          */
#define MDR_ADCUI_F1VR_VAHR_Msk           (0xffffffffUL)            /*!< MDR_ADCUI F1VR: VAHR (Bitfield-Mask: 0xffffffff)      */
/* =========================================================  F1MD0  ========================================================= */
#define MDR_ADCUI_F1MD0_VSEL_Pos          (0UL)                     /*!< MDR_ADCUI F1MD0: VSEL (Bit 0)                         */
#define MDR_ADCUI_F1MD0_VSEL_Msk          (0x3UL)                   /*!< MDR_ADCUI F1MD0: VSEL (Bitfield-Mask: 0x03)           */
#define MDR_ADCUI_F1MD0_ISEL_Pos          (2UL)                     /*!< MDR_ADCUI F1MD0: ISEL (Bit 2)                         */
#define MDR_ADCUI_F1MD0_ISEL_Msk          (0xcUL)                   /*!< MDR_ADCUI F1MD0: ISEL (Bitfield-Mask: 0x03)           */
#define MDR_ADCUI_F1MD0_ACTS_Pos          (4UL)                     /*!< MDR_ADCUI F1MD0: ACTS (Bit 4)                         */
#define MDR_ADCUI_F1MD0_ACTS_Msk          (0x10UL)                  /*!< MDR_ADCUI F1MD0: ACTS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F1MD0_REACTS_Pos        (5UL)                     /*!< MDR_ADCUI F1MD0: REACTS (Bit 5)                       */
#define MDR_ADCUI_F1MD0_REACTS_Msk        (0x20UL)                  /*!< MDR_ADCUI F1MD0: REACTS (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F1MD0_IGAIN_Pos         (6UL)                     /*!< MDR_ADCUI F1MD0: IGAIN (Bit 6)                        */
#define MDR_ADCUI_F1MD0_IGAIN_Msk         (0x40UL)                  /*!< MDR_ADCUI F1MD0: IGAIN (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F1MD0_VGAIN_Pos         (7UL)                     /*!< MDR_ADCUI F1MD0: VGAIN (Bit 7)                        */
#define MDR_ADCUI_F1MD0_VGAIN_Msk         (0x80UL)                  /*!< MDR_ADCUI F1MD0: VGAIN (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F1MD0_PER_FREQ_Pos      (12UL)                    /*!< MDR_ADCUI F1MD0: PER_FREQ (Bit 12)                    */
#define MDR_ADCUI_F1MD0_PER_FREQ_Msk      (0x1ffff000UL)            /*!< MDR_ADCUI F1MD0: PER_FREQ (Bitfield-Mask: 0x1ffff)    */
/* =========================================================  F1MD1  ========================================================= */
#define MDR_ADCUI_F1MD1_IPKLVL_Pos        (0UL)                     /*!< MDR_ADCUI F1MD1: IPKLVL (Bit 0)                       */
#define MDR_ADCUI_F1MD1_IPKLVL_Msk        (0xffffUL)                /*!< MDR_ADCUI F1MD1: IPKLVL (Bitfield-Mask: 0xffff)       */
#define MDR_ADCUI_F1MD1_VPKLVL_Pos        (16UL)                    /*!< MDR_ADCUI F1MD1: VPKLVL (Bit 16)                      */
#define MDR_ADCUI_F1MD1_VPKLVL_Msk        (0xffff0000UL)            /*!< MDR_ADCUI F1MD1: VPKLVL (Bitfield-Mask: 0xffff)       */
/* =========================================================  F1MD2  ========================================================= */
#define MDR_ADCUI_F1MD2_PhaseV_toV0_Pos   (0UL)                     /*!< MDR_ADCUI F1MD2: PhaseV_toV0 (Bit 0)                  */
#define MDR_ADCUI_F1MD2_PhaseV_toV0_Msk   (0x1ffffUL)               /*!< MDR_ADCUI F1MD2: PhaseV_toV0 (Bitfield-Mask: 0x1ffff) */
/* ========================================================  F1VPEAK  ======================================================== */
#define MDR_ADCUI_F1VPEAK_IPEAK_Pos       (0UL)                     /*!< MDR_ADCUI F1VPEAK: IPEAK (Bit 0)                      */
#define MDR_ADCUI_F1VPEAK_IPEAK_Msk       (0xffffffUL)              /*!< MDR_ADCUI F1VPEAK: IPEAK (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F1IPEAK  ======================================================== */
#define MDR_ADCUI_F1IPEAK_IPEAK_Pos       (0UL)                     /*!< MDR_ADCUI F1IPEAK: IPEAK (Bit 0)                      */
#define MDR_ADCUI_F1IPEAK_IPEAK_Msk       (0xffffffUL)              /*!< MDR_ADCUI F1IPEAK: IPEAK (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F1VDAT  ========================================================= */
#define MDR_ADCUI_F1VDAT_VDAT_Pos         (0UL)                     /*!< MDR_ADCUI F1VDAT: VDAT (Bit 0)                        */
#define MDR_ADCUI_F1VDAT_VDAT_Msk         (0xffffffUL)              /*!< MDR_ADCUI F1VDAT: VDAT (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F1IDAT  ========================================================= */
#define MDR_ADCUI_F1IDAT_IDAT_Pos         (0UL)                     /*!< MDR_ADCUI F1IDAT: IDAT (Bit 0)                        */
#define MDR_ADCUI_F1IDAT_IDAT_Msk         (0xffffffUL)              /*!< MDR_ADCUI F1IDAT: IDAT (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F1VRMS  ========================================================= */
#define MDR_ADCUI_F1VRMS_VRMS_Pos         (0UL)                     /*!< MDR_ADCUI F1VRMS: VRMS (Bit 0)                        */
#define MDR_ADCUI_F1VRMS_VRMS_Msk         (0xffffffUL)              /*!< MDR_ADCUI F1VRMS: VRMS (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F1VRMS2  ======================================================== */
#define MDR_ADCUI_F1VRMS2_VRMS2_Pos       (0UL)                     /*!< MDR_ADCUI F1VRMS2: VRMS2 (Bit 0)                      */
#define MDR_ADCUI_F1VRMS2_VRMS2_Msk       (0xffffffUL)              /*!< MDR_ADCUI F1VRMS2: VRMS2 (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F1IRMS  ========================================================= */
#define MDR_ADCUI_F1IRMS_IRMS_Pos         (0UL)                     /*!< MDR_ADCUI F1IRMS: IRMS (Bit 0)                        */
#define MDR_ADCUI_F1IRMS_IRMS_Msk         (0xffffffUL)              /*!< MDR_ADCUI F1IRMS: IRMS (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F1IRMS2  ======================================================== */
#define MDR_ADCUI_F1IRMS2_IRMS2_Pos       (0UL)                     /*!< MDR_ADCUI F1IRMS2: IRMS2 (Bit 0)                      */
#define MDR_ADCUI_F1IRMS2_IRMS2_Msk       (0xffffffUL)              /*!< MDR_ADCUI F1IRMS2: IRMS2 (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F1STAT  ========================================================= */
#define MDR_ADCUI_F1STAT_VF_EMP_Pos       (0UL)                     /*!< MDR_ADCUI F1STAT: VF_EMP (Bit 0)                      */
#define MDR_ADCUI_F1STAT_VF_EMP_Msk       (0x1UL)                   /*!< MDR_ADCUI F1STAT: VF_EMP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1STAT_VF_FLL_Pos       (1UL)                     /*!< MDR_ADCUI F1STAT: VF_FLL (Bit 1)                      */
#define MDR_ADCUI_F1STAT_VF_FLL_Msk       (0x2UL)                   /*!< MDR_ADCUI F1STAT: VF_FLL (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1STAT_VF_OVER_Pos      (2UL)                     /*!< MDR_ADCUI F1STAT: VF_OVER (Bit 2)                     */
#define MDR_ADCUI_F1STAT_VF_OVER_Msk      (0x4UL)                   /*!< MDR_ADCUI F1STAT: VF_OVER (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1STAT_IF_EMP_Pos       (3UL)                     /*!< MDR_ADCUI F1STAT: IF_EMP (Bit 3)                      */
#define MDR_ADCUI_F1STAT_IF_EMP_Msk       (0x8UL)                   /*!< MDR_ADCUI F1STAT: IF_EMP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1STAT_IF_FLL_Pos       (4UL)                     /*!< MDR_ADCUI F1STAT: IF_FLL (Bit 4)                      */
#define MDR_ADCUI_F1STAT_IF_FLL_Msk       (0x10UL)                  /*!< MDR_ADCUI F1STAT: IF_FLL (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1STAT_IF_OVER_Pos      (5UL)                     /*!< MDR_ADCUI F1STAT: IF_OVER (Bit 5)                     */
#define MDR_ADCUI_F1STAT_IF_OVER_Msk      (0x20UL)                  /*!< MDR_ADCUI F1STAT: IF_OVER (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1STAT_SAGF_Pos         (6UL)                     /*!< MDR_ADCUI F1STAT: SAGF (Bit 6)                        */
#define MDR_ADCUI_F1STAT_SAGF_Msk         (0x40UL)                  /*!< MDR_ADCUI F1STAT: SAGF (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F1STAT_PEAKVF_Pos       (7UL)                     /*!< MDR_ADCUI F1STAT: PEAKVF (Bit 7)                      */
#define MDR_ADCUI_F1STAT_PEAKVF_Msk       (0x80UL)                  /*!< MDR_ADCUI F1STAT: PEAKVF (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1STAT_PEAKIF_Pos       (8UL)                     /*!< MDR_ADCUI F1STAT: PEAKIF (Bit 8)                      */
#define MDR_ADCUI_F1STAT_PEAKIF_Msk       (0x100UL)                 /*!< MDR_ADCUI F1STAT: PEAKIF (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1STAT_WATTOVP_Pos      (9UL)                     /*!< MDR_ADCUI F1STAT: WATTOVP (Bit 9)                     */
#define MDR_ADCUI_F1STAT_WATTOVP_Msk      (0x200UL)                 /*!< MDR_ADCUI F1STAT: WATTOVP (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1STAT_VAROVP_Pos       (10UL)                    /*!< MDR_ADCUI F1STAT: VAROVP (Bit 10)                     */
#define MDR_ADCUI_F1STAT_VAROVP_Msk       (0x400UL)                 /*!< MDR_ADCUI F1STAT: VAROVP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1STAT_VAOV_Pos         (11UL)                    /*!< MDR_ADCUI F1STAT: VAOV (Bit 11)                       */
#define MDR_ADCUI_F1STAT_VAOV_Msk         (0x800UL)                 /*!< MDR_ADCUI F1STAT: VAOV (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F1STAT_ZTXVF_Pos        (12UL)                    /*!< MDR_ADCUI F1STAT: ZTXVF (Bit 12)                      */
#define MDR_ADCUI_F1STAT_ZTXVF_Msk        (0x1000UL)                /*!< MDR_ADCUI F1STAT: ZTXVF (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F1STAT_APSIGN_Pos       (15UL)                    /*!< MDR_ADCUI F1STAT: APSIGN (Bit 15)                     */
#define MDR_ADCUI_F1STAT_APSIGN_Msk       (0x8000UL)                /*!< MDR_ADCUI F1STAT: APSIGN (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1STAT_APNLDFL_Pos      (16UL)                    /*!< MDR_ADCUI F1STAT: APNLDFL (Bit 16)                    */
#define MDR_ADCUI_F1STAT_APNLDFL_Msk      (0x10000UL)               /*!< MDR_ADCUI F1STAT: APNLDFL (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1STAT_VARSIGN_Pos      (17UL)                    /*!< MDR_ADCUI F1STAT: VARSIGN (Bit 17)                    */
#define MDR_ADCUI_F1STAT_VARSIGN_Msk      (0x20000UL)               /*!< MDR_ADCUI F1STAT: VARSIGN (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1STAT_VARNLDFL_Pos     (18UL)                    /*!< MDR_ADCUI F1STAT: VARNLDFL (Bit 18)                   */
#define MDR_ADCUI_F1STAT_VARNLDFL_Msk     (0x40000UL)               /*!< MDR_ADCUI F1STAT: VARNLDFL (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1STAT_VANLDFL_Pos      (20UL)                    /*!< MDR_ADCUI F1STAT: VANLDFL (Bit 20)                    */
#define MDR_ADCUI_F1STAT_VANLDFL_Msk      (0x100000UL)              /*!< MDR_ADCUI F1STAT: VANLDFL (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1STAT_ZEROCRS_Pos      (21UL)                    /*!< MDR_ADCUI F1STAT: ZEROCRS (Bit 21)                    */
#define MDR_ADCUI_F1STAT_ZEROCRS_Msk      (0x200000UL)              /*!< MDR_ADCUI F1STAT: ZEROCRS (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1STAT_WATTOVN_Pos      (25UL)                    /*!< MDR_ADCUI F1STAT: WATTOVN (Bit 25)                    */
#define MDR_ADCUI_F1STAT_WATTOVN_Msk      (0x2000000UL)             /*!< MDR_ADCUI F1STAT: WATTOVN (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1STAT_VAROVN_Pos       (26UL)                    /*!< MDR_ADCUI F1STAT: VAROVN (Bit 26)                     */
#define MDR_ADCUI_F1STAT_VAROVN_Msk       (0x4000000UL)             /*!< MDR_ADCUI F1STAT: VAROVN (Bitfield-Mask: 0x01)        */
/* ========================================================  F1MASK  ========================================================= */
#define MDR_ADCUI_F1MASK_VF_EMPM_Pos      (0UL)                     /*!< MDR_ADCUI F1MASK: VF_EMPM (Bit 0)                     */
#define MDR_ADCUI_F1MASK_VF_EMPM_Msk      (0x1UL)                   /*!< MDR_ADCUI F1MASK: VF_EMPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1MASK_VF_FLLM_Pos      (1UL)                     /*!< MDR_ADCUI F1MASK: VF_FLLM (Bit 1)                     */
#define MDR_ADCUI_F1MASK_VF_FLLM_Msk      (0x2UL)                   /*!< MDR_ADCUI F1MASK: VF_FLLM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1MASK_VF_OVERM_Pos     (2UL)                     /*!< MDR_ADCUI F1MASK: VF_OVERM (Bit 2)                    */
#define MDR_ADCUI_F1MASK_VF_OVERM_Msk     (0x4UL)                   /*!< MDR_ADCUI F1MASK: VF_OVERM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1MASK_IF_EMPM_Pos      (3UL)                     /*!< MDR_ADCUI F1MASK: IF_EMPM (Bit 3)                     */
#define MDR_ADCUI_F1MASK_IF_EMPM_Msk      (0x8UL)                   /*!< MDR_ADCUI F1MASK: IF_EMPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1MASK_IF_FLLM_Pos      (4UL)                     /*!< MDR_ADCUI F1MASK: IF_FLLM (Bit 4)                     */
#define MDR_ADCUI_F1MASK_IF_FLLM_Msk      (0x10UL)                  /*!< MDR_ADCUI F1MASK: IF_FLLM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1MASK_IF_OVERM_Pos     (5UL)                     /*!< MDR_ADCUI F1MASK: IF_OVERM (Bit 5)                    */
#define MDR_ADCUI_F1MASK_IF_OVERM_Msk     (0x20UL)                  /*!< MDR_ADCUI F1MASK: IF_OVERM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1MASK_SAGFM_Pos        (6UL)                     /*!< MDR_ADCUI F1MASK: SAGFM (Bit 6)                       */
#define MDR_ADCUI_F1MASK_SAGFM_Msk        (0x40UL)                  /*!< MDR_ADCUI F1MASK: SAGFM (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F1MASK_PEAKVFM_Pos      (7UL)                     /*!< MDR_ADCUI F1MASK: PEAKVFM (Bit 7)                     */
#define MDR_ADCUI_F1MASK_PEAKVFM_Msk      (0x80UL)                  /*!< MDR_ADCUI F1MASK: PEAKVFM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1MASK_PEAKIFM_Pos      (8UL)                     /*!< MDR_ADCUI F1MASK: PEAKIFM (Bit 8)                     */
#define MDR_ADCUI_F1MASK_PEAKIFM_Msk      (0x100UL)                 /*!< MDR_ADCUI F1MASK: PEAKIFM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1MASK_WATTOVPM_Pos     (9UL)                     /*!< MDR_ADCUI F1MASK: WATTOVPM (Bit 9)                    */
#define MDR_ADCUI_F1MASK_WATTOVPM_Msk     (0x200UL)                 /*!< MDR_ADCUI F1MASK: WATTOVPM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1MASK_VAROVPM_Pos      (10UL)                    /*!< MDR_ADCUI F1MASK: VAROVPM (Bit 10)                    */
#define MDR_ADCUI_F1MASK_VAROVPM_Msk      (0x400UL)                 /*!< MDR_ADCUI F1MASK: VAROVPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1MASK_VAOVM_Pos        (11UL)                    /*!< MDR_ADCUI F1MASK: VAOVM (Bit 11)                      */
#define MDR_ADCUI_F1MASK_VAOVM_Msk        (0x800UL)                 /*!< MDR_ADCUI F1MASK: VAOVM (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F1MASK_ZTXVFM_Pos       (12UL)                    /*!< MDR_ADCUI F1MASK: ZTXVFM (Bit 12)                     */
#define MDR_ADCUI_F1MASK_ZTXVFM_Msk       (0x1000UL)                /*!< MDR_ADCUI F1MASK: ZTXVFM (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F1MASK_APSIGNM_Pos      (15UL)                    /*!< MDR_ADCUI F1MASK: APSIGNM (Bit 15)                    */
#define MDR_ADCUI_F1MASK_APSIGNM_Msk      (0x8000UL)                /*!< MDR_ADCUI F1MASK: APSIGNM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F1MASK_APNLDFLM_Pos     (16UL)                    /*!< MDR_ADCUI F1MASK: APNLDFLM (Bit 16)                   */
#define MDR_ADCUI_F1MASK_APNLDFLM_Msk     (0x10000UL)               /*!< MDR_ADCUI F1MASK: APNLDFLM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1MASK_VARSIGNM_Pos     (17UL)                    /*!< MDR_ADCUI F1MASK: VARSIGNM (Bit 17)                   */
#define MDR_ADCUI_F1MASK_VARSIGNM_Msk     (0x20000UL)               /*!< MDR_ADCUI F1MASK: VARSIGNM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1MASK_VARNLDFLM_Pos    (18UL)                    /*!< MDR_ADCUI F1MASK: VARNLDFLM (Bit 18)                  */
#define MDR_ADCUI_F1MASK_VARNLDFLM_Msk    (0x40000UL)               /*!< MDR_ADCUI F1MASK: VARNLDFLM (Bitfield-Mask: 0x01)     */
#define MDR_ADCUI_F1MASK_VANLDFLM_Pos     (20UL)                    /*!< MDR_ADCUI F1MASK: VANLDFLM (Bit 20)                   */
#define MDR_ADCUI_F1MASK_VANLDFLM_Msk     (0x100000UL)              /*!< MDR_ADCUI F1MASK: VANLDFLM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1MASK_ZEROCRSM_Pos     (21UL)                    /*!< MDR_ADCUI F1MASK: ZEROCRSM (Bit 21)                   */
#define MDR_ADCUI_F1MASK_ZEROCRSM_Msk     (0x200000UL)              /*!< MDR_ADCUI F1MASK: ZEROCRSM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1MASK_WATTOVNM_Pos     (25UL)                    /*!< MDR_ADCUI F1MASK: WATTOVNM (Bit 25)                   */
#define MDR_ADCUI_F1MASK_WATTOVNM_Msk     (0x2000000UL)             /*!< MDR_ADCUI F1MASK: WATTOVNM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F1MASK_VAROVNM_Pos      (26UL)                    /*!< MDR_ADCUI F1MASK: VAROVNM (Bit 26)                    */
#define MDR_ADCUI_F1MASK_VAROVNM_Msk      (0x4000000UL)             /*!< MDR_ADCUI F1MASK: VAROVNM (Bitfield-Mask: 0x01)       */
/* =========================================================  F2CTR  ========================================================= */
#define MDR_ADCUI_F2CTR_INTEN_Pos         (0UL)                     /*!< MDR_ADCUI F2CTR: INTEN (Bit 0)                        */
#define MDR_ADCUI_F2CTR_INTEN_Msk         (0x1UL)                   /*!< MDR_ADCUI F2CTR: INTEN (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F2CTR_VASEL_Pos         (2UL)                     /*!< MDR_ADCUI F2CTR: VASEL (Bit 2)                        */
#define MDR_ADCUI_F2CTR_VASEL_Msk         (0x4UL)                   /*!< MDR_ADCUI F2CTR: VASEL (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F2CTR_RARS_Pos          (3UL)                     /*!< MDR_ADCUI F2CTR: RARS (Bit 3)                         */
#define MDR_ADCUI_F2CTR_RARS_Msk          (0x8UL)                   /*!< MDR_ADCUI F2CTR: RARS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F2CTR_RRRS_Pos          (4UL)                     /*!< MDR_ADCUI F2CTR: RRRS (Bit 4)                         */
#define MDR_ADCUI_F2CTR_RRRS_Msk          (0x10UL)                  /*!< MDR_ADCUI F2CTR: RRRS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F2CTR_RVRS_Pos          (5UL)                     /*!< MDR_ADCUI F2CTR: RVRS (Bit 5)                         */
#define MDR_ADCUI_F2CTR_RVRS_Msk          (0x20UL)                  /*!< MDR_ADCUI F2CTR: RVRS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F2CTR_IGAIN_Pos         (6UL)                     /*!< MDR_ADCUI F2CTR: IGAIN (Bit 6)                        */
#define MDR_ADCUI_F2CTR_IGAIN_Msk         (0xc0UL)                  /*!< MDR_ADCUI F2CTR: IGAIN (Bitfield-Mask: 0x03)          */
#define MDR_ADCUI_F2CTR_VGAIN_Pos         (8UL)                     /*!< MDR_ADCUI F2CTR: VGAIN (Bit 8)                        */
#define MDR_ADCUI_F2CTR_VGAIN_Msk         (0x300UL)                 /*!< MDR_ADCUI F2CTR: VGAIN (Bitfield-Mask: 0x03)          */
#define MDR_ADCUI_F2CTR_VPHASE_Pos        (10UL)                    /*!< MDR_ADCUI F2CTR: VPHASE (Bit 10)                      */
#define MDR_ADCUI_F2CTR_VPHASE_Msk        (0x3fc00UL)               /*!< MDR_ADCUI F2CTR: VPHASE (Bitfield-Mask: 0xff)         */
#define MDR_ADCUI_F2CTR_IRMSOS_Pos        (20UL)                    /*!< MDR_ADCUI F2CTR: IRMSOS (Bit 20)                      */
#define MDR_ADCUI_F2CTR_IRMSOS_Msk        (0xfff00000UL)            /*!< MDR_ADCUI F2CTR: IRMSOS (Bitfield-Mask: 0xfff)        */
/* =========================================================  F2WC  ========================================================== */
#define MDR_ADCUI_F2WC_WATTOS_Pos         (0UL)                     /*!< MDR_ADCUI F2WC: WATTOS (Bit 0)                        */
#define MDR_ADCUI_F2WC_WATTOS_Msk         (0xffffUL)                /*!< MDR_ADCUI F2WC: WATTOS (Bitfield-Mask: 0xffff)        */
#define MDR_ADCUI_F2WC_WGAIN_Pos          (16UL)                    /*!< MDR_ADCUI F2WC: WGAIN (Bit 16)                        */
#define MDR_ADCUI_F2WC_WGAIN_Msk          (0xfff0000UL)             /*!< MDR_ADCUI F2WC: WGAIN (Bitfield-Mask: 0xfff)          */
/* ========================================================  F2WATTP  ======================================================== */
#define MDR_ADCUI_F2WATTP_WATTHRP_Pos     (0UL)                     /*!< MDR_ADCUI F2WATTP: WATTHRP (Bit 0)                    */
#define MDR_ADCUI_F2WATTP_WATTHRP_Msk     (0xffffffffUL)            /*!< MDR_ADCUI F2WATTP: WATTHRP (Bitfield-Mask: 0xffffffff) */
/* ========================================================  F2WATTN  ======================================================== */
#define MDR_ADCUI_F2WATTN_WATTHRN_Pos     (0UL)                     /*!< MDR_ADCUI F2WATTN: WATTHRN (Bit 0)                    */
#define MDR_ADCUI_F2WATTN_WATTHRN_Msk     (0xffffffffUL)            /*!< MDR_ADCUI F2WATTN: WATTHRN (Bitfield-Mask: 0xffffffff) */
/* =========================================================  F2VC  ========================================================== */
#define MDR_ADCUI_F2VC_VAROS_Pos          (0UL)                     /*!< MDR_ADCUI F2VC: VAROS (Bit 0)                         */
#define MDR_ADCUI_F2VC_VAROS_Msk          (0xffffUL)                /*!< MDR_ADCUI F2VC: VAROS (Bitfield-Mask: 0xffff)         */
#define MDR_ADCUI_F2VC_VARGAIN_Pos        (16UL)                    /*!< MDR_ADCUI F2VC: VARGAIN (Bit 16)                      */
#define MDR_ADCUI_F2VC_VARGAIN_Msk        (0xfff0000UL)             /*!< MDR_ADCUI F2VC: VARGAIN (Bitfield-Mask: 0xfff)        */
/* ========================================================  F2VARP  ========================================================= */
#define MDR_ADCUI_F2VARP_VARHRP_Pos       (0UL)                     /*!< MDR_ADCUI F2VARP: VARHRP (Bit 0)                      */
#define MDR_ADCUI_F2VARP_VARHRP_Msk       (0xffffffffUL)            /*!< MDR_ADCUI F2VARP: VARHRP (Bitfield-Mask: 0xffffffff)  */
/* ========================================================  F2VARN  ========================================================= */
#define MDR_ADCUI_F2VARN_VARHRN_Pos       (0UL)                     /*!< MDR_ADCUI F2VARN: VARHRN (Bit 0)                      */
#define MDR_ADCUI_F2VARN_VARHRN_Msk       (0xffffffffUL)            /*!< MDR_ADCUI F2VARN: VARHRN (Bitfield-Mask: 0xffffffff)  */
/* =========================================================  F2AC  ========================================================== */
#define MDR_ADCUI_F2AC_VRMSOS_Pos         (0UL)                     /*!< MDR_ADCUI F2AC: VRMSOS (Bit 0)                        */
#define MDR_ADCUI_F2AC_VRMSOS_Msk         (0xfffUL)                 /*!< MDR_ADCUI F2AC: VRMSOS (Bitfield-Mask: 0xfff)         */
#define MDR_ADCUI_F2AC_VAGAIN_Pos         (16UL)                    /*!< MDR_ADCUI F2AC: VAGAIN (Bit 16)                       */
#define MDR_ADCUI_F2AC_VAGAIN_Msk         (0xfff0000UL)             /*!< MDR_ADCUI F2AC: VAGAIN (Bitfield-Mask: 0xfff)         */
/* =========================================================  F2VR  ========================================================== */
#define MDR_ADCUI_F2VR_VAHR_Pos           (0UL)                     /*!< MDR_ADCUI F2VR: VAHR (Bit 0)                          */
#define MDR_ADCUI_F2VR_VAHR_Msk           (0xffffffffUL)            /*!< MDR_ADCUI F2VR: VAHR (Bitfield-Mask: 0xffffffff)      */
/* =========================================================  F2MD0  ========================================================= */
#define MDR_ADCUI_F2MD0_VSEL_Pos          (0UL)                     /*!< MDR_ADCUI F2MD0: VSEL (Bit 0)                         */
#define MDR_ADCUI_F2MD0_VSEL_Msk          (0x3UL)                   /*!< MDR_ADCUI F2MD0: VSEL (Bitfield-Mask: 0x03)           */
#define MDR_ADCUI_F2MD0_ISEL_Pos          (2UL)                     /*!< MDR_ADCUI F2MD0: ISEL (Bit 2)                         */
#define MDR_ADCUI_F2MD0_ISEL_Msk          (0xcUL)                   /*!< MDR_ADCUI F2MD0: ISEL (Bitfield-Mask: 0x03)           */
#define MDR_ADCUI_F2MD0_ACTS_Pos          (4UL)                     /*!< MDR_ADCUI F2MD0: ACTS (Bit 4)                         */
#define MDR_ADCUI_F2MD0_ACTS_Msk          (0x10UL)                  /*!< MDR_ADCUI F2MD0: ACTS (Bitfield-Mask: 0x01)           */
#define MDR_ADCUI_F2MD0_REACTS_Pos        (5UL)                     /*!< MDR_ADCUI F2MD0: REACTS (Bit 5)                       */
#define MDR_ADCUI_F2MD0_REACTS_Msk        (0x20UL)                  /*!< MDR_ADCUI F2MD0: REACTS (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F2MD0_IGAIN_Pos         (6UL)                     /*!< MDR_ADCUI F2MD0: IGAIN (Bit 6)                        */
#define MDR_ADCUI_F2MD0_IGAIN_Msk         (0x40UL)                  /*!< MDR_ADCUI F2MD0: IGAIN (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F2MD0_VGAIN_Pos         (7UL)                     /*!< MDR_ADCUI F2MD0: VGAIN (Bit 7)                        */
#define MDR_ADCUI_F2MD0_VGAIN_Msk         (0x80UL)                  /*!< MDR_ADCUI F2MD0: VGAIN (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F2MD0_PER_FREQ_Pos      (12UL)                    /*!< MDR_ADCUI F2MD0: PER_FREQ (Bit 12)                    */
#define MDR_ADCUI_F2MD0_PER_FREQ_Msk      (0x1ffff000UL)            /*!< MDR_ADCUI F2MD0: PER_FREQ (Bitfield-Mask: 0x1ffff)    */
/* =========================================================  F2MD1  ========================================================= */
#define MDR_ADCUI_F2MD1_IPKLVL_Pos        (0UL)                     /*!< MDR_ADCUI F2MD1: IPKLVL (Bit 0)                       */
#define MDR_ADCUI_F2MD1_IPKLVL_Msk        (0xffffUL)                /*!< MDR_ADCUI F2MD1: IPKLVL (Bitfield-Mask: 0xffff)       */
#define MDR_ADCUI_F2MD1_VPKLVL_Pos        (16UL)                    /*!< MDR_ADCUI F2MD1: VPKLVL (Bit 16)                      */
#define MDR_ADCUI_F2MD1_VPKLVL_Msk        (0xffff0000UL)            /*!< MDR_ADCUI F2MD1: VPKLVL (Bitfield-Mask: 0xffff)       */
/* =========================================================  F2MD2  ========================================================= */
#define MDR_ADCUI_F2MD2_PhaseV_toV0_Pos   (0UL)                     /*!< MDR_ADCUI F2MD2: PhaseV_toV0 (Bit 0)                  */
#define MDR_ADCUI_F2MD2_PhaseV_toV0_Msk   (0x1ffffUL)               /*!< MDR_ADCUI F2MD2: PhaseV_toV0 (Bitfield-Mask: 0x1ffff) */
/* ========================================================  F2VPEAK  ======================================================== */
#define MDR_ADCUI_F2VPEAK_IPEAK_Pos       (0UL)                     /*!< MDR_ADCUI F2VPEAK: IPEAK (Bit 0)                      */
#define MDR_ADCUI_F2VPEAK_IPEAK_Msk       (0xffffffUL)              /*!< MDR_ADCUI F2VPEAK: IPEAK (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F2IPEAK  ======================================================== */
#define MDR_ADCUI_F2IPEAK_IPEAK_Pos       (0UL)                     /*!< MDR_ADCUI F2IPEAK: IPEAK (Bit 0)                      */
#define MDR_ADCUI_F2IPEAK_IPEAK_Msk       (0xffffffUL)              /*!< MDR_ADCUI F2IPEAK: IPEAK (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F2VDAT  ========================================================= */
#define MDR_ADCUI_F2VDAT_VDAT_Pos         (0UL)                     /*!< MDR_ADCUI F2VDAT: VDAT (Bit 0)                        */
#define MDR_ADCUI_F2VDAT_VDAT_Msk         (0xffffffUL)              /*!< MDR_ADCUI F2VDAT: VDAT (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F2IDAT  ========================================================= */
#define MDR_ADCUI_F2IDAT_IDAT_Pos         (0UL)                     /*!< MDR_ADCUI F2IDAT: IDAT (Bit 0)                        */
#define MDR_ADCUI_F2IDAT_IDAT_Msk         (0xffffffUL)              /*!< MDR_ADCUI F2IDAT: IDAT (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F2VRMS  ========================================================= */
#define MDR_ADCUI_F2VRMS_VRMS_Pos         (0UL)                     /*!< MDR_ADCUI F2VRMS: VRMS (Bit 0)                        */
#define MDR_ADCUI_F2VRMS_VRMS_Msk         (0xffffffUL)              /*!< MDR_ADCUI F2VRMS: VRMS (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F2VRMS2  ======================================================== */
#define MDR_ADCUI_F2VRMS2_VRMS2_Pos       (0UL)                     /*!< MDR_ADCUI F2VRMS2: VRMS2 (Bit 0)                      */
#define MDR_ADCUI_F2VRMS2_VRMS2_Msk       (0xffffffUL)              /*!< MDR_ADCUI F2VRMS2: VRMS2 (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F2IRMS  ========================================================= */
#define MDR_ADCUI_F2IRMS_IRMS_Pos         (0UL)                     /*!< MDR_ADCUI F2IRMS: IRMS (Bit 0)                        */
#define MDR_ADCUI_F2IRMS_IRMS_Msk         (0xffffffUL)              /*!< MDR_ADCUI F2IRMS: IRMS (Bitfield-Mask: 0xffffff)      */
/* ========================================================  F2IRMS2  ======================================================== */
#define MDR_ADCUI_F2IRMS2_IRMS2_Pos       (0UL)                     /*!< MDR_ADCUI F2IRMS2: IRMS2 (Bit 0)                      */
#define MDR_ADCUI_F2IRMS2_IRMS2_Msk       (0xffffffUL)              /*!< MDR_ADCUI F2IRMS2: IRMS2 (Bitfield-Mask: 0xffffff)    */
/* ========================================================  F2STAT  ========================================================= */
#define MDR_ADCUI_F2STAT_VF_EMP_Pos       (0UL)                     /*!< MDR_ADCUI F2STAT: VF_EMP (Bit 0)                      */
#define MDR_ADCUI_F2STAT_VF_EMP_Msk       (0x1UL)                   /*!< MDR_ADCUI F2STAT: VF_EMP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2STAT_VF_FLL_Pos       (1UL)                     /*!< MDR_ADCUI F2STAT: VF_FLL (Bit 1)                      */
#define MDR_ADCUI_F2STAT_VF_FLL_Msk       (0x2UL)                   /*!< MDR_ADCUI F2STAT: VF_FLL (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2STAT_VF_OVER_Pos      (2UL)                     /*!< MDR_ADCUI F2STAT: VF_OVER (Bit 2)                     */
#define MDR_ADCUI_F2STAT_VF_OVER_Msk      (0x4UL)                   /*!< MDR_ADCUI F2STAT: VF_OVER (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2STAT_IF_EMP_Pos       (3UL)                     /*!< MDR_ADCUI F2STAT: IF_EMP (Bit 3)                      */
#define MDR_ADCUI_F2STAT_IF_EMP_Msk       (0x8UL)                   /*!< MDR_ADCUI F2STAT: IF_EMP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2STAT_IF_FLL_Pos       (4UL)                     /*!< MDR_ADCUI F2STAT: IF_FLL (Bit 4)                      */
#define MDR_ADCUI_F2STAT_IF_FLL_Msk       (0x10UL)                  /*!< MDR_ADCUI F2STAT: IF_FLL (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2STAT_IF_OVER_Pos      (5UL)                     /*!< MDR_ADCUI F2STAT: IF_OVER (Bit 5)                     */
#define MDR_ADCUI_F2STAT_IF_OVER_Msk      (0x20UL)                  /*!< MDR_ADCUI F2STAT: IF_OVER (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2STAT_SAGF_Pos         (6UL)                     /*!< MDR_ADCUI F2STAT: SAGF (Bit 6)                        */
#define MDR_ADCUI_F2STAT_SAGF_Msk         (0x40UL)                  /*!< MDR_ADCUI F2STAT: SAGF (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F2STAT_PEAKVF_Pos       (7UL)                     /*!< MDR_ADCUI F2STAT: PEAKVF (Bit 7)                      */
#define MDR_ADCUI_F2STAT_PEAKVF_Msk       (0x80UL)                  /*!< MDR_ADCUI F2STAT: PEAKVF (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2STAT_PEAKIF_Pos       (8UL)                     /*!< MDR_ADCUI F2STAT: PEAKIF (Bit 8)                      */
#define MDR_ADCUI_F2STAT_PEAKIF_Msk       (0x100UL)                 /*!< MDR_ADCUI F2STAT: PEAKIF (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2STAT_WATTOVP_Pos      (9UL)                     /*!< MDR_ADCUI F2STAT: WATTOVP (Bit 9)                     */
#define MDR_ADCUI_F2STAT_WATTOVP_Msk      (0x200UL)                 /*!< MDR_ADCUI F2STAT: WATTOVP (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2STAT_VAROVP_Pos       (10UL)                    /*!< MDR_ADCUI F2STAT: VAROVP (Bit 10)                     */
#define MDR_ADCUI_F2STAT_VAROVP_Msk       (0x400UL)                 /*!< MDR_ADCUI F2STAT: VAROVP (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2STAT_VAOV_Pos         (11UL)                    /*!< MDR_ADCUI F2STAT: VAOV (Bit 11)                       */
#define MDR_ADCUI_F2STAT_VAOV_Msk         (0x800UL)                 /*!< MDR_ADCUI F2STAT: VAOV (Bitfield-Mask: 0x01)          */
#define MDR_ADCUI_F2STAT_ZTXVF_Pos        (12UL)                    /*!< MDR_ADCUI F2STAT: ZTXVF (Bit 12)                      */
#define MDR_ADCUI_F2STAT_ZTXVF_Msk        (0x1000UL)                /*!< MDR_ADCUI F2STAT: ZTXVF (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F2STAT_APSIGN_Pos       (15UL)                    /*!< MDR_ADCUI F2STAT: APSIGN (Bit 15)                     */
#define MDR_ADCUI_F2STAT_APSIGN_Msk       (0x8000UL)                /*!< MDR_ADCUI F2STAT: APSIGN (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2STAT_APNLDFL_Pos      (16UL)                    /*!< MDR_ADCUI F2STAT: APNLDFL (Bit 16)                    */
#define MDR_ADCUI_F2STAT_APNLDFL_Msk      (0x10000UL)               /*!< MDR_ADCUI F2STAT: APNLDFL (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2STAT_VARSIGN_Pos      (17UL)                    /*!< MDR_ADCUI F2STAT: VARSIGN (Bit 17)                    */
#define MDR_ADCUI_F2STAT_VARSIGN_Msk      (0x20000UL)               /*!< MDR_ADCUI F2STAT: VARSIGN (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2STAT_VARNLDFL_Pos     (18UL)                    /*!< MDR_ADCUI F2STAT: VARNLDFL (Bit 18)                   */
#define MDR_ADCUI_F2STAT_VARNLDFL_Msk     (0x40000UL)               /*!< MDR_ADCUI F2STAT: VARNLDFL (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2STAT_VANLDFL_Pos      (20UL)                    /*!< MDR_ADCUI F2STAT: VANLDFL (Bit 20)                    */
#define MDR_ADCUI_F2STAT_VANLDFL_Msk      (0x100000UL)              /*!< MDR_ADCUI F2STAT: VANLDFL (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2STAT_ZEROCRS_Pos      (21UL)                    /*!< MDR_ADCUI F2STAT: ZEROCRS (Bit 21)                    */
#define MDR_ADCUI_F2STAT_ZEROCRS_Msk      (0x200000UL)              /*!< MDR_ADCUI F2STAT: ZEROCRS (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2STAT_WATTOVN_Pos      (25UL)                    /*!< MDR_ADCUI F2STAT: WATTOVN (Bit 25)                    */
#define MDR_ADCUI_F2STAT_WATTOVN_Msk      (0x2000000UL)             /*!< MDR_ADCUI F2STAT: WATTOVN (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2STAT_VAROVN_Pos       (26UL)                    /*!< MDR_ADCUI F2STAT: VAROVN (Bit 26)                     */
#define MDR_ADCUI_F2STAT_VAROVN_Msk       (0x4000000UL)             /*!< MDR_ADCUI F2STAT: VAROVN (Bitfield-Mask: 0x01)        */
/* ========================================================  F2MASK  ========================================================= */
#define MDR_ADCUI_F2MASK_VF_EMPM_Pos      (0UL)                     /*!< MDR_ADCUI F2MASK: VF_EMPM (Bit 0)                     */
#define MDR_ADCUI_F2MASK_VF_EMPM_Msk      (0x1UL)                   /*!< MDR_ADCUI F2MASK: VF_EMPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2MASK_VF_FLLM_Pos      (1UL)                     /*!< MDR_ADCUI F2MASK: VF_FLLM (Bit 1)                     */
#define MDR_ADCUI_F2MASK_VF_FLLM_Msk      (0x2UL)                   /*!< MDR_ADCUI F2MASK: VF_FLLM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2MASK_VF_OVERM_Pos     (2UL)                     /*!< MDR_ADCUI F2MASK: VF_OVERM (Bit 2)                    */
#define MDR_ADCUI_F2MASK_VF_OVERM_Msk     (0x4UL)                   /*!< MDR_ADCUI F2MASK: VF_OVERM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2MASK_IF_EMPM_Pos      (3UL)                     /*!< MDR_ADCUI F2MASK: IF_EMPM (Bit 3)                     */
#define MDR_ADCUI_F2MASK_IF_EMPM_Msk      (0x8UL)                   /*!< MDR_ADCUI F2MASK: IF_EMPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2MASK_IF_FLLM_Pos      (4UL)                     /*!< MDR_ADCUI F2MASK: IF_FLLM (Bit 4)                     */
#define MDR_ADCUI_F2MASK_IF_FLLM_Msk      (0x10UL)                  /*!< MDR_ADCUI F2MASK: IF_FLLM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2MASK_IF_OVERM_Pos     (5UL)                     /*!< MDR_ADCUI F2MASK: IF_OVERM (Bit 5)                    */
#define MDR_ADCUI_F2MASK_IF_OVERM_Msk     (0x20UL)                  /*!< MDR_ADCUI F2MASK: IF_OVERM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2MASK_SAGFM_Pos        (6UL)                     /*!< MDR_ADCUI F2MASK: SAGFM (Bit 6)                       */
#define MDR_ADCUI_F2MASK_SAGFM_Msk        (0x40UL)                  /*!< MDR_ADCUI F2MASK: SAGFM (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F2MASK_PEAKVFM_Pos      (7UL)                     /*!< MDR_ADCUI F2MASK: PEAKVFM (Bit 7)                     */
#define MDR_ADCUI_F2MASK_PEAKVFM_Msk      (0x80UL)                  /*!< MDR_ADCUI F2MASK: PEAKVFM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2MASK_PEAKIFM_Pos      (8UL)                     /*!< MDR_ADCUI F2MASK: PEAKIFM (Bit 8)                     */
#define MDR_ADCUI_F2MASK_PEAKIFM_Msk      (0x100UL)                 /*!< MDR_ADCUI F2MASK: PEAKIFM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2MASK_WATTOVPM_Pos     (9UL)                     /*!< MDR_ADCUI F2MASK: WATTOVPM (Bit 9)                    */
#define MDR_ADCUI_F2MASK_WATTOVPM_Msk     (0x200UL)                 /*!< MDR_ADCUI F2MASK: WATTOVPM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2MASK_VAROVPM_Pos      (10UL)                    /*!< MDR_ADCUI F2MASK: VAROVPM (Bit 10)                    */
#define MDR_ADCUI_F2MASK_VAROVPM_Msk      (0x400UL)                 /*!< MDR_ADCUI F2MASK: VAROVPM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2MASK_VAOVM_Pos        (11UL)                    /*!< MDR_ADCUI F2MASK: VAOVM (Bit 11)                      */
#define MDR_ADCUI_F2MASK_VAOVM_Msk        (0x800UL)                 /*!< MDR_ADCUI F2MASK: VAOVM (Bitfield-Mask: 0x01)         */
#define MDR_ADCUI_F2MASK_ZTXVFM_Pos       (12UL)                    /*!< MDR_ADCUI F2MASK: ZTXVFM (Bit 12)                     */
#define MDR_ADCUI_F2MASK_ZTXVFM_Msk       (0x1000UL)                /*!< MDR_ADCUI F2MASK: ZTXVFM (Bitfield-Mask: 0x01)        */
#define MDR_ADCUI_F2MASK_APSIGNM_Pos      (15UL)                    /*!< MDR_ADCUI F2MASK: APSIGNM (Bit 15)                    */
#define MDR_ADCUI_F2MASK_APSIGNM_Msk      (0x8000UL)                /*!< MDR_ADCUI F2MASK: APSIGNM (Bitfield-Mask: 0x01)       */
#define MDR_ADCUI_F2MASK_APNLDFLM_Pos     (16UL)                    /*!< MDR_ADCUI F2MASK: APNLDFLM (Bit 16)                   */
#define MDR_ADCUI_F2MASK_APNLDFLM_Msk     (0x10000UL)               /*!< MDR_ADCUI F2MASK: APNLDFLM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2MASK_VARSIGNM_Pos     (17UL)                    /*!< MDR_ADCUI F2MASK: VARSIGNM (Bit 17)                   */
#define MDR_ADCUI_F2MASK_VARSIGNM_Msk     (0x20000UL)               /*!< MDR_ADCUI F2MASK: VARSIGNM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2MASK_VARNLDFLM_Pos    (18UL)                    /*!< MDR_ADCUI F2MASK: VARNLDFLM (Bit 18)                  */
#define MDR_ADCUI_F2MASK_VARNLDFLM_Msk    (0x40000UL)               /*!< MDR_ADCUI F2MASK: VARNLDFLM (Bitfield-Mask: 0x01)     */
#define MDR_ADCUI_F2MASK_VANLDFLM_Pos     (20UL)                    /*!< MDR_ADCUI F2MASK: VANLDFLM (Bit 20)                   */
#define MDR_ADCUI_F2MASK_VANLDFLM_Msk     (0x100000UL)              /*!< MDR_ADCUI F2MASK: VANLDFLM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2MASK_ZEROCRSM_Pos     (21UL)                    /*!< MDR_ADCUI F2MASK: ZEROCRSM (Bit 21)                   */
#define MDR_ADCUI_F2MASK_ZEROCRSM_Msk     (0x200000UL)              /*!< MDR_ADCUI F2MASK: ZEROCRSM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2MASK_WATTOVNM_Pos     (25UL)                    /*!< MDR_ADCUI F2MASK: WATTOVNM (Bit 25)                   */
#define MDR_ADCUI_F2MASK_WATTOVNM_Msk     (0x2000000UL)             /*!< MDR_ADCUI F2MASK: WATTOVNM (Bitfield-Mask: 0x01)      */
#define MDR_ADCUI_F2MASK_VAROVNM_Pos      (26UL)                    /*!< MDR_ADCUI F2MASK: VAROVNM (Bit 26)                    */
#define MDR_ADCUI_F2MASK_VAROVNM_Msk      (0x4000000UL)             /*!< MDR_ADCUI F2MASK: VAROVNM (Bitfield-Mask: 0x01)       */
/* =========================================================  CCAL1  ========================================================= */
#define MDR_ADCUI_CCAL1_V0BGAIN_Pos       (0UL)                     /*!< MDR_ADCUI CCAL1: V0BGAIN (Bit 0)                      */
#define MDR_ADCUI_CCAL1_V0BGAIN_Msk       (0xfffUL)                 /*!< MDR_ADCUI CCAL1: V0BGAIN (Bitfield-Mask: 0xfff)       */
#define MDR_ADCUI_CCAL1_I0BGAIN_Pos       (12UL)                    /*!< MDR_ADCUI CCAL1: I0BGAIN (Bit 12)                     */
#define MDR_ADCUI_CCAL1_I0BGAIN_Msk       (0xfff000UL)              /*!< MDR_ADCUI CCAL1: I0BGAIN (Bitfield-Mask: 0xfff)       */
/* =========================================================  CCAL2  ========================================================= */
#define MDR_ADCUI_CCAL2_V1BGAIN_Pos       (0UL)                     /*!< MDR_ADCUI CCAL2: V1BGAIN (Bit 0)                      */
#define MDR_ADCUI_CCAL2_V1BGAIN_Msk       (0xfffUL)                 /*!< MDR_ADCUI CCAL2: V1BGAIN (Bitfield-Mask: 0xfff)       */
#define MDR_ADCUI_CCAL2_I1BGAIN_Pos       (12UL)                    /*!< MDR_ADCUI CCAL2: I1BGAIN (Bit 12)                     */
#define MDR_ADCUI_CCAL2_I1BGAIN_Msk       (0xfff000UL)              /*!< MDR_ADCUI CCAL2: I1BGAIN (Bitfield-Mask: 0xfff)       */
/* =========================================================  CCAL3  ========================================================= */
#define MDR_ADCUI_CCAL3_V2BGAIN_Pos       (0UL)                     /*!< MDR_ADCUI CCAL3: V2BGAIN (Bit 0)                      */
#define MDR_ADCUI_CCAL3_V2BGAIN_Msk       (0xfffUL)                 /*!< MDR_ADCUI CCAL3: V2BGAIN (Bitfield-Mask: 0xfff)       */
#define MDR_ADCUI_CCAL3_I2BGAIN_Pos       (12UL)                    /*!< MDR_ADCUI CCAL3: I2BGAIN (Bit 12)                     */
#define MDR_ADCUI_CCAL3_I2BGAIN_Msk       (0xfff000UL)              /*!< MDR_ADCUI CCAL3: I2BGAIN (Bitfield-Mask: 0xfff)       */
/* =========================================================  CCAL4  ========================================================= */
#define MDR_ADCUI_CCAL4_I3BGAIN_Pos       (0UL)                     /*!< MDR_ADCUI CCAL4: I3BGAIN (Bit 0)                      */
#define MDR_ADCUI_CCAL4_I3BGAIN_Msk       (0xfffUL)                 /*!< MDR_ADCUI CCAL4: I3BGAIN (Bitfield-Mask: 0xfff)       */


/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
#define MDR_UART1_DR_DATA_Pos             (0UL)                     /*!< MDR_UART1 DR: DATA (Bit 0)                            */
#define MDR_UART1_DR_DATA_Msk             (0xffUL)                  /*!< MDR_UART1 DR: DATA (Bitfield-Mask: 0xff)              */
#define MDR_UART1_DR_FE_Pos               (8UL)                     /*!< MDR_UART1 DR: FE (Bit 8)                              */
#define MDR_UART1_DR_FE_Msk               (0x100UL)                 /*!< MDR_UART1 DR: FE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_PE_Pos               (9UL)                     /*!< MDR_UART1 DR: PE (Bit 9)                              */
#define MDR_UART1_DR_PE_Msk               (0x200UL)                 /*!< MDR_UART1 DR: PE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_BE_Pos               (10UL)                    /*!< MDR_UART1 DR: BE (Bit 10)                             */
#define MDR_UART1_DR_BE_Msk               (0x400UL)                 /*!< MDR_UART1 DR: BE (Bitfield-Mask: 0x01)                */
#define MDR_UART1_DR_OE_Pos               (11UL)                    /*!< MDR_UART1 DR: OE (Bit 11)                             */
#define MDR_UART1_DR_OE_Msk               (0x800UL)                 /*!< MDR_UART1 DR: OE (Bitfield-Mask: 0x01)                */
/* ========================================================  RSR_ECR  ======================================================== */
#define MDR_UART1_RSR_ECR_FE_Pos          (0UL)                     /*!< MDR_UART1 RSR_ECR: FE (Bit 0)                         */
#define MDR_UART1_RSR_ECR_FE_Msk          (0x1UL)                   /*!< MDR_UART1 RSR_ECR: FE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_PE_Pos          (1UL)                     /*!< MDR_UART1 RSR_ECR: PE (Bit 1)                         */
#define MDR_UART1_RSR_ECR_PE_Msk          (0x2UL)                   /*!< MDR_UART1 RSR_ECR: PE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_BE_Pos          (2UL)                     /*!< MDR_UART1 RSR_ECR: BE (Bit 2)                         */
#define MDR_UART1_RSR_ECR_BE_Msk          (0x4UL)                   /*!< MDR_UART1 RSR_ECR: BE (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RSR_ECR_OE_Pos          (3UL)                     /*!< MDR_UART1 RSR_ECR: OE (Bit 3)                         */
#define MDR_UART1_RSR_ECR_OE_Msk          (0x8UL)                   /*!< MDR_UART1 RSR_ECR: OE (Bitfield-Mask: 0x01)           */
/* ==========================================================  FR  =========================================================== */
#define MDR_UART1_FR_CTS_Pos              (0UL)                     /*!< MDR_UART1 FR: CTS (Bit 0)                             */
#define MDR_UART1_FR_CTS_Msk              (0x1UL)                   /*!< MDR_UART1 FR: CTS (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_DSR_Pos              (1UL)                     /*!< MDR_UART1 FR: DSR (Bit 1)                             */
#define MDR_UART1_FR_DSR_Msk              (0x2UL)                   /*!< MDR_UART1 FR: DSR (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_DCD_Pos              (2UL)                     /*!< MDR_UART1 FR: DCD (Bit 2)                             */
#define MDR_UART1_FR_DCD_Msk              (0x4UL)                   /*!< MDR_UART1 FR: DCD (Bitfield-Mask: 0x01)               */
#define MDR_UART1_FR_BUSY_Pos             (3UL)                     /*!< MDR_UART1 FR: BUSY (Bit 3)                            */
#define MDR_UART1_FR_BUSY_Msk             (0x8UL)                   /*!< MDR_UART1 FR: BUSY (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RXFE_Pos             (4UL)                     /*!< MDR_UART1 FR: RXFE (Bit 4)                            */
#define MDR_UART1_FR_RXFE_Msk             (0x10UL)                  /*!< MDR_UART1 FR: RXFE (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_TXFF_Pos             (5UL)                     /*!< MDR_UART1 FR: TXFF (Bit 5)                            */
#define MDR_UART1_FR_TXFF_Msk             (0x20UL)                  /*!< MDR_UART1 FR: TXFF (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RXFF_Pos             (6UL)                     /*!< MDR_UART1 FR: RXFF (Bit 6)                            */
#define MDR_UART1_FR_RXFF_Msk             (0x40UL)                  /*!< MDR_UART1 FR: RXFF (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_TXFE_Pos             (7UL)                     /*!< MDR_UART1 FR: TXFE (Bit 7)                            */
#define MDR_UART1_FR_TXFE_Msk             (0x80UL)                  /*!< MDR_UART1 FR: TXFE (Bitfield-Mask: 0x01)              */
#define MDR_UART1_FR_RI_Pos               (8UL)                     /*!< MDR_UART1 FR: RI (Bit 8)                              */
#define MDR_UART1_FR_RI_Msk               (0x100UL)                 /*!< MDR_UART1 FR: RI (Bitfield-Mask: 0x01)                */
/* =========================================================  ILPR  ========================================================== */
#define MDR_UART1_ILPR_DVSR_Pos           (0UL)                     /*!< MDR_UART1 ILPR: DVSR (Bit 0)                          */
#define MDR_UART1_ILPR_DVSR_Msk           (0xffUL)                  /*!< MDR_UART1 ILPR: DVSR (Bitfield-Mask: 0xff)            */
/* =========================================================  IBRD  ========================================================== */
#define MDR_UART1_IBRD_Baud_DivInt_Pos    (0UL)                     /*!< MDR_UART1 IBRD: Baud_DivInt (Bit 0)                   */
#define MDR_UART1_IBRD_Baud_DivInt_Msk    (0xffffUL)                /*!< MDR_UART1 IBRD: Baud_DivInt (Bitfield-Mask: 0xffff)   */
/* =========================================================  FBRD  ========================================================== */
#define MDR_UART1_FBRD_Baud_DivFrac_Pos   (0UL)                     /*!< MDR_UART1 FBRD: Baud_DivFrac (Bit 0)                  */
#define MDR_UART1_FBRD_Baud_DivFrac_Msk   (0x3fUL)                  /*!< MDR_UART1 FBRD: Baud_DivFrac (Bitfield-Mask: 0x3f)    */
/* =========================================================  LCR_H  ========================================================= */
#define MDR_UART1_LCR_H_BRK_Pos           (0UL)                     /*!< MDR_UART1 LCR_H: BRK (Bit 0)                          */
#define MDR_UART1_LCR_H_BRK_Msk           (0x1UL)                   /*!< MDR_UART1 LCR_H: BRK (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_PEN_Pos           (1UL)                     /*!< MDR_UART1 LCR_H: PEN (Bit 1)                          */
#define MDR_UART1_LCR_H_PEN_Msk           (0x2UL)                   /*!< MDR_UART1 LCR_H: PEN (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_EPS_Pos           (2UL)                     /*!< MDR_UART1 LCR_H: EPS (Bit 2)                          */
#define MDR_UART1_LCR_H_EPS_Msk           (0x4UL)                   /*!< MDR_UART1 LCR_H: EPS (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_STP2_Pos          (3UL)                     /*!< MDR_UART1 LCR_H: STP2 (Bit 3)                         */
#define MDR_UART1_LCR_H_STP2_Msk          (0x8UL)                   /*!< MDR_UART1 LCR_H: STP2 (Bitfield-Mask: 0x01)           */
#define MDR_UART1_LCR_H_FEN_Pos           (4UL)                     /*!< MDR_UART1 LCR_H: FEN (Bit 4)                          */
#define MDR_UART1_LCR_H_FEN_Msk           (0x10UL)                  /*!< MDR_UART1 LCR_H: FEN (Bitfield-Mask: 0x01)            */
#define MDR_UART1_LCR_H_WLEN_Pos          (5UL)                     /*!< MDR_UART1 LCR_H: WLEN (Bit 5)                         */
#define MDR_UART1_LCR_H_WLEN_Msk          (0x60UL)                  /*!< MDR_UART1 LCR_H: WLEN (Bitfield-Mask: 0x03)           */
#define MDR_UART1_LCR_H_SPS_Pos           (7UL)                     /*!< MDR_UART1 LCR_H: SPS (Bit 7)                          */
#define MDR_UART1_LCR_H_SPS_Msk           (0x80UL)                  /*!< MDR_UART1 LCR_H: SPS (Bitfield-Mask: 0x01)            */
/* ==========================================================  CR  =========================================================== */
#define MDR_UART1_CR_EN_Pos               (0UL)                     /*!< MDR_UART1 CR: EN (Bit 0)                              */
#define MDR_UART1_CR_EN_Msk               (0x1UL)                   /*!< MDR_UART1 CR: EN (Bitfield-Mask: 0x01)                */
#define MDR_UART1_CR_SIREN_Pos            (1UL)                     /*!< MDR_UART1 CR: SIREN (Bit 1)                           */
#define MDR_UART1_CR_SIREN_Msk            (0x2UL)                   /*!< MDR_UART1 CR: SIREN (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_SIRLP_Pos            (2UL)                     /*!< MDR_UART1 CR: SIRLP (Bit 2)                           */
#define MDR_UART1_CR_SIRLP_Msk            (0x4UL)                   /*!< MDR_UART1 CR: SIRLP (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_LBE_Pos              (7UL)                     /*!< MDR_UART1 CR: LBE (Bit 7)                             */
#define MDR_UART1_CR_LBE_Msk              (0x80UL)                  /*!< MDR_UART1 CR: LBE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_TXE_Pos              (8UL)                     /*!< MDR_UART1 CR: TXE (Bit 8)                             */
#define MDR_UART1_CR_TXE_Msk              (0x100UL)                 /*!< MDR_UART1 CR: TXE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_RXE_Pos              (9UL)                     /*!< MDR_UART1 CR: RXE (Bit 9)                             */
#define MDR_UART1_CR_RXE_Msk              (0x200UL)                 /*!< MDR_UART1 CR: RXE (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_DTR_Pos              (10UL)                    /*!< MDR_UART1 CR: DTR (Bit 10)                            */
#define MDR_UART1_CR_DTR_Msk              (0x400UL)                 /*!< MDR_UART1 CR: DTR (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_RTS_Pos              (11UL)                    /*!< MDR_UART1 CR: RTS (Bit 11)                            */
#define MDR_UART1_CR_RTS_Msk              (0x800UL)                 /*!< MDR_UART1 CR: RTS (Bitfield-Mask: 0x01)               */
#define MDR_UART1_CR_Out1_Pos             (12UL)                    /*!< MDR_UART1 CR: Out1 (Bit 12)                           */
#define MDR_UART1_CR_Out1_Msk             (0x1000UL)                /*!< MDR_UART1 CR: Out1 (Bitfield-Mask: 0x01)              */
#define MDR_UART1_CR_Out2_Pos             (13UL)                    /*!< MDR_UART1 CR: Out2 (Bit 13)                           */
#define MDR_UART1_CR_Out2_Msk             (0x2000UL)                /*!< MDR_UART1 CR: Out2 (Bitfield-Mask: 0x01)              */
#define MDR_UART1_CR_RTSEn_Pos            (14UL)                    /*!< MDR_UART1 CR: RTSEn (Bit 14)                          */
#define MDR_UART1_CR_RTSEn_Msk            (0x4000UL)                /*!< MDR_UART1 CR: RTSEn (Bitfield-Mask: 0x01)             */
#define MDR_UART1_CR_CTSEn_Pos            (15UL)                    /*!< MDR_UART1 CR: CTSEn (Bit 15)                          */
#define MDR_UART1_CR_CTSEn_Msk            (0x8000UL)                /*!< MDR_UART1 CR: CTSEn (Bitfield-Mask: 0x01)             */
/* =========================================================  IFLS  ========================================================== */
#define MDR_UART1_IFLS_TXIFLSES_Pos       (0UL)                     /*!< MDR_UART1 IFLS: TXIFLSES (Bit 0)                      */
#define MDR_UART1_IFLS_TXIFLSES_Msk       (0x7UL)                   /*!< MDR_UART1 IFLS: TXIFLSES (Bitfield-Mask: 0x07)        */
#define MDR_UART1_IFLS_RXIFLSES_Pos       (3UL)                     /*!< MDR_UART1 IFLS: RXIFLSES (Bit 3)                      */
#define MDR_UART1_IFLS_RXIFLSES_Msk       (0x38UL)                  /*!< MDR_UART1 IFLS: RXIFLSES (Bitfield-Mask: 0x07)        */
/* =========================================================  IMSC  ========================================================== */
#define MDR_UART1_IMSC_RIM_IM_Pos         (0UL)                     /*!< MDR_UART1 IMSC: RIM_IM (Bit 0)                        */
#define MDR_UART1_IMSC_RIM_IM_Msk         (0x1UL)                   /*!< MDR_UART1 IMSC: RIM_IM (Bitfield-Mask: 0x01)          */
#define MDR_UART1_IMSC_STCM_IM_Pos        (1UL)                     /*!< MDR_UART1 IMSC: STCM_IM (Bit 1)                       */
#define MDR_UART1_IMSC_STCM_IM_Msk        (0x2UL)                   /*!< MDR_UART1 IMSC: STCM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_DCDM_IM_Pos        (2UL)                     /*!< MDR_UART1 IMSC: DCDM_IM (Bit 2)                       */
#define MDR_UART1_IMSC_DCDM_IM_Msk        (0x4UL)                   /*!< MDR_UART1 IMSC: DCDM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_DSRM_IM_Pos        (3UL)                     /*!< MDR_UART1 IMSC: DSRM_IM (Bit 3)                       */
#define MDR_UART1_IMSC_DSRM_IM_Msk        (0x8UL)                   /*!< MDR_UART1 IMSC: DSRM_IM (Bitfield-Mask: 0x01)         */
#define MDR_UART1_IMSC_RX_IM_Pos          (4UL)                     /*!< MDR_UART1 IMSC: RX_IM (Bit 4)                         */
#define MDR_UART1_IMSC_RX_IM_Msk          (0x10UL)                  /*!< MDR_UART1 IMSC: RX_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_TX_IM_Pos          (5UL)                     /*!< MDR_UART1 IMSC: TX_IM (Bit 5)                         */
#define MDR_UART1_IMSC_TX_IM_Msk          (0x20UL)                  /*!< MDR_UART1 IMSC: TX_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_RT_IM_Pos          (6UL)                     /*!< MDR_UART1 IMSC: RT_IM (Bit 6)                         */
#define MDR_UART1_IMSC_RT_IM_Msk          (0x40UL)                  /*!< MDR_UART1 IMSC: RT_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_FE_IM_Pos          (7UL)                     /*!< MDR_UART1 IMSC: FE_IM (Bit 7)                         */
#define MDR_UART1_IMSC_FE_IM_Msk          (0x80UL)                  /*!< MDR_UART1 IMSC: FE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_PE_IM_Pos          (8UL)                     /*!< MDR_UART1 IMSC: PE_IM (Bit 8)                         */
#define MDR_UART1_IMSC_PE_IM_Msk          (0x100UL)                 /*!< MDR_UART1 IMSC: PE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_BE_IM_Pos          (9UL)                     /*!< MDR_UART1 IMSC: BE_IM (Bit 9)                         */
#define MDR_UART1_IMSC_BE_IM_Msk          (0x200UL)                 /*!< MDR_UART1 IMSC: BE_IM (Bitfield-Mask: 0x01)           */
#define MDR_UART1_IMSC_OE_IM_Pos          (10UL)                    /*!< MDR_UART1 IMSC: OE_IM (Bit 10)                        */
#define MDR_UART1_IMSC_OE_IM_Msk          (0x400UL)                 /*!< MDR_UART1 IMSC: OE_IM (Bitfield-Mask: 0x01)           */
/* ==========================================================  RIS  ========================================================== */
#define MDR_UART1_RIS_RIM_RIS_Pos         (0UL)                     /*!< MDR_UART1 RIS: RIM_RIS (Bit 0)                        */
#define MDR_UART1_RIS_RIM_RIS_Msk         (0x1UL)                   /*!< MDR_UART1 RIS: RIM_RIS (Bitfield-Mask: 0x01)          */
#define MDR_UART1_RIS_STCM_RIS_Pos        (1UL)                     /*!< MDR_UART1 RIS: STCM_RIS (Bit 1)                       */
#define MDR_UART1_RIS_STCM_RIS_Msk        (0x2UL)                   /*!< MDR_UART1 RIS: STCM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_DCDM_RIS_Pos        (2UL)                     /*!< MDR_UART1 RIS: DCDM_RIS (Bit 2)                       */
#define MDR_UART1_RIS_DCDM_RIS_Msk        (0x4UL)                   /*!< MDR_UART1 RIS: DCDM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_DSRM_RIS_Pos        (3UL)                     /*!< MDR_UART1 RIS: DSRM_RIS (Bit 3)                       */
#define MDR_UART1_RIS_DSRM_RIS_Msk        (0x8UL)                   /*!< MDR_UART1 RIS: DSRM_RIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_RIS_RX_RIS_Pos          (4UL)                     /*!< MDR_UART1 RIS: RX_RIS (Bit 4)                         */
#define MDR_UART1_RIS_RX_RIS_Msk          (0x10UL)                  /*!< MDR_UART1 RIS: RX_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_TX_RIS_Pos          (5UL)                     /*!< MDR_UART1 RIS: TX_RIS (Bit 5)                         */
#define MDR_UART1_RIS_TX_RIS_Msk          (0x20UL)                  /*!< MDR_UART1 RIS: TX_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_RT_RIS_Pos          (6UL)                     /*!< MDR_UART1 RIS: RT_RIS (Bit 6)                         */
#define MDR_UART1_RIS_RT_RIS_Msk          (0x40UL)                  /*!< MDR_UART1 RIS: RT_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_FE_RIS_Pos          (7UL)                     /*!< MDR_UART1 RIS: FE_RIS (Bit 7)                         */
#define MDR_UART1_RIS_FE_RIS_Msk          (0x80UL)                  /*!< MDR_UART1 RIS: FE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_PE_RIS_Pos          (8UL)                     /*!< MDR_UART1 RIS: PE_RIS (Bit 8)                         */
#define MDR_UART1_RIS_PE_RIS_Msk          (0x100UL)                 /*!< MDR_UART1 RIS: PE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_BE_RIS_Pos          (9UL)                     /*!< MDR_UART1 RIS: BE_RIS (Bit 9)                         */
#define MDR_UART1_RIS_BE_RIS_Msk          (0x200UL)                 /*!< MDR_UART1 RIS: BE_RIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_RIS_OE_RIS_Pos          (10UL)                    /*!< MDR_UART1 RIS: OE_RIS (Bit 10)                        */
#define MDR_UART1_RIS_OE_RIS_Msk          (0x400UL)                 /*!< MDR_UART1 RIS: OE_RIS (Bitfield-Mask: 0x01)           */
/* ==========================================================  MIS  ========================================================== */
#define MDR_UART1_MIS_RIM_MIS_Pos         (0UL)                     /*!< MDR_UART1 MIS: RIM_MIS (Bit 0)                        */
#define MDR_UART1_MIS_RIM_MIS_Msk         (0x1UL)                   /*!< MDR_UART1 MIS: RIM_MIS (Bitfield-Mask: 0x01)          */
#define MDR_UART1_MIS_STCM_MIS_Pos        (1UL)                     /*!< MDR_UART1 MIS: STCM_MIS (Bit 1)                       */
#define MDR_UART1_MIS_STCM_MIS_Msk        (0x2UL)                   /*!< MDR_UART1 MIS: STCM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_DCDM_MIS_Pos        (2UL)                     /*!< MDR_UART1 MIS: DCDM_MIS (Bit 2)                       */
#define MDR_UART1_MIS_DCDM_MIS_Msk        (0x4UL)                   /*!< MDR_UART1 MIS: DCDM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_DSRM_MIS_Pos        (3UL)                     /*!< MDR_UART1 MIS: DSRM_MIS (Bit 3)                       */
#define MDR_UART1_MIS_DSRM_MIS_Msk        (0x8UL)                   /*!< MDR_UART1 MIS: DSRM_MIS (Bitfield-Mask: 0x01)         */
#define MDR_UART1_MIS_RX_MIS_Pos          (4UL)                     /*!< MDR_UART1 MIS: RX_MIS (Bit 4)                         */
#define MDR_UART1_MIS_RX_MIS_Msk          (0x10UL)                  /*!< MDR_UART1 MIS: RX_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_TX_MIS_Pos          (5UL)                     /*!< MDR_UART1 MIS: TX_MIS (Bit 5)                         */
#define MDR_UART1_MIS_TX_MIS_Msk          (0x20UL)                  /*!< MDR_UART1 MIS: TX_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_RT_MIS_Pos          (6UL)                     /*!< MDR_UART1 MIS: RT_MIS (Bit 6)                         */
#define MDR_UART1_MIS_RT_MIS_Msk          (0x40UL)                  /*!< MDR_UART1 MIS: RT_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_FE_MIS_Pos          (7UL)                     /*!< MDR_UART1 MIS: FE_MIS (Bit 7)                         */
#define MDR_UART1_MIS_FE_MIS_Msk          (0x80UL)                  /*!< MDR_UART1 MIS: FE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_PE_MIS_Pos          (8UL)                     /*!< MDR_UART1 MIS: PE_MIS (Bit 8)                         */
#define MDR_UART1_MIS_PE_MIS_Msk          (0x100UL)                 /*!< MDR_UART1 MIS: PE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_BE_MIS_Pos          (9UL)                     /*!< MDR_UART1 MIS: BE_MIS (Bit 9)                         */
#define MDR_UART1_MIS_BE_MIS_Msk          (0x200UL)                 /*!< MDR_UART1 MIS: BE_MIS (Bitfield-Mask: 0x01)           */
#define MDR_UART1_MIS_OE_MIS_Pos          (10UL)                    /*!< MDR_UART1 MIS: OE_MIS (Bit 10)                        */
#define MDR_UART1_MIS_OE_MIS_Msk          (0x400UL)                 /*!< MDR_UART1 MIS: OE_MIS (Bitfield-Mask: 0x01)           */
/* ==========================================================  ICR  ========================================================== */
#define MDR_UART1_ICR_RIM_IC_Pos          (0UL)                     /*!< MDR_UART1 ICR: RIM_IC (Bit 0)                         */
#define MDR_UART1_ICR_RIM_IC_Msk          (0x1UL)                   /*!< MDR_UART1 ICR: RIM_IC (Bitfield-Mask: 0x01)           */
#define MDR_UART1_ICR_STCM_IC_Pos         (1UL)                     /*!< MDR_UART1 ICR: STCM_IC (Bit 1)                        */
#define MDR_UART1_ICR_STCM_IC_Msk         (0x2UL)                   /*!< MDR_UART1 ICR: STCM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_DCDM_IC_Pos         (2UL)                     /*!< MDR_UART1 ICR: DCDM_IC (Bit 2)                        */
#define MDR_UART1_ICR_DCDM_IC_Msk         (0x4UL)                   /*!< MDR_UART1 ICR: DCDM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_DSRM_IC_Pos         (3UL)                     /*!< MDR_UART1 ICR: DSRM_IC (Bit 3)                        */
#define MDR_UART1_ICR_DSRM_IC_Msk         (0x8UL)                   /*!< MDR_UART1 ICR: DSRM_IC (Bitfield-Mask: 0x01)          */
#define MDR_UART1_ICR_RX_IC_Pos           (4UL)                     /*!< MDR_UART1 ICR: RX_IC (Bit 4)                          */
#define MDR_UART1_ICR_RX_IC_Msk           (0x10UL)                  /*!< MDR_UART1 ICR: RX_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_TX_IC_Pos           (5UL)                     /*!< MDR_UART1 ICR: TX_IC (Bit 5)                          */
#define MDR_UART1_ICR_TX_IC_Msk           (0x20UL)                  /*!< MDR_UART1 ICR: TX_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_RT_IC_Pos           (6UL)                     /*!< MDR_UART1 ICR: RT_IC (Bit 6)                          */
#define MDR_UART1_ICR_RT_IC_Msk           (0x40UL)                  /*!< MDR_UART1 ICR: RT_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_FE_IC_Pos           (7UL)                     /*!< MDR_UART1 ICR: FE_IC (Bit 7)                          */
#define MDR_UART1_ICR_FE_IC_Msk           (0x80UL)                  /*!< MDR_UART1 ICR: FE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_PE_IC_Pos           (8UL)                     /*!< MDR_UART1 ICR: PE_IC (Bit 8)                          */
#define MDR_UART1_ICR_PE_IC_Msk           (0x100UL)                 /*!< MDR_UART1 ICR: PE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_BE_IC_Pos           (9UL)                     /*!< MDR_UART1 ICR: BE_IC (Bit 9)                          */
#define MDR_UART1_ICR_BE_IC_Msk           (0x200UL)                 /*!< MDR_UART1 ICR: BE_IC (Bitfield-Mask: 0x01)            */
#define MDR_UART1_ICR_OE_IC_Pos           (10UL)                    /*!< MDR_UART1 ICR: OE_IC (Bit 10)                         */
#define MDR_UART1_ICR_OE_IC_Msk           (0x400UL)                 /*!< MDR_UART1 ICR: OE_IC (Bitfield-Mask: 0x01)            */
/* =========================================================  DMACR  ========================================================= */
#define MDR_UART1_DMACR_RXDMAE_Pos        (0UL)                     /*!< MDR_UART1 DMACR: RXDMAE (Bit 0)                       */
#define MDR_UART1_DMACR_RXDMAE_Msk        (0x1UL)                   /*!< MDR_UART1 DMACR: RXDMAE (Bitfield-Mask: 0x01)         */
#define MDR_UART1_DMACR_TXDMAE_Pos        (1UL)                     /*!< MDR_UART1 DMACR: TXDMAE (Bit 1)                       */
#define MDR_UART1_DMACR_TXDMAE_Msk        (0x2UL)                   /*!< MDR_UART1 DMACR: TXDMAE (Bitfield-Mask: 0x01)         */
#define MDR_UART1_DMACR_DMAonErr_Pos      (2UL)                     /*!< MDR_UART1 DMACR: DMAonErr (Bit 2)                     */
#define MDR_UART1_DMACR_DMAonErr_Msk      (0x4UL)                   /*!< MDR_UART1 DMACR: DMAonErr (Bitfield-Mask: 0x01)       */
/* ==========================================================  TCR  ========================================================== */
#define MDR_UART1_TCR_ITEN_Pos            (0UL)                     /*!< MDR_UART1 TCR: ITEN (Bit 0)                           */
#define MDR_UART1_TCR_ITEN_Msk            (0x1UL)                   /*!< MDR_UART1 TCR: ITEN (Bitfield-Mask: 0x01)             */
#define MDR_UART1_TCR_TestFIFO_Pos        (1UL)                     /*!< MDR_UART1 TCR: TestFIFO (Bit 1)                       */
#define MDR_UART1_TCR_TestFIFO_Msk        (0x2UL)                   /*!< MDR_UART1 TCR: TestFIFO (Bitfield-Mask: 0x01)         */
#define MDR_UART1_TCR_SIRTest_Pos         (2UL)                     /*!< MDR_UART1 TCR: SIRTest (Bit 2)                        */
#define MDR_UART1_TCR_SIRTest_Msk         (0x4UL)                   /*!< MDR_UART1 TCR: SIRTest (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CNT  ========================================================== */
#define MDR_TIMER1_CNT_Value_Pos          (0UL)                     /*!< MDR_TIMER1 CNT: Value (Bit 0)                         */
#define MDR_TIMER1_CNT_Value_Msk          (0xffffUL)                /*!< MDR_TIMER1 CNT: Value (Bitfield-Mask: 0xffff)         */
/* ==========================================================  PSG  ========================================================== */
#define MDR_TIMER1_PSG_Value_Pos          (0UL)                     /*!< MDR_TIMER1 PSG: Value (Bit 0)                         */
#define MDR_TIMER1_PSG_Value_Msk          (0xffffUL)                /*!< MDR_TIMER1 PSG: Value (Bitfield-Mask: 0xffff)         */
/* ==========================================================  ARR  ========================================================== */
#define MDR_TIMER1_ARR_Value_Pos          (0UL)                     /*!< MDR_TIMER1 ARR: Value (Bit 0)                         */
#define MDR_TIMER1_ARR_Value_Msk          (0xffffUL)                /*!< MDR_TIMER1 ARR: Value (Bitfield-Mask: 0xffff)         */
/* =========================================================  CNTRL  ========================================================= */
#define MDR_TIMER1_CNTRL_CNT_EN_Pos       (0UL)                     /*!< MDR_TIMER1 CNTRL: CNT_EN (Bit 0)                      */
#define MDR_TIMER1_CNTRL_CNT_EN_Msk       (0x1UL)                   /*!< MDR_TIMER1 CNTRL: CNT_EN (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CNTRL_ARRB_EN_Pos      (1UL)                     /*!< MDR_TIMER1 CNTRL: ARRB_EN (Bit 1)                     */
#define MDR_TIMER1_CNTRL_ARRB_EN_Msk      (0x2UL)                   /*!< MDR_TIMER1 CNTRL: ARRB_EN (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_CNTRL_WR_CMPL_Pos      (2UL)                     /*!< MDR_TIMER1 CNTRL: WR_CMPL (Bit 2)                     */
#define MDR_TIMER1_CNTRL_WR_CMPL_Msk      (0x4UL)                   /*!< MDR_TIMER1 CNTRL: WR_CMPL (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_CNTRL_DIR_Pos          (3UL)                     /*!< MDR_TIMER1 CNTRL: DIR (Bit 3)                         */
#define MDR_TIMER1_CNTRL_DIR_Msk          (0x8UL)                   /*!< MDR_TIMER1 CNTRL: DIR (Bitfield-Mask: 0x01)           */
#define MDR_TIMER1_CNTRL_FDTS_Pos         (4UL)                     /*!< MDR_TIMER1 CNTRL: FDTS (Bit 4)                        */
#define MDR_TIMER1_CNTRL_FDTS_Msk         (0x30UL)                  /*!< MDR_TIMER1 CNTRL: FDTS (Bitfield-Mask: 0x03)          */
#define MDR_TIMER1_CNTRL_CNT_MODE_Pos     (6UL)                     /*!< MDR_TIMER1 CNTRL: CNT_MODE (Bit 6)                    */
#define MDR_TIMER1_CNTRL_CNT_MODE_Msk     (0xc0UL)                  /*!< MDR_TIMER1 CNTRL: CNT_MODE (Bitfield-Mask: 0x03)      */
#define MDR_TIMER1_CNTRL_EVENT_SEL_Pos    (8UL)                     /*!< MDR_TIMER1 CNTRL: EVENT_SEL (Bit 8)                   */
#define MDR_TIMER1_CNTRL_EVENT_SEL_Msk    (0xf00UL)                 /*!< MDR_TIMER1 CNTRL: EVENT_SEL (Bitfield-Mask: 0x0f)     */
/* =========================================================  CCR1  ========================================================== */
#define MDR_TIMER1_CCR1_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR1: Value (Bit 0)                        */
#define MDR_TIMER1_CCR1_Value_Msk         (0xffffUL)                /*!< MDR_TIMER1 CCR1: Value (Bitfield-Mask: 0xffff)        */
/* =========================================================  CCR2  ========================================================== */
#define MDR_TIMER1_CCR2_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR2: Value (Bit 0)                        */
#define MDR_TIMER1_CCR2_Value_Msk         (0xffffUL)                /*!< MDR_TIMER1 CCR2: Value (Bitfield-Mask: 0xffff)        */
/* =========================================================  CCR3  ========================================================== */
#define MDR_TIMER1_CCR3_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR3: Value (Bit 0)                        */
#define MDR_TIMER1_CCR3_Value_Msk         (0xffffUL)                /*!< MDR_TIMER1 CCR3: Value (Bitfield-Mask: 0xffff)        */
/* =========================================================  CCR4  ========================================================== */
#define MDR_TIMER1_CCR4_Value_Pos         (0UL)                     /*!< MDR_TIMER1 CCR4: Value (Bit 0)                        */
#define MDR_TIMER1_CCR4_Value_Msk         (0xffffUL)                /*!< MDR_TIMER1 CCR4: Value (Bitfield-Mask: 0xffff)        */
/* =======================================================  CH1_CNTRL  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH1_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH1_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH1_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH1_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH1_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH1_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH1_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH1_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH1_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH1_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH1_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH1_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH1_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH1_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH1_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH1_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH1_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH1_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH1_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH1_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH1_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH1_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH1_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH1_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH1_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH1_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH1_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH1_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH1_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH2_CNTRL  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH2_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH2_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH2_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH2_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH2_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH2_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH2_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH2_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH2_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH2_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH2_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH2_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH2_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH2_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH2_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH2_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH2_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH2_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH2_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH2_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH2_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH2_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH2_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH2_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH2_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH2_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH2_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH2_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH2_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH3_CNTRL  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH3_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH3_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH3_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH3_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH3_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH3_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH3_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH3_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH3_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH3_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH3_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH3_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH3_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH3_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH3_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH3_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH3_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH3_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH3_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH3_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH3_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH3_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH3_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH3_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH3_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH3_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH3_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH3_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH3_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* =======================================================  CH4_CNTRL  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL_CHFLTR_Pos   (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHFLTR (Bit 0)                  */
#define MDR_TIMER1_CH4_CNTRL_CHFLTR_Msk   (0xfUL)                   /*!< MDR_TIMER1 CH4_CNTRL: CHFLTR (Bitfield-Mask: 0x0f)    */
#define MDR_TIMER1_CH4_CNTRL_CHSEL_Pos    (4UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHSEL (Bit 4)                   */
#define MDR_TIMER1_CH4_CNTRL_CHSEL_Msk    (0x30UL)                  /*!< MDR_TIMER1 CH4_CNTRL: CHSEL (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL_CHPSC_Pos    (6UL)                     /*!< MDR_TIMER1 CH4_CNTRL: CHPSC (Bit 6)                   */
#define MDR_TIMER1_CH4_CNTRL_CHPSC_Msk    (0xc0UL)                  /*!< MDR_TIMER1 CH4_CNTRL: CHPSC (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL_OCCE_Pos     (8UL)                     /*!< MDR_TIMER1 CH4_CNTRL: OCCE (Bit 8)                    */
#define MDR_TIMER1_CH4_CNTRL_OCCE_Msk     (0x100UL)                 /*!< MDR_TIMER1 CH4_CNTRL: OCCE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH4_CNTRL_OCCM_Pos     (9UL)                     /*!< MDR_TIMER1 CH4_CNTRL: OCCM (Bit 9)                    */
#define MDR_TIMER1_CH4_CNTRL_OCCM_Msk     (0xe00UL)                 /*!< MDR_TIMER1 CH4_CNTRL: OCCM (Bitfield-Mask: 0x07)      */
#define MDR_TIMER1_CH4_CNTRL_BRKEN_Pos    (12UL)                    /*!< MDR_TIMER1 CH4_CNTRL: BRKEN (Bit 12)                  */
#define MDR_TIMER1_CH4_CNTRL_BRKEN_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH4_CNTRL: BRKEN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH4_CNTRL_ETREN_Pos    (13UL)                    /*!< MDR_TIMER1 CH4_CNTRL: ETREN (Bit 13)                  */
#define MDR_TIMER1_CH4_CNTRL_ETREN_Msk    (0x2000UL)                /*!< MDR_TIMER1 CH4_CNTRL: ETREN (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_CH4_CNTRL_WR_CMPL_Pos  (14UL)                    /*!< MDR_TIMER1 CH4_CNTRL: WR_CMPL (Bit 14)                */
#define MDR_TIMER1_CH4_CNTRL_WR_CMPL_Msk  (0x4000UL)                /*!< MDR_TIMER1 CH4_CNTRL: WR_CMPL (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Pos (15UL)                    /*!< MDR_TIMER1 CH4_CNTRL: CAP_nPWM (Bit 15)               */
#define MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Msk (0x8000UL)                /*!< MDR_TIMER1 CH4_CNTRL: CAP_nPWM (Bitfield-Mask: 0x01)  */
/* ======================================================  CH1_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH1_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH1_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH1_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH1_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH1_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH1_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH1_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH1_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH1_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH1_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH1_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH1_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH1_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH1_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH1_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH1_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH1_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH1_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH1_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH1_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH2_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH2_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH2_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH2_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH2_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH2_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH2_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH2_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH2_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH2_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH2_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH2_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH2_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH2_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH2_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH2_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH2_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH2_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH2_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH2_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH2_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH3_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH3_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH3_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH3_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH3_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH3_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH3_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH3_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH3_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH3_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH3_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH3_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH3_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH3_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH3_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH3_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH3_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH3_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH3_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH3_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH3_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ======================================================  CH4_CNTRL1  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL1_SelOE_Pos   (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: SelOE (Bit 0)                  */
#define MDR_TIMER1_CH4_CNTRL1_SelOE_Msk   (0x3UL)                   /*!< MDR_TIMER1 CH4_CNTRL1: SelOE (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH4_CNTRL1_SelO_Pos    (2UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: SelO (Bit 2)                   */
#define MDR_TIMER1_CH4_CNTRL1_SelO_Msk    (0xcUL)                   /*!< MDR_TIMER1 CH4_CNTRL1: SelO (Bitfield-Mask: 0x03)     */
#define MDR_TIMER1_CH4_CNTRL1_Inv_Pos     (4UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: Inv (Bit 4)                    */
#define MDR_TIMER1_CH4_CNTRL1_Inv_Msk     (0x10UL)                  /*!< MDR_TIMER1 CH4_CNTRL1: Inv (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_CH4_CNTRL1_NSelOE_Pos  (8UL)                     /*!< MDR_TIMER1 CH4_CNTRL1: NSelOE (Bit 8)                 */
#define MDR_TIMER1_CH4_CNTRL1_NSelOE_Msk  (0x300UL)                 /*!< MDR_TIMER1 CH4_CNTRL1: NSelOE (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH4_CNTRL1_NSelO_Pos   (10UL)                    /*!< MDR_TIMER1 CH4_CNTRL1: NSelO (Bit 10)                 */
#define MDR_TIMER1_CH4_CNTRL1_NSelO_Msk   (0xc00UL)                 /*!< MDR_TIMER1 CH4_CNTRL1: NSelO (Bitfield-Mask: 0x03)    */
#define MDR_TIMER1_CH4_CNTRL1_NInv_Pos    (12UL)                    /*!< MDR_TIMER1 CH4_CNTRL1: NInv (Bit 12)                  */
#define MDR_TIMER1_CH4_CNTRL1_NInv_Msk    (0x1000UL)                /*!< MDR_TIMER1 CH4_CNTRL1: NInv (Bitfield-Mask: 0x01)     */
/* ========================================================  CH1_DTG  ======================================================== */
#define MDR_TIMER1_CH1_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH1_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH1_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH1_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH1_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH1_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH1_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH1_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH1_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH1_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH1_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH1_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH2_DTG  ======================================================== */
#define MDR_TIMER1_CH2_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH2_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH2_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH2_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH2_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH2_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH2_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH2_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH2_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH2_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH2_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH2_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH3_DTG  ======================================================== */
#define MDR_TIMER1_CH3_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH3_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH3_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH3_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH3_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH3_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH3_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH3_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH3_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH3_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH3_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH3_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* ========================================================  CH4_DTG  ======================================================== */
#define MDR_TIMER1_CH4_DTG_DTG_Pos        (0UL)                     /*!< MDR_TIMER1 CH4_DTG: DTG (Bit 0)                       */
#define MDR_TIMER1_CH4_DTG_DTG_Msk        (0xfUL)                   /*!< MDR_TIMER1 CH4_DTG: DTG (Bitfield-Mask: 0x0f)         */
#define MDR_TIMER1_CH4_DTG_EDTS_Pos       (4UL)                     /*!< MDR_TIMER1 CH4_DTG: EDTS (Bit 4)                      */
#define MDR_TIMER1_CH4_DTG_EDTS_Msk       (0x10UL)                  /*!< MDR_TIMER1 CH4_DTG: EDTS (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_CH4_DTG_DTGx_Pos       (8UL)                     /*!< MDR_TIMER1 CH4_DTG: DTGx (Bit 8)                      */
#define MDR_TIMER1_CH4_DTG_DTGx_Msk       (0xff00UL)                /*!< MDR_TIMER1 CH4_DTG: DTGx (Bitfield-Mask: 0xff)        */
/* =====================================================  BRKETR_CNTRL  ====================================================== */
#define MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Pos (0UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: BRK_INV (Bit 0)              */
#define MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Msk (0x1UL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: BRK_INV (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Pos (1UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_INV (Bit 1)              */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Msk (0x2UL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_INV (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Pos (2UL)                   /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_PSC (Bit 2)              */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Msk (0xcUL)                 /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_PSC (Bitfield-Mask: 0x03) */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Pos (4UL)                /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_Filter (Bit 4)           */
#define MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Msk (0xf0UL)             /*!< MDR_TIMER1 BRKETR_CNTRL: ETR_Filter (Bitfield-Mask: 0x0f) */
/* ========================================================  STATUS  ========================================================= */
#define MDR_TIMER1_STATUS_CNT_ZERO_Pos    (0UL)                     /*!< MDR_TIMER1 STATUS: CNT_ZERO (Bit 0)                   */
#define MDR_TIMER1_STATUS_CNT_ZERO_Msk    (0x1UL)                   /*!< MDR_TIMER1 STATUS: CNT_ZERO (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_STATUS_CNT_ARR_Pos     (1UL)                     /*!< MDR_TIMER1 STATUS: CNT_ARR (Bit 1)                    */
#define MDR_TIMER1_STATUS_CNT_ARR_Msk     (0x2UL)                   /*!< MDR_TIMER1 STATUS: CNT_ARR (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_STATUS_ETR_RE_Pos      (2UL)                     /*!< MDR_TIMER1 STATUS: ETR_RE (Bit 2)                     */
#define MDR_TIMER1_STATUS_ETR_RE_Msk      (0x4UL)                   /*!< MDR_TIMER1 STATUS: ETR_RE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_STATUS_ETR_FE_Pos      (3UL)                     /*!< MDR_TIMER1 STATUS: ETR_FE (Bit 3)                     */
#define MDR_TIMER1_STATUS_ETR_FE_Msk      (0x8UL)                   /*!< MDR_TIMER1 STATUS: ETR_FE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_STATUS_BRK_Pos         (4UL)                     /*!< MDR_TIMER1 STATUS: BRK (Bit 4)                        */
#define MDR_TIMER1_STATUS_BRK_Msk         (0x10UL)                  /*!< MDR_TIMER1 STATUS: BRK (Bitfield-Mask: 0x01)          */
#define MDR_TIMER1_STATUS_CCR_CAP_CH1_Pos (5UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH1 (Bit 5)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH1_Msk (0x20UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH1 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH2_Pos (6UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH2 (Bit 6)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH2_Msk (0x40UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH2 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH3_Pos (7UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH3 (Bit 7)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH3_Msk (0x80UL)                  /*!< MDR_TIMER1 STATUS: CCR_CAP_CH3 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_CAP_CH4_Pos (8UL)                     /*!< MDR_TIMER1 STATUS: CCR_CAP_CH4 (Bit 8)                */
#define MDR_TIMER1_STATUS_CCR_CAP_CH4_Msk (0x100UL)                 /*!< MDR_TIMER1 STATUS: CCR_CAP_CH4 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH1_Pos (9UL)                     /*!< MDR_TIMER1 STATUS: CCR_REF_CH1 (Bit 9)                */
#define MDR_TIMER1_STATUS_CCR_REF_CH1_Msk (0x200UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH1 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH2_Pos (10UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH2 (Bit 10)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH2_Msk (0x400UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH2 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH3_Pos (11UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH3 (Bit 11)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH3_Msk (0x800UL)                 /*!< MDR_TIMER1 STATUS: CCR_REF_CH3 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR_REF_CH4_Pos (12UL)                    /*!< MDR_TIMER1 STATUS: CCR_REF_CH4 (Bit 12)               */
#define MDR_TIMER1_STATUS_CCR_REF_CH4_Msk (0x1000UL)                /*!< MDR_TIMER1 STATUS: CCR_REF_CH4 (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH1_Pos (13UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH1 (Bit 13)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH1_Msk (0x2000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH1 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH2_Pos (14UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH2 (Bit 14)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH2_Msk (0x4000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH2 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH3_Pos (15UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH3 (Bit 15)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH3_Msk (0x8000UL)               /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH3 (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH4_Pos (16UL)                   /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH4 (Bit 16)              */
#define MDR_TIMER1_STATUS_CCR1_CAP_CH4_Msk (0x10000UL)              /*!< MDR_TIMER1 STATUS: CCR1_CAP_CH4 (Bitfield-Mask: 0x01) */
/* ==========================================================  IE  =========================================================== */
#define MDR_TIMER1_IE_CNT_ZERO_IE_Pos     (0UL)                     /*!< MDR_TIMER1 IE: CNT_ZERO_IE (Bit 0)                    */
#define MDR_TIMER1_IE_CNT_ZERO_IE_Msk     (0x1UL)                   /*!< MDR_TIMER1 IE: CNT_ZERO_IE (Bitfield-Mask: 0x01)      */
#define MDR_TIMER1_IE_CNT_ARR_IE_Pos      (1UL)                     /*!< MDR_TIMER1 IE: CNT_ARR_IE (Bit 1)                     */
#define MDR_TIMER1_IE_CNT_ARR_IE_Msk      (0x2UL)                   /*!< MDR_TIMER1 IE: CNT_ARR_IE (Bitfield-Mask: 0x01)       */
#define MDR_TIMER1_IE_ETR_RE_IE_Pos       (2UL)                     /*!< MDR_TIMER1 IE: ETR_RE_IE (Bit 2)                      */
#define MDR_TIMER1_IE_ETR_RE_IE_Msk       (0x4UL)                   /*!< MDR_TIMER1 IE: ETR_RE_IE (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_IE_ETR_FE_IE_Pos       (3UL)                     /*!< MDR_TIMER1 IE: ETR_FE_IE (Bit 3)                      */
#define MDR_TIMER1_IE_ETR_FE_IE_Msk       (0x8UL)                   /*!< MDR_TIMER1 IE: ETR_FE_IE (Bitfield-Mask: 0x01)        */
#define MDR_TIMER1_IE_BRK_IE_Pos          (4UL)                     /*!< MDR_TIMER1 IE: BRK_IE (Bit 4)                         */
#define MDR_TIMER1_IE_BRK_IE_Msk          (0x10UL)                  /*!< MDR_TIMER1 IE: BRK_IE (Bitfield-Mask: 0x01)           */
#define MDR_TIMER1_IE_CCR_CAP_CH1_IE_Pos  (5UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH1_IE (Bit 5)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH1_IE_Msk  (0x20UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH1_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH2_IE_Pos  (6UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH2_IE (Bit 6)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH2_IE_Msk  (0x40UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH2_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH3_IE_Pos  (7UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH3_IE (Bit 7)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH3_IE_Msk  (0x80UL)                  /*!< MDR_TIMER1 IE: CCR_CAP_CH3_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_CAP_CH4_IE_Pos  (8UL)                     /*!< MDR_TIMER1 IE: CCR_CAP_CH4_IE (Bit 8)                 */
#define MDR_TIMER1_IE_CCR_CAP_CH4_IE_Msk  (0x100UL)                 /*!< MDR_TIMER1 IE: CCR_CAP_CH4_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH1_IE_Pos  (9UL)                     /*!< MDR_TIMER1 IE: CCR_REF_CH1_IE (Bit 9)                 */
#define MDR_TIMER1_IE_CCR_REF_CH1_IE_Msk  (0x200UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH1_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH2_IE_Pos  (10UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH2_IE (Bit 10)                */
#define MDR_TIMER1_IE_CCR_REF_CH2_IE_Msk  (0x400UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH2_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH3_IE_Pos  (11UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH3_IE (Bit 11)                */
#define MDR_TIMER1_IE_CCR_REF_CH3_IE_Msk  (0x800UL)                 /*!< MDR_TIMER1 IE: CCR_REF_CH3_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR_REF_CH4_IE_Pos  (12UL)                    /*!< MDR_TIMER1 IE: CCR_REF_CH4_IE (Bit 12)                */
#define MDR_TIMER1_IE_CCR_REF_CH4_IE_Msk  (0x1000UL)                /*!< MDR_TIMER1 IE: CCR_REF_CH4_IE (Bitfield-Mask: 0x01)   */
#define MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Pos (13UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH1_IE (Bit 13)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Msk (0x2000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH1_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Pos (14UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH2_IE (Bit 14)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Msk (0x4000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH2_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Pos (15UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH3_IE (Bit 15)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Msk (0x8000UL)                /*!< MDR_TIMER1 IE: CCR1_CAP_CH3_IE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Pos (16UL)                    /*!< MDR_TIMER1 IE: CCR1_CAP_CH4_IE (Bit 16)               */
#define MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Msk (0x10000UL)               /*!< MDR_TIMER1 IE: CCR1_CAP_CH4_IE (Bitfield-Mask: 0x01)  */
/* ========================================================  DMA_RE  ========================================================= */
#define MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Pos (0UL)                   /*!< MDR_TIMER1 DMA_RE: CNT_ZERO_DMAE (Bit 0)              */
#define MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Msk (0x1UL)                 /*!< MDR_TIMER1 DMA_RE: CNT_ZERO_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Pos (1UL)                    /*!< MDR_TIMER1 DMA_RE: CNT_ARR_DMAE (Bit 1)               */
#define MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Msk (0x2UL)                  /*!< MDR_TIMER1 DMA_RE: CNT_ARR_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Pos (2UL)                     /*!< MDR_TIMER1 DMA_RE: ETR_RE_DMAE (Bit 2)                */
#define MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Msk (0x4UL)                   /*!< MDR_TIMER1 DMA_RE: ETR_RE_DMAE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Pos (3UL)                     /*!< MDR_TIMER1 DMA_RE: ETR_FE_DMAE (Bit 3)                */
#define MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Msk (0x8UL)                   /*!< MDR_TIMER1 DMA_RE: ETR_FE_DMAE (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_DMA_RE_BRK_DMAE_Pos    (4UL)                     /*!< MDR_TIMER1 DMA_RE: BRK_DMAE (Bit 4)                   */
#define MDR_TIMER1_DMA_RE_BRK_DMAE_Msk    (0x10UL)                  /*!< MDR_TIMER1 DMA_RE: BRK_DMAE (Bitfield-Mask: 0x01)     */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Pos (5UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH1_DMAE (Bit 5)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Msk (0x20UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Pos (6UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH2_DMAE (Bit 6)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Msk (0x40UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Pos (7UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH3_DMAE (Bit 7)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Msk (0x80UL)             /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Pos (8UL)                /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH4_DMAE (Bit 8)           */
#define MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Msk (0x100UL)            /*!< MDR_TIMER1 DMA_RE: CCR_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Pos (9UL)                /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH1_DMAE (Bit 9)           */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Msk (0x200UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Pos (10UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH2_DMAE (Bit 10)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Msk (0x400UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Pos (11UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH3_DMAE (Bit 11)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Msk (0x800UL)            /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Pos (12UL)               /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH4_DMAE (Bit 12)          */
#define MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Msk (0x1000UL)           /*!< MDR_TIMER1 DMA_RE: CCR_REF_CH4_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Pos (13UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH1_DMAE (Bit 13)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Msk (0x2000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH1_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Pos (14UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH2_DMAE (Bit 14)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Msk (0x4000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH2_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Pos (15UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH3_DMAE (Bit 15)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Msk (0x8000UL)          /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH3_DMAE (Bitfield-Mask: 0x01) */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Pos (16UL)              /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH4_DMAE (Bit 16)         */
#define MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Msk (0x10000UL)         /*!< MDR_TIMER1 DMA_RE: CCR1_CAP_CH4_DMAE (Bitfield-Mask: 0x01) */
/* ======================================================  CH1_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH1_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH1_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH1_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH1_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH1_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH1_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH1_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH1_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
/* ======================================================  CH2_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH2_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH2_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH2_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH2_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH2_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH2_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH2_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH2_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
/* ======================================================  CH3_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH3_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH3_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH3_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH3_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH3_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH3_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH3_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH3_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
/* ======================================================  CH4_CNTRL2  ======================================================= */
#define MDR_TIMER1_CH4_CNTRL2_CHSel1_Pos  (0UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CHSel1 (Bit 0)                 */
#define MDR_TIMER1_CH4_CNTRL2_CHSel1_Msk  (0x3UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CHSel1 (Bitfield-Mask: 0x03)   */
#define MDR_TIMER1_CH4_CNTRL2_CCR1_En_Pos (2UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CCR1_En (Bit 2)                */
#define MDR_TIMER1_CH4_CNTRL2_CCR1_En_Msk (0x4UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CCR1_En (Bitfield-Mask: 0x01)  */
#define MDR_TIMER1_CH4_CNTRL2_CCRRLD_Pos  (3UL)                     /*!< MDR_TIMER1 CH4_CNTRL2: CCRRLD (Bit 3)                 */
#define MDR_TIMER1_CH4_CNTRL2_CCRRLD_Msk  (0x8UL)                   /*!< MDR_TIMER1 CH4_CNTRL2: CCRRLD (Bitfield-Mask: 0x01)   */
/* =========================================================  CCR11  ========================================================= */
#define MDR_TIMER1_CCR11_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR11: Value (Bit 0)                       */
#define MDR_TIMER1_CCR11_Value_Msk        (0xffffUL)                /*!< MDR_TIMER1 CCR11: Value (Bitfield-Mask: 0xffff)       */
/* =========================================================  CCR21  ========================================================= */
#define MDR_TIMER1_CCR21_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR21: Value (Bit 0)                       */
#define MDR_TIMER1_CCR21_Value_Msk        (0xffffUL)                /*!< MDR_TIMER1 CCR21: Value (Bitfield-Mask: 0xffff)       */
/* =========================================================  CCR31  ========================================================= */
#define MDR_TIMER1_CCR31_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR31: Value (Bit 0)                       */
#define MDR_TIMER1_CCR31_Value_Msk        (0xffffUL)                /*!< MDR_TIMER1 CCR31: Value (Bitfield-Mask: 0xffff)       */
/* =========================================================  CCR41  ========================================================= */
#define MDR_TIMER1_CCR41_Value_Pos        (0UL)                     /*!< MDR_TIMER1 CCR41: Value (Bit 0)                       */
#define MDR_TIMER1_CCR41_Value_Msk        (0xffffUL)                /*!< MDR_TIMER1 CCR41: Value (Bitfield-Mask: 0xffff)       */


/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  RXTX  ========================================================== */
#define MDR_PORTA_RXTX_Pin__Pos           (0UL)                     /*!< MDR_PORTA RXTX: Pin_ (Bit 0)                          */
#define MDR_PORTA_RXTX_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA RXTX: Pin_ (Bitfield-Mask: 0x01)            */
/* ==========================================================  OE  =========================================================== */
#define MDR_PORTA_OE_Pin__Pos             (0UL)                     /*!< MDR_PORTA OE: Pin_ (Bit 0)                            */
#define MDR_PORTA_OE_Pin__Msk             (0x1UL)                   /*!< MDR_PORTA OE: Pin_ (Bitfield-Mask: 0x01)              */
/* =========================================================  FUNC  ========================================================== */
#define MDR_PORTA_FUNC_Pin__Pos           (0UL)                     /*!< MDR_PORTA FUNC: Pin_ (Bit 0)                          */
#define MDR_PORTA_FUNC_Pin__Msk           (0x3UL)                   /*!< MDR_PORTA FUNC: Pin_ (Bitfield-Mask: 0x03)            */
/* ========================================================  ANALOG  ========================================================= */
#define MDR_PORTA_ANALOG_Pin__Pos         (0UL)                     /*!< MDR_PORTA ANALOG: Pin_ (Bit 0)                        */
#define MDR_PORTA_ANALOG_Pin__Msk         (0x1UL)                   /*!< MDR_PORTA ANALOG: Pin_ (Bitfield-Mask: 0x01)          */
/* =========================================================  PULL  ========================================================== */
#define MDR_PORTA_PULL_Down_Pin_0_Pos     (0UL)                     /*!< MDR_PORTA PULL: Down_Pin_0 (Bit 0)                    */
#define MDR_PORTA_PULL_Down_Pin_0_Msk     (0x1UL)                   /*!< MDR_PORTA PULL: Down_Pin_0 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_1_Pos     (1UL)                     /*!< MDR_PORTA PULL: Down_Pin_1 (Bit 1)                    */
#define MDR_PORTA_PULL_Down_Pin_1_Msk     (0x2UL)                   /*!< MDR_PORTA PULL: Down_Pin_1 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_2_Pos     (2UL)                     /*!< MDR_PORTA PULL: Down_Pin_2 (Bit 2)                    */
#define MDR_PORTA_PULL_Down_Pin_2_Msk     (0x4UL)                   /*!< MDR_PORTA PULL: Down_Pin_2 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_3_Pos     (3UL)                     /*!< MDR_PORTA PULL: Down_Pin_3 (Bit 3)                    */
#define MDR_PORTA_PULL_Down_Pin_3_Msk     (0x8UL)                   /*!< MDR_PORTA PULL: Down_Pin_3 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_4_Pos     (4UL)                     /*!< MDR_PORTA PULL: Down_Pin_4 (Bit 4)                    */
#define MDR_PORTA_PULL_Down_Pin_4_Msk     (0x10UL)                  /*!< MDR_PORTA PULL: Down_Pin_4 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_5_Pos     (5UL)                     /*!< MDR_PORTA PULL: Down_Pin_5 (Bit 5)                    */
#define MDR_PORTA_PULL_Down_Pin_5_Msk     (0x20UL)                  /*!< MDR_PORTA PULL: Down_Pin_5 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_6_Pos     (6UL)                     /*!< MDR_PORTA PULL: Down_Pin_6 (Bit 6)                    */
#define MDR_PORTA_PULL_Down_Pin_6_Msk     (0x40UL)                  /*!< MDR_PORTA PULL: Down_Pin_6 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_7_Pos     (7UL)                     /*!< MDR_PORTA PULL: Down_Pin_7 (Bit 7)                    */
#define MDR_PORTA_PULL_Down_Pin_7_Msk     (0x80UL)                  /*!< MDR_PORTA PULL: Down_Pin_7 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_8_Pos     (8UL)                     /*!< MDR_PORTA PULL: Down_Pin_8 (Bit 8)                    */
#define MDR_PORTA_PULL_Down_Pin_8_Msk     (0x100UL)                 /*!< MDR_PORTA PULL: Down_Pin_8 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_9_Pos     (9UL)                     /*!< MDR_PORTA PULL: Down_Pin_9 (Bit 9)                    */
#define MDR_PORTA_PULL_Down_Pin_9_Msk     (0x200UL)                 /*!< MDR_PORTA PULL: Down_Pin_9 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PULL_Down_Pin_10_Pos    (10UL)                    /*!< MDR_PORTA PULL: Down_Pin_10 (Bit 10)                  */
#define MDR_PORTA_PULL_Down_Pin_10_Msk    (0x400UL)                 /*!< MDR_PORTA PULL: Down_Pin_10 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_11_Pos    (11UL)                    /*!< MDR_PORTA PULL: Down_Pin_11 (Bit 11)                  */
#define MDR_PORTA_PULL_Down_Pin_11_Msk    (0x800UL)                 /*!< MDR_PORTA PULL: Down_Pin_11 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_12_Pos    (12UL)                    /*!< MDR_PORTA PULL: Down_Pin_12 (Bit 12)                  */
#define MDR_PORTA_PULL_Down_Pin_12_Msk    (0x1000UL)                /*!< MDR_PORTA PULL: Down_Pin_12 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_13_Pos    (13UL)                    /*!< MDR_PORTA PULL: Down_Pin_13 (Bit 13)                  */
#define MDR_PORTA_PULL_Down_Pin_13_Msk    (0x2000UL)                /*!< MDR_PORTA PULL: Down_Pin_13 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_14_Pos    (14UL)                    /*!< MDR_PORTA PULL: Down_Pin_14 (Bit 14)                  */
#define MDR_PORTA_PULL_Down_Pin_14_Msk    (0x4000UL)                /*!< MDR_PORTA PULL: Down_Pin_14 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_Down_Pin_15_Pos    (15UL)                    /*!< MDR_PORTA PULL: Down_Pin_15 (Bit 15)                  */
#define MDR_PORTA_PULL_Down_Pin_15_Msk    (0x8000UL)                /*!< MDR_PORTA PULL: Down_Pin_15 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PULL_UP_Pin__Pos        (16UL)                    /*!< MDR_PORTA PULL: UP_Pin_ (Bit 16)                      */
#define MDR_PORTA_PULL_UP_Pin__Msk        (0x10000UL)               /*!< MDR_PORTA PULL: UP_Pin_ (Bitfield-Mask: 0x01)         */
/* ==========================================================  PD  =========================================================== */
#define MDR_PORTA_PD_Driver_Pin_0_Pos     (0UL)                     /*!< MDR_PORTA PD: Driver_Pin_0 (Bit 0)                    */
#define MDR_PORTA_PD_Driver_Pin_0_Msk     (0x1UL)                   /*!< MDR_PORTA PD: Driver_Pin_0 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_1_Pos     (1UL)                     /*!< MDR_PORTA PD: Driver_Pin_1 (Bit 1)                    */
#define MDR_PORTA_PD_Driver_Pin_1_Msk     (0x2UL)                   /*!< MDR_PORTA PD: Driver_Pin_1 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_2_Pos     (2UL)                     /*!< MDR_PORTA PD: Driver_Pin_2 (Bit 2)                    */
#define MDR_PORTA_PD_Driver_Pin_2_Msk     (0x4UL)                   /*!< MDR_PORTA PD: Driver_Pin_2 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_3_Pos     (3UL)                     /*!< MDR_PORTA PD: Driver_Pin_3 (Bit 3)                    */
#define MDR_PORTA_PD_Driver_Pin_3_Msk     (0x8UL)                   /*!< MDR_PORTA PD: Driver_Pin_3 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_4_Pos     (4UL)                     /*!< MDR_PORTA PD: Driver_Pin_4 (Bit 4)                    */
#define MDR_PORTA_PD_Driver_Pin_4_Msk     (0x10UL)                  /*!< MDR_PORTA PD: Driver_Pin_4 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_5_Pos     (5UL)                     /*!< MDR_PORTA PD: Driver_Pin_5 (Bit 5)                    */
#define MDR_PORTA_PD_Driver_Pin_5_Msk     (0x20UL)                  /*!< MDR_PORTA PD: Driver_Pin_5 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_6_Pos     (6UL)                     /*!< MDR_PORTA PD: Driver_Pin_6 (Bit 6)                    */
#define MDR_PORTA_PD_Driver_Pin_6_Msk     (0x40UL)                  /*!< MDR_PORTA PD: Driver_Pin_6 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_7_Pos     (7UL)                     /*!< MDR_PORTA PD: Driver_Pin_7 (Bit 7)                    */
#define MDR_PORTA_PD_Driver_Pin_7_Msk     (0x80UL)                  /*!< MDR_PORTA PD: Driver_Pin_7 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_8_Pos     (8UL)                     /*!< MDR_PORTA PD: Driver_Pin_8 (Bit 8)                    */
#define MDR_PORTA_PD_Driver_Pin_8_Msk     (0x100UL)                 /*!< MDR_PORTA PD: Driver_Pin_8 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_9_Pos     (9UL)                     /*!< MDR_PORTA PD: Driver_Pin_9 (Bit 9)                    */
#define MDR_PORTA_PD_Driver_Pin_9_Msk     (0x200UL)                 /*!< MDR_PORTA PD: Driver_Pin_9 (Bitfield-Mask: 0x01)      */
#define MDR_PORTA_PD_Driver_Pin_10_Pos    (10UL)                    /*!< MDR_PORTA PD: Driver_Pin_10 (Bit 10)                  */
#define MDR_PORTA_PD_Driver_Pin_10_Msk    (0x400UL)                 /*!< MDR_PORTA PD: Driver_Pin_10 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_11_Pos    (11UL)                    /*!< MDR_PORTA PD: Driver_Pin_11 (Bit 11)                  */
#define MDR_PORTA_PD_Driver_Pin_11_Msk    (0x800UL)                 /*!< MDR_PORTA PD: Driver_Pin_11 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_12_Pos    (12UL)                    /*!< MDR_PORTA PD: Driver_Pin_12 (Bit 12)                  */
#define MDR_PORTA_PD_Driver_Pin_12_Msk    (0x1000UL)                /*!< MDR_PORTA PD: Driver_Pin_12 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_13_Pos    (13UL)                    /*!< MDR_PORTA PD: Driver_Pin_13 (Bit 13)                  */
#define MDR_PORTA_PD_Driver_Pin_13_Msk    (0x2000UL)                /*!< MDR_PORTA PD: Driver_Pin_13 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_14_Pos    (14UL)                    /*!< MDR_PORTA PD: Driver_Pin_14 (Bit 14)                  */
#define MDR_PORTA_PD_Driver_Pin_14_Msk    (0x4000UL)                /*!< MDR_PORTA PD: Driver_Pin_14 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Driver_Pin_15_Pos    (15UL)                    /*!< MDR_PORTA PD: Driver_Pin_15 (Bit 15)                  */
#define MDR_PORTA_PD_Driver_Pin_15_Msk    (0x8000UL)                /*!< MDR_PORTA PD: Driver_Pin_15 (Bitfield-Mask: 0x01)     */
#define MDR_PORTA_PD_Schmitt_Pin__Pos     (16UL)                    /*!< MDR_PORTA PD: Schmitt_Pin_ (Bit 16)                   */
#define MDR_PORTA_PD_Schmitt_Pin__Msk     (0x10000UL)               /*!< MDR_PORTA PD: Schmitt_Pin_ (Bitfield-Mask: 0x01)      */
/* ==========================================================  PWR  ========================================================== */
#define MDR_PORTA_PWR_Pin__Pos            (0UL)                     /*!< MDR_PORTA PWR: Pin_ (Bit 0)                           */
#define MDR_PORTA_PWR_Pin__Msk            (0x3UL)                   /*!< MDR_PORTA PWR: Pin_ (Bitfield-Mask: 0x03)             */
/* =========================================================  GFEN  ========================================================== */
#define MDR_PORTA_GFEN_Pin__Pos           (0UL)                     /*!< MDR_PORTA GFEN: Pin_ (Bit 0)                          */
#define MDR_PORTA_GFEN_Pin__Msk           (0x1UL)                   /*!< MDR_PORTA GFEN: Pin_ (Bitfield-Mask: 0x01)            */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        MDR_EEPROM                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CMD  ========================================================== */
/* ===============================================  MDR_EEPROM CMD CON [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_CON                                                        */
  MDR_EEPROM_CMD__CON__Normal Access   = 0,     /*!< Normal Access : Normal access to memory                                   */
  MDR_EEPROM_CMD__CON__Controller Access = 1,   /*!< Controller Access : Access to memory though registers                     */
} MDR_EEPROM_CMD__CON__Enum;

/* ===============================================  MDR_EEPROM CMD WR [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_WR                                                         */
  MDR_EEPROM_CMD__WR__Inactive         = 0,     /*!< Inactive : No write operation                                             */
  MDR_EEPROM_CMD__WR__Active           = 1,     /*!< Active : Write operation                                                  */
} MDR_EEPROM_CMD__WR__Enum;

/* ===============================================  MDR_EEPROM CMD RD [2..2]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_RD                                                         */
  MDR_EEPROM_CMD__RD__Inactive         = 0,     /*!< Inactive : No read operation                                              */
  MDR_EEPROM_CMD__RD__Active           = 1,     /*!< Active : Read operation                                                   */
} MDR_EEPROM_CMD__RD__Enum;

/* ==============================================  MDR_EEPROM CMD DELAY [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_DELAY                                                      */
  MDR_EEPROM_CMD__DELAY__le18MHz       = 0,     /*!< le18MHz : CPU freq is up to 18MHz                                         */
  MDR_EEPROM_CMD__DELAY__le36MHz       = 1,     /*!< le36MHz : CPU freq is up to 36MHz                                         */
} MDR_EEPROM_CMD__DELAY__Enum;

/* ===============================================  MDR_EEPROM CMD XE [6..6]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_XE                                                         */
  MDR_EEPROM_CMD__XE__Off              = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD__XE__On               = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD__XE__Enum;

/* ===============================================  MDR_EEPROM CMD YE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_YE                                                         */
  MDR_EEPROM_CMD_YE_Off                = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_YE_On                 = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_YE_Enum;

/* ===============================================  MDR_EEPROM CMD SE [8..8]  ================================================ */
typedef enum {                                  /*!< MDR_EEPROM_CMD_SE                                                         */
  MDR_EEPROM_CMD_SE_Off                = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_SE_On                 = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_SE_Enum;

/* ==============================================  MDR_EEPROM CMD IFREN [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_IFREN                                                      */
  MDR_EEPROM_CMD__IFREN__Main          = 0,     /*!< Main : Main memory                                                        */
  MDR_EEPROM_CMD__IFREN__Info          = 1,     /*!< Info : Info memory                                                        */
} MDR_EEPROM_CMD__IFREN__Enum;

/* =============================================  MDR_EEPROM CMD ERASE [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_EEPROM_CMD_ERASE                                                      */
  MDR_EEPROM_CMD__ERASE__Inactive      = 0,     /*!< Inactive : No erase operation                                             */
  MDR_EEPROM_CMD__ERASE__Active        = 1,     /*!< Active : Erase operation                                                  */
} MDR_EEPROM_CMD__ERASE__Enum;

/* =============================================  MDR_EEPROM CMD MAS1 [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_MAS1                                                       */
  MDR_EEPROM_CMD_MAS1_Off              = 0,     /*!< Off : Disable                                                             */
  MDR_EEPROM_CMD_MAS1_On               = 1,     /*!< On : Enable                                                               */
} MDR_EEPROM_CMD_MAS1_Enum;

/* =============================================  MDR_EEPROM CMD PROG [12..12]  ============================================== */
typedef enum {                                  /*!< MDR_EEPROM_CMD_PROG                                                       */
  MDR_EEPROM_CMD__PROG__Inactive       = 0,     /*!< Inactive : No programm operation                                          */
  MDR_EEPROM_CMD__PROG__Active         = 1,     /*!< Active : Programm operation                                               */
} MDR_EEPROM_CMD__PROG__Enum;

/* =============================================  MDR_EEPROM CMD NVSTR [13..13]  ============================================= */
typedef enum {                                  /*!< MDR_EEPROM_CMD_NVSTR                                                      */
  MDR_EEPROM_CMD__NVSTR__Read          = 0,     /*!< Read : Read mode                                                          */
  MDR_EEPROM_CMD__NVSTR__Write         = 1,     /*!< Write : Programming or erase mode                                         */
} MDR_EEPROM_CMD__NVSTR__Enum;

/* =========================================================  ADDR  ========================================================== */
/* ==========================================================  DI  =========================================================== */
/* ==========================================================  DO  =========================================================== */
/* ==========================================================  KEY  ========================================================== */


/* =========================================================================================================================== */
/* ================                                       MDR_RST_CLOCK                                       ================ */
/* =========================================================================================================================== */

/* =====================================================  CLOCK_STATUS  ====================================================== */
/* =====================================  MDR_RST_CLOCK CLOCK_STATUS PLL_CPU_RDY [1..1]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_PLL_CPU_RDY                                    */
  MDR_RST__STATUS__PLL_CPU_RDY__NotReady = 0,   /*!< NotReady : PLL not ready                                                  */
  MDR_RST__STATUS__PLL_CPU_RDY__Ready  = 1,     /*!< Ready : PLL ready                                                         */
} MDR_RST__STATUS__PLL_CPU_RDY__Enum;

/* =======================================  MDR_RST_CLOCK CLOCK_STATUS HSE_RDY [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CLOCK_STATUS_HSE_RDY                                        */
  MDR_RST__STATUS__HSE_RDY__NotReady   = 0,     /*!< NotReady : HSE not ready                                                  */
  MDR_RST__STATUS__HSE_RDY__Ready      = 1,     /*!< Ready : HSE ready                                                         */
} MDR_RST__STATUS__HSE_RDY__Enum;

/* ======================================================  PLL_CONTROL  ====================================================== */
/* ======================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_ON [2..2]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_ON                                      */
  MDR_RST__PLL__CPU_EN__Off            = 0,     /*!< Off : PLL Off                                                             */
  MDR_RST__PLL__CPU_EN__On             = 1,     /*!< On : PLL On                                                               */
} MDR_RST__PLL__CPU_EN__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_PLD [3..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_PLD                                     */
  MDR_RST__PLL__CPU_PLD__RestartOff    = 0,     /*!< RestartOff : PLL restart inactive                                         */
  MDR_RST__PLL__CPU_PLD__DoRestart     = 1,     /*!< DoRestart : PLL Do Restart                                                */
} MDR_RST__PLL__CPU_PLD__Enum;

/* =====================================  MDR_RST_CLOCK PLL_CONTROL PLL_CPU_MUL [8..11]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PLL_CONTROL_PLL_CPU_MUL                                     */
  MDR_RST__PLL__CPU_MUL__x1            = 0,     /*!< x1 : PLL mul x1                                                           */
  MDR_RST__PLL__CPU_MUL__x2            = 1,     /*!< x2 : PLL mul x2                                                           */
  MDR_RST__PLL__CPU_MUL__x3            = 2,     /*!< x3 : PLL mul x3                                                           */
  MDR_RST__PLL__CPU_MUL__x4            = 3,     /*!< x4 : PLL mul x4                                                           */
  MDR_RST__PLL__CPU_MUL__x5            = 4,     /*!< x5 : PLL mul x5                                                           */
  MDR_RST__PLL__CPU_MUL__x6            = 5,     /*!< x6 : PLL mul x6                                                           */
  MDR_RST__PLL__CPU_MUL__x7            = 6,     /*!< x7 : PLL mul x7                                                           */
  MDR_RST__PLL__CPU_MUL__x8            = 7,     /*!< x8 : PLL mul x8                                                           */
  MDR_RST__PLL__CPU_MUL__x9            = 8,     /*!< x9 : PLL mul x9                                                           */
  MDR_RST__PLL__CPU_MUL__x10           = 9,     /*!< x10 : PLL mul x10                                                         */
  MDR_RST__PLL__CPU_MUL__x11           = 10,    /*!< x11 : PLL mul x11                                                         */
  MDR_RST__PLL__CPU_MUL__x12           = 11,    /*!< x12 : PLL mul x12                                                         */
  MDR_RST__PLL__CPU_MUL__x13           = 12,    /*!< x13 : PLL mul x13                                                         */
  MDR_RST__PLL__CPU_MUL__x14           = 13,    /*!< x14 : PLL mul x14                                                         */
  MDR_RST__PLL__CPU_MUL__x15           = 14,    /*!< x15 : PLL mul x15                                                         */
  MDR_RST__PLL__CPU_MUL__x16           = 15,    /*!< x16 : PLL mul x16                                                         */
} MDR_RST__PLL__CPU_MUL__Enum;

/* ======================================================  HS_CONTROL  ======================================================= */
/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE_ON [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE_ON                                           */
  MDR_RST__HS__HSE_EN__Off             = 0,     /*!< Off : HSE Off                                                             */
  MDR_RST__HS__HSE_EN__On              = 1,     /*!< On : HSE On                                                               */
} MDR_RST__HS__HSE_EN__Enum;

/* ========================================  MDR_RST_CLOCK HS_CONTROL HSE_BYP [1..1]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_HS_CONTROL_HSE_BYP                                          */
  MDR_RST__HS__HSE_BYP__Off            = 0,     /*!< Off : HSE forms Clock from external oscillator                            */
  MDR_RST__HS__HSE_BYP__On             = 1,     /*!< On : HSE passes Clock from external generator                             */
} MDR_RST__HS__HSE_BYP__Enum;

/* =======================================================  CPU_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C1_SEL                                        */
  MDR_RST__CPU__C1__HSI                = 0,     /*!< HSI : CPU_C1 output is HSI                                                */
  MDR_RST__CPU__C1__HSI/2              = 1,     /*!< HSI/2 : CPU_C1 output is HSI/2                                            */
  MDR_RST__CPU__C1__HSE                = 2,     /*!< HSE : CPU_C1 output is HSE                                                */
  MDR_RST__CPU__C1__HSE/2              = 3,     /*!< HSE/2 : CPU_C1 output is HSE/2                                            */
} MDR_RST__CPU__C1__Enum;

/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C2_SEL [2..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C2_SEL                                        */
  MDR_RST__CPU__C2__CPU_C1             = 0,     /*!< CPU_C1 : Freq from CPU_C1 mux direct                                      */
  MDR_RST__CPU__C2__PLLCPUo            = 1,     /*!< PLLCPUo : Freq from CPU_C1 mux through PLL                                */
} MDR_RST__CPU__C2__Enum;

/* =======================================  MDR_RST_CLOCK CPU_CLOCK CPU_C3_SEL [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_CPU_C3_SEL                                        */
  MDR_RST__CPU__C3__div1_0             = 0,     /*!< div1_0 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_1             = 1,     /*!< div1_1 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_2             = 2,     /*!< div1_2 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_3             = 3,     /*!< div1_3 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_4             = 4,     /*!< div1_4 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_5             = 5,     /*!< div1_5 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_6             = 6,     /*!< div1_6 : div by 1                                                         */
  MDR_RST__CPU__C3__div1_7             = 7,     /*!< div1_7 : div by 1                                                         */
  MDR_RST__CPU__C3__div2               = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST__CPU__C3__div4               = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST__CPU__C3__div8               = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST__CPU__C3__div16              = 11,    /*!< div16 : div by 16                                                         */
  MDR_RST__CPU__C3__div32              = 12,    /*!< div32 : div by 32                                                         */
  MDR_RST__CPU__C3__div64              = 13,    /*!< div64 : div by 64                                                         */
  MDR_RST__CPU__C3__div128             = 14,    /*!< div128 : div by 128                                                       */
  MDR_RST__CPU__C3__div256             = 15,    /*!< div256 : div by 256                                                       */
} MDR_RST__CPU__C3__Enum;

/* ========================================  MDR_RST_CLOCK CPU_CLOCK HCLK_SEL [8..9]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_CPU_CLOCK_HCLK_SEL                                          */
  MDR_RST__CPU__HCLK__HSI              = 0,     /*!< HSI : CPU clock is HSI                                                    */
  MDR_RST__CPU__HCLK__CPU_C3           = 1,     /*!< CPU_C3 : CPU clock is CPU_C3 output                                       */
  MDR_RST__CPU__HCLK__LSE              = 2,     /*!< LSE : CPU clock is LSE                                                    */
  MDR_RST__CPU__HCLK__LSI              = 3,     /*!< LSI : CPU clock is LSI                                                    */
} MDR_RST__CPU__HCLK__Enum;

/* ======================================================  PER1_CLOCK  ======================================================= */
/* ======================================  MDR_RST_CLOCK PER1_CLOCK PER1_C1_SEL [0..1]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLOCK_PER1_C1_SEL                                      */
  MDR_RST__PER1__C1__LSI               = 0,     /*!< LSI : PER1_C1 output is LSI                                               */
  MDR_RST__PER1__C1__LSI/2             = 1,     /*!< LSI/2 : PER1_C1 output is LSI/2                                           */
  MDR_RST__PER1__C1__LSE               = 2,     /*!< LSE : PER1_C1 output is LSE                                               */
  MDR_RST__PER1__C1__LSE/2             = 3,     /*!< LSE/2 : PER1_C1 output is LSE/2                                           */
} MDR_RST__PER1__C1__Enum;

/* ======================================  MDR_RST_CLOCK PER1_CLOCK PER1_C2_SEL [2..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLOCK_PER1_C2_SEL                                      */
  MDR_RST__PER1__C2__CPU_C1            = 0,     /*!< CPU_C1 : PER1_C2 output is CPU_C1                                         */
  MDR_RST__PER1__C2__PER1_C1           = 1,     /*!< PER1_C1 : PER1_C2 output is PER1_C1                                       */
  MDR_RST__PER1__C2__PLLCPUo           = 2,     /*!< PLLCPUo : PER1_C2 output is PLLCPUo                                       */
  MDR_RST__PER1__C2__HSI_C1            = 3,     /*!< HSI_C1 : PER1_C2 output is HSI_C1                                         */
} MDR_RST__PER1__C2__Enum;

/* =======================================  MDR_RST_CLOCK PER1_CLOCK DEBUG_EN [4..4]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLOCK_DEBUG_EN                                         */
  MDR_RST__PER1__DEBUG_CLK_Off         = 0,     /*!< Off : Debug disabled                                                      */
  MDR_RST__PER1__DEBUG_CLK_On          = 1,     /*!< On : Debug enabled                                                        */
} MDR_RST__PER1__DEBUG_CLK_Enum;

/* ========================================  MDR_RST_CLOCK PER1_CLOCK DMA_EN [5..5]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER1_CLOCK_DMA_EN                                           */
  MDR_RST__PER1__DMA_CLK__Off          = 0,     /*!< Off : DMA clock disabled                                                  */
  MDR_RST__PER1__DMA_CLK__On           = 1,     /*!< On : DMA clock enabled                                                    */
} MDR_RST__PER1__DMA_CLK__Enum;

/* =======================================================  ADC_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C1_SEL [0..1]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C1_SEL                                        */
  MDR_RST__ADC__C1__CPU_C1             = 0,     /*!< CPU_C1 : ADC_C1 output is CPU_C1                                          */
  MDR_RST__ADC__C1__PER1_C1            = 1,     /*!< PER1_C1 : ADC_C1 output is PER1_C1                                        */
  MDR_RST__ADC__C1__PLLCPUo            = 2,     /*!< PLLCPUo : ADC_C1 output is PLLCPUo                                        */
  MDR_RST__ADC__C1__HSI_C1             = 3,     /*!< HSI_C1 : ADC_C1 output is HSI_C1                                          */
} MDR_RST__ADC__C1__Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK ADCIU_C1_SEL [2..3]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C1_SEL                                      */
  MDR_RST__ADCIU__C1__CPU_C1           = 0,     /*!< CPU_C1 : ADCIU_C1 output is CPU_C1                                        */
  MDR_RST__ADCIU__C1__PER1_C1          = 1,     /*!< PER1_C1 : ADCIU_C1 output is PER1_C1                                      */
  MDR_RST__ADCIU__C1__PLLCPUo          = 2,     /*!< PLLCPUo : ADCIU_C1 output is PLLCPUo                                      */
  MDR_RST__ADCIU__C1__HSI_C1           = 3,     /*!< HSI_C1 : ADCIU_C1 output is HSI_C1                                        */
} MDR_RST__ADCIU__C1__Enum;

/* =======================================  MDR_RST_CLOCK ADC_CLOCK ADC_C3_SEL [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL                                        */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_0 = 0,/*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_1 = 1,/*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_2 = 2,/*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_3 = 3,/*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_4 = 4,/*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_5 = 5,/*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_6 = 6,/*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div1_7 = 7,/*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div2 = 8,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div4 = 9,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div8 = 10, /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div16 = 11,/*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div32 = 12,/*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div64 = 13,/*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div128 = 14,/*!< div128 : div by 128                                                      */
  MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_div256 = 15,/*!< div256 : div by 256                                                      */
} MDR_RST_CLOCK_ADC_CLOCK_ADC_C3_SEL_Enum;

/* =====================================  MDR_RST_CLOCK ADC_CLOCK ADCIU_C3_SEL [8..11]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL                                      */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_0 = 0,/*!< div1_0 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_1 = 1,/*!< div1_1 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_2 = 2,/*!< div1_2 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_3 = 3,/*!< div1_3 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_4 = 4,/*!< div1_4 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_5 = 5,/*!< div1_5 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_6 = 6,/*!< div1_6 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div1_7 = 7,/*!< div1_7 : div by 1                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div2 = 8,/*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div4 = 9,/*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div8 = 10,/*!< div8 : div by 8                                                          */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div16 = 11,/*!< div16 : div by 16                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div32 = 12,/*!< div32 : div by 32                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div64 = 13,/*!< div64 : div by 64                                                       */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div128 = 14,/*!< div128 : div by 128                                                    */
  MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_div256 = 15,/*!< div256 : div by 256                                                    */
} MDR_RST_CLOCK_ADC_CLOCK_ADCIU_C3_SEL_Enum;

/* =====================================  MDR_RST_CLOCK ADC_CLOCK ADCIU_CLK_EN [12..12]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADCIU_CLK_EN                                      */
  MDR_RST__ADCIU__CLK_EN__Off          = 0,     /*!< Off : ADCIU clock disabled                                                */
  MDR_RST__ADCIU__CLK_EN__On           = 1,     /*!< On : ADCIU clock enabled                                                  */
} MDR_RST__ADCIU__CLK_EN__Enum;

/* ======================================  MDR_RST_CLOCK ADC_CLOCK ADC_CLK_EN [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_ADC_CLOCK_ADC_CLK_EN                                        */
  MDR_RST__ADC__CLK_EN__Off            = 0,     /*!< Off : ADC clock disabled                                                  */
  MDR_RST__ADC__CLK_EN__On             = 1,     /*!< On : ADC clock enabled                                                    */
} MDR_RST__ADC__CLK_EN__Enum;

/* =======================================================  RTC_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK RTC_CLOCK HSE_SEL [0..3]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_0 = 0,   /*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_1 = 1,   /*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_2 = 2,   /*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_3 = 3,   /*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_4 = 4,   /*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_5 = 5,   /*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_6 = 6,   /*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div1_7 = 7,   /*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div2 = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div4 = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div8 = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div16 = 11,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div32 = 12,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div64 = 13,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div128 = 14,  /*!< div128 : div by 128                                                       */
  MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_div256 = 15,  /*!< div256 : div by 256                                                       */
} MDR_RST_CLOCK_RTC_CLOCK_HSE_SEL_Enum;

/* ========================================  MDR_RST_CLOCK RTC_CLOCK HSI_SEL [4..7]  ========================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_0 = 0,   /*!< div1_0 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_1 = 1,   /*!< div1_1 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_2 = 2,   /*!< div1_2 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_3 = 3,   /*!< div1_3 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_4 = 4,   /*!< div1_4 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_5 = 5,   /*!< div1_5 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_6 = 6,   /*!< div1_6 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div1_7 = 7,   /*!< div1_7 : div by 1                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div2 = 8,     /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div4 = 9,     /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div8 = 10,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div16 = 11,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div32 = 12,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div64 = 13,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div128 = 14,  /*!< div128 : div by 128                                                       */
  MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_div256 = 15,  /*!< div256 : div by 256                                                       */
} MDR_RST_CLOCK_RTC_CLOCK_HSI_SEL_Enum;

/* =======================================  MDR_RST_CLOCK RTC_CLOCK HSE_RTC_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSE_RTC_EN                                        */
  MDR_RST__RTC__HSE_RTC_CLOCK__Off     = 0,     /*!< Off : RTC HSE Clock Disabled                                              */
  MDR_RST__RTC__HSE_RTC_CLOCK__On      = 1,     /*!< On : RTC HSE Clock Enabled                                                */
} MDR_RST__RTC__HSE_RTC_CLOCK__Enum;

/* =======================================  MDR_RST_CLOCK RTC_CLOCK HSI_RTC_EN [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_RTC_CLOCK_HSI_RTC_EN                                        */
  MDR_RST__RTC__HSI_RTC_CLOCK__Off     = 0,     /*!< Off : RTC HSI Clock Disabled                                              */
  MDR_RST__RTC__HSI_RTC_CLOCK__On      = 1,     /*!< On : RTC HSI Clock Enabled                                                */
} MDR_RST__RTC__HSI_RTC_CLOCK__Enum;

/* ======================================================  PER2_CLOCK  ======================================================= */
/* ======================================  MDR_RST_CLOCK PER2_CLOCK SPI1_CLK_EN [0..0]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_SPI1_CLK_EN                                      */
  MDR_RST__PER2__SPI1_CLOCK__Off       = 0,     /*!< Off : Clock Disabled                                                      */
  MDR_RST__PER2__SPI1_CLOCK__On        = 1,     /*!< On : Clock Enabled                                                        */
} MDR_RST__PER2__SPI1_CLOCK__Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK UART1_CLK_EN [1..1]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_UART1_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK UART2_CLK_EN [2..2]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_UART2_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK EEPROM_CLK_EN [3..3]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN                                    */
  MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                     */
  MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_On = 1,/*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_EEPROM_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK RST_CLK_EN [4..4]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_RST_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK DMA_CLK_EN [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_DMA_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK ADC_CLK_EN [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_ADC_CLK_EN_Enum;

/* ======================================  MDR_RST_CLOCK PER2_CLOCK WWDT_CLK_EN [9..9]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN                                      */
  MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_WWDT_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK IWDT_CLK_EN [10..10]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN                                      */
  MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_Off = 0, /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_On = 1,  /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_IWDT_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK PWR_CLK_EN [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PWR_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK BKP_CLK_EN [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_BKP_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK ADCIU_CLK_EN [13..13]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_ADCIU_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK TIMER1_CLK_EN [14..14]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN                                    */
  MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                     */
  MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_On = 1,/*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_TIMER1_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK TIMER2_CLK_EN [15..15]  ==================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN                                    */
  MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                     */
  MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_On = 1,/*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_TIMER2_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK PORTA_CLK_EN [16..16]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTA_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK PORTB_CLK_EN [17..17]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTB_CLK_EN_Enum;

/* ====================================  MDR_RST_CLOCK PER2_CLOCK PORTC_CLK_EN [18..18]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN                                     */
  MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_Off = 0,/*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_On = 1, /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_PORTC_CLK_EN_Enum;

/* =====================================  MDR_RST_CLOCK PER2_CLOCK CRC_CLK_EN [19..19]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN                                       */
  MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_Off = 0,  /*!< Off : Clock Disabled                                                      */
  MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_On = 1,   /*!< On : Clock Enabled                                                        */
} MDR_RST_CLOCK_PER2_CLOCK_CRC_CLK_EN_Enum;

/* =======================================================  TIM_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK TIM_CLOCK TIM1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM1_BRG                                          */
  MDR_RST__TIM1__BRG__div1             = 0,     /*!< div1 : div by 1                                                           */
  MDR_RST__TIM1__BRG__div2             = 1,     /*!< div2 : div by 2                                                           */
  MDR_RST__TIM1__BRG__div4             = 2,     /*!< div4 : div by 4                                                           */
  MDR_RST__TIM1__BRG__div8             = 3,     /*!< div8 : div by 8                                                           */
  MDR_RST__TIM1__BRG__div16            = 4,     /*!< div16 : div by 16                                                         */
  MDR_RST__TIM1__BRG__div32            = 5,     /*!< div32 : div by 32                                                         */
  MDR_RST__TIM1__BRG__div64            = 6,     /*!< div64 : div by 64                                                         */
  MDR_RST__TIM1__BRG__div128           = 7,     /*!< div128 : div by 128                                                       */
} MDR_RST__TIM1__BRG__Enum;

/* =======================================  MDR_RST_CLOCK TIM_CLOCK TIM2_BRG [8..10]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG                                          */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_TIM_CLOCK_TIM2_BRG_Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM1_CLK_EN                                       */
  MDR_RST__TIM__TIM1_CLK__Off          = 0,     /*!< Off : Timer1 Clock Disabled                                               */
  MDR_RST__TIM__TIM1_CLK__On           = 1,     /*!< On : Timer1 Clock Enabled                                                 */
} MDR_RST__TIM__TIM1_CLK__Enum;

/* =====================================  MDR_RST_CLOCK TIM_CLOCK TIM2_CLK_EN [25..25]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_TIM_CLOCK_TIM2_CLK_EN                                       */
  MDR_RST__TIM__TIM2_CLK__Off          = 0,     /*!< Off : Timer2 Clock Disabled                                               */
  MDR_RST__TIM__TIM2_CLK__On           = 1,     /*!< On : Timer2 Clock Enabled                                                 */
} MDR_RST__TIM__TIM2_CLK__Enum;

/* ======================================================  UART_CLOCK  ======================================================= */
/* =======================================  MDR_RST_CLOCK UART_CLOCK UART1_BRG [0..2]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART1_BRG                                        */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div1 = 0,  /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div2 = 1,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div4 = 2,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div8 = 3,  /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div16 = 4, /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div32 = 5, /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div64 = 6, /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_div128 = 7,/*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_UART1_BRG_Enum;

/* ======================================  MDR_RST_CLOCK UART_CLOCK UART2_BRG [8..10]  ======================================= */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART2_BRG                                        */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div1 = 0,  /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div2 = 1,  /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div4 = 2,  /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div8 = 3,  /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div16 = 4, /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div32 = 5, /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div64 = 6, /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_div128 = 7,/*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_UART_CLOCK_UART2_BRG_Enum;

/* ====================================  MDR_RST_CLOCK UART_CLOCK UART1_CLK_EN [24..24]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART1_CLK_EN                                     */
  MDR_RST__UART__UART1_CLK__Off        = 0,     /*!< Off : UART1 Clock Disabled                                                */
  MDR_RST__UART__UART1_CLK__On         = 1,     /*!< On : UART1 Clock Enabled                                                  */
} MDR_RST__UART__UART1_CLK__Enum;

/* ====================================  MDR_RST_CLOCK UART_CLOCK UART2_CLK_EN [25..25]  ===================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_UART_CLOCK_UART2_CLK_EN                                     */
  MDR_RST__UART__UART2_CLK__Off        = 0,     /*!< Off : UART2 Clock Disabled                                                */
  MDR_RST__UART__UART2_CLK__On         = 1,     /*!< On : UART2 Clock Enabled                                                  */
} MDR_RST__UART__UART2_CLK__Enum;

/* =======================================================  SSP_CLOCK  ======================================================= */
/* ========================================  MDR_RST_CLOCK SSP_CLOCK SSP1_BRG [0..2]  ======================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG                                          */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div1 = 0,    /*!< div1 : div by 1                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div2 = 1,    /*!< div2 : div by 2                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div4 = 2,    /*!< div4 : div by 4                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div8 = 3,    /*!< div8 : div by 8                                                           */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div16 = 4,   /*!< div16 : div by 16                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div32 = 5,   /*!< div32 : div by 32                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div64 = 6,   /*!< div64 : div by 64                                                         */
  MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_div128 = 7,  /*!< div128 : div by 128                                                       */
} MDR_RST_CLOCK_SSP_CLOCK_SSP1_BRG_Enum;

/* =====================================  MDR_RST_CLOCK SSP_CLOCK SSP1_CLK_EN [24..24]  ====================================== */
typedef enum {                                  /*!< MDR_RST_CLOCK_SSP_CLOCK_SSP1_CLK_EN                                       */
  MDR_RST__SSP__SSP1_CLK__Off          = 0,     /*!< Off : SSP1 Clock Disabled                                                 */
  MDR_RST__SSP__SSP1_CLK__On           = 1,     /*!< On : SSP1 Clock Enabled                                                   */
} MDR_RST__SSP__SSP1_CLK__Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_WWDT                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ================================================  MDR_WWDT CR WDGA [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_WWDT_CR_WDGA                                                          */
  MDR_WWDG_EN__Off                     = 0,     /*!< Off : Disabled                                                            */
  MDR_WWDG_EN__On                      = 1,     /*!< On : Enabled                                                              */
} MDR_WWDG_EN__Enum;

/* ==========================================================  CFR  ========================================================== */
/* ===============================================  MDR_WWDT CFR WGTB [7..8]  ================================================ */
typedef enum {                                  /*!< MDR_WWDT_CFR_WGTB                                                         */
  MDR_CFR_WGTB___div1                  = 0,     /*!< div1 : CLK = LSI/4096/1                                                   */
  MDR_CFR_WGTB___div2                  = 1,     /*!< div2 : CLK = LSI/4096/2                                                   */
  MDR_CFR_WGTB___div4                  = 2,     /*!< div4 : CLK = LSI/4096/4                                                   */
  MDR_CFR_WGTB___div8                  = 3,     /*!< div8 : CLK = LSI/4096/8                                                   */
} MDR_CFR_WGTB___Enum;

/* ================================================  MDR_WWDT CFR EWI [9..9]  ================================================ */
typedef enum {                                  /*!< MDR_WWDT_CFR_EWI                                                          */
  MDR_CFR_EWI___Off                    = 0,     /*!< Off : Disabled IRQ on T=0x40                                              */
  MDR_CFR_EWI___On                     = 1,     /*!< On : Enabled IRQ on T=0x40                                                */
} MDR_CFR_EWI___Enum;

/* ==========================================================  SR  =========================================================== */
/* ================================================  MDR_WWDT SR EWIF [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_WWDT_SR_EWIF                                                          */
  MDR_SR_EWIF___Off                    = 0,     /*!< Off : Event Off                                                           */
  MDR_SR_EWIF___Onn                    = 1,     /*!< Onn : Event On                                                            */
} MDR_SR_EWIF___Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_IWDT                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  KR  =========================================================== */
/* ==========================================================  PR  =========================================================== */
/* =================================================  MDR_IWDT PR PR [0..2]  ================================================= */
typedef enum {                                  /*!< MDR_IWDT_PR_PR                                                            */
  MDR_IWDT_PR___div4                   = 0,     /*!< div4 : LSI div 4                                                          */
  MDR_IWDT_PR___div8                   = 1,     /*!< div8 : LSI div 8                                                          */
  MDR_IWDT_PR___div16                  = 2,     /*!< div16 : LSI div 16                                                        */
  MDR_IWDT_PR___div32                  = 3,     /*!< div32 : LSI div 32                                                        */
  MDR_IWDT_PR___div64                  = 4,     /*!< div64 : LSI div 64                                                        */
  MDR_IWDT_PR___div128                 = 5,     /*!< div128 : LSI div 128                                                      */
  MDR_IWDT_PR___div256                 = 6,     /*!< div256 : LSI div 256                                                      */
  MDR_IWDT_PR___div256_1               = 7,     /*!< div256_1 : LSI div 256                                                    */
} MDR_IWDT_PR___Enum;

/* ==========================================================  RLR  ========================================================== */
/* ==========================================================  SR  =========================================================== */
/* ================================================  MDR_IWDT SR PVU [0..0]  ================================================= */
typedef enum {                                  /*!< MDR_IWDT_SR_PVU                                                           */
  MDR_IWDT_PVU___Ready                 = 0,     /*!< Ready : PR ready for write                                                */
  MDR_IWDT_PVU___Busy                  = 1,     /*!< Busy : PR busy                                                            */
} MDR_IWDT_PVU___Enum;

/* ================================================  MDR_IWDT SR RVU [1..1]  ================================================= */
typedef enum {                                  /*!< MDR_IWDT_SR_RVU                                                           */
  MDR_IWDT_RVU___Ready                 = 0,     /*!< Ready : PRL ready for write                                               */
  MDR_IWDT_RVU___Busy                  = 1,     /*!< Busy : PRL busy                                                           */
} MDR_IWDT_RVU___Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_ADC                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  ADC1_Cfg  ======================================================== */
/* =============================================  MDR_ADC ADC1_Cfg ADON [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_ADON                                                     */
  MDR_ADC_ADC1_Cfg_ADON_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADC_ADC1_Cfg_ADON_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADC_ADC1_Cfg_ADON_Enum;

/* ==============================================  MDR_ADC ADC1_Cfg GO [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_GO                                                       */
  MDR_ADC_ADC1_Cfg_GO_Inactive         = 0,     /*!< Inactive : Autoclear to zero after start                                  */
  MDR_ADC_ADC1_Cfg_GO_Start            = 1,     /*!< Start : Start measurement                                                 */
} MDR_ADC_ADC1_Cfg_GO_Enum;

/* =============================================  MDR_ADC ADC1_Cfg CLKS [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CLKS                                                     */
  MDR_ADC_ADC1_Cfg_CLKS_CPU_Clock      = 0,     /*!< CPU_Clock : CPU_Clock used                                                */
  MDR_ADC_ADC1_Cfg_CLKS_ADC_Clock      = 1,     /*!< ADC_Clock : ADC_Clock used                                                */
} MDR_ADC_ADC1_Cfg_CLKS_Enum;

/* ============================================  MDR_ADC ADC1_Cfg SAMPLE [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SAMPLE                                                   */
  MDR_ADC_ADC1_Cfg_SAMPLE_Single       = 0,     /*!< Single : Single measurement by GO                                         */
  MDR_ADC_ADC1_Cfg_SAMPLE_Continuouse  = 1,     /*!< Continuouse : Continuous measurement, until stop by ADON                  */
} MDR_ADC_ADC1_Cfg_SAMPLE_Enum;

/* ==============================================  MDR_ADC ADC1_Cfg CHS [4..8]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CHS                                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_0_RefN  = 0,     /*!< Channel_0_RefN : Signal on PC4, Ref-                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_1_RefP  = 1,     /*!< Channel_1_RefP : Signal on PC3, Ref+                                      */
  MDR_ADC_ADC1_Cfg_CHS_Channel_2       = 2,     /*!< Channel_2 : Signal on PC2                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_3       = 3,     /*!< Channel_3 : Signal on PC1                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_4       = 4,     /*!< Channel_4 : Signal on PB9                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_5       = 5,     /*!< Channel_5 : Signal on PB8                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_6       = 6,     /*!< Channel_6 : Signal on PB7                                                 */
  MDR_ADC_ADC1_Cfg_CHS_Channel_7       = 7,     /*!< Channel_7 : Signal on PB6                                                 */
  MDR_ADC_ADC1_Cfg_CHS_TS_VRef_1.23    = 30,    /*!< TS_VRef_1.23 : Signal from Thermosensor                                   */
  MDR_ADC_ADC1_Cfg_CHS_TS_Temperature  = 31,    /*!< TS_Temperature : Signal from Thermosensor                                 */
} MDR_ADC_ADC1_Cfg_CHS_Enum;

/* =============================================  MDR_ADC ADC1_Cfg CHCH [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_CHCH                                                     */
  MDR_ADC_ADC1_Cfg_CHCH_Disable        = 0,     /*!< Disable : Measure only CHS channel                                        */
  MDR_ADC_ADC1_Cfg_CHCH_Enable         = 1,     /*!< Enable : Measure channels selected in reg CHSEL                           */
} MDR_ADC_ADC1_Cfg_CHCH_Enum;

/* ============================================  MDR_ADC ADC1_Cfg RGNC [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_RGNC                                                     */
  MDR_ADC_ADC1_Cfg_RGNC_Disable        = 0,     /*!< Disable : Flag STATUSx.AWOIFEN inactive                                   */
  MDR_ADC_ADC1_Cfg_RGNC_Enable         = 1,     /*!< Enable : Flag STATUSx.AWOIFEN enable                                      */
} MDR_ADC_ADC1_Cfg_RGNC_Enum;

/* ============================================  MDR_ADC ADC1_Cfg M_REF [11..11]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_M_REF                                                    */
  MDR_ADC_ADC1_Cfg_M_REF_Internal      = 0,     /*!< Internal : Signal in [GND..AUcc]                                          */
  MDR_ADC_ADC1_Cfg_M_REF_External      = 1,     /*!< External : Signal in [ADC_Ref-..ADC_Ref+]                                 */
} MDR_ADC_ADC1_Cfg_M_REF_Enum;

/* ===========================================  MDR_ADC ADC1_Cfg DIV_CLK [12..15]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_DIV_CLK                                                  */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_1       = 0,     /*!< div_1 : CLK = CPU_CLK                                                     */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_2       = 1,     /*!< div_2 : CLK = CPU_CLK/2                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_4       = 2,     /*!< div_4 : CLK = CPU_CLK/4                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_8       = 3,     /*!< div_8 : CLK = CPU_CLK/8                                                   */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_16      = 4,     /*!< div_16 : CLK = CPU_CLK/16                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_32      = 5,     /*!< div_32 : CLK = CPU_CLK/32                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_64      = 6,     /*!< div_64 : CLK = CPU_CLK/64                                                 */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_128     = 7,     /*!< div_128 : CLK = CPU_CLK/128                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_256     = 8,     /*!< div_256 : CLK = CPU_CLK/256                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_512     = 9,     /*!< div_512 : CLK = CPU_CLK/512                                               */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_1024    = 10,    /*!< div_1024 : CLK = CPU_CLK/1024                                             */
  MDR_ADC_ADC1_Cfg_DIV_CLK_div_2048    = 11,    /*!< div_2048 : CLK = CPU_CLK/2048                                             */
} MDR_ADC_ADC1_Cfg_DIV_CLK_Enum;

/* ============================================  MDR_ADC ADC1_Cfg TS_EN [17..17]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_TS_EN                                                    */
  MDR_ADC_ADC1_Cfg_TS_EN_Disable       = 0,     /*!< Disable : Thermosensor power off                                          */
  MDR_ADC_ADC1_Cfg_TS_EN_Enable        = 1,     /*!< Enable : Thermosensor power on                                            */
} MDR_ADC_ADC1_Cfg_TS_EN_Enum;

/* =========================================  MDR_ADC ADC1_Cfg TS_BUFF_EN [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_TS_BUFF_EN                                               */
  MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Disable  = 0,     /*!< Disable : Thermosensor buffer disabled                                    */
  MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Enable   = 1,     /*!< Enable : Thermosensor buffer enabled                                      */
} MDR_ADC_ADC1_Cfg_TS_BUFF_EN_Enum;

/* ===========================================  MDR_ADC ADC1_Cfg SEL_TS [19..19]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SEL_TS                                                   */
  MDR_ADC_ADC1_Cfg_SEL_TS_Disable      = 0,     /*!< Disable : Channel 31 signal is undefined                                  */
  MDR_ADC_ADC1_Cfg_SEL_TS_Selected     = 1,     /*!< Selected : Channel 31 signal is temperature                               */
} MDR_ADC_ADC1_Cfg_SEL_TS_Enum;

/* ==========================================  MDR_ADC ADC1_Cfg SEL_VREF [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_SEL_VREF                                                 */
  MDR_ADC_ADC1_Cfg_SEL_VREF_Disable    = 0,     /*!< Disable : Channel 30 signal is undefined                                  */
  MDR_ADC_ADC1_Cfg_SEL_VREF_Selected   = 1,     /*!< Selected : Channel 30 signal is VRef                                      */
} MDR_ADC_ADC1_Cfg_SEL_VREF_Enum;

/* ==========================================  MDR_ADC ADC1_Cfg Delay_GO [25..27]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_Cfg_Delay_GO                                                 */
  MDR_ADC_ADC1_Cfg_Delay_GO_1          = 0,     /*!< 1 : 1 period of CPU_CLK                                                   */
  MDR_ADC_ADC1_Cfg_Delay_GO_2          = 1,     /*!< 2 : 2 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_3          = 2,     /*!< 3 : 3 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_4          = 3,     /*!< 4 : 4 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_5          = 4,     /*!< 5 : 5 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_6          = 5,     /*!< 6 : 6 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_7          = 6,     /*!< 7 : 7 periods of CPU_CLK                                                  */
  MDR_ADC_ADC1_Cfg_Delay_GO_8          = 7,     /*!< 8 : 8 periods of CPU_CLK                                                  */
} MDR_ADC_ADC1_Cfg_Delay_GO_Enum;

/* =======================================================  ADC2_Cfg  ======================================================== */
/* ===========================================  MDR_ADC ADC2_Cfg ADC1_OP [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC2_Cfg_ADC1_OP                                                  */
  MDR_ADC_ADC2_Cfg_ADC1_OP_Own         = 0,     /*!< Own : Own setpoint Vref                                                   */
  MDR_ADC_ADC2_Cfg_ADC1_OP_Thermosensor = 1,    /*!< Thermosensor : Setpoint Vref from Thermosensor                            */
} MDR_ADC_ADC2_Cfg_ADC1_OP_Enum;

/* =====================================================  ADC1_H_Level  ====================================================== */
/* =====================================================  ADC1_L_Level  ====================================================== */
/* ======================================================  ADC1_RESULT  ====================================================== */
/* =========================================  MDR_ADC ADC1_RESULT Channel [16..20]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_RESULT_Channel                                               */
  MDR_ADC_ADC1_RESULT_Channel_Channel_0_RefN = 0,/*!< Channel_0_RefN : Signal on PC4, Ref-                                     */
  MDR_ADC_ADC1_RESULT_Channel_Channel_1_RefP = 1,/*!< Channel_1_RefP : Signal on PC3, Ref+                                     */
  MDR_ADC_ADC1_RESULT_Channel_Channel_2 = 2,    /*!< Channel_2 : Signal on PC2                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_3 = 3,    /*!< Channel_3 : Signal on PC1                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_4 = 4,    /*!< Channel_4 : Signal on PB9                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_5 = 5,    /*!< Channel_5 : Signal on PB8                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_6 = 6,    /*!< Channel_6 : Signal on PB7                                                 */
  MDR_ADC_ADC1_RESULT_Channel_Channel_7 = 7,    /*!< Channel_7 : Signal on PB6                                                 */
  MDR_ADC_ADC1_RESULT_Channel_TS_VRef_1.23 = 30,/*!< TS_VRef_1.23 : Signal from Thermosensor                                   */
  MDR_ADC_ADC1_RESULT_Channel_TS_Temperature = 31,/*!< TS_Temperature : Signal from Thermosensor                               */
} MDR_ADC_ADC1_RESULT_Channel_Enum;

/* ======================================================  ADC1_STATUS  ====================================================== */
/* =========================================  MDR_ADC ADC1_STATUS Overwrite [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_Overwrite                                             */
  MDR_ADC_ADC1_STATUS_Overwrite_Normal = 0,     /*!< Normal : No overwritten occure                                            */
  MDR_ADC_ADC1_STATUS_Overwrite_Overwrite = 1,  /*!< Overwrite : Result overwritten                                            */
} MDR_ADC_ADC1_STATUS_Overwrite_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS AWOIFEN [1..1]  =========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_AWOIFEN                                               */
  MDR_ADC_ADC1_STATUS_AWOIFEN_InRange  = 0,     /*!< InRange : Signal in range                                                 */
  MDR_ADC_ADC1_STATUS_AWOIFEN_OutOfRange = 1,   /*!< OutOfRange : Signal is out of range                                       */
} MDR_ADC_ADC1_STATUS_AWOIFEN_Enum;

/* ===========================================  MDR_ADC ADC1_STATUS EOCIF [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_EOCIF                                                 */
  MDR_ADC_ADC1_STATUS_EOCIF_NoResult   = 0,     /*!< NoResult : Result is not ready                                            */
  MDR_ADC_ADC1_STATUS_EOCIF_Ready      = 1,     /*!< Ready : Signal is ready to read                                           */
} MDR_ADC_ADC1_STATUS_EOCIF_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS AWOIF_IE [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_AWOIF_IE                                              */
  MDR_ADC_ADC1_STATUS_AWOIF_IE_Disable = 0,     /*!< Disable : IRQ Disable                                                     */
  MDR_ADC_ADC1_STATUS_AWOIF_IE_Enable  = 1,     /*!< Enable : IRQ Enable                                                       */
} MDR_ADC_ADC1_STATUS_AWOIF_IE_Enum;

/* ==========================================  MDR_ADC ADC1_STATUS EOCIF_EN [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_STATUS_EOCIF_EN                                              */
  MDR_ADC_ADC1_STATUS_EOCIF_EN_Disable = 0,     /*!< Disable : IRQ Disable                                                     */
  MDR_ADC_ADC1_STATUS_EOCIF_EN_Enable  = 1,     /*!< Enable : IRQ Enable                                                       */
} MDR_ADC_ADC1_STATUS_EOCIF_EN_Enum;

/* ======================================================  ADC1_CHSEL  ======================================================= */
/* ==========================================  MDR_ADC ADC1_CHSEL Channel_0 [0..0]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_0                                              */
  MDR_ADC_ADC1_CHSEL_Channel_0_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_0_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_0_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_1 [1..1]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_1                                              */
  MDR_ADC_ADC1_CHSEL_Channel_1_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_1_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_1_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_2 [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_2                                              */
  MDR_ADC_ADC1_CHSEL_Channel_2_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_2_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_2_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_3 [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_3                                              */
  MDR_ADC_ADC1_CHSEL_Channel_3_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_3_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_3_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_4 [4..4]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_4                                              */
  MDR_ADC_ADC1_CHSEL_Channel_4_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_4_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_4_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_5 [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_5                                              */
  MDR_ADC_ADC1_CHSEL_Channel_5_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_5_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_5_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_6 [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_6                                              */
  MDR_ADC_ADC1_CHSEL_Channel_6_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_6_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_6_Enum;

/* ==========================================  MDR_ADC ADC1_CHSEL Channel_7 [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_7                                              */
  MDR_ADC_ADC1_CHSEL_Channel_7_Off     = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_7_Selected = 1,    /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_7_Enum;

/* ========================================  MDR_ADC ADC1_CHSEL Channel_30 [30..30]  ========================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_30                                             */
  MDR_ADC_ADC1_CHSEL_Channel_30_Off    = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_30_Selected = 1,   /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_30_Enum;

/* ========================================  MDR_ADC ADC1_CHSEL Channel_31 [31..31]  ========================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_CHSEL_Channel_31                                             */
  MDR_ADC_ADC1_CHSEL_Channel_31_Off    = 0,     /*!< Off : Not used in channels switching                                      */
  MDR_ADC_ADC1_CHSEL_Channel_31_Selected = 1,   /*!< Selected : Using in channels switching                                    */
} MDR_ADC_ADC1_CHSEL_Channel_31_Enum;

/* =======================================================  ADC1_TRIM  ======================================================= */
/* ===========================================  MDR_ADC ADC1_TRIM TS_Trim [1..5]  ============================================ */
typedef enum {                                  /*!< MDR_ADC_ADC1_TRIM_TS_Trim                                                 */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v23  = 0,     /*!< Vref_1v23 : 1.23V typically                                               */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v213 = 1,     /*!< Vref_1v213 : 1.213V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v211 = 2,     /*!< Vref_1v211 : 1.211V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v208 = 3,     /*!< Vref_1v208 : 1.208V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v206 = 4,     /*!< Vref_1v206 : 1.206V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v203 = 5,     /*!< Vref_1v203 : 1.203V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v200 = 6,     /*!< Vref_1v200 : 1.200V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v197 = 7,     /*!< Vref_1v197 : 1.197V typically                                             */
  MDR_ADC_ADC1_TRIM_TS_Trim_Vref_1v193 = 8,     /*!< Vref_1v193 : 1.193V typically                                             */
} MDR_ADC_ADC1_TRIM_TS_Trim_Enum;

/* =========================================  MDR_ADC ADC1_TRIM SEL_VREF_BUF [6..6]  ========================================= */
typedef enum {                                  /*!< MDR_ADC_ADC1_TRIM_SEL_VREF_BUF                                            */
  MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Disable = 0,   /*!< Disable : Channel 30 signal is undefined                                  */
  MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Selected = 1,  /*!< Selected : Channel 30 signal is VRef_Buf                                  */
} MDR_ADC_ADC1_TRIM_SEL_VREF_BUF_Enum;



/* =========================================================================================================================== */
/* ================                                          MDR_BKP                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  REG_00  ========================================================= */
/* ========================================================  REG_01  ========================================================= */
/* ========================================================  REG_02  ========================================================= */
/* ========================================================  REG_03  ========================================================= */
/* ========================================================  REG_04  ========================================================= */
/* ========================================================  REG_05  ========================================================= */
/* ========================================================  REG_06  ========================================================= */
/* ========================================================  REG_07  ========================================================= */
/* ========================================================  REG_08  ========================================================= */
/* ========================================================  REG_09  ========================================================= */
/* ========================================================  REG_0A  ========================================================= */
/* ========================================================  REG_0B  ========================================================= */
/* ========================================================  REG_0C  ========================================================= */
/* ========================================================  REG_0D  ========================================================= */
/* ========================================================  REG_0E  ========================================================= */
/* ===============================================  MDR_BKP REG_0E LOW [0..2]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_LOW                                                        */
  MDR_BKP_0E__LOW__10MHz               = 0,     /*!< 10MHz : CPU Clock less then 10MHz                                         */
  MDR_BKP_0E__LOW__200KHz              = 1,     /*!< 200KHz : CPU Clock less then 200KHz                                       */
  MDR_BKP_0E__LOW__500KHz              = 2,     /*!< 500KHz : CPU Clock less then 500KHz                                       */
  MDR_BKP_0E__LOW__1MHz                = 3,     /*!< 1MHz : CPU Clock less then 1MHz                                           */
  MDR_BKP_0E__LOW__GensOffz            = 4,     /*!< GensOffz : Generators Off                                                 */
  MDR_BKP_0E__LOW__40MHz               = 5,     /*!< 40MHz : CPU Clock less then 40MHz                                         */
  MDR_BKP_0E__LOW__80MHz               = 6,     /*!< 80MHz : CPU Clock less then 80MHz                                         */
  MDR_BKP_0E__LOW__above_80MHz         = 7,     /*!< above_80MHz : CPU Clock above 10MHz                                       */
} MDR_BKP_0E__LOW__Enum;

/* ============================================  MDR_BKP REG_0E SelectRI [3..5]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0E_SelectRI                                                   */
  MDR_BKP_0E__SelRI__10MHz             = 0,     /*!< 10MHz : Additional I ~ 300uA                                              */
  MDR_BKP_0E__SelRI__200KHz            = 1,     /*!< 200KHz : Additional I ~ 6.6uA                                             */
  MDR_BKP_0E__SelRI__500KHz            = 2,     /*!< 500KHz : Additional I ~ 20A                                               */
  MDR_BKP_0E__SelRI__1MHz              = 3,     /*!< 1MHz : Additional I ~ 80uA                                                */
  MDR_BKP_0E__SelRI__GensOffz          = 4,     /*!< GensOffz : Additional I ~ 2uA                                             */
  MDR_BKP_0E__SelRI__40MHz             = 5,     /*!< 40MHz : Additional I ~ 900uA                                              */
  MDR_BKP_0E__SelRI__80MHz             = 6,     /*!< 80MHz : Additional I ~ 4.4mA                                              */
  MDR_BKP_0E__SelRI__above_80MHz       = 7,     /*!< above_80MHz : Additional I ~ 19mA                                         */
} MDR_BKP_0E__SelRI__Enum;

/* =============================================  MDR_BKP REG_0E Jtag_A [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Jtag_A                                                     */
  MDR_BKP_0E__JtagA__Disable           = 0,     /*!< Disable : Disabled                                                        */
  MDR_BKP_0E__JtagA__Enable            = 1,     /*!< Enable : Enabled                                                          */
} MDR_BKP_0E__JtagA__Enum;

/* =============================================  MDR_BKP REG_0E Jtag_B [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Jtag_B                                                     */
  MDR_BKP_0E__JtagB__Disable           = 0,     /*!< Disable : Disabled                                                        */
  MDR_BKP_0E__JtagB__Enable            = 1,     /*!< Enable : Enabled                                                          */
} MDR_BKP_0E__JtagB__Enum;

/* ===========================================  MDR_BKP REG_0E Trim_dDUcc [8..10]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Trim_dDUcc                                                 */
  MDR_BKP_0E__dDUcc__+0.1              = 0,     /*!< +0.1 : DUcc += 0.1 V                                                      */
  MDR_BKP_0E__dDUcc__+0.06             = 1,     /*!< +0.06 : DUcc += 0.06 V                                                    */
  MDR_BKP_0E__dDUcc__+0.04             = 2,     /*!< +0.04 : DUcc += 0.04 V                                                    */
  MDR_BKP_0E__dDUcc__+0.01             = 3,     /*!< +0.01 : DUcc += 0.01 V                                                    */
  MDR_BKP_0E__dDUcc__-0.01             = 4,     /*!< -0.01 : DUcc -= 0.01 V                                                    */
  MDR_BKP_0E__dDUcc__-0.04             = 5,     /*!< -0.04 : DUcc -= 0.04 V                                                    */
  MDR_BKP_0E__dDUcc__-0.6              = 6,     /*!< -0.6 : DUcc -= 0.06 V                                                     */
  MDR_BKP_0E__dDUcc__-0.1              = 7,     /*!< -0.1 : DUcc -= 0.1 V                                                      */
} MDR_BKP_0E__dDUcc__Enum;

/* =============================================  MDR_BKP REG_0E FPOR [11..11]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_FPOR                                                       */
  MDR_BKP_0E__FPOR__Low                = 0,     /*!< Low : No Bootloader                                                       */
  MDR_BKP_0E__FPOR__High               = 1,     /*!< High : Bootloader completed                                               */
} MDR_BKP_0E__FPOR__Enum;

/* ===========================================  MDR_BKP REG_0E Trim_DUcc [12..13]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0E_Trim_DUcc                                                  */
  MDR_BKP_0E__DUcc__1.8                = 0,     /*!< 1.8 : DUcc = 1.8 V                                                        */
  MDR_BKP_0E__DUcc__1.6                = 1,     /*!< 1.6 : DUcc = 1.6 V                                                        */
  MDR_BKP_0E__DUcc__1.4                = 2,     /*!< 1.4 : DUcc = 1.4 V                                                        */
  MDR_BKP_0E__DUcc__1.2                = 3,     /*!< 1.2 : DUcc = 1.2 V                                                        */
} MDR_BKP_0E__DUcc__Enum;

/* ============================================  MDR_BKP REG_0E COVDET [14..14]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0E_COVDET                                                     */
  MDR_BKP_0E__COVDET__Off              = 0,     /*!< Off : No dreaking access detected                                         */
  MDR_BKP_0E__COVDET__On               = 1,     /*!< On : Breaking access detected                                             */
} MDR_BKP_0E__COVDET__Enum;

/* ============================================  MDR_BKP REG_0E I_LimEn [15..15]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0E_I_LimEn                                                    */
  MDR_BKP_0E__Ilim__Disable            = 0,     /*!< Disable : Disabled                                                        */
  MDR_BKP_0E__Ilim__Enable             = 1,     /*!< Enable : Enabled                                                          */
} MDR_BKP_0E__Ilim__Enum;

/* ========================================================  REG_0F  ========================================================= */
/* =============================================  MDR_BKP REG_0F LSE_ON [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_ON                                                     */
  MDR_RTC__LSE_ON__Off                 = 0,     /*!< Off : Disable state                                                       */
  MDR_RTC__LSE_ON__On                  = 1,     /*!< On : Enable state                                                         */
} MDR_RTC__LSE_ON__Enum;

/* =============================================  MDR_BKP REG_0F LSE_BYP [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_BYP                                                    */
  MDR_RTC__LSE_BYP__Off                = 0,     /*!< Off : Use for external resonator                                          */
  MDR_RTC__LSE_BYP__On                 = 1,     /*!< On : Use for external generator                                           */
} MDR_RTC__LSE_BYP__Enum;

/* =============================================  MDR_BKP REG_0F RTC_SEL [2..3]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_SEL                                                    */
  MDR_BKP_REG_0F_RTC_SEL_LSI           = 0,     /*!< LSI : RTC use LSI clock                                                   */
  MDR_BKP_REG_0F_RTC_SEL_LSE           = 1,     /*!< LSE : RTC use LSE clock                                                   */
  MDR_BKP_REG_0F_RTC_SEL_HSIRTC        = 2,     /*!< HSIRTC : RTC use HSIRTC clock                                             */
  MDR_BKP_REG_0F_RTC_SEL_HSERTC        = 3,     /*!< HSERTC : RTC use HSERTC clock                                             */
} MDR_BKP_REG_0F_RTC_SEL_Enum;

/* =============================================  MDR_BKP REG_0F RTC_EN [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_EN                                                     */
  MDR_BKP_REG_0F_RTC_EN_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_RTC_EN_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_RTC_EN_Enum;

/* ============================================  MDR_BKP REG_0F LSE_RDY [13..13]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSE_RDY                                                    */
  MDR_BKP_REG_0F_LSE_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_LSE_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_LSE_RDY_Enum;

/* ============================================  MDR_BKP REG_0F LSI_ON [15..15]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_ON                                                     */
  MDR_BKP_REG_0F_LSI_ON_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_LSI_ON_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_LSI_ON_Enum;

/* ===========================================  MDR_BKP REG_0F LSI_TRIM [16..20]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_TRIM                                                   */
  MDR_BKP_REG_0F_LSI_TRIM_69KHz        = 0,     /*!< 69KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_65KHz        = 1,     /*!< 65KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_60KHz        = 2,     /*!< 60KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_58KHz        = 3,     /*!< 58KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_52KHz        = 4,     /*!< 52KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_50KHz        = 5,     /*!< 50KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_49KHz        = 6,     /*!< 49KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_45KHz        = 7,     /*!< 45KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_44KHz        = 8,     /*!< 44KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_42KHz        = 9,     /*!< 42KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_40KHz        = 10,    /*!< 40KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_39KHz        = 11,    /*!< 39KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_37KHz        = 12,    /*!< 37KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_36KHz        = 13,    /*!< 36KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_35KHz        = 14,    /*!< 35KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_33KHz        = 15,    /*!< 33KHz : LSI frequency tuner                                               */
  MDR_BKP_REG_0F_LSI_TRIM_32KHz        = 16,    /*!< 32KHz : LSI frequency tuner                                               */
} MDR_BKP_REG_0F_LSI_TRIM_Enum;

/* ============================================  MDR_BKP REG_0F LSI_RDY [21..21]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_LSI_RDY                                                    */
  MDR_BKP_REG_0F_LSI_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_LSI_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_LSI_RDY_Enum;

/* ============================================  MDR_BKP REG_0F HSI_ON [22..22]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_REG_0F_HSI_ON                                                     */
  MDR_BKP_REG_0F_HSI_ON_Off            = 0,     /*!< Off : Disable state                                                       */
  MDR_BKP_REG_0F_HSI_ON_On             = 1,     /*!< On : Enable state                                                         */
} MDR_BKP_REG_0F_HSI_ON_Enum;

/* ============================================  MDR_BKP REG_0F HSI_RDY [23..23]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_HSI_RDY                                                    */
  MDR_BKP_REG_0F_HSI_RDY_NotReady      = 0,     /*!< NotReady : No frequency or unstable                                       */
  MDR_BKP_REG_0F_HSI_RDY_Ready         = 1,     /*!< Ready : Frequency ready                                                   */
} MDR_BKP_REG_0F_HSI_RDY_Enum;

/* ============================================  MDR_BKP REG_0F Standby [30..30]  ============================================ */
typedef enum {                                  /*!< MDR_BKP_REG_0F_Standby                                                    */
  MDR_BKP_REG_0F_Standby_Disable       = 0,     /*!< Disable : Normal mode, DUcc is On                                         */
  MDR_BKP_REG_0F_Standby_Enable        = 1,     /*!< Enable : Standby mode, DUcc is Off                                        */
} MDR_BKP_REG_0F_Standby_Enum;

/* ===========================================  MDR_BKP REG_0F RTC_RESET [31..31]  =========================================== */
typedef enum {                                  /*!< MDR_BKP_REG_0F_RTC_RESET                                                  */
  MDR_BKP_REG_0F_RTC_RESET_Active      = 0,     /*!< Active : RTC active state                                                 */
  MDR_BKP_REG_0F_RTC_RESET_Reset       = 1,     /*!< Reset : RTC in Reset state                                                */
} MDR_BKP_REG_0F_RTC_RESET_Enum;

/* ========================================================  RTC_CNT  ======================================================== */
/* ========================================================  RTC_DIV  ======================================================== */
/* ========================================================  RTC_PRL  ======================================================== */
/* =======================================================  RTC_ALRM  ======================================================== */
/* ========================================================  RTC_CS  ========================================================= */
/* ===============================================  MDR_BKP RTC_CS OWF [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_OWF                                                        */
  MDR_BKP_RTC_CS_OWF_Off               = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_OWF_On                = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_OWF_Enum;

/* ==============================================  MDR_BKP RTC_CS SECF [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_SECF                                                       */
  MDR_BKP_RTC_CS_SECF_Off              = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_SECF_On               = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_SECF_Enum;

/* ==============================================  MDR_BKP RTC_CS ALRF [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_ALRF                                                       */
  MDR_BKP_RTC_CS_ALRF_Off              = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_ALRF_On               = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_ALRF_Enum;

/* =============================================  MDR_BKP RTC_CS OWF_IE [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_OWF_IE                                                     */
  MDR_BKP_RTC_CS_OWF_IE_Off            = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_OWF_IE_On             = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_OWF_IE_Enum;

/* =============================================  MDR_BKP RTC_CS SECF_IE [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_SECF_IE                                                    */
  MDR_BKP_RTC_CS_SECF_IE_Off           = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_SECF_IE_On            = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_SECF_IE_Enum;

/* =============================================  MDR_BKP RTC_CS ALRF_IE [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_ALRF_IE                                                    */
  MDR_BKP_RTC_CS_ALRF_IE_Off           = 0,     /*!< Off : No Event                                                            */
  MDR_BKP_RTC_CS_ALRF_IE_On            = 1,     /*!< On : Event                                                                */
} MDR_BKP_RTC_CS_ALRF_IE_Enum;

/* ===============================================  MDR_BKP RTC_CS WEC [6..6]  =============================================== */
typedef enum {                                  /*!< MDR_BKP_RTC_CS_WEC                                                        */
  MDR_BKP_RTC_CS_WEC_Ready             = 0,     /*!< Ready : Registers available                                               */
  MDR_BKP_RTC_CS_WEC_Busy              = 1,     /*!< Busy : Registers unavailable                                              */
} MDR_BKP_RTC_CS_WEC_Enum;



/* =========================================================================================================================== */
/* ================                                         MDR_ADCUI                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL1  ========================================================= */
/* ==============================================  MDR_ADCUI CTRL1 I0EN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_I0EN                                                      */
  MDR_ADCUI_CTRL1_I0EN_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_CTRL1_I0EN_On              = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_CTRL1_I0EN_Enum;

/* ==============================================  MDR_ADCUI CTRL1 V0EN [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_V0EN                                                      */
  MDR_ADCUI_CTRL1_V0EN_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_CTRL1_V0EN_On              = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_CTRL1_V0EN_Enum;

/* ==============================================  MDR_ADCUI CTRL1 I1EN [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_I1EN                                                      */
  MDR_ADCUI_CTRL1_I1EN_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_CTRL1_I1EN_On              = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_CTRL1_I1EN_Enum;

/* ==============================================  MDR_ADCUI CTRL1 V1EN [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_V1EN                                                      */
  MDR_ADCUI_CTRL1_V1EN_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_CTRL1_V1EN_On              = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_CTRL1_V1EN_Enum;

/* ==============================================  MDR_ADCUI CTRL1 I2EN [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_I2EN                                                      */
  MDR_ADCUI_CTRL1_I2EN_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_CTRL1_I2EN_On              = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_CTRL1_I2EN_Enum;

/* ==============================================  MDR_ADCUI CTRL1 V2EN [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_V2EN                                                      */
  MDR_ADCUI_CTRL1_V2EN_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_CTRL1_V2EN_On              = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_CTRL1_V2EN_Enum;

/* ==============================================  MDR_ADCUI CTRL1 I3EN [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_I3EN                                                      */
  MDR_ADCUI_CTRL1_I3EN_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_CTRL1_I3EN_On              = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_CTRL1_I3EN_Enum;

/* =============================================  MDR_ADCUI CTRL1 RESOL [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_RESOL                                                     */
  MDR_ADCUI_CTRL1_RESOL_bit_16         = 0,     /*!< bit_16 : 16 bit data                                                      */
  MDR_ADCUI_CTRL1_RESOL_bit_24         = 1,     /*!< bit_24 : 24 bit data                                                      */
} MDR_ADCUI_CTRL1_RESOL_Enum;

/* =============================================  MDR_ADCUI CTRL1 ZXLPF [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_ZXLPF                                                     */
  MDR_ADCUI_CTRL1_ZXLPF_On             = 0,     /*!< On : Enabled                                                              */
  MDR_ADCUI_CTRL1_ZXLPF_Off            = 1,     /*!< Off : Disable                                                             */
} MDR_ADCUI_CTRL1_ZXLPF_Enum;

/* ==========================================  MDR_ADCUI CTRL1 PER_Length [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_PER_Length                                                */
  MDR_ADCUI_CTRL1_PER_Length_Period_1  = 0,     /*!< Period_1 : 1 period                                                       */
  MDR_ADCUI_CTRL1_PER_Length_Period_2  = 1,     /*!< Period_2 : 2 periods                                                      */
  MDR_ADCUI_CTRL1_PER_Length_Period_3  = 2,     /*!< Period_3 : 4 periods                                                      */
  MDR_ADCUI_CTRL1_PER_Length_Period_4  = 3,     /*!< Period_4 : 8 periods                                                      */
  MDR_ADCUI_CTRL1_PER_Length_Period_5  = 4,     /*!< Period_5 : 16 periods                                                     */
  MDR_ADCUI_CTRL1_PER_Length_Period_6  = 5,     /*!< Period_6 : 32 periods                                                     */
  MDR_ADCUI_CTRL1_PER_Length_Period_7  = 6,     /*!< Period_7 : 64 periods                                                     */
  MDR_ADCUI_CTRL1_PER_Length_Period_8  = 7,     /*!< Period_8 : 128 periods                                                    */
} MDR_ADCUI_CTRL1_PER_Length_Enum;

/* ===========================================  MDR_ADCUI CTRL1 APNOLOAD [12..13]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_APNOLOAD                                                  */
  MDR_ADCUI_CTRL1_APNOLOAD_All         = 0,     /*!< All : Accunulate All Energy                                               */
  MDR_ADCUI_CTRL1_APNOLOAD_lv_012      = 1,     /*!< lv_012 : Pass E less than 0.012%                                          */
  MDR_ADCUI_CTRL1_APNOLOAD_lv_0061     = 2,     /*!< lv_0061 : Pass E less than 0.0061%                                        */
  MDR_ADCUI_CTRL1_APNOLOAD_lv_00305    = 3,     /*!< lv_00305 : Pass E less than 0.00305%                                      */
} MDR_ADCUI_CTRL1_APNOLOAD_Enum;

/* ==========================================  MDR_ADCUI CTRL1 VARNOLOAD [15..16]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_VARNOLOAD                                                 */
  MDR_ADCUI_CTRL1_VARNOLOAD_All        = 0,     /*!< All : Accunulate All Energy                                               */
  MDR_ADCUI_CTRL1_VARNOLOAD_lv_012     = 1,     /*!< lv_012 : Pass E less than 0.012%                                          */
  MDR_ADCUI_CTRL1_VARNOLOAD_lv_0061    = 2,     /*!< lv_0061 : Pass E less than 0.0061%                                        */
  MDR_ADCUI_CTRL1_VARNOLOAD_lv_00305   = 3,     /*!< lv_00305 : Pass E less than 0.00305%                                      */
} MDR_ADCUI_CTRL1_VARNOLOAD_Enum;

/* ===========================================  MDR_ADCUI CTRL1 VANOLOAD [17..18]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_VANOLOAD                                                  */
  MDR_ADCUI_CTRL1_VANOLOAD_All         = 0,     /*!< All : Accunulate All Energy                                               */
  MDR_ADCUI_CTRL1_VANOLOAD_lv_012      = 1,     /*!< lv_012 : Pass E less than 0.012%                                          */
  MDR_ADCUI_CTRL1_VANOLOAD_lv_0061     = 2,     /*!< lv_0061 : Pass E less than 0.0061%                                        */
  MDR_ADCUI_CTRL1_VANOLOAD_lv_00305    = 3,     /*!< lv_00305 : Pass E less than 0.00305%                                      */
} MDR_ADCUI_CTRL1_VANOLOAD_Enum;

/* ===========================================  MDR_ADCUI CTRL1 FREQSEL [19..19]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_FREQSEL                                                   */
  MDR_ADCUI_CTRL1_FREQSEL_Off          = 0,     /*!< Off : Hold Last value                                                     */
  MDR_ADCUI_CTRL1_FREQSEL_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_CTRL1_FREQSEL_Enum;

/* ===========================================  MDR_ADCUI CTRL1 VREF_SEL [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_VREF_SEL                                                  */
  MDR_ADCUI_CTRL1_VREF_SEL_Internal    = 0,     /*!< Internal : Internal Vref source                                           */
  MDR_ADCUI_CTRL1_VREF_SEL_External    = 1,     /*!< External : External Vref source                                           */
} MDR_ADCUI_CTRL1_VREF_SEL_Enum;

/* ===========================================  MDR_ADCUI CTRL1 BUF_BYP [21..21]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_BUF_BYP                                                   */
  MDR_ADCUI_CTRL1_BUF_BYP_Buffered     = 0,     /*!< Buffered : Vref through buffer                                            */
  MDR_ADCUI_CTRL1_BUF_BYP_NotBuffered  = 1,     /*!< NotBuffered : Vref bypass buffer                                          */
} MDR_ADCUI_CTRL1_BUF_BYP_Enum;

/* ===========================================  MDR_ADCUI CTRL1 CHOP_EN [22..22]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_CHOP_EN                                                   */
  MDR_ADCUI_CTRL1_CHOP_EN_Normal       = 0,     /*!< Normal : Normal mode                                                      */
  MDR_ADCUI_CTRL1_CHOP_EN_Chopper      = 1,     /*!< Chopper : Chopper mode                                                    */
} MDR_ADCUI_CTRL1_CHOP_EN_Enum;

/* ==========================================  MDR_ADCUI CTRL1 CHOP_FREQ [23..24]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_CHOP_FREQ                                                 */
  MDR_ADCUI_CTRL1_CHOP_FREQ_fADC_div2  = 0,     /*!< fADC_div2 : ADC freq div 2                                                */
  MDR_ADCUI_CTRL1_CHOP_FREQ_fADC_div4  = 1,     /*!< fADC_div4 : ADC freq div 4                                                */
  MDR_ADCUI_CTRL1_CHOP_FREQ_fADC_div8  = 2,     /*!< fADC_div8 : ADC freq div 8                                                */
  MDR_ADCUI_CTRL1_CHOP_FREQ_fADC_div16 = 3,     /*!< fADC_div16 : ADC freq div 16                                              */
} MDR_ADCUI_CTRL1_CHOP_FREQ_Enum;

/* ============================================  MDR_ADCUI CTRL1 ZXRMS [27..27]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_ZXRMS                                                     */
  MDR_ADCUI_CTRL1_ZXRMS_Continuous     = 0,     /*!< Continuous : Continuous RMS update                                        */
  MDR_ADCUI_CTRL1_ZXRMS_OnZeroV0       = 1,     /*!< OnZeroV0 : Update on V0 cross zero level                                  */
} MDR_ADCUI_CTRL1_ZXRMS_Enum;

/* ==========================================  MDR_ADCUI CTRL1 RESET_DIG [28..28]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_RESET_DIG                                                 */
  MDR_ADCUI_CTRL1_RESET_DIG_Inactive   = 0,     /*!< Inactive : Working mode                                                   */
  MDR_ADCUI_CTRL1_RESET_DIG_Reset      = 1,     /*!< Reset : Logic in reset                                                    */
} MDR_ADCUI_CTRL1_RESET_DIG_Enum;

/* ============================================  MDR_ADCUI CTRL1 IBOOST [29..29]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_IBOOST                                                    */
  MDR_ADCUI_CTRL1_IBOOST_Normal        = 0,     /*!< Normal : Working mode                                                     */
  MDR_ADCUI_CTRL1_IBOOST_Boost         = 1,     /*!< Boost : Boost I enabled                                                   */
} MDR_ADCUI_CTRL1_IBOOST_Enum;

/* ===========================================  MDR_ADCUI CTRL1 OSR_CONF [30..31]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_CTRL1_OSR_CONF                                                  */
  MDR_ADCUI_CTRL1_OSR_CONF_4kHz        = 0,     /*!< 4kHz : Sampling at 4kHz                                                   */
  MDR_ADCUI_CTRL1_OSR_CONF_8kHz        = 1,     /*!< 8kHz : Sampling at 8kHz                                                   */
  MDR_ADCUI_CTRL1_OSR_CONF_16kHz       = 2,     /*!< 16kHz : Sampling at 16kHz                                                 */
} MDR_ADCUI_CTRL1_OSR_CONF_Enum;

/* =========================================================  CTRL2  ========================================================= */
/* =========================================================  CTRL3  ========================================================= */
/* =========================================================  F0CTR  ========================================================= */
/* =============================================  MDR_ADCUI F0CTR I0NTEN [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_I0NTEN                                                    */
  MDR_ADCUI_F0CTR_I0NTEN_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0CTR_I0NTEN_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0CTR_I0NTEN_Enum;

/* =============================================  MDR_ADCUI F0CTR I3NTEN [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_I3NTEN                                                    */
  MDR_ADCUI_F0CTR_I3NTEN_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0CTR_I3NTEN_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0CTR_I3NTEN_Enum;

/* =============================================  MDR_ADCUI F0CTR VASEL [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_VASEL                                                     */
  MDR_ADCUI_F0CTR_VASEL_FullEnergy     = 0,     /*!< FullEnergy : I0DAT and VDAT can store FullEnergy                          */
  MDR_ADCUI_F0CTR_VASEL_I_RMS          = 1,     /*!< I_RMS : I0DAT and VDAT can store I_RMS                                    */
} MDR_ADCUI_F0CTR_VASEL_Enum;

/* ==============================================  MDR_ADCUI F0CTR RARS [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_RARS                                                      */
  MDR_ADCUI_F0CTR_RARS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F0CTR_RARS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F0CTR_RARS_Enum;

/* ==============================================  MDR_ADCUI F0CTR RRRS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_RRRS                                                      */
  MDR_ADCUI_F0CTR_RRRS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F0CTR_RRRS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F0CTR_RRRS_Enum;

/* ==============================================  MDR_ADCUI F0CTR RVRS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_RVRS                                                      */
  MDR_ADCUI_F0CTR_RVRS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F0CTR_RVRS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F0CTR_RVRS_Enum;

/* =============================================  MDR_ADCUI F0CTR I0GAIN [6..7]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_I0GAIN                                                    */
  MDR_ADCUI_F0CTR_I0GAIN_x1            = 0,     /*!< x1 : Signal amplification 0dB                                             */
  MDR_ADCUI_F0CTR_I0GAIN_x2            = 1,     /*!< x2 : Signal amplification 6dB                                             */
  MDR_ADCUI_F0CTR_I0GAIN_x4            = 2,     /*!< x4 : Signal amplification 12dB                                            */
  MDR_ADCUI_F0CTR_I0GAIN_x8            = 3,     /*!< x8 : Signal amplification 18dB                                            */
} MDR_ADCUI_F0CTR_I0GAIN_Enum;

/* =============================================  MDR_ADCUI F0CTR VGAIN [8..9]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_VGAIN                                                     */
  MDR_ADCUI_F0CTR_VGAIN_x1             = 0,     /*!< x1 : Signal amplification 0dB                                             */
  MDR_ADCUI_F0CTR_VGAIN_x2             = 1,     /*!< x2 : Signal amplification 6dB                                             */
  MDR_ADCUI_F0CTR_VGAIN_x4             = 2,     /*!< x4 : Signal amplification 12dB                                            */
  MDR_ADCUI_F0CTR_VGAIN_x8             = 3,     /*!< x8 : Signal amplification 18dB                                            */
} MDR_ADCUI_F0CTR_VGAIN_Enum;

/* ============================================  MDR_ADCUI F0CTR I3GAIN [18..19]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0CTR_I3GAIN                                                    */
  MDR_ADCUI_F0CTR_I3GAIN_x1            = 0,     /*!< x1 : Signal amplification 0dB                                             */
  MDR_ADCUI_F0CTR_I3GAIN_x2            = 1,     /*!< x2 : Signal amplification 6dB                                             */
  MDR_ADCUI_F0CTR_I3GAIN_x4            = 2,     /*!< x4 : Signal amplification 12dB                                            */
  MDR_ADCUI_F0CTR_I3GAIN_x8            = 3,     /*!< x8 : Signal amplification 18dB                                            */
} MDR_ADCUI_F0CTR_I3GAIN_Enum;

/* =========================================================  F0WC  ========================================================== */
/* ========================================================  F0WATTP  ======================================================== */
/* ========================================================  F0WATTN  ======================================================== */
/* =========================================================  F0VC  ========================================================== */
/* ========================================================  F0VARP  ========================================================= */
/* ========================================================  F0VARN  ========================================================= */
/* =========================================================  F0AC  ========================================================== */
/* =========================================================  F0VR  ========================================================== */
/* =========================================================  F0MD0  ========================================================= */
/* ==============================================  MDR_ADCUI F0MD0 VSEL [0..1]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_VSEL                                                      */
  MDR_ADCUI_F0MD0_VSEL_ADC_V           = 0,     /*!< ADC_V : ADC_V output                                                      */
  MDR_ADCUI_F0MD0_VSEL_ActivePower     = 1,     /*!< ActivePower : Active Power                                                */
  MDR_ADCUI_F0MD0_VSEL_ReactivePower   = 2,     /*!< ReactivePower : Reactive Power                                            */
  MDR_ADCUI_F0MD0_VSEL_FullPower       = 3,     /*!< FullPower : Full Power                                                    */
} MDR_ADCUI_F0MD0_VSEL_Enum;

/* ==============================================  MDR_ADCUI F0MD0 ISEL [2..3]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_ISEL                                                      */
  MDR_ADCUI_F0MD0_ISEL_ADC_I0          = 0,     /*!< ADC_I0 : ADC_I0 output                                                    */
  MDR_ADCUI_F0MD0_ISEL_ActivePower     = 1,     /*!< ActivePower : Active Power                                                */
  MDR_ADCUI_F0MD0_ISEL_ReactivePower   = 2,     /*!< ReactivePower : Reactive Power                                            */
  MDR_ADCUI_F0MD0_ISEL_FullPower       = 3,     /*!< FullPower : Full Power                                                    */
} MDR_ADCUI_F0MD0_ISEL_Enum;

/* ==============================================  MDR_ADCUI F0MD0 ACTS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_ACTS                                                      */
  MDR_ADCUI_F0MD0_ACTS_Pos             = 0,     /*!< Pos : Positive sign                                                       */
  MDR_ADCUI_F0MD0_ACTS_Neg             = 1,     /*!< Neg : Negative sign                                                       */
} MDR_ADCUI_F0MD0_ACTS_Enum;

/* =============================================  MDR_ADCUI F0MD0 REACTS [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_REACTS                                                    */
  MDR_ADCUI_F0MD0_REACTS_Pos           = 0,     /*!< Pos : Positive sign                                                       */
  MDR_ADCUI_F0MD0_REACTS_Neg           = 1,     /*!< Neg : Negative sign                                                       */
} MDR_ADCUI_F0MD0_REACTS_Enum;

/* =============================================  MDR_ADCUI F0MD0 IOGAIN [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_IOGAIN                                                    */
  MDR_ADCUI_F0MD0_IOGAIN_x1            = 0,     /*!< x1 : No gain                                                              */
  MDR_ADCUI_F0MD0_IOGAIN_x2            = 1,     /*!< x2 : Gain by +6dB                                                         */
} MDR_ADCUI_F0MD0_IOGAIN_Enum;

/* =============================================  MDR_ADCUI F0MD0 V0GAIN [7..7]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_V0GAIN                                                    */
  MDR_ADCUI_F0MD0_V0GAIN_x1            = 0,     /*!< x1 : No gain                                                              */
  MDR_ADCUI_F0MD0_V0GAIN_x2            = 1,     /*!< x2 : Gain by +6dB                                                         */
} MDR_ADCUI_F0MD0_V0GAIN_Enum;

/* =============================================  MDR_ADCUI F0MD0 I3GAIN [8..8]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_I3GAIN                                                    */
  MDR_ADCUI_F0MD0_I3GAIN_x1            = 0,     /*!< x1 : No gain                                                              */
  MDR_ADCUI_F0MD0_I3GAIN_x2            = 1,     /*!< x2 : Gain by +6dB                                                         */
} MDR_ADCUI_F0MD0_I3GAIN_Enum;

/* ============================================  MDR_ADCUI F0MD0 I3SEL [29..29]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_I3SEL                                                     */
  MDR_ADCUI_F0MD0_I3SEL_I3_LPF         = 0,     /*!< I3_LPF : Signal after LPF                                                 */
  MDR_ADCUI_F0MD0_I3SEL_ADC_I3         = 1,     /*!< ADC_I3 : ADC_I3 output                                                    */
} MDR_ADCUI_F0MD0_I3SEL_Enum;

/* ===========================================  MDR_ADCUI F0MD0 SEL_I_CH [30..31]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MD0_SEL_I_CH                                                  */
  MDR_ADCUI_F0MD0_SEL_I_CH_Auto_max    = 0,     /*!< Auto_max : Select max of I0 and I3                                        */
  MDR_ADCUI_F0MD0_SEL_I_CH_I0          = 1,     /*!< I0 : Calc Power by I0                                                     */
  MDR_ADCUI_F0MD0_SEL_I_CH_I3          = 2,     /*!< I3 : Calc Power by I3                                                     */
} MDR_ADCUI_F0MD0_SEL_I_CH_Enum;

/* =========================================================  F0MD1  ========================================================= */
/* ========================================================  F0VPEAK  ======================================================== */
/* ========================================================  F0IPEAK  ======================================================== */
/* ========================================================  F0VDAT  ========================================================= */
/* ========================================================  F0I0DAT  ======================================================== */
/* ========================================================  F0I3DAT  ======================================================== */
/* ========================================================  F0VRMS  ========================================================= */
/* ========================================================  F0VRMS2  ======================================================== */
/* ========================================================  F0IRMS  ========================================================= */
/* ========================================================  F0IRMS2  ======================================================== */
/* ========================================================  F0STAT  ========================================================= */
/* ============================================  MDR_ADCUI F0STAT VF_EMP [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VF_EMP                                                   */
  MDR_ADCUI_F0STAT_VF_EMP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VF_EMP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VF_EMP_Enum;

/* ============================================  MDR_ADCUI F0STAT VF_FLL [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VF_FLL                                                   */
  MDR_ADCUI_F0STAT_VF_FLL_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VF_FLL_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VF_FLL_Enum;

/* ============================================  MDR_ADCUI F0STAT VF_OVER [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VF_OVER                                                  */
  MDR_ADCUI_F0STAT_VF_OVER_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VF_OVER_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VF_OVER_Enum;

/* ============================================  MDR_ADCUI F0STAT IF_EMP [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_IF_EMP                                                   */
  MDR_ADCUI_F0STAT_IF_EMP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_IF_EMP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_IF_EMP_Enum;

/* ============================================  MDR_ADCUI F0STAT IF_FLL [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_IF_FLL                                                   */
  MDR_ADCUI_F0STAT_IF_FLL_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_IF_FLL_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_IF_FLL_Enum;

/* ============================================  MDR_ADCUI F0STAT IF_OVER [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_IF_OVER                                                  */
  MDR_ADCUI_F0STAT_IF_OVER_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_IF_OVER_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_IF_OVER_Enum;

/* =============================================  MDR_ADCUI F0STAT SAGF [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_SAGF                                                     */
  MDR_ADCUI_F0STAT_SAGF_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_SAGF_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_SAGF_Enum;

/* ============================================  MDR_ADCUI F0STAT PEAKVF [7..7]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_PEAKVF                                                   */
  MDR_ADCUI_F0STAT_PEAKVF_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_PEAKVF_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_PEAKVF_Enum;

/* ============================================  MDR_ADCUI F0STAT PEAKIF [8..8]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_PEAKIF                                                   */
  MDR_ADCUI_F0STAT_PEAKIF_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_PEAKIF_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_PEAKIF_Enum;

/* ============================================  MDR_ADCUI F0STAT WATTOVP [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_WATTOVP                                                  */
  MDR_ADCUI_F0STAT_WATTOVP_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_WATTOVP_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_WATTOVP_Enum;

/* ===========================================  MDR_ADCUI F0STAT VAROVP [10..10]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VAROVP                                                   */
  MDR_ADCUI_F0STAT_VAROVP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VAROVP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VAROVP_Enum;

/* ============================================  MDR_ADCUI F0STAT VAOV [11..11]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VAOV                                                     */
  MDR_ADCUI_F0STAT_VAOV_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VAOV_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VAOV_Enum;

/* ============================================  MDR_ADCUI F0STAT ZTXVF [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_ZTXVF                                                    */
  MDR_ADCUI_F0STAT_ZTXVF_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_ZTXVF_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_ZTXVF_Enum;

/* ==========================================  MDR_ADCUI F0STAT ICHANNEL [13..13]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_ICHANNEL                                                 */
  MDR_ADCUI_F0STAT_ICHANNEL_I0         = 0,     /*!< I0 : I0 is active                                                         */
  MDR_ADCUI_F0STAT_ICHANNEL_I3         = 1,     /*!< I3 : I3 is active                                                         */
} MDR_ADCUI_F0STAT_ICHANNEL_Enum;

/* ==========================================  MDR_ADCUI F0STAT FAULTCON [14..14]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_FAULTCON                                                 */
  MDR_ADCUI_F0STAT_FAULTCON_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_FAULTCON_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_FAULTCON_Enum;

/* ===========================================  MDR_ADCUI F0STAT APSIGN [15..15]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_APSIGN                                                   */
  MDR_ADCUI_F0STAT_APSIGN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_APSIGN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_APSIGN_Enum;

/* ===========================================  MDR_ADCUI F0STAT APNLDFL [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_APNLDFL                                                  */
  MDR_ADCUI_F0STAT_APNLDFL_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_APNLDFL_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_APNLDFL_Enum;

/* ===========================================  MDR_ADCUI F0STAT VARSIGN [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VARSIGN                                                  */
  MDR_ADCUI_F0STAT_VARSIGN_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VARSIGN_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VARSIGN_Enum;

/* ==========================================  MDR_ADCUI F0STAT VARNLDFL [18..18]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VARNLDFL                                                 */
  MDR_ADCUI_F0STAT_VARNLDFL_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VARNLDFL_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VARNLDFL_Enum;

/* ===========================================  MDR_ADCUI F0STAT VANLDFL [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VANLDFL                                                  */
  MDR_ADCUI_F0STAT_VANLDFL_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VANLDFL_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VANLDFL_Enum;

/* ===========================================  MDR_ADCUI F0STAT ZEROCRS [21..21]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_ZEROCRS                                                  */
  MDR_ADCUI_F0STAT_ZEROCRS_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_ZEROCRS_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_ZEROCRS_Enum;

/* ===========================================  MDR_ADCUI F0STAT I3F_EMP [22..22]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_I3F_EMP                                                  */
  MDR_ADCUI_F0STAT_I3F_EMP_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_I3F_EMP_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_I3F_EMP_Enum;

/* ===========================================  MDR_ADCUI F0STAT I3F_FLL [23..23]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_I3F_FLL                                                  */
  MDR_ADCUI_F0STAT_I3F_FLL_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_I3F_FLL_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_I3F_FLL_Enum;

/* ==========================================  MDR_ADCUI F0STAT I3F_OVER [24..24]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_I3F_OVER                                                 */
  MDR_ADCUI_F0STAT_I3F_OVER_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_I3F_OVER_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_I3F_OVER_Enum;

/* ===========================================  MDR_ADCUI F0STAT WATTOVN [25..25]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_WATTOVN                                                  */
  MDR_ADCUI_F0STAT_WATTOVN_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_WATTOVN_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_WATTOVN_Enum;

/* ===========================================  MDR_ADCUI F0STAT VAROVN [26..26]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0STAT_VAROVN                                                   */
  MDR_ADCUI_F0STAT_VAROVN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0STAT_VAROVN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0STAT_VAROVN_Enum;

/* ========================================================  F0MASK  ========================================================= */
/* ============================================  MDR_ADCUI F0MASK VF_EMPM [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VF_EMPM                                                  */
  MDR_ADCUI_F0MASK_VF_EMPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VF_EMPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VF_EMPM_Enum;

/* ============================================  MDR_ADCUI F0MASK VF_FLLM [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VF_FLLM                                                  */
  MDR_ADCUI_F0MASK_VF_FLLM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VF_FLLM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VF_FLLM_Enum;

/* ===========================================  MDR_ADCUI F0MASK VF_OVERM [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VF_OVERM                                                 */
  MDR_ADCUI_F0MASK_VF_OVERM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VF_OVERM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VF_OVERM_Enum;

/* ============================================  MDR_ADCUI F0MASK IF_EMPM [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_IF_EMPM                                                  */
  MDR_ADCUI_F0MASK_IF_EMPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_IF_EMPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_IF_EMPM_Enum;

/* ============================================  MDR_ADCUI F0MASK IF_FLLM [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_IF_FLLM                                                  */
  MDR_ADCUI_F0MASK_IF_FLLM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_IF_FLLM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_IF_FLLM_Enum;

/* ===========================================  MDR_ADCUI F0MASK IF_OVERM [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_IF_OVERM                                                 */
  MDR_ADCUI_F0MASK_IF_OVERM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_IF_OVERM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_IF_OVERM_Enum;

/* =============================================  MDR_ADCUI F0MASK SAGFM [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_SAGFM                                                    */
  MDR_ADCUI_F0MASK_SAGFM_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_SAGFM_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_SAGFM_Enum;

/* ============================================  MDR_ADCUI F0MASK PEAKVFM [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_PEAKVFM                                                  */
  MDR_ADCUI_F0MASK_PEAKVFM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_PEAKVFM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_PEAKVFM_Enum;

/* ============================================  MDR_ADCUI F0MASK PEAKIFM [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_PEAKIFM                                                  */
  MDR_ADCUI_F0MASK_PEAKIFM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_PEAKIFM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_PEAKIFM_Enum;

/* ===========================================  MDR_ADCUI F0MASK WATTOVPM [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_WATTOVPM                                                 */
  MDR_ADCUI_F0MASK_WATTOVPM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_WATTOVPM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_WATTOVPM_Enum;

/* ===========================================  MDR_ADCUI F0MASK VAROVPM [10..10]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VAROVPM                                                  */
  MDR_ADCUI_F0MASK_VAROVPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VAROVPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VAROVPM_Enum;

/* ============================================  MDR_ADCUI F0MASK VAOVM [11..11]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VAOVM                                                    */
  MDR_ADCUI_F0MASK_VAOVM_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VAOVM_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VAOVM_Enum;

/* ===========================================  MDR_ADCUI F0MASK ZTXVFM [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_ZTXVFM                                                   */
  MDR_ADCUI_F0MASK_ZTXVFM_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_ZTXVFM_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_ZTXVFM_Enum;

/* ==========================================  MDR_ADCUI F0MASK FAULTCONM [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_FAULTCONM                                                */
  MDR_ADCUI_F0MASK_FAULTCONM_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_FAULTCONM_On        = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_FAULTCONM_Enum;

/* ===========================================  MDR_ADCUI F0MASK APSIGNM [15..15]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_APSIGNM                                                  */
  MDR_ADCUI_F0MASK_APSIGNM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_APSIGNM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_APSIGNM_Enum;

/* ==========================================  MDR_ADCUI F0MASK APNLDFLM [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_APNLDFLM                                                 */
  MDR_ADCUI_F0MASK_APNLDFLM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_APNLDFLM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_APNLDFLM_Enum;

/* ==========================================  MDR_ADCUI F0MASK VARSIGNM [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VARSIGNM                                                 */
  MDR_ADCUI_F0MASK_VARSIGNM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VARSIGNM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VARSIGNM_Enum;

/* ==========================================  MDR_ADCUI F0MASK VARNLDFLM [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VARNLDFLM                                                */
  MDR_ADCUI_F0MASK_VARNLDFLM_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VARNLDFLM_On        = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VARNLDFLM_Enum;

/* ==========================================  MDR_ADCUI F0MASK VANLDFLM [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VANLDFLM                                                 */
  MDR_ADCUI_F0MASK_VANLDFLM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VANLDFLM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VANLDFLM_Enum;

/* ==========================================  MDR_ADCUI F0MASK ZEROCRSM [21..21]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_ZEROCRSM                                                 */
  MDR_ADCUI_F0MASK_ZEROCRSM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_ZEROCRSM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_ZEROCRSM_Enum;

/* ==========================================  MDR_ADCUI F0MASK I3F_EMPM [22..22]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_I3F_EMPM                                                 */
  MDR_ADCUI_F0MASK_I3F_EMPM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_I3F_EMPM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_I3F_EMPM_Enum;

/* ==========================================  MDR_ADCUI F0MASK I3F_FLLM [23..23]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_I3F_FLLM                                                 */
  MDR_ADCUI_F0MASK_I3F_FLLM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_I3F_FLLM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_I3F_FLLM_Enum;

/* ==========================================  MDR_ADCUI F0MASK I3F_OVERM [24..24]  ========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_I3F_OVERM                                                */
  MDR_ADCUI_F0MASK_I3F_OVERM_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_I3F_OVERM_On        = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_I3F_OVERM_Enum;

/* ==========================================  MDR_ADCUI F0MASK WATTOVNM [25..25]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_WATTOVNM                                                 */
  MDR_ADCUI_F0MASK_WATTOVNM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_WATTOVNM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_WATTOVNM_Enum;

/* ===========================================  MDR_ADCUI F0MASK VAROVNM [26..26]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F0MASK_VAROVNM                                                  */
  MDR_ADCUI_F0MASK_VAROVNM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F0MASK_VAROVNM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F0MASK_VAROVNM_Enum;

/* =========================================================  F1CTR  ========================================================= */
/* =============================================  MDR_ADCUI F1CTR INTEN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1CTR_INTEN                                                     */
  MDR_ADCUI_F1CTR_INTEN_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1CTR_INTEN_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1CTR_INTEN_Enum;

/* =============================================  MDR_ADCUI F1CTR VASEL [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1CTR_VASEL                                                     */
  MDR_ADCUI_F1CTR_VASEL_FullEnergy     = 0,     /*!< FullEnergy : IDAT and VDAT can store FullEnergy                           */
  MDR_ADCUI_F1CTR_VASEL_I_RMS          = 1,     /*!< I_RMS : IDAT and VDAT can store I_RMS                                     */
} MDR_ADCUI_F1CTR_VASEL_Enum;

/* ==============================================  MDR_ADCUI F1CTR RARS [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1CTR_RARS                                                      */
  MDR_ADCUI_F1CTR_RARS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F1CTR_RARS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F1CTR_RARS_Enum;

/* ==============================================  MDR_ADCUI F1CTR RRRS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1CTR_RRRS                                                      */
  MDR_ADCUI_F1CTR_RRRS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F1CTR_RRRS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F1CTR_RRRS_Enum;

/* ==============================================  MDR_ADCUI F1CTR RVRS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1CTR_RVRS                                                      */
  MDR_ADCUI_F1CTR_RVRS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F1CTR_RVRS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F1CTR_RVRS_Enum;

/* =============================================  MDR_ADCUI F1CTR IGAIN [6..7]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1CTR_IGAIN                                                     */
  MDR_ADCUI_F1CTR_IGAIN_x1             = 0,     /*!< x1 : Signal amplification 0dB                                             */
  MDR_ADCUI_F1CTR_IGAIN_x2             = 1,     /*!< x2 : Signal amplification 6dB                                             */
  MDR_ADCUI_F1CTR_IGAIN_x4             = 2,     /*!< x4 : Signal amplification 12dB                                            */
  MDR_ADCUI_F1CTR_IGAIN_x8             = 3,     /*!< x8 : Signal amplification 18dB                                            */
} MDR_ADCUI_F1CTR_IGAIN_Enum;

/* =============================================  MDR_ADCUI F1CTR VGAIN [8..9]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1CTR_VGAIN                                                     */
  MDR_ADCUI_F1CTR_VGAIN_x1             = 0,     /*!< x1 : Signal amplification 0dB                                             */
  MDR_ADCUI_F1CTR_VGAIN_x2             = 1,     /*!< x2 : Signal amplification 6dB                                             */
  MDR_ADCUI_F1CTR_VGAIN_x4             = 2,     /*!< x4 : Signal amplification 12dB                                            */
  MDR_ADCUI_F1CTR_VGAIN_x8             = 3,     /*!< x8 : Signal amplification 18dB                                            */
} MDR_ADCUI_F1CTR_VGAIN_Enum;

/* =========================================================  F1WC  ========================================================== */
/* ========================================================  F1WATTP  ======================================================== */
/* ========================================================  F1WATTN  ======================================================== */
/* =========================================================  F1VC  ========================================================== */
/* ========================================================  F1VARP  ========================================================= */
/* ========================================================  F1VARN  ========================================================= */
/* =========================================================  F1AC  ========================================================== */
/* =========================================================  F1VR  ========================================================== */
/* =========================================================  F1MD0  ========================================================= */
/* ==============================================  MDR_ADCUI F1MD0 VSEL [0..1]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MD0_VSEL                                                      */
  MDR_ADCUI_F1MD0_VSEL_ADC_V           = 0,     /*!< ADC_V : ADC_V output                                                      */
  MDR_ADCUI_F1MD0_VSEL_ActivePower     = 1,     /*!< ActivePower : Active Power                                                */
  MDR_ADCUI_F1MD0_VSEL_ReactivePower   = 2,     /*!< ReactivePower : Reactive Power                                            */
  MDR_ADCUI_F1MD0_VSEL_FullPower       = 3,     /*!< FullPower : Full Power                                                    */
} MDR_ADCUI_F1MD0_VSEL_Enum;

/* ==============================================  MDR_ADCUI F1MD0 ISEL [2..3]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MD0_ISEL                                                      */
  MDR_ADCUI_F1MD0_ISEL_ADC_I           = 0,     /*!< ADC_I : ADC_I output                                                      */
  MDR_ADCUI_F1MD0_ISEL_ActivePower     = 1,     /*!< ActivePower : Active Power                                                */
  MDR_ADCUI_F1MD0_ISEL_ReactivePower   = 2,     /*!< ReactivePower : Reactive Power                                            */
  MDR_ADCUI_F1MD0_ISEL_FullPower       = 3,     /*!< FullPower : Full Power                                                    */
} MDR_ADCUI_F1MD0_ISEL_Enum;

/* ==============================================  MDR_ADCUI F1MD0 ACTS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MD0_ACTS                                                      */
  MDR_ADCUI_F1MD0_ACTS_Pos             = 0,     /*!< Pos : Positive sign                                                       */
  MDR_ADCUI_F1MD0_ACTS_Neg             = 1,     /*!< Neg : Negative sign                                                       */
} MDR_ADCUI_F1MD0_ACTS_Enum;

/* =============================================  MDR_ADCUI F1MD0 REACTS [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1MD0_REACTS                                                    */
  MDR_ADCUI_F1MD0_REACTS_Pos           = 0,     /*!< Pos : Positive sign                                                       */
  MDR_ADCUI_F1MD0_REACTS_Neg           = 1,     /*!< Neg : Negative sign                                                       */
} MDR_ADCUI_F1MD0_REACTS_Enum;

/* =============================================  MDR_ADCUI F1MD0 IGAIN [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MD0_IGAIN                                                     */
  MDR_ADCUI_F1MD0_IGAIN_x1             = 0,     /*!< x1 : No gain                                                              */
  MDR_ADCUI_F1MD0_IGAIN_x2             = 1,     /*!< x2 : Gain by +6dB                                                         */
} MDR_ADCUI_F1MD0_IGAIN_Enum;

/* =============================================  MDR_ADCUI F1MD0 VGAIN [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MD0_VGAIN                                                     */
  MDR_ADCUI_F1MD0_VGAIN_x1             = 0,     /*!< x1 : No gain                                                              */
  MDR_ADCUI_F1MD0_VGAIN_x2             = 1,     /*!< x2 : Gain by +6dB                                                         */
} MDR_ADCUI_F1MD0_VGAIN_Enum;

/* =========================================================  F1MD1  ========================================================= */
/* =========================================================  F1MD2  ========================================================= */
/* ========================================================  F1VPEAK  ======================================================== */
/* ========================================================  F1IPEAK  ======================================================== */
/* ========================================================  F1VDAT  ========================================================= */
/* ========================================================  F1IDAT  ========================================================= */
/* ========================================================  F1VRMS  ========================================================= */
/* ========================================================  F1VRMS2  ======================================================== */
/* ========================================================  F1IRMS  ========================================================= */
/* ========================================================  F1IRMS2  ======================================================== */
/* ========================================================  F1STAT  ========================================================= */
/* ============================================  MDR_ADCUI F1STAT VF_EMP [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VF_EMP                                                   */
  MDR_ADCUI_F1STAT_VF_EMP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VF_EMP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VF_EMP_Enum;

/* ============================================  MDR_ADCUI F1STAT VF_FLL [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VF_FLL                                                   */
  MDR_ADCUI_F1STAT_VF_FLL_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VF_FLL_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VF_FLL_Enum;

/* ============================================  MDR_ADCUI F1STAT VF_OVER [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VF_OVER                                                  */
  MDR_ADCUI_F1STAT_VF_OVER_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VF_OVER_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VF_OVER_Enum;

/* ============================================  MDR_ADCUI F1STAT IF_EMP [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_IF_EMP                                                   */
  MDR_ADCUI_F1STAT_IF_EMP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_IF_EMP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_IF_EMP_Enum;

/* ============================================  MDR_ADCUI F1STAT IF_FLL [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_IF_FLL                                                   */
  MDR_ADCUI_F1STAT_IF_FLL_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_IF_FLL_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_IF_FLL_Enum;

/* ============================================  MDR_ADCUI F1STAT IF_OVER [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_IF_OVER                                                  */
  MDR_ADCUI_F1STAT_IF_OVER_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_IF_OVER_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_IF_OVER_Enum;

/* =============================================  MDR_ADCUI F1STAT SAGF [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_SAGF                                                     */
  MDR_ADCUI_F1STAT_SAGF_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_SAGF_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_SAGF_Enum;

/* ============================================  MDR_ADCUI F1STAT PEAKVF [7..7]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_PEAKVF                                                   */
  MDR_ADCUI_F1STAT_PEAKVF_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_PEAKVF_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_PEAKVF_Enum;

/* ============================================  MDR_ADCUI F1STAT PEAKIF [8..8]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_PEAKIF                                                   */
  MDR_ADCUI_F1STAT_PEAKIF_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_PEAKIF_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_PEAKIF_Enum;

/* ============================================  MDR_ADCUI F1STAT WATTOVP [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_WATTOVP                                                  */
  MDR_ADCUI_F1STAT_WATTOVP_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_WATTOVP_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_WATTOVP_Enum;

/* ===========================================  MDR_ADCUI F1STAT VAROVP [10..10]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VAROVP                                                   */
  MDR_ADCUI_F1STAT_VAROVP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VAROVP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VAROVP_Enum;

/* ============================================  MDR_ADCUI F1STAT VAOV [11..11]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VAOV                                                     */
  MDR_ADCUI_F1STAT_VAOV_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VAOV_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VAOV_Enum;

/* ============================================  MDR_ADCUI F1STAT ZTXVF [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_ZTXVF                                                    */
  MDR_ADCUI_F1STAT_ZTXVF_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_ZTXVF_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_ZTXVF_Enum;

/* ===========================================  MDR_ADCUI F1STAT APSIGN [15..15]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_APSIGN                                                   */
  MDR_ADCUI_F1STAT_APSIGN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_APSIGN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_APSIGN_Enum;

/* ===========================================  MDR_ADCUI F1STAT APNLDFL [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_APNLDFL                                                  */
  MDR_ADCUI_F1STAT_APNLDFL_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_APNLDFL_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_APNLDFL_Enum;

/* ===========================================  MDR_ADCUI F1STAT VARSIGN [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VARSIGN                                                  */
  MDR_ADCUI_F1STAT_VARSIGN_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VARSIGN_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VARSIGN_Enum;

/* ==========================================  MDR_ADCUI F1STAT VARNLDFL [18..18]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VARNLDFL                                                 */
  MDR_ADCUI_F1STAT_VARNLDFL_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VARNLDFL_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VARNLDFL_Enum;

/* ===========================================  MDR_ADCUI F1STAT VANLDFL [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VANLDFL                                                  */
  MDR_ADCUI_F1STAT_VANLDFL_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VANLDFL_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VANLDFL_Enum;

/* ===========================================  MDR_ADCUI F1STAT ZEROCRS [21..21]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_ZEROCRS                                                  */
  MDR_ADCUI_F1STAT_ZEROCRS_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_ZEROCRS_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_ZEROCRS_Enum;

/* ===========================================  MDR_ADCUI F1STAT WATTOVN [25..25]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_WATTOVN                                                  */
  MDR_ADCUI_F1STAT_WATTOVN_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_WATTOVN_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_WATTOVN_Enum;

/* ===========================================  MDR_ADCUI F1STAT VAROVN [26..26]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1STAT_VAROVN                                                   */
  MDR_ADCUI_F1STAT_VAROVN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1STAT_VAROVN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1STAT_VAROVN_Enum;

/* ========================================================  F1MASK  ========================================================= */
/* ============================================  MDR_ADCUI F1MASK VF_EMPM [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VF_EMPM                                                  */
  MDR_ADCUI_F1MASK_VF_EMPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VF_EMPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VF_EMPM_Enum;

/* ============================================  MDR_ADCUI F1MASK VF_FLLM [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VF_FLLM                                                  */
  MDR_ADCUI_F1MASK_VF_FLLM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VF_FLLM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VF_FLLM_Enum;

/* ===========================================  MDR_ADCUI F1MASK VF_OVERM [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VF_OVERM                                                 */
  MDR_ADCUI_F1MASK_VF_OVERM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VF_OVERM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VF_OVERM_Enum;

/* ============================================  MDR_ADCUI F1MASK IF_EMPM [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_IF_EMPM                                                  */
  MDR_ADCUI_F1MASK_IF_EMPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_IF_EMPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_IF_EMPM_Enum;

/* ============================================  MDR_ADCUI F1MASK IF_FLLM [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_IF_FLLM                                                  */
  MDR_ADCUI_F1MASK_IF_FLLM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_IF_FLLM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_IF_FLLM_Enum;

/* ===========================================  MDR_ADCUI F1MASK IF_OVERM [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_IF_OVERM                                                 */
  MDR_ADCUI_F1MASK_IF_OVERM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_IF_OVERM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_IF_OVERM_Enum;

/* =============================================  MDR_ADCUI F1MASK SAGFM [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_SAGFM                                                    */
  MDR_ADCUI_F1MASK_SAGFM_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_SAGFM_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_SAGFM_Enum;

/* ============================================  MDR_ADCUI F1MASK PEAKVFM [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_PEAKVFM                                                  */
  MDR_ADCUI_F1MASK_PEAKVFM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_PEAKVFM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_PEAKVFM_Enum;

/* ============================================  MDR_ADCUI F1MASK PEAKIFM [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_PEAKIFM                                                  */
  MDR_ADCUI_F1MASK_PEAKIFM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_PEAKIFM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_PEAKIFM_Enum;

/* ===========================================  MDR_ADCUI F1MASK WATTOVPM [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_WATTOVPM                                                 */
  MDR_ADCUI_F1MASK_WATTOVPM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_WATTOVPM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_WATTOVPM_Enum;

/* ===========================================  MDR_ADCUI F1MASK VAROVPM [10..10]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VAROVPM                                                  */
  MDR_ADCUI_F1MASK_VAROVPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VAROVPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VAROVPM_Enum;

/* ============================================  MDR_ADCUI F1MASK VAOVM [11..11]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VAOVM                                                    */
  MDR_ADCUI_F1MASK_VAOVM_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VAOVM_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VAOVM_Enum;

/* ===========================================  MDR_ADCUI F1MASK ZTXVFM [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_ZTXVFM                                                   */
  MDR_ADCUI_F1MASK_ZTXVFM_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_ZTXVFM_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_ZTXVFM_Enum;

/* ===========================================  MDR_ADCUI F1MASK APSIGNM [15..15]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_APSIGNM                                                  */
  MDR_ADCUI_F1MASK_APSIGNM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_APSIGNM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_APSIGNM_Enum;

/* ==========================================  MDR_ADCUI F1MASK APNLDFLM [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_APNLDFLM                                                 */
  MDR_ADCUI_F1MASK_APNLDFLM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_APNLDFLM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_APNLDFLM_Enum;

/* ==========================================  MDR_ADCUI F1MASK VARSIGNM [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VARSIGNM                                                 */
  MDR_ADCUI_F1MASK_VARSIGNM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VARSIGNM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VARSIGNM_Enum;

/* ==========================================  MDR_ADCUI F1MASK VARNLDFLM [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VARNLDFLM                                                */
  MDR_ADCUI_F1MASK_VARNLDFLM_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VARNLDFLM_On        = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VARNLDFLM_Enum;

/* ==========================================  MDR_ADCUI F1MASK VANLDFLM [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VANLDFLM                                                 */
  MDR_ADCUI_F1MASK_VANLDFLM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VANLDFLM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VANLDFLM_Enum;

/* ==========================================  MDR_ADCUI F1MASK ZEROCRSM [21..21]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_ZEROCRSM                                                 */
  MDR_ADCUI_F1MASK_ZEROCRSM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_ZEROCRSM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_ZEROCRSM_Enum;

/* ==========================================  MDR_ADCUI F1MASK WATTOVNM [25..25]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_WATTOVNM                                                 */
  MDR_ADCUI_F1MASK_WATTOVNM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_WATTOVNM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_WATTOVNM_Enum;

/* ===========================================  MDR_ADCUI F1MASK VAROVNM [26..26]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F1MASK_VAROVNM                                                  */
  MDR_ADCUI_F1MASK_VAROVNM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F1MASK_VAROVNM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F1MASK_VAROVNM_Enum;

/* =========================================================  F2CTR  ========================================================= */
/* =============================================  MDR_ADCUI F2CTR INTEN [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2CTR_INTEN                                                     */
  MDR_ADCUI_F2CTR_INTEN_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2CTR_INTEN_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2CTR_INTEN_Enum;

/* =============================================  MDR_ADCUI F2CTR VASEL [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2CTR_VASEL                                                     */
  MDR_ADCUI_F2CTR_VASEL_FullEnergy     = 0,     /*!< FullEnergy : IDAT and VDAT can store FullEnergy                           */
  MDR_ADCUI_F2CTR_VASEL_I_RMS          = 1,     /*!< I_RMS : IDAT and VDAT can store I_RMS                                     */
} MDR_ADCUI_F2CTR_VASEL_Enum;

/* ==============================================  MDR_ADCUI F2CTR RARS [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2CTR_RARS                                                      */
  MDR_ADCUI_F2CTR_RARS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F2CTR_RARS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F2CTR_RARS_Enum;

/* ==============================================  MDR_ADCUI F2CTR RRRS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2CTR_RRRS                                                      */
  MDR_ADCUI_F2CTR_RRRS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F2CTR_RRRS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F2CTR_RRRS_Enum;

/* ==============================================  MDR_ADCUI F2CTR RVRS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2CTR_RVRS                                                      */
  MDR_ADCUI_F2CTR_RVRS_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_ADCUI_F2CTR_RVRS_Clear           = 1,     /*!< Clear : Accumulator sets to zero                                          */
} MDR_ADCUI_F2CTR_RVRS_Enum;

/* =============================================  MDR_ADCUI F2CTR IGAIN [6..7]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2CTR_IGAIN                                                     */
  MDR_ADCUI_F2CTR_IGAIN_x1             = 0,     /*!< x1 : Signal amplification 0dB                                             */
  MDR_ADCUI_F2CTR_IGAIN_x2             = 1,     /*!< x2 : Signal amplification 6dB                                             */
  MDR_ADCUI_F2CTR_IGAIN_x4             = 2,     /*!< x4 : Signal amplification 12dB                                            */
  MDR_ADCUI_F2CTR_IGAIN_x8             = 3,     /*!< x8 : Signal amplification 18dB                                            */
} MDR_ADCUI_F2CTR_IGAIN_Enum;

/* =============================================  MDR_ADCUI F2CTR VGAIN [8..9]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2CTR_VGAIN                                                     */
  MDR_ADCUI_F2CTR_VGAIN_x1             = 0,     /*!< x1 : Signal amplification 0dB                                             */
  MDR_ADCUI_F2CTR_VGAIN_x2             = 1,     /*!< x2 : Signal amplification 6dB                                             */
  MDR_ADCUI_F2CTR_VGAIN_x4             = 2,     /*!< x4 : Signal amplification 12dB                                            */
  MDR_ADCUI_F2CTR_VGAIN_x8             = 3,     /*!< x8 : Signal amplification 18dB                                            */
} MDR_ADCUI_F2CTR_VGAIN_Enum;

/* =========================================================  F2WC  ========================================================== */
/* ========================================================  F2WATTP  ======================================================== */
/* ========================================================  F2WATTN  ======================================================== */
/* =========================================================  F2VC  ========================================================== */
/* ========================================================  F2VARP  ========================================================= */
/* ========================================================  F2VARN  ========================================================= */
/* =========================================================  F2AC  ========================================================== */
/* =========================================================  F2VR  ========================================================== */
/* =========================================================  F2MD0  ========================================================= */
/* ==============================================  MDR_ADCUI F2MD0 VSEL [0..1]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MD0_VSEL                                                      */
  MDR_ADCUI_F2MD0_VSEL_ADC_V           = 0,     /*!< ADC_V : ADC_V output                                                      */
  MDR_ADCUI_F2MD0_VSEL_ActivePower     = 1,     /*!< ActivePower : Active Power                                                */
  MDR_ADCUI_F2MD0_VSEL_ReactivePower   = 2,     /*!< ReactivePower : Reactive Power                                            */
  MDR_ADCUI_F2MD0_VSEL_FullPower       = 3,     /*!< FullPower : Full Power                                                    */
} MDR_ADCUI_F2MD0_VSEL_Enum;

/* ==============================================  MDR_ADCUI F2MD0 ISEL [2..3]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MD0_ISEL                                                      */
  MDR_ADCUI_F2MD0_ISEL_ADC_I           = 0,     /*!< ADC_I : ADC_I output                                                      */
  MDR_ADCUI_F2MD0_ISEL_ActivePower     = 1,     /*!< ActivePower : Active Power                                                */
  MDR_ADCUI_F2MD0_ISEL_ReactivePower   = 2,     /*!< ReactivePower : Reactive Power                                            */
  MDR_ADCUI_F2MD0_ISEL_FullPower       = 3,     /*!< FullPower : Full Power                                                    */
} MDR_ADCUI_F2MD0_ISEL_Enum;

/* ==============================================  MDR_ADCUI F2MD0 ACTS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MD0_ACTS                                                      */
  MDR_ADCUI_F2MD0_ACTS_Pos             = 0,     /*!< Pos : Positive sign                                                       */
  MDR_ADCUI_F2MD0_ACTS_Neg             = 1,     /*!< Neg : Negative sign                                                       */
} MDR_ADCUI_F2MD0_ACTS_Enum;

/* =============================================  MDR_ADCUI F2MD0 REACTS [5..5]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2MD0_REACTS                                                    */
  MDR_ADCUI_F2MD0_REACTS_Pos           = 0,     /*!< Pos : Positive sign                                                       */
  MDR_ADCUI_F2MD0_REACTS_Neg           = 1,     /*!< Neg : Negative sign                                                       */
} MDR_ADCUI_F2MD0_REACTS_Enum;

/* =============================================  MDR_ADCUI F2MD0 IGAIN [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MD0_IGAIN                                                     */
  MDR_ADCUI_F2MD0_IGAIN_x1             = 0,     /*!< x1 : No gain                                                              */
  MDR_ADCUI_F2MD0_IGAIN_x2             = 1,     /*!< x2 : Gain by +6dB                                                         */
} MDR_ADCUI_F2MD0_IGAIN_Enum;

/* =============================================  MDR_ADCUI F2MD0 VGAIN [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MD0_VGAIN                                                     */
  MDR_ADCUI_F2MD0_VGAIN_x1             = 0,     /*!< x1 : No gain                                                              */
  MDR_ADCUI_F2MD0_VGAIN_x2             = 1,     /*!< x2 : Gain by +6dB                                                         */
} MDR_ADCUI_F2MD0_VGAIN_Enum;

/* =========================================================  F2MD1  ========================================================= */
/* =========================================================  F2MD2  ========================================================= */
/* ========================================================  F2VPEAK  ======================================================== */
/* ========================================================  F2IPEAK  ======================================================== */
/* ========================================================  F2VDAT  ========================================================= */
/* ========================================================  F2IDAT  ========================================================= */
/* ========================================================  F2VRMS  ========================================================= */
/* ========================================================  F2VRMS2  ======================================================== */
/* ========================================================  F2IRMS  ========================================================= */
/* ========================================================  F2IRMS2  ======================================================== */
/* ========================================================  F2STAT  ========================================================= */
/* ============================================  MDR_ADCUI F2STAT VF_EMP [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VF_EMP                                                   */
  MDR_ADCUI_F2STAT_VF_EMP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VF_EMP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VF_EMP_Enum;

/* ============================================  MDR_ADCUI F2STAT VF_FLL [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VF_FLL                                                   */
  MDR_ADCUI_F2STAT_VF_FLL_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VF_FLL_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VF_FLL_Enum;

/* ============================================  MDR_ADCUI F2STAT VF_OVER [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VF_OVER                                                  */
  MDR_ADCUI_F2STAT_VF_OVER_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VF_OVER_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VF_OVER_Enum;

/* ============================================  MDR_ADCUI F2STAT IF_EMP [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_IF_EMP                                                   */
  MDR_ADCUI_F2STAT_IF_EMP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_IF_EMP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_IF_EMP_Enum;

/* ============================================  MDR_ADCUI F2STAT IF_FLL [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_IF_FLL                                                   */
  MDR_ADCUI_F2STAT_IF_FLL_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_IF_FLL_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_IF_FLL_Enum;

/* ============================================  MDR_ADCUI F2STAT IF_OVER [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_IF_OVER                                                  */
  MDR_ADCUI_F2STAT_IF_OVER_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_IF_OVER_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_IF_OVER_Enum;

/* =============================================  MDR_ADCUI F2STAT SAGF [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_SAGF                                                     */
  MDR_ADCUI_F2STAT_SAGF_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_SAGF_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_SAGF_Enum;

/* ============================================  MDR_ADCUI F2STAT PEAKVF [7..7]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_PEAKVF                                                   */
  MDR_ADCUI_F2STAT_PEAKVF_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_PEAKVF_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_PEAKVF_Enum;

/* ============================================  MDR_ADCUI F2STAT PEAKIF [8..8]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_PEAKIF                                                   */
  MDR_ADCUI_F2STAT_PEAKIF_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_PEAKIF_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_PEAKIF_Enum;

/* ============================================  MDR_ADCUI F2STAT WATTOVP [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_WATTOVP                                                  */
  MDR_ADCUI_F2STAT_WATTOVP_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_WATTOVP_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_WATTOVP_Enum;

/* ===========================================  MDR_ADCUI F2STAT VAROVP [10..10]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VAROVP                                                   */
  MDR_ADCUI_F2STAT_VAROVP_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VAROVP_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VAROVP_Enum;

/* ============================================  MDR_ADCUI F2STAT VAOV [11..11]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VAOV                                                     */
  MDR_ADCUI_F2STAT_VAOV_Off            = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VAOV_On             = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VAOV_Enum;

/* ============================================  MDR_ADCUI F2STAT ZTXVF [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_ZTXVF                                                    */
  MDR_ADCUI_F2STAT_ZTXVF_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_ZTXVF_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_ZTXVF_Enum;

/* ===========================================  MDR_ADCUI F2STAT APSIGN [15..15]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_APSIGN                                                   */
  MDR_ADCUI_F2STAT_APSIGN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_APSIGN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_APSIGN_Enum;

/* ===========================================  MDR_ADCUI F2STAT APNLDFL [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_APNLDFL                                                  */
  MDR_ADCUI_F2STAT_APNLDFL_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_APNLDFL_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_APNLDFL_Enum;

/* ===========================================  MDR_ADCUI F2STAT VARSIGN [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VARSIGN                                                  */
  MDR_ADCUI_F2STAT_VARSIGN_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VARSIGN_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VARSIGN_Enum;

/* ==========================================  MDR_ADCUI F2STAT VARNLDFL [18..18]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VARNLDFL                                                 */
  MDR_ADCUI_F2STAT_VARNLDFL_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VARNLDFL_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VARNLDFL_Enum;

/* ===========================================  MDR_ADCUI F2STAT VANLDFL [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VANLDFL                                                  */
  MDR_ADCUI_F2STAT_VANLDFL_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VANLDFL_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VANLDFL_Enum;

/* ===========================================  MDR_ADCUI F2STAT ZEROCRS [21..21]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_ZEROCRS                                                  */
  MDR_ADCUI_F2STAT_ZEROCRS_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_ZEROCRS_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_ZEROCRS_Enum;

/* ===========================================  MDR_ADCUI F2STAT WATTOVN [25..25]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_WATTOVN                                                  */
  MDR_ADCUI_F2STAT_WATTOVN_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_WATTOVN_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_WATTOVN_Enum;

/* ===========================================  MDR_ADCUI F2STAT VAROVN [26..26]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2STAT_VAROVN                                                   */
  MDR_ADCUI_F2STAT_VAROVN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2STAT_VAROVN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2STAT_VAROVN_Enum;

/* ========================================================  F2MASK  ========================================================= */
/* ============================================  MDR_ADCUI F2MASK VF_EMPM [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VF_EMPM                                                  */
  MDR_ADCUI_F2MASK_VF_EMPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VF_EMPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VF_EMPM_Enum;

/* ============================================  MDR_ADCUI F2MASK VF_FLLM [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VF_FLLM                                                  */
  MDR_ADCUI_F2MASK_VF_FLLM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VF_FLLM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VF_FLLM_Enum;

/* ===========================================  MDR_ADCUI F2MASK VF_OVERM [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VF_OVERM                                                 */
  MDR_ADCUI_F2MASK_VF_OVERM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VF_OVERM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VF_OVERM_Enum;

/* ============================================  MDR_ADCUI F2MASK IF_EMPM [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_IF_EMPM                                                  */
  MDR_ADCUI_F2MASK_IF_EMPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_IF_EMPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_IF_EMPM_Enum;

/* ============================================  MDR_ADCUI F2MASK IF_FLLM [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_IF_FLLM                                                  */
  MDR_ADCUI_F2MASK_IF_FLLM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_IF_FLLM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_IF_FLLM_Enum;

/* ===========================================  MDR_ADCUI F2MASK IF_OVERM [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_IF_OVERM                                                 */
  MDR_ADCUI_F2MASK_IF_OVERM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_IF_OVERM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_IF_OVERM_Enum;

/* =============================================  MDR_ADCUI F2MASK SAGFM [6..6]  ============================================= */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_SAGFM                                                    */
  MDR_ADCUI_F2MASK_SAGFM_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_SAGFM_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_SAGFM_Enum;

/* ============================================  MDR_ADCUI F2MASK PEAKVFM [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_PEAKVFM                                                  */
  MDR_ADCUI_F2MASK_PEAKVFM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_PEAKVFM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_PEAKVFM_Enum;

/* ============================================  MDR_ADCUI F2MASK PEAKIFM [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_PEAKIFM                                                  */
  MDR_ADCUI_F2MASK_PEAKIFM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_PEAKIFM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_PEAKIFM_Enum;

/* ===========================================  MDR_ADCUI F2MASK WATTOVPM [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_WATTOVPM                                                 */
  MDR_ADCUI_F2MASK_WATTOVPM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_WATTOVPM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_WATTOVPM_Enum;

/* ===========================================  MDR_ADCUI F2MASK VAROVPM [10..10]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VAROVPM                                                  */
  MDR_ADCUI_F2MASK_VAROVPM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VAROVPM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VAROVPM_Enum;

/* ============================================  MDR_ADCUI F2MASK VAOVM [11..11]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VAOVM                                                    */
  MDR_ADCUI_F2MASK_VAOVM_Off           = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VAOVM_On            = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VAOVM_Enum;

/* ===========================================  MDR_ADCUI F2MASK ZTXVFM [12..12]  ============================================ */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_ZTXVFM                                                   */
  MDR_ADCUI_F2MASK_ZTXVFM_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_ZTXVFM_On           = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_ZTXVFM_Enum;

/* ===========================================  MDR_ADCUI F2MASK APSIGNM [15..15]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_APSIGNM                                                  */
  MDR_ADCUI_F2MASK_APSIGNM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_APSIGNM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_APSIGNM_Enum;

/* ==========================================  MDR_ADCUI F2MASK APNLDFLM [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_APNLDFLM                                                 */
  MDR_ADCUI_F2MASK_APNLDFLM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_APNLDFLM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_APNLDFLM_Enum;

/* ==========================================  MDR_ADCUI F2MASK VARSIGNM [17..17]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VARSIGNM                                                 */
  MDR_ADCUI_F2MASK_VARSIGNM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VARSIGNM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VARSIGNM_Enum;

/* ==========================================  MDR_ADCUI F2MASK VARNLDFLM [18..18]  ========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VARNLDFLM                                                */
  MDR_ADCUI_F2MASK_VARNLDFLM_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VARNLDFLM_On        = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VARNLDFLM_Enum;

/* ==========================================  MDR_ADCUI F2MASK VANLDFLM [20..20]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VANLDFLM                                                 */
  MDR_ADCUI_F2MASK_VANLDFLM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VANLDFLM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VANLDFLM_Enum;

/* ==========================================  MDR_ADCUI F2MASK ZEROCRSM [21..21]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_ZEROCRSM                                                 */
  MDR_ADCUI_F2MASK_ZEROCRSM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_ZEROCRSM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_ZEROCRSM_Enum;

/* ==========================================  MDR_ADCUI F2MASK WATTOVNM [25..25]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_WATTOVNM                                                 */
  MDR_ADCUI_F2MASK_WATTOVNM_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_WATTOVNM_On         = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_WATTOVNM_Enum;

/* ===========================================  MDR_ADCUI F2MASK VAROVNM [26..26]  =========================================== */
typedef enum {                                  /*!< MDR_ADCUI_F2MASK_VAROVNM                                                  */
  MDR_ADCUI_F2MASK_VAROVNM_Off         = 0,     /*!< Off : Disabled                                                            */
  MDR_ADCUI_F2MASK_VAROVNM_On          = 1,     /*!< On : Enabled                                                              */
} MDR_ADCUI_F2MASK_VAROVNM_Enum;

/* =========================================================  CCAL1  ========================================================= */
/* =========================================================  CCAL2  ========================================================= */
/* =========================================================  CCAL3  ========================================================= */
/* =========================================================  CCAL4  ========================================================= */


/* =========================================================================================================================== */
/* ================                                         MDR_UART1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
/* ================================================  MDR_UART1 DR FE [8..8]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_DR_FE                                                           */
  MDR_UART1_DR_FE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_FE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_FE_Enum;

/* ================================================  MDR_UART1 DR PE [9..9]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_DR_PE                                                           */
  MDR_UART1_DR_PE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_PE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_PE_Enum;

/* ===============================================  MDR_UART1 DR BE [10..10]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_DR_BE                                                           */
  MDR_UART1_DR_BE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_BE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_BE_Enum;

/* ===============================================  MDR_UART1 DR OE [11..11]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_DR_OE                                                           */
  MDR_UART1_DR_OE_Ok                   = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_DR_OE_ERROR                = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_DR_OE_Enum;

/* ========================================================  RSR_ECR  ======================================================== */
/* ==============================================  MDR_UART1 RSR_ECR FE [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_FE                                                      */
  MDR_UART1_RSR_ECR_FE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_FE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_FE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR PE [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_PE                                                      */
  MDR_UART1_RSR_ECR_PE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_PE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_PE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR BE [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_BE                                                      */
  MDR_UART1_RSR_ECR_BE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_BE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_BE_Enum;

/* ==============================================  MDR_UART1 RSR_ECR OE [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RSR_ECR_OE                                                      */
  MDR_UART1_RSR_ECR_OE_Ok              = 0,     /*!< Ok : No Error                                                             */
  MDR_UART1_RSR_ECR_OE_ERROR           = 1,     /*!< ERROR : Error is active                                                   */
} MDR_UART1_RSR_ECR_OE_Enum;

/* ==========================================================  FR  =========================================================== */
/* ================================================  MDR_UART1 FR CTS [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_CTS                                                          */
  MDR_UART1_FR_CTS_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_CTS_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_CTS_Enum;

/* ================================================  MDR_UART1 FR DSR [1..1]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_DSR                                                          */
  MDR_UART1_FR_DSR_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_DSR_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_DSR_Enum;

/* ================================================  MDR_UART1 FR DCD [2..2]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_DCD                                                          */
  MDR_UART1_FR_DCD_Inactive            = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_DCD_Active              = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_DCD_Enum;

/* ===============================================  MDR_UART1 FR BUSY [3..3]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_BUSY                                                         */
  MDR_UART1_FR_BUSY_Off                = 0,     /*!< Off : Inactive                                                            */
  MDR_UART1_FR_BUSY_On                 = 1,     /*!< On : Active                                                               */
} MDR_UART1_FR_BUSY_Enum;

/* ===============================================  MDR_UART1 FR RXFE [4..4]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_RXFE                                                         */
  MDR_UART1_FR_RXFE_Inactive           = 0,     /*!< Inactive : FIFO not Empty                                                 */
  MDR_UART1_FR_RXFE_Empty              = 1,     /*!< Empty : FIFO Empty                                                        */
} MDR_UART1_FR_RXFE_Enum;

/* ===============================================  MDR_UART1 FR TXFF [5..5]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_TXFF                                                         */
  MDR_UART1_FR_TXFF_Inactive           = 0,     /*!< Inactive : FIFO not Full                                                  */
  MDR_UART1_FR_TXFF_Full               = 1,     /*!< Full : FIFO Full                                                          */
} MDR_UART1_FR_TXFF_Enum;

/* ===============================================  MDR_UART1 FR RXFF [6..6]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_RXFF                                                         */
  MDR_UART1_FR_RXFF_Inactive           = 0,     /*!< Inactive : FIFO not Full                                                  */
  MDR_UART1_FR_RXFF_Full               = 1,     /*!< Full : FIFO Full                                                          */
} MDR_UART1_FR_RXFF_Enum;

/* ===============================================  MDR_UART1 FR TXFE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_FR_TXFE                                                         */
  MDR_UART1_FR_TXFE_Inactive           = 0,     /*!< Inactive : FIFO not Empty                                                 */
  MDR_UART1_FR_TXFE_Empty              = 1,     /*!< Empty : FIFO Empty                                                        */
} MDR_UART1_FR_TXFE_Enum;

/* ================================================  MDR_UART1 FR RI [8..8]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_FR_RI                                                           */
  MDR_UART1_FR_RI_Inactive             = 0,     /*!< Inactive : Modem line is High                                             */
  MDR_UART1_FR_RI_Active               = 1,     /*!< Active : Modem line is Low                                                */
} MDR_UART1_FR_RI_Enum;

/* =========================================================  ILPR  ========================================================== */
/* =========================================================  IBRD  ========================================================== */
/* =========================================================  FBRD  ========================================================== */
/* =========================================================  LCR_H  ========================================================= */
/* ==============================================  MDR_UART1 LCR_H BRK [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_BRK                                                       */
  MDR_UART1_LCR_H_BRK_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_BRK_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_BRK_Enum;

/* ==============================================  MDR_UART1 LCR_H PEN [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_PEN                                                       */
  MDR_UART1_LCR_H_PEN_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_PEN_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_PEN_Enum;

/* ==============================================  MDR_UART1 LCR_H EPS [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_EPS                                                       */
  MDR_UART1_LCR_H_EPS_Odd              = 0,     /*!< Odd : Odd parity bit                                                      */
  MDR_UART1_LCR_H_EPS_Even             = 1,     /*!< Even : Even parity bit                                                    */
} MDR_UART1_LCR_H_EPS_Enum;

/* ==============================================  MDR_UART1 LCR_H STP2 [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_STP2                                                      */
  MDR_UART1_LCR_H_STP2_Off             = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_STP2_On              = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_STP2_Enum;

/* ==============================================  MDR_UART1 LCR_H FEN [4..4]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_FEN                                                       */
  MDR_UART1_LCR_H_FEN_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_FEN_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_FEN_Enum;

/* ==============================================  MDR_UART1 LCR_H WLEN [5..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_WLEN                                                      */
  MDR_UART1_LCR_H_WLEN_bit_5           = 0,     /*!< bit_5 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_6           = 1,     /*!< bit_6 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_7           = 2,     /*!< bit_7 : Word bits length                                                  */
  MDR_UART1_LCR_H_WLEN_bit_8           = 3,     /*!< bit_8 : Word bits length                                                  */
} MDR_UART1_LCR_H_WLEN_Enum;

/* ==============================================  MDR_UART1 LCR_H SPS [7..7]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_LCR_H_SPS                                                       */
  MDR_UART1_LCR_H_SPS_Off              = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_LCR_H_SPS_On               = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_LCR_H_SPS_Enum;

/* ==========================================================  CR  =========================================================== */
/* ================================================  MDR_UART1 CR EN [0..0]  ================================================= */
typedef enum {                                  /*!< MDR_UART1_CR_EN                                                           */
  MDR_UART1_CR_EN_Off                  = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_EN_On                   = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_EN_Enum;

/* ===============================================  MDR_UART1 CR SIREN [1..1]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_SIREN                                                        */
  MDR_UART1_CR_SIREN_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_SIREN_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_SIREN_Enum;

/* ===============================================  MDR_UART1 CR SIRLP [2..2]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_SIRLP                                                        */
  MDR_UART1_CR_SIRLP_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_SIRLP_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_SIRLP_Enum;

/* ================================================  MDR_UART1 CR LBE [7..7]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_LBE                                                          */
  MDR_UART1_CR_LBE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_LBE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_LBE_Enum;

/* ================================================  MDR_UART1 CR TXE [8..8]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_TXE                                                          */
  MDR_UART1_CR_TXE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_TXE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_TXE_Enum;

/* ================================================  MDR_UART1 CR RXE [9..9]  ================================================ */
typedef enum {                                  /*!< MDR_UART1_CR_RXE                                                          */
  MDR_UART1_CR_RXE_Off                 = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_RXE_On                  = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_RXE_Enum;

/* ===============================================  MDR_UART1 CR DTR [10..10]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_DTR                                                          */
  MDR_UART1_CR_DTR_Inactive            = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_DTR_Active              = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_DTR_Enum;

/* ===============================================  MDR_UART1 CR RTS [11..11]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_RTS                                                          */
  MDR_UART1_CR_RTS_Inactive            = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_RTS_Active              = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_RTS_Enum;

/* ==============================================  MDR_UART1 CR Out1 [12..12]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_Out1                                                         */
  MDR_UART1_CR_Out1_Inactive           = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_Out1_Active             = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_Out1_Enum;

/* ==============================================  MDR_UART1 CR Out2 [13..13]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_Out2                                                         */
  MDR_UART1_CR_Out2_Inactive           = 0,     /*!< Inactive : Sets modem line to Inactive                                    */
  MDR_UART1_CR_Out2_Active             = 1,     /*!< Active : Sets modem line to Active                                        */
} MDR_UART1_CR_Out2_Enum;

/* ==============================================  MDR_UART1 CR RTSEn [14..14]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_RTSEn                                                        */
  MDR_UART1_CR_RTSEn_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_RTSEn_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_RTSEn_Enum;

/* ==============================================  MDR_UART1 CR CTSEn [15..15]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_CR_CTSEn                                                        */
  MDR_UART1_CR_CTSEn_Off               = 0,     /*!< Off : Disabled                                                            */
  MDR_UART1_CR_CTSEn_On                = 1,     /*!< On : Enabled                                                              */
} MDR_UART1_CR_CTSEn_Enum;

/* =========================================================  IFLS  ========================================================== */
/* ============================================  MDR_UART1 IFLS TXIFLSES [0..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IFLS_TXIFLSES                                                   */
  MDR_UART1_IFLS_TXIFLSES_Words_le4    = 0,     /*!< Words_le4 : Less or Equal words in FIFO_TX                                */
  MDR_UART1_IFLS_TXIFLSES_Words_le8    = 1,     /*!< Words_le8 : Less or Equal words in FIFO_TX                                */
  MDR_UART1_IFLS_TXIFLSES_Words_le16   = 2,     /*!< Words_le16 : Less or Equal words in FIFO_TX                               */
  MDR_UART1_IFLS_TXIFLSES_Words_le24   = 3,     /*!< Words_le24 : Less or Equal words in FIFO_TX                               */
  MDR_UART1_IFLS_TXIFLSES_Words_le32   = 4,     /*!< Words_le32 : Less or Equal words in FIFO_TX                               */
} MDR_UART1_IFLS_TXIFLSES_Enum;

/* ============================================  MDR_UART1 IFLS RXIFLSES [3..5]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IFLS_RXIFLSES                                                   */
  MDR_UART1_IFLS_RXIFLSES_Words_ge4    = 0,     /*!< Words_ge4 : Greater or Equal words in FIFO_RX                             */
  MDR_UART1_IFLS_RXIFLSES_Words_ge8    = 1,     /*!< Words_ge8 : Greater or Equal words in FIFO_RX                             */
  MDR_UART1_IFLS_RXIFLSES_Words_ge16   = 2,     /*!< Words_ge16 : Greater or Equal words in FIFO_RX                            */
  MDR_UART1_IFLS_RXIFLSES_Words_ge24   = 3,     /*!< Words_ge24 : Greater or Equal words in FIFO_RX                            */
  MDR_UART1_IFLS_RXIFLSES_Words_ge32   = 4,     /*!< Words_ge32 : Greater or Equal words in FIFO_RX                            */
} MDR_UART1_IFLS_RXIFLSES_Enum;

/* =========================================================  IMSC  ========================================================== */
/* =============================================  MDR_UART1 IMSC RIM_IM [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RIM_IM                                                     */
  MDR_UART1_IMSC_RIM_IM_Off            = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RIM_IM_On             = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RIM_IM_Enum;

/* =============================================  MDR_UART1 IMSC STCM_IM [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_STCM_IM                                                    */
  MDR_UART1_IMSC_STCM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_STCM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_STCM_IM_Enum;

/* =============================================  MDR_UART1 IMSC DCDM_IM [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_DCDM_IM                                                    */
  MDR_UART1_IMSC_DCDM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_DCDM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_DCDM_IM_Enum;

/* =============================================  MDR_UART1 IMSC DSRM_IM [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_DSRM_IM                                                    */
  MDR_UART1_IMSC_DSRM_IM_Off           = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_DSRM_IM_On            = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_DSRM_IM_Enum;

/* ==============================================  MDR_UART1 IMSC RX_IM [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RX_IM                                                      */
  MDR_UART1_IMSC_RX_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RX_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RX_IM_Enum;

/* ==============================================  MDR_UART1 IMSC TX_IM [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_TX_IM                                                      */
  MDR_UART1_IMSC_TX_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_TX_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_TX_IM_Enum;

/* ==============================================  MDR_UART1 IMSC RT_IM [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_RT_IM                                                      */
  MDR_UART1_IMSC_RT_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_RT_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_RT_IM_Enum;

/* ==============================================  MDR_UART1 IMSC FE_IM [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_FE_IM                                                      */
  MDR_UART1_IMSC_FE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_FE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_FE_IM_Enum;

/* ==============================================  MDR_UART1 IMSC PE_IM [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_PE_IM                                                      */
  MDR_UART1_IMSC_PE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_PE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_PE_IM_Enum;

/* ==============================================  MDR_UART1 IMSC BE_IM [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_IMSC_BE_IM                                                      */
  MDR_UART1_IMSC_BE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_BE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_BE_IM_Enum;

/* =============================================  MDR_UART1 IMSC OE_IM [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_IMSC_OE_IM                                                      */
  MDR_UART1_IMSC_OE_IM_Off             = 0,     /*!< Off : IRQ Disabled                                                        */
  MDR_UART1_IMSC_OE_IM_On              = 1,     /*!< On : IRQ Enabled                                                          */
} MDR_UART1_IMSC_OE_IM_Enum;

/* ==========================================================  RIS  ========================================================== */
/* =============================================  MDR_UART1 RIS RIM_RIS [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RIM_RIS                                                     */
  MDR_UART1_RIS_RIM_RIS_Off            = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RIM_RIS_On             = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RIM_RIS_Enum;

/* =============================================  MDR_UART1 RIS STCM_RIS [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_STCM_RIS                                                    */
  MDR_UART1_RIS_STCM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_STCM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_STCM_RIS_Enum;

/* =============================================  MDR_UART1 RIS DCDM_RIS [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_DCDM_RIS                                                    */
  MDR_UART1_RIS_DCDM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_DCDM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_DCDM_RIS_Enum;

/* =============================================  MDR_UART1 RIS DSRM_RIS [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_DSRM_RIS                                                    */
  MDR_UART1_RIS_DSRM_RIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_DSRM_RIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_DSRM_RIS_Enum;

/* ==============================================  MDR_UART1 RIS RX_RIS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RX_RIS                                                      */
  MDR_UART1_RIS_RX_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RX_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RX_RIS_Enum;

/* ==============================================  MDR_UART1 RIS TX_RIS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_TX_RIS                                                      */
  MDR_UART1_RIS_TX_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_TX_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_TX_RIS_Enum;

/* ==============================================  MDR_UART1 RIS RT_RIS [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_RT_RIS                                                      */
  MDR_UART1_RIS_RT_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_RT_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_RT_RIS_Enum;

/* ==============================================  MDR_UART1 RIS FE_RIS [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_FE_RIS                                                      */
  MDR_UART1_RIS_FE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_FE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_FE_RIS_Enum;

/* ==============================================  MDR_UART1 RIS PE_RIS [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_PE_RIS                                                      */
  MDR_UART1_RIS_PE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_PE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_PE_RIS_Enum;

/* ==============================================  MDR_UART1 RIS BE_RIS [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_RIS_BE_RIS                                                      */
  MDR_UART1_RIS_BE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_BE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_BE_RIS_Enum;

/* =============================================  MDR_UART1 RIS OE_RIS [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_RIS_OE_RIS                                                      */
  MDR_UART1_RIS_OE_RIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_RIS_OE_RIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_RIS_OE_RIS_Enum;

/* ==========================================================  MIS  ========================================================== */
/* =============================================  MDR_UART1 MIS RIM_MIS [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RIM_MIS                                                     */
  MDR_UART1_MIS_RIM_MIS_Off            = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RIM_MIS_On             = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RIM_MIS_Enum;

/* =============================================  MDR_UART1 MIS STCM_MIS [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_STCM_MIS                                                    */
  MDR_UART1_MIS_STCM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_STCM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_STCM_MIS_Enum;

/* =============================================  MDR_UART1 MIS DCDM_MIS [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_DCDM_MIS                                                    */
  MDR_UART1_MIS_DCDM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_DCDM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_DCDM_MIS_Enum;

/* =============================================  MDR_UART1 MIS DSRM_MIS [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_DSRM_MIS                                                    */
  MDR_UART1_MIS_DSRM_MIS_Off           = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_DSRM_MIS_On            = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_DSRM_MIS_Enum;

/* ==============================================  MDR_UART1 MIS RX_MIS [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RX_MIS                                                      */
  MDR_UART1_MIS_RX_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RX_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RX_MIS_Enum;

/* ==============================================  MDR_UART1 MIS TX_MIS [5..5]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_TX_MIS                                                      */
  MDR_UART1_MIS_TX_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_TX_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_TX_MIS_Enum;

/* ==============================================  MDR_UART1 MIS RT_MIS [6..6]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_RT_MIS                                                      */
  MDR_UART1_MIS_RT_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_RT_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_RT_MIS_Enum;

/* ==============================================  MDR_UART1 MIS FE_MIS [7..7]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_FE_MIS                                                      */
  MDR_UART1_MIS_FE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_FE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_FE_MIS_Enum;

/* ==============================================  MDR_UART1 MIS PE_MIS [8..8]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_PE_MIS                                                      */
  MDR_UART1_MIS_PE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_PE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_PE_MIS_Enum;

/* ==============================================  MDR_UART1 MIS BE_MIS [9..9]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_MIS_BE_MIS                                                      */
  MDR_UART1_MIS_BE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_BE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_BE_MIS_Enum;

/* =============================================  MDR_UART1 MIS OE_MIS [10..10]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_MIS_OE_MIS                                                      */
  MDR_UART1_MIS_OE_MIS_Off             = 0,     /*!< Off : Event Inactive                                                      */
  MDR_UART1_MIS_OE_MIS_On              = 1,     /*!< On : Event Active                                                         */
} MDR_UART1_MIS_OE_MIS_Enum;

/* ==========================================================  ICR  ========================================================== */
/* ==============================================  MDR_UART1 ICR RIM_IC [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RIM_IC                                                      */
  MDR_UART1_ICR_RIM_IC_Inactive        = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RIM_IC_Clear           = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RIM_IC_Enum;

/* =============================================  MDR_UART1 ICR STCM_IC [1..1]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_STCM_IC                                                     */
  MDR_UART1_ICR_STCM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_STCM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_STCM_IC_Enum;

/* =============================================  MDR_UART1 ICR DCDM_IC [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_DCDM_IC                                                     */
  MDR_UART1_ICR_DCDM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_DCDM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_DCDM_IC_Enum;

/* =============================================  MDR_UART1 ICR DSRM_IC [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_DSRM_IC                                                     */
  MDR_UART1_ICR_DSRM_IC_Inactive       = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_DSRM_IC_Clear          = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_DSRM_IC_Enum;

/* ==============================================  MDR_UART1 ICR RX_IC [4..4]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RX_IC                                                       */
  MDR_UART1_ICR_RX_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RX_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RX_IC_Enum;

/* ==============================================  MDR_UART1 ICR TX_IC [5..5]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_TX_IC                                                       */
  MDR_UART1_ICR_TX_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_TX_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_TX_IC_Enum;

/* ==============================================  MDR_UART1 ICR RT_IC [6..6]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_RT_IC                                                       */
  MDR_UART1_ICR_RT_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_RT_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_RT_IC_Enum;

/* ==============================================  MDR_UART1 ICR FE_IC [7..7]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_FE_IC                                                       */
  MDR_UART1_ICR_FE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_FE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_FE_IC_Enum;

/* ==============================================  MDR_UART1 ICR PE_IC [8..8]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_PE_IC                                                       */
  MDR_UART1_ICR_PE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_PE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_PE_IC_Enum;

/* ==============================================  MDR_UART1 ICR BE_IC [9..9]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_BE_IC                                                       */
  MDR_UART1_ICR_BE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_BE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_BE_IC_Enum;

/* =============================================  MDR_UART1 ICR OE_IC [10..10]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_ICR_OE_IC                                                       */
  MDR_UART1_ICR_OE_IC_Inactive         = 0,     /*!< Inactive : Inactive state                                                 */
  MDR_UART1_ICR_OE_IC_Clear            = 1,     /*!< Clear : Clear event                                                       */
} MDR_UART1_ICR_OE_IC_Enum;

/* =========================================================  DMACR  ========================================================= */
/* =============================================  MDR_UART1 DMACR RXDMAE [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_DMACR_RXDMAE                                                    */
  MDR_UART1_DMACR_RXDMAE_Disabled      = 0,     /*!< Disabled : DMA disabled                                                   */
  MDR_UART1_DMACR_RXDMAE_Enabled       = 1,     /*!< Enabled : DMA enabled                                                     */
} MDR_UART1_DMACR_RXDMAE_Enum;

/* =============================================  MDR_UART1 DMACR TXDMAE [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_DMACR_TXDMAE                                                    */
  MDR_UART1_DMACR_TXDMAE_Disabled      = 0,     /*!< Disabled : DMA disabled                                                   */
  MDR_UART1_DMACR_TXDMAE_Enabled       = 1,     /*!< Enabled : DMA enabled                                                     */
} MDR_UART1_DMACR_TXDMAE_Enum;

/* ============================================  MDR_UART1 DMACR DMAonErr [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_UART1_DMACR_DMAonErr                                                  */
  MDR_UART1_DMACR_DMAonErr_IgnoreError = 0,     /*!< IgnoreError : Ignore Errors                                               */
  MDR_UART1_DMACR_DMAonErr_StopOnError = 1,     /*!< StopOnError : SReq and Req disable on Error                               */
} MDR_UART1_DMACR_DMAonErr_Enum;

/* ==========================================================  TCR  ========================================================== */
/* ===============================================  MDR_UART1 TCR ITEN [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_UART1_TCR_ITEN                                                        */
  MDR_UART1_TCR_ITEN_Disabled          = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_ITEN_Enabled           = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_ITEN_Enum;

/* =============================================  MDR_UART1 TCR TestFIFO [1..1]  ============================================= */
typedef enum {                                  /*!< MDR_UART1_TCR_TestFIFO                                                    */
  MDR_UART1_TCR_TestFIFO_Disabled      = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_TestFIFO_Enabled       = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_TestFIFO_Enum;

/* =============================================  MDR_UART1 TCR SIRTest [2..2]  ============================================== */
typedef enum {                                  /*!< MDR_UART1_TCR_SIRTest                                                     */
  MDR_UART1_TCR_SIRTest_Disabled       = 0,     /*!< Disabled : Normal operation                                               */
  MDR_UART1_TCR_SIRTest_Enabled        = 1,     /*!< Enabled : Testing Mode                                                    */
} MDR_UART1_TCR_SIRTest_Enum;



/* =========================================================================================================================== */
/* ================                                        MDR_TIMER1                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  CNT  ========================================================== */
/* ==========================================================  PSG  ========================================================== */
/* ==========================================================  ARR  ========================================================== */
/* =========================================================  CNTRL  ========================================================= */
/* ============================================  MDR_TIMER1 CNTRL CNT_EN [0..0]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_CNT_EN                                                   */
  MDR_TIMER1_CNTRL_CNT_EN_Off          = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CNTRL_CNT_EN_On           = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CNTRL_CNT_EN_Enum;

/* ============================================  MDR_TIMER1 CNTRL ARRB_EN [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_ARRB_EN                                                  */
  MDR_TIMER1_CNTRL_ARRB_EN_Immediately = 0,     /*!< Immediately : Immediately update                                          */
  MDR_TIMER1_CNTRL_ARRB_EN_OnCompleted = 1,     /*!< OnCompleted : Update ARR when active period of CNT finished               */
} MDR_TIMER1_CNTRL_ARRB_EN_Enum;

/* ============================================  MDR_TIMER1 CNTRL WR_CMPL [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_WR_CMPL                                                  */
  MDR_TIMER1_CNTRL_WR_CMPL_Ready       = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CNTRL_WR_CMPL_BUSY        = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CNTRL_WR_CMPL_Enum;

/* ==============================================  MDR_TIMER1 CNTRL DIR [3..3]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_DIR                                                      */
  MDR_TIMER1_CNTRL_DIR_UP              = 0,     /*!< UP : CNT counts from 0 to ARR                                             */
  MDR_TIMER1_CNTRL_DIR_DOWN            = 1,     /*!< DOWN : CNT counts from ARR to 0                                           */
} MDR_TIMER1_CNTRL_DIR_Enum;

/* =============================================  MDR_TIMER1 CNTRL FDTS [4..5]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_FDTS                                                     */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div1   = 0,     /*!< TIM_CLK_div1 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div2   = 1,     /*!< TIM_CLK_div2 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div4   = 2,     /*!< TIM_CLK_div4 : TIM_Clock to FDTS scale                                    */
  MDR_TIMER1_CNTRL_FDTS_TIM_CLK_div8   = 3,     /*!< TIM_CLK_div8 : TIM_Clock to FDTS scale                                    */
} MDR_TIMER1_CNTRL_FDTS_Enum;

/* ===========================================  MDR_TIMER1 CNTRL CNT_MODE [6..7]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_CNT_MODE                                                 */
  MDR_TIMER1_CNTRL_CNT_MODE_DIR_TIM_CLK = 0,    /*!< DIR_TIM_CLK : Count TIM_Clock pulses with DIR direction                   */
  MDR_TIMER1_CNTRL_CNT_MODE_UpDown_TIM_CLK = 1, /*!< UpDown_TIM_CLK : Count TIM_Clock pulses UP and Down                       */
  MDR_TIMER1_CNTRL_CNT_MODE_DIR_ExtEvents = 2,  /*!< DIR_ExtEvents : Count External Events with DIR direction                  */
  MDR_TIMER1_CNTRL_CNT_MODE_UpDown_ExtEvents = 3,/*!< UpDown_ExtEvents : Count External Events UP and Down                     */
} MDR_TIMER1_CNTRL_CNT_MODE_Enum;

/* ==========================================  MDR_TIMER1 CNTRL EVENT_SEL [8..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CNTRL_EVENT_SEL                                                */
  MDR_TIMER1_CNTRL_EVENT_SEL_Rise_TIM_CLK = 0,  /*!< Rise_TIM_CLK : CNT counts from 0 to ARR                                   */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM1 = 1,/*!< CNT_eq_ARR_TIM1 : CNT gets ARR in Timer1                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM2 = 2,/*!< CNT_eq_ARR_TIM2 : CNT gets ARR in Timer2                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_CNT_eq_ARR_TIM3 = 3,/*!< CNT_eq_ARR_TIM3 : CNT gets ARR in Timer3                                 */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch1 = 4,     /*!< Event_Ch1 : Event in Channel1                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch2 = 5,     /*!< Event_Ch2 : Event in Channel2                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch3 = 6,     /*!< Event_Ch3 : Event in Channel3                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Event_Ch4 = 7,     /*!< Event_Ch4 : Event in Channel4                                             */
  MDR_TIMER1_CNTRL_EVENT_SEL_Rise_ETR  = 8,     /*!< Rise_ETR : Rise front in ETR pin                                          */
} MDR_TIMER1_CNTRL_EVENT_SEL_Enum;

/* =========================================================  CCR1  ========================================================== */
/* =========================================================  CCR2  ========================================================== */
/* =========================================================  CCR3  ========================================================== */
/* =========================================================  CCR4  ========================================================== */
/* =======================================================  CH1_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH1_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH1_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH1_CNTRL_CHSEL_Fall_NextCH = 3,   /*!< Fall_NextCH : Capture Event Select                                        */
} MDR_TIMER1_CH1_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH1_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH1_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH1_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH1_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH1_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH1_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH1_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_ETREN                                                */
  MDR_TIMER1_CH1_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH1_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH1_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH1_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH1_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH1_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH1_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH1_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH1_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH1_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH2_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH2_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH2_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH2_CNTRL_CHSEL_Fall_NextCH = 3,   /*!< Fall_NextCH : Capture Event Select                                        */
} MDR_TIMER1_CH2_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH2_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH2_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH2_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH2_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH2_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH2_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH2_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_ETREN                                                */
  MDR_TIMER1_CH2_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH2_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH2_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH2_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH2_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH2_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH2_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH2_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH2_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH2_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH3_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH3_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH3_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH3_CNTRL_CHSEL_Fall_NextCH = 3,   /*!< Fall_NextCH : Capture Event Select                                        */
} MDR_TIMER1_CH3_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH3_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH3_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH3_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH3_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH3_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH3_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH3_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_ETREN                                                */
  MDR_TIMER1_CH3_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH3_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH3_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH3_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH3_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH3_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH3_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH3_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH3_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH3_CNTRL_CAP_nPWM_Enum;

/* =======================================================  CH4_CNTRL  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL CHFLTR [0..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHFLTR                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_TIM_CLK  = 0,     /*!< TIM_CLK : Filter Value                                                    */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_2_TIM_CLK = 1,    /*!< 2_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_4_TIM_CLK = 2,    /*!< 4_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_TIM_CLK = 3,    /*!< 8_TIM_CLK : Filter Value                                                  */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div2 = 4,  /*!< 6_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div2 = 5,  /*!< 8_FDTS_div2 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div4 = 6,  /*!< 6_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div4 = 7,  /*!< 8_FDTS_div4 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div8 = 8,  /*!< 6_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div8 = 9,  /*!< 8_FDTS_div8 : Filter Value                                                */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                               */
  MDR_TIMER1_CH4_CNTRL_CHFLTR_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                               */
} MDR_TIMER1_CH4_CNTRL_CHFLTR_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL CHSEL [4..5]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHSEL                                                */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Rise_Pin  = 0,     /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Fall_Pin  = 1,     /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Rise_NextCH = 2,   /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH4_CNTRL_CHSEL_Fall_NextCH = 3,   /*!< Fall_NextCH : Capture Event Select                                        */
} MDR_TIMER1_CH4_CNTRL_CHSEL_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL CHPSC [6..7]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CHPSC                                                */
  MDR_TIMER1_CH4_CNTRL_CHPSC_EveryEvent = 0,    /*!< EveryEvent : Pass event for capture                                       */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div2 = 1,   /*!< Events_div2 : Pass event for capture                                      */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div4 = 2,   /*!< Events_div4 : Pass event for capture                                      */
  MDR_TIMER1_CH4_CNTRL_CHPSC_Events_div8 = 3,   /*!< Events_div8 : Pass event for capture                                      */
} MDR_TIMER1_CH4_CNTRL_CHPSC_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL OCCE [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_OCCE                                                 */
  MDR_TIMER1_CH4_CNTRL_OCCE_Off        = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_OCCE_On         = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_OCCE_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL OCCM [9..11]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_OCCM                                                 */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_0      = 0,     /*!< Ref_0 : Ref signal for output                                             */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_1_eqCCRx = 1,   /*!< Ref_1_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_0_eqCCRx = 2,   /*!< Ref_0_eqCCRx : Ref signal for output                                      */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_sw_eqCCRx = 3,  /*!< Ref_sw_eqCCRx : Ref signal for output                                     */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref0       = 4,     /*!< Ref0 : Ref signal for output                                              */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_1      = 5,     /*!< Ref_1 : Ref signal for output                                             */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_nDir_inCCRs = 6,/*!< Ref_nDir_inCCRs : Ref signal for output                                   */
  MDR_TIMER1_CH4_CNTRL_OCCM_Ref_Dir_inCCRs = 7, /*!< Ref_Dir_inCCRs : Ref signal for output                                    */
} MDR_TIMER1_CH4_CNTRL_OCCM_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL BRKEN [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_BRKEN                                                */
  MDR_TIMER1_CH4_CNTRL_BRKEN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_BRKEN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_BRKEN_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL ETREN [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_ETREN                                                */
  MDR_TIMER1_CH4_CNTRL_ETREN_Off       = 0,     /*!< Off : Disabled                                                            */
  MDR_TIMER1_CH4_CNTRL_ETREN_On        = 1,     /*!< On : Enabled                                                              */
} MDR_TIMER1_CH4_CNTRL_ETREN_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL WR_CMPL [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_WR_CMPL                                              */
  MDR_TIMER1_CH4_CNTRL_WR_CMPL_Ready   = 0,     /*!< Ready : Ready to write                                                    */
  MDR_TIMER1_CH4_CNTRL_WR_CMPL_BUSY    = 1,     /*!< BUSY : Writing not completed                                              */
} MDR_TIMER1_CH4_CNTRL_WR_CMPL_Enum;

/* ========================================  MDR_TIMER1 CH4_CNTRL CAP_nPWM [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL_CAP_nPWM                                             */
  MDR_TIMER1_CH4_CNTRL_CAP_nPWM_PWM    = 0,     /*!< PWM : PWM output                                                          */
  MDR_TIMER1_CH4_CNTRL_CAP_nPWM_CAPTURE = 1,    /*!< CAPTURE : Capture input signal                                            */
} MDR_TIMER1_CH4_CNTRL_CAP_nPWM_Enum;

/* ======================================================  CH1_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH1_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH1_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH1_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_SelO                                                */
  MDR_TIMER1_CH1_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH1_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH1_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH1_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH1_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH1_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH1_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH1_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH1_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH1_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH1_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH1_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH1_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH1_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH1_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH1_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL1_NInv                                                */
  MDR_TIMER1_CH1_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH1_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH1_CNTRL1_NInv_Enum;

/* ======================================================  CH2_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH2_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH2_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH2_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_SelO                                                */
  MDR_TIMER1_CH2_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH2_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH2_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH2_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH2_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH2_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH2_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH2_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH2_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH2_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH2_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH2_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH2_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH2_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH2_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH2_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL1_NInv                                                */
  MDR_TIMER1_CH2_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH2_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH2_CNTRL1_NInv_Enum;

/* ======================================================  CH3_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH3_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH3_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH3_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_SelO                                                */
  MDR_TIMER1_CH3_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH3_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH3_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH3_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH3_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH3_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH3_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH3_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH3_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH3_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH3_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH3_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH3_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH3_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH3_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH3_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL1_NInv                                                */
  MDR_TIMER1_CH3_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH3_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH3_CNTRL1_NInv_Enum;

/* ======================================================  CH4_CNTRL1  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL1 SelOE [0..1]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_SelOE                                               */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IN       = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH4_CNTRL1_SelOE_OUT      = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IO_byRef = 2,     /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH4_CNTRL1_SelOE_IO_byDTG = 3,     /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH4_CNTRL1_SelOE_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL1 SelO [2..3]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_SelO                                                */
  MDR_TIMER1_CH4_CNTRL1_SelO_Low       = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH4_CNTRL1_SelO_High      = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH4_CNTRL1_SelO_Ref       = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH4_CNTRL1_SelO_DTG       = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH4_CNTRL1_SelO_Enum;

/* ===========================================  MDR_TIMER1 CH4_CNTRL1 Inv [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_Inv                                                 */
  MDR_TIMER1_CH4_CNTRL1_Inv_Off        = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH4_CNTRL1_Inv_On         = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH4_CNTRL1_Inv_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL1 NSelOE [8..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NSelOE                                              */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IN      = 0,     /*!< IN : Pin IN                                                               */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_OUT     = 1,     /*!< OUT : Pin OUT                                                             */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IO_byRef = 2,    /*!< IO_byRef : Pin IN or OUT by Ref signal                                    */
  MDR_TIMER1_CH4_CNTRL1_NSelOE_IO_byDTG = 3,    /*!< IO_byDTG : Pin IN or OUT by DTG signal                                    */
} MDR_TIMER1_CH4_CNTRL1_NSelOE_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL1 NSelO [10..11]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NSelO                                               */
  MDR_TIMER1_CH4_CNTRL1_NSelO_Low      = 0,     /*!< Low : Outputs const GND                                                   */
  MDR_TIMER1_CH4_CNTRL1_NSelO_High     = 1,     /*!< High : Outputs const Ucc                                                  */
  MDR_TIMER1_CH4_CNTRL1_NSelO_Ref      = 2,     /*!< Ref : Ref PWM signal                                                      */
  MDR_TIMER1_CH4_CNTRL1_NSelO_DTG      = 3,     /*!< DTG : DTG PWM signal                                                      */
} MDR_TIMER1_CH4_CNTRL1_NSelO_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL1 NInv [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL1_NInv                                                */
  MDR_TIMER1_CH4_CNTRL1_NInv_Off       = 0,     /*!< Off : Not Inverted                                                        */
  MDR_TIMER1_CH4_CNTRL1_NInv_On        = 1,     /*!< On : Inverted                                                             */
} MDR_TIMER1_CH4_CNTRL1_NInv_Enum;

/* ========================================================  CH1_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH1_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_DTG_DTG                                                    */
  MDR_TIMER1_CH1_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH1_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH1_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH1_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH1_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH1_DTG_EDTS                                                   */
  MDR_TIMER1_CH1_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH1_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH1_DTG_EDTS_Enum;

/* ========================================================  CH2_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH2_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_DTG_DTG                                                    */
  MDR_TIMER1_CH2_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH2_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH2_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH2_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH2_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH2_DTG_EDTS                                                   */
  MDR_TIMER1_CH2_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH2_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH2_DTG_EDTS_Enum;

/* ========================================================  CH3_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH3_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_DTG_DTG                                                    */
  MDR_TIMER1_CH3_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH3_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH3_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH3_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH3_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH3_DTG_EDTS                                                   */
  MDR_TIMER1_CH3_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH3_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH3_DTG_EDTS_Enum;

/* ========================================================  CH4_DTG  ======================================================== */
/* =============================================  MDR_TIMER1 CH4_DTG DTG [0..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_DTG_DTG                                                    */
  MDR_TIMER1_CH4_DTG_DTG_x0            = 0,     /*!< x0 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x1            = 1,     /*!< x1 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x2            = 2,     /*!< x2 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x3            = 3,     /*!< x3 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x4            = 4,     /*!< x4 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x5            = 5,     /*!< x5 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x6            = 6,     /*!< x6 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x7            = 7,     /*!< x7 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x8            = 8,     /*!< x8 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x9            = 9,     /*!< x9 : Prescaler DTG                                                        */
  MDR_TIMER1_CH4_DTG_DTG_x10           = 10,    /*!< x10 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x11           = 11,    /*!< x11 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x12           = 12,    /*!< x12 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x13           = 13,    /*!< x13 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x14           = 14,    /*!< x14 : Prescaler DTG                                                       */
  MDR_TIMER1_CH4_DTG_DTG_x15           = 15,    /*!< x15 : Prescaler DTG                                                       */
} MDR_TIMER1_CH4_DTG_DTG_Enum;

/* ============================================  MDR_TIMER1 CH4_DTG EDTS [4..4]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_CH4_DTG_EDTS                                                   */
  MDR_TIMER1_CH4_DTG_EDTS_TIM_Clock    = 0,     /*!< TIM_Clock : Pin IN                                                        */
  MDR_TIMER1_CH4_DTG_EDTS_FDTS         = 1,     /*!< FDTS : Pin OUT                                                            */
} MDR_TIMER1_CH4_DTG_EDTS_Enum;

/* =====================================================  BRKETR_CNTRL  ====================================================== */
/* ========================================  MDR_TIMER1 BRKETR_CNTRL BRK_INV [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_BRK_INV                                           */
  MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Normal = 0,   /*!< Normal : Signal Not Inverted                                              */
  MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Invert = 1,   /*!< Invert : Signal Inverted                                                  */
} MDR_TIMER1_BRKETR_CNTRL_BRK_INV_Enum;

/* ========================================  MDR_TIMER1 BRKETR_CNTRL ETR_INV [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_INV                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Normal = 0,   /*!< Normal : Signal Not Inverted                                              */
  MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Invert = 1,   /*!< Invert : Signal Inverted                                                  */
} MDR_TIMER1_BRKETR_CNTRL_ETR_INV_Enum;

/* ========================================  MDR_TIMER1 BRKETR_CNTRL ETR_PSC [2..3]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_PSC                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div1 = 0,     /*!< div1 : No prescaler                                                       */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div2 = 1,     /*!< div2 : Reduce freq by 2                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div4 = 2,     /*!< div4 : Reduce freq by 4                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_div8 = 3,     /*!< div8 : Reduce freq by 8                                                   */
} MDR_TIMER1_BRKETR_CNTRL_ETR_PSC_Enum;

/* =======================================  MDR_TIMER1 BRKETR_CNTRL ETR_Filter [4..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_BRKETR_CNTRL_ETR_Filter                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_TIM_CLK = 0,/*!< TIM_CLK : Filter Value                                                   */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_2_TIM_CLK = 1,/*!< 2_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_4_TIM_CLK = 2,/*!< 4_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_TIM_CLK = 3,/*!< 8_TIM_CLK : Filter Value                                               */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div2 = 4,/*!< 6_FDTS_div2 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div2 = 5,/*!< 8_FDTS_div2 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div4 = 6,/*!< 6_FDTS_div4 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div4 = 7,/*!< 8_FDTS_div4 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div8 = 8,/*!< 6_FDTS_div8 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div8 = 9,/*!< 8_FDTS_div8 : Filter Value                                           */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_5_FDTS_div16 = 10,/*!< 5_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div16 = 11,/*!< 6_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div16 = 12,/*!< 8_FDTS_div16 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_5_FDTS_div32 = 13,/*!< 5_FDTS_div32 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_6_FDTS_div32 = 14,/*!< 6_FDTS_div32 : Filter Value                                        */
  MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_8_FDTS_div32 = 15,/*!< 8_FDTS_div32 : Filter Value                                        */
} MDR_TIMER1_BRKETR_CNTRL_ETR_Filter_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ===========================================  MDR_TIMER1 STATUS CNT_ZERO [0..0]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CNT_ZERO                                                */
  MDR_TIMER1_STATUS_CNT_ZERO_Off       = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CNT_ZERO_On        = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CNT_ZERO_Enum;

/* ===========================================  MDR_TIMER1 STATUS CNT_ARR [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CNT_ARR                                                 */
  MDR_TIMER1_STATUS_CNT_ARR_Off        = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CNT_ARR_On         = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CNT_ARR_Enum;

/* ============================================  MDR_TIMER1 STATUS ETR_RE [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_ETR_RE                                                  */
  MDR_TIMER1_STATUS_ETR_RE_Off         = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_ETR_RE_On          = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_ETR_RE_Enum;

/* ============================================  MDR_TIMER1 STATUS ETR_FE [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_ETR_FE                                                  */
  MDR_TIMER1_STATUS_ETR_FE_Off         = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_ETR_FE_On          = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_ETR_FE_Enum;

/* =============================================  MDR_TIMER1 STATUS BRK [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_BRK                                                     */
  MDR_TIMER1_STATUS_BRK_Off            = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_BRK_On             = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_BRK_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH1 [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH1                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH1_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH1_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH2 [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH2                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH2_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH2_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH3 [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH3                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH3_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH3_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_CAP_CH4 [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_CAP_CH4                                             */
  MDR_TIMER1_STATUS_CCR_CAP_CH4_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_CAP_CH4_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_CAP_CH4_Enum;

/* =========================================  MDR_TIMER1 STATUS CCR_REF_CH1 [9..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH1                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH1_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH1_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH1_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH2 [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH2                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH2_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH2_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH2_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH3 [11..11]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH3                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH3_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH3_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH3_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR_REF_CH4 [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR_REF_CH4                                             */
  MDR_TIMER1_STATUS_CCR_REF_CH4_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR_REF_CH4_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR_REF_CH4_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH1 [13..13]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH1                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH1_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH1_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH1_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH2 [14..14]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH2                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH2_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH2_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH2_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH3 [15..15]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH3                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH3_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH3_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH3_Enum;

/* ========================================  MDR_TIMER1 STATUS CCR1_CAP_CH4 [16..16]  ======================================== */
typedef enum {                                  /*!< MDR_TIMER1_STATUS_CCR1_CAP_CH4                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH4_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_STATUS_CCR1_CAP_CH4_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_STATUS_CCR1_CAP_CH4_Enum;

/* ==========================================================  IE  =========================================================== */
/* ===========================================  MDR_TIMER1 IE CNT_ZERO_IE [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_IE_CNT_ZERO_IE                                                 */
  MDR_TIMER1_IE_CNT_ZERO_IE_Off        = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CNT_ZERO_IE_On         = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CNT_ZERO_IE_Enum;

/* ============================================  MDR_TIMER1 IE CNT_ARR_IE [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_TIMER1_IE_CNT_ARR_IE                                                  */
  MDR_TIMER1_IE_CNT_ARR_IE_Off         = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CNT_ARR_IE_On          = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CNT_ARR_IE_Enum;

/* ============================================  MDR_TIMER1 IE ETR_RE_IE [2..2]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_ETR_RE_IE                                                   */
  MDR_TIMER1_IE_ETR_RE_IE_Off          = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_ETR_RE_IE_On           = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_ETR_RE_IE_Enum;

/* ============================================  MDR_TIMER1 IE ETR_FE_IE [3..3]  ============================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_ETR_FE_IE                                                   */
  MDR_TIMER1_IE_ETR_FE_IE_Off          = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_ETR_FE_IE_On           = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_ETR_FE_IE_Enum;

/* ==============================================  MDR_TIMER1 IE BRK_IE [4..4]  ============================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_BRK_IE                                                      */
  MDR_TIMER1_IE_BRK_IE_Off             = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_BRK_IE_On              = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_BRK_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH1_IE [5..5]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH1_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH1_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH1_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH1_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH2_IE [6..6]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH2_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH2_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH2_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH2_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH3_IE [7..7]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH3_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH3_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH3_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH3_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_CAP_CH4_IE [8..8]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_CAP_CH4_IE                                              */
  MDR_TIMER1_IE_CCR_CAP_CH4_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_CAP_CH4_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_CAP_CH4_IE_Enum;

/* ==========================================  MDR_TIMER1 IE CCR_REF_CH1_IE [9..9]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH1_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH1_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH1_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH1_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH2_IE [10..10]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH2_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH2_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH2_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH2_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH3_IE [11..11]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH3_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH3_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH3_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH3_IE_Enum;

/* =========================================  MDR_TIMER1 IE CCR_REF_CH4_IE [12..12]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR_REF_CH4_IE                                              */
  MDR_TIMER1_IE_CCR_REF_CH4_IE_Off     = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR_REF_CH4_IE_On      = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR_REF_CH4_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH1_IE [13..13]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH1_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH1_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH1_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH2_IE [14..14]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH2_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH2_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH2_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH3_IE [15..15]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH3_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH3_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH3_IE_Enum;

/* ========================================  MDR_TIMER1 IE CCR1_CAP_CH4_IE [16..16]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_IE_CCR1_CAP_CH4_IE                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_IE_CCR1_CAP_CH4_IE_On     = 1,     /*!< On : ENable                                                               */
} MDR_TIMER1_IE_CCR1_CAP_CH4_IE_Enum;

/* ========================================================  DMA_RE  ========================================================= */
/* ========================================  MDR_TIMER1 DMA_RE CNT_ZERO_DMAE [0..0]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE                                           */
  MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Off  = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_On   = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CNT_ZERO_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE CNT_ARR_DMAE [1..1]  ========================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CNT_ARR_DMAE                                            */
  MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Off   = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_On    = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CNT_ARR_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE ETR_RE_DMAE [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_ETR_RE_DMAE                                             */
  MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_ETR_RE_DMAE_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_ETR_RE_DMAE_Enum;

/* =========================================  MDR_TIMER1 DMA_RE ETR_FE_DMAE [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_ETR_FE_DMAE                                             */
  MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Off    = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_ETR_FE_DMAE_On     = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_ETR_FE_DMAE_Enum;

/* ===========================================  MDR_TIMER1 DMA_RE BRK_DMAE [4..4]  =========================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_BRK_DMAE                                                */
  MDR_TIMER1_DMA_RE_BRK_DMAE_Off       = 0,     /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_BRK_DMAE_On        = 1,     /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_BRK_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH1_DMAE [5..5]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH1_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH2_DMAE [6..6]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH2_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH3_DMAE [7..7]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH3_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_CAP_CH4_DMAE [8..8]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_CAP_CH4_DMAE_Enum;

/* =======================================  MDR_TIMER1 DMA_RE CCR_REF_CH1_DMAE [9..9]  ======================================= */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH1_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH2_DMAE [10..10]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH2_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH3_DMAE [11..11]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH3_DMAE_Enum;

/* ======================================  MDR_TIMER1 DMA_RE CCR_REF_CH4_DMAE [12..12]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE                                        */
  MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Off = 0,   /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_On = 1,    /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR_REF_CH4_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH1_DMAE [13..13]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH1_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH2_DMAE [14..14]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH2_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH3_DMAE [15..15]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH3_DMAE_Enum;

/* =====================================  MDR_TIMER1 DMA_RE CCR1_CAP_CH4_DMAE [16..16]  ====================================== */
typedef enum {                                  /*!< MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE                                       */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Off = 0,  /*!< Off : Inactive                                                            */
  MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_On = 1,   /*!< On : Active                                                               */
} MDR_TIMER1_DMA_RE_CCR1_CAP_CH4_DMAE_Enum;

/* ======================================================  CH1_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH1_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Rise_NextCH = 2, /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH1_CNTRL2_CHSel1_Fall_NextCH = 3, /*!< Fall_NextCH : Capture Event Select                                        */
} MDR_TIMER1_CH1_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH1_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH1_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH1_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH1_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH1_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH1_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH1_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH1_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH1_CNTRL2_CCRRLD_Enum;

/* ======================================================  CH2_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH2_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Rise_NextCH = 2, /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH2_CNTRL2_CHSel1_Fall_NextCH = 3, /*!< Fall_NextCH : Capture Event Select                                        */
} MDR_TIMER1_CH2_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH2_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH2_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH2_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH2_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH2_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH2_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH2_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH2_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH2_CNTRL2_CCRRLD_Enum;

/* ======================================================  CH3_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH3_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Rise_NextCH = 2, /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH3_CNTRL2_CHSel1_Fall_NextCH = 3, /*!< Fall_NextCH : Capture Event Select                                        */
} MDR_TIMER1_CH3_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH3_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH3_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH3_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH3_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH3_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH3_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH3_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH3_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH3_CNTRL2_CCRRLD_Enum;

/* ======================================================  CH4_CNTRL2  ======================================================= */
/* ==========================================  MDR_TIMER1 CH4_CNTRL2 CHSel1 [0..1]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CHSel1                                              */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Rise_Pin = 0,    /*!< Rise_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Fall_Pin = 1,    /*!< Fall_Pin : Capture Event Select                                           */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Rise_NextCH = 2, /*!< Rise_NextCH : Capture Event Select                                        */
  MDR_TIMER1_CH4_CNTRL2_CHSel1_Fall_NextCH = 3, /*!< Fall_NextCH : Capture Event Select                                        */
} MDR_TIMER1_CH4_CNTRL2_CHSel1_Enum;

/* =========================================  MDR_TIMER1 CH4_CNTRL2 CCR1_En [2..2]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CCR1_En                                             */
  MDR_TIMER1_CH4_CNTRL2_CCR1_En_Off    = 0,     /*!< Off : Disable                                                             */
  MDR_TIMER1_CH4_CNTRL2_CCR1_En_On     = 1,     /*!< On : Enable                                                               */
} MDR_TIMER1_CH4_CNTRL2_CCR1_En_Enum;

/* ==========================================  MDR_TIMER1 CH4_CNTRL2 CCRRLD [3..3]  ========================================== */
typedef enum {                                  /*!< MDR_TIMER1_CH4_CNTRL2_CCRRLD                                              */
  MDR_TIMER1_CH4_CNTRL2_CCRRLD_Immediately = 0, /*!< Immediately : Immediately update CCR and CCR1                             */
  MDR_TIMER1_CH4_CNTRL2_CCRRLD_byPreriodCNT = 1,/*!< byPreriodCNT : Update on period completed                                 */
} MDR_TIMER1_CH4_CNTRL2_CCRRLD_Enum;

/* =========================================================  CCR11  ========================================================= */
/* =========================================================  CCR21  ========================================================= */
/* =========================================================  CCR31  ========================================================= */
/* =========================================================  CCR41  ========================================================= */


/* =========================================================================================================================== */
/* ================                                         MDR_PORTA                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  RXTX  ========================================================== */
/* ==============================================  MDR_PORTA RXTX Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_RXTX_Pin_                                                       */
  MDR_GPIO__PIN_DATA__Low              = 0,     /*!< Low : LOW Level Voltage                                                   */
  MDR_GPIO__PIN_DATA__High             = 1,     /*!< High : HIGH Level Voltage                                                 */
} MDR_GPIO__PIN_DATA__Enum;

/* ==========================================================  OE  =========================================================== */
/* ===============================================  MDR_PORTA OE Pin_ [0..0]  ================================================ */
typedef enum {                                  /*!< MDR_PORTA_OE_Pin_                                                         */
  MDR_GPIO__PIN_DIR__IN                = 0,     /*!< IN : Input pin                                                            */
  MDR_GPIO__PIN_DIR__OUT               = 1,     /*!< OUT : Output pin                                                          */
} MDR_GPIO__PIN_DIR__Enum;

/* =========================================================  FUNC  ========================================================== */
/* ==============================================  MDR_PORTA FUNC Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_FUNC_Pin_                                                       */
  MDR_GPIO__PIN_FUNC__Port             = 0,     /*!< Port : RXTX defined pin                                                   */
  MDR_GPIO__PIN_FUNC__Main             = 1,     /*!< Main : Main Periph defined pin                                            */
  MDR_GPIO__PIN_FUNC__Alter            = 2,     /*!< Alter : Alter Periph defined pin                                          */
  MDR_GPIO__PIN_FUNC__Override         = 3,     /*!< Override : Override Periph defined pin                                    */
} MDR_GPIO__PIN_FUNC__Enum;

/* ========================================================  ANALOG  ========================================================= */
/* =============================================  MDR_PORTA ANALOG Pin_ [0..0]  ============================================== */
typedef enum {                                  /*!< MDR_PORTA_ANALOG_Pin_                                                     */
  MDR_GPIO__PIN_DIGIT__Analog          = 0,     /*!< Analog : Pin works with Analog signal                                     */
  MDR_GPIO__PIN_DIGIT__Digital         = 1,     /*!< Digital : Pin works with Digital signal                                   */
} MDR_GPIO__PIN_DIGIT__Enum;

/* =========================================================  PULL  ========================================================== */
/* ===========================================  MDR_PORTA PULL Down_Pin_0 [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_0                                                 */
  MDR_GPIO__PIN_DOWN__Off              = 0,     /*!< Off : No pull selected                                                    */
  MDR_GPIO__PIN_DOWN__DOWN             = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_GPIO__PIN_DOWN__Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_1 [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_1                                                 */
  MDR_PORTA_PULL_Down_Pin_1_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_1_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_1_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_2 [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_2                                                 */
  MDR_PORTA_PULL_Down_Pin_2_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_2_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_2_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_3 [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_3                                                 */
  MDR_PORTA_PULL_Down_Pin_3_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_3_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_3_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_4 [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_4                                                 */
  MDR_PORTA_PULL_Down_Pin_4_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_4_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_4_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_5 [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_5                                                 */
  MDR_PORTA_PULL_Down_Pin_5_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_5_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_5_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_6 [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_6                                                 */
  MDR_PORTA_PULL_Down_Pin_6_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_6_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_6_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_7 [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_7                                                 */
  MDR_PORTA_PULL_Down_Pin_7_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_7_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_7_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_8 [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_8                                                 */
  MDR_PORTA_PULL_Down_Pin_8_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_8_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_8_Enum;

/* ===========================================  MDR_PORTA PULL Down_Pin_9 [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_9                                                 */
  MDR_PORTA_PULL_Down_Pin_9_Off        = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_9_DOWN       = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_9_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_10 [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_10                                                */
  MDR_PORTA_PULL_Down_Pin_10_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_10_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_10_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_11 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_11                                                */
  MDR_PORTA_PULL_Down_Pin_11_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_11_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_11_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_12 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_12                                                */
  MDR_PORTA_PULL_Down_Pin_12_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_12_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_12_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_13 [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_13                                                */
  MDR_PORTA_PULL_Down_Pin_13_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_13_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_13_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_14 [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_14                                                */
  MDR_PORTA_PULL_Down_Pin_14_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_14_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_14_Enum;

/* ==========================================  MDR_PORTA PULL Down_Pin_15 [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PULL_Down_Pin_15                                                */
  MDR_PORTA_PULL_Down_Pin_15_Off       = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_Down_Pin_15_DOWN      = 1,     /*!< DOWN : Pin pulled down to GND                                             */
} MDR_PORTA_PULL_Down_Pin_15_Enum;

/* ============================================  MDR_PORTA PULL UP_Pin_ [16..16]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PULL_UP_Pin_                                                    */
  MDR_PORTA_PULL_UP_Pin__Off           = 0,     /*!< Off : No pull selected                                                    */
  MDR_PORTA_PULL_UP_Pin__UP            = 1,     /*!< UP : Pin pulled up to Ucc                                                 */
} MDR_PORTA_PULL_UP_Pin__Enum;

/* ==========================================================  PD  =========================================================== */
/* ===========================================  MDR_PORTA PD Driver_Pin_0 [0..0]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_0                                                 */
  MDR_GPIO__PIN_DRIVER__Driver         = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_GPIO__PIN_DRIVER__OpenDrain      = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_GPIO__PIN_DRIVER__Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_1 [1..1]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_1                                                 */
  MDR_PORTA_PD_Driver_Pin_1_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_1_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_1_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_2 [2..2]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_2                                                 */
  MDR_PORTA_PD_Driver_Pin_2_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_2_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_2_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_3 [3..3]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_3                                                 */
  MDR_PORTA_PD_Driver_Pin_3_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_3_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_3_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_4 [4..4]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_4                                                 */
  MDR_PORTA_PD_Driver_Pin_4_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_4_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_4_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_5 [5..5]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_5                                                 */
  MDR_PORTA_PD_Driver_Pin_5_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_5_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_5_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_6 [6..6]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_6                                                 */
  MDR_PORTA_PD_Driver_Pin_6_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_6_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_6_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_7 [7..7]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_7                                                 */
  MDR_PORTA_PD_Driver_Pin_7_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_7_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_7_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_8 [8..8]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_8                                                 */
  MDR_PORTA_PD_Driver_Pin_8_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_8_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_8_Enum;

/* ===========================================  MDR_PORTA PD Driver_Pin_9 [9..9]  ============================================ */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_9                                                 */
  MDR_PORTA_PD_Driver_Pin_9_Driver     = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_9_OpenDrain  = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_9_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_10 [10..10]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_10                                                */
  MDR_PORTA_PD_Driver_Pin_10_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_10_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_10_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_11 [11..11]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_11                                                */
  MDR_PORTA_PD_Driver_Pin_11_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_11_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_11_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_12 [12..12]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_12                                                */
  MDR_PORTA_PD_Driver_Pin_12_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_12_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_12_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_13 [13..13]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_13                                                */
  MDR_PORTA_PD_Driver_Pin_13_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_13_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_13_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_14 [14..14]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_14                                                */
  MDR_PORTA_PD_Driver_Pin_14_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_14_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_14_Enum;

/* ==========================================  MDR_PORTA PD Driver_Pin_15 [15..15]  ========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Driver_Pin_15                                                */
  MDR_PORTA_PD_Driver_Pin_15_Driver    = 0,     /*!< Driver : Pull-Push driver                                                 */
  MDR_PORTA_PD_Driver_Pin_15_OpenDrain = 1,     /*!< OpenDrain : Work with line pulled up to Ucc                               */
} MDR_PORTA_PD_Driver_Pin_15_Enum;

/* ==========================================  MDR_PORTA PD Schmitt_Pin_ [16..16]  =========================================== */
typedef enum {                                  /*!< MDR_PORTA_PD_Schmitt_Pin_                                                 */
  MDR_GPIO__PIN_SHMITT__Off            = 0,     /*!< Off : Schmitt 200mv                                                       */
  MDR_GPIO__PIN_SHMITT__On             = 1,     /*!< On : Schmitt 400mv                                                        */
} MDR_GPIO__PIN_SHMITT__Enum;

/* ==========================================================  PWR  ========================================================== */
/* ===============================================  MDR_PORTA PWR Pin_ [0..1]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_PWR_Pin_                                                        */
  MDR_GPIO__PIN_PWR__Off               = 0,     /*!< Off : Level switch disabled                                               */
  MDR_GPIO__PIN_PWR__Slow              = 1,     /*!< Slow : Levels switch rate about 100ns                                     */
  MDR_GPIO__PIN_PWR__Fast              = 2,     /*!< Fast : Levels switch rate about 20ns                                      */
  MDR_GPIO__PIN_PWR__MaxFast           = 3,     /*!< MaxFast : Levels switch rate about 10ns                                   */
} MDR_GPIO__PIN_PWR__Enum;

/* =========================================================  GFEN  ========================================================== */
/* ==============================================  MDR_PORTA GFEN Pin_ [0..0]  =============================================== */
typedef enum {                                  /*!< MDR_PORTA_GFEN_Pin_                                                       */
  MDR_GPIO__PIN_GFEN__Off              = 0,     /*!< Off : Filter Off                                                          */
  MDR_GPIO__PIN_GFEN__On               = 1,     /*!< On : Filter pulses less then 10 ns                                        */
} MDR_GPIO__PIN_GFEN__Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* MDR1986VK234_H */


/** @} */ /* End of group MDR1986VK234 */

/** @} */ /* End of group Milandr */
