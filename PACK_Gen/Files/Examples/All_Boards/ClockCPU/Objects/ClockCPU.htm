<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ClockCPU.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ClockCPU.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Jun 24 13:05:16 2019
<BR><P>
<H3>Maximum Stack Usage =        300 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MDRB_LED_Init &rArr; MDR_Port_Init_PortOUT &rArr; MDR_Port_InitDigPort &rArr; MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemoryMngFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemoryMngFault_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">FT_RESET0_4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">FT_RESET0_4_IRQHandler</a><BR>
 <LI><a href="#[c]">FT_EVENT0_4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">FT_EVENT0_4_IRQHandler</a><BR>
 <LI><a href="#[d]">FT_EVENT5_8_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">FT_EVENT5_8_IRQHandler</a><BR>
 <LI><a href="#[e]">FT_EVENT9_12_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">FT_EVENT9_12_IRQHandler</a><BR>
 <LI><a href="#[f]">CLK_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">CLK_IRQHandler</a><BR>
 <LI><a href="#[10]">POWER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">POWER_IRQHandler</a><BR>
 <LI><a href="#[11]">RTC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">RTC_IRQHandler</a><BR>
 <LI><a href="#[12]">BKP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BKP_IRQHandler</a><BR>
 <LI><a href="#[13]">EBC_ERROR0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">EBC_ERROR0_IRQHandler</a><BR>
 <LI><a href="#[14]">EBC_ERROR1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">EBC_ERROR1_IRQHandler</a><BR>
 <LI><a href="#[15]">EBC_ERROR2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">EBC_ERROR2_IRQHandler</a><BR>
 <LI><a href="#[16]">EBC_ERROR3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">EBC_ERROR3_IRQHandler</a><BR>
 <LI><a href="#[17]">EBC_ERROR4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">EBC_ERROR4_IRQHandler</a><BR>
 <LI><a href="#[18]">EBC_ERROR5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">EBC_ERROR5_IRQHandler</a><BR>
 <LI><a href="#[19]">EBC_ERROR6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">EBC_ERROR6_IRQHandler</a><BR>
 <LI><a href="#[1a]">EBC_ERROR7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">EBC_ERROR7_IRQHandler</a><BR>
 <LI><a href="#[1b]">DMA_ERR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">DMA_ERR_IRQHandler</a><BR>
 <LI><a href="#[1c]">DMA_DONE0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">DMA_DONE0_IRQHandler</a><BR>
 <LI><a href="#[1d]">DMA_DONE1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">DMA_DONE1_IRQHandler</a><BR>
 <LI><a href="#[1e]">DMA_DONE2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">DMA_DONE2_IRQHandler</a><BR>
 <LI><a href="#[1f]">DMA_DONE3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">DMA_DONE3_IRQHandler</a><BR>
 <LI><a href="#[20]">DMA_DONE4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">DMA_DONE4_IRQHandler</a><BR>
 <LI><a href="#[21]">DMA_DONE5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">DMA_DONE5_IRQHandler</a><BR>
 <LI><a href="#[22]">DMA_DONE6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">DMA_DONE6_IRQHandler</a><BR>
 <LI><a href="#[23]">DMA_DONE7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">DMA_DONE7_IRQHandler</a><BR>
 <LI><a href="#[24]">DMA_DONE8_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">DMA_DONE8_IRQHandler</a><BR>
 <LI><a href="#[25]">DMA_DONE9_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">DMA_DONE9_IRQHandler</a><BR>
 <LI><a href="#[26]">DMA_DONE10_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">DMA_DONE10_IRQHandler</a><BR>
 <LI><a href="#[27]">DMA_DONE11_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">DMA_DONE11_IRQHandler</a><BR>
 <LI><a href="#[28]">DMA_DONE12_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">DMA_DONE12_IRQHandler</a><BR>
 <LI><a href="#[29]">DMA_DONE13_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">DMA_DONE13_IRQHandler</a><BR>
 <LI><a href="#[2a]">DMA_DONE14_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">DMA_DONE14_IRQHandler</a><BR>
 <LI><a href="#[2b]">DMA_DONE15_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">DMA_DONE15_IRQHandler</a><BR>
 <LI><a href="#[2c]">DMA_DONE16_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">DMA_DONE16_IRQHandler</a><BR>
 <LI><a href="#[2d]">DMA_DONE17_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">DMA_DONE17_IRQHandler</a><BR>
 <LI><a href="#[2e]">DMA_DONE18_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">DMA_DONE18_IRQHandler</a><BR>
 <LI><a href="#[2f]">DMA_DONE19_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">DMA_DONE19_IRQHandler</a><BR>
 <LI><a href="#[30]">DMA_DONE20_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">DMA_DONE20_IRQHandler</a><BR>
 <LI><a href="#[31]">DMA_DONE21_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">DMA_DONE21_IRQHandler</a><BR>
 <LI><a href="#[32]">DMA_DONE22_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">DMA_DONE22_IRQHandler</a><BR>
 <LI><a href="#[33]">DMA_DONE23_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">DMA_DONE23_IRQHandler</a><BR>
 <LI><a href="#[34]">DMA_DONE24_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">DMA_DONE24_IRQHandler</a><BR>
 <LI><a href="#[35]">DMA_DONE25_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">DMA_DONE25_IRQHandler</a><BR>
 <LI><a href="#[36]">DMA_DONE26_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">DMA_DONE26_IRQHandler</a><BR>
 <LI><a href="#[37]">DMA_DONE27_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">DMA_DONE27_IRQHandler</a><BR>
 <LI><a href="#[38]">DMA_DONE28_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">DMA_DONE28_IRQHandler</a><BR>
 <LI><a href="#[39]">DMA_DONE29_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">DMA_DONE29_IRQHandler</a><BR>
 <LI><a href="#[3a]">DMA_DONE30_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">DMA_DONE30_IRQHandler</a><BR>
 <LI><a href="#[3b]">DMA_DONE31_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">DMA_DONE31_IRQHandler</a><BR>
 <LI><a href="#[3c]">PORTA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">PORTA_IRQHandler</a><BR>
 <LI><a href="#[3d]">PORTB_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">PORTB_IRQHandler</a><BR>
 <LI><a href="#[3e]">PORTC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">PORTC_IRQHandler</a><BR>
 <LI><a href="#[3f]">PORTD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">PORTD_IRQHandler</a><BR>
 <LI><a href="#[40]">PORTE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">PORTE_IRQHandler</a><BR>
 <LI><a href="#[41]">ETH1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">ETH1_IRQHandler</a><BR>
 <LI><a href="#[42]">SPW1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">SPW1_IRQHandler</a><BR>
 <LI><a href="#[43]">TIMER1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">TIMER1_IRQHandler</a><BR>
 <LI><a href="#[44]">TIMER2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">TIMER2_IRQHandler</a><BR>
 <LI><a href="#[45]">TIMER3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">TIMER3_IRQHandler</a><BR>
 <LI><a href="#[46]">TIMER4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">TIMER4_IRQHandler</a><BR>
 <LI><a href="#[47]">CAN1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">CAN1_IRQHandler</a><BR>
 <LI><a href="#[48]">SSP1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">SSP1_IRQHandler</a><BR>
 <LI><a href="#[49]">UART1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">UART1_IRQHandler</a><BR>
 <LI><a href="#[4a]">UART2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">UART2_IRQHandler</a><BR>
 <LI><a href="#[4b]">ARC1_RX_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">ARC1_RX_IRQHandler</a><BR>
 <LI><a href="#[4c]">ARC1_TX_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">ARC1_TX_IRQHandler</a><BR>
 <LI><a href="#[4d]">MIL1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">MIL1_IRQHandler</a><BR>
 <LI><a href="#[4e]">MIL2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">MIL2_IRQHandler</a><BR>
 <LI><a href="#[4f]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[50]">ADC2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">ADC2_IRQHandler</a><BR>
 <LI><a href="#[51]">DAC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">DAC1_IRQHandler</a><BR>
 <LI><a href="#[52]">DAC2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">DAC2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4f]">ADC1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[50]">ADC2_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[4b]">ARC1_RX_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[4c]">ARC1_TX_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[12]">BKP_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[47]">CAN1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[f]">CLK_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[51]">DAC1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[52]">DAC2_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[1c]">DMA_DONE0_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[26]">DMA_DONE10_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[27]">DMA_DONE11_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[28]">DMA_DONE12_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[29]">DMA_DONE13_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[2a]">DMA_DONE14_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[2b]">DMA_DONE15_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[2c]">DMA_DONE16_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[2d]">DMA_DONE17_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[2e]">DMA_DONE18_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[2f]">DMA_DONE19_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[1d]">DMA_DONE1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[30]">DMA_DONE20_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[31]">DMA_DONE21_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[32]">DMA_DONE22_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[33]">DMA_DONE23_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[34]">DMA_DONE24_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[35]">DMA_DONE25_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[36]">DMA_DONE26_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[37]">DMA_DONE27_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[38]">DMA_DONE28_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[39]">DMA_DONE29_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[1e]">DMA_DONE2_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[3a]">DMA_DONE30_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[3b]">DMA_DONE31_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[1f]">DMA_DONE3_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[20]">DMA_DONE4_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[21]">DMA_DONE5_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[22]">DMA_DONE6_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[23]">DMA_DONE7_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[24]">DMA_DONE8_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[25]">DMA_DONE9_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[1b]">DMA_ERR_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[13]">EBC_ERROR0_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[14]">EBC_ERROR1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[15]">EBC_ERROR2_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[16]">EBC_ERROR3_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[17]">EBC_ERROR4_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[18]">EBC_ERROR5_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[19]">EBC_ERROR6_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[1a]">EBC_ERROR7_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[41]">ETH1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[c]">FT_EVENT0_4_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[d]">FT_EVENT5_8_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[e]">FT_EVENT9_12_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[b]">FT_RESET0_4_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[58]">MDR_HSI_GetReady</a> from mdr_rst_clock_ve8x.o(i.MDR_HSI_GetReady) referenced from mdr_rst_clock_ve8x.o(i.MDR_HSI_EnableAndWaitReady)
 <LI><a href="#[55]">MDR_LSE_GetReady</a> from mdr_rst_clock_ve8x.o(i.MDR_LSE_GetReady) referenced from mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_LSE)
 <LI><a href="#[56]">MDR_LSI_GetReady</a> from mdr_rst_clock_ve8x.o(i.MDR_LSI_GetReady) referenced from mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_LSI)
 <LI><a href="#[4d]">MIL1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[4e]">MIL2_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[5]">MemoryMngFault_Handler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[3c]">PORTA_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[3d]">PORTB_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[3e]">PORTC_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[3f]">PORTD_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[40]">PORTE_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[10]">POWER_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[42]">SPW1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[48]">SSP1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[53]">SystemInit</a> from system_mdr1986ve8.o(i.SystemInit) referenced from startup_mdr1986ve8.o(.text)
 <LI><a href="#[43]">TIMER1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[44]">TIMER2_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[45]">TIMER3_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[46]">TIMER4_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[49]">UART1_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[4a]">UART2_IRQHandler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_mdr1986ve8.o(.text) referenced from startup_mdr1986ve8.o(RESET)
 <LI><a href="#[57]">_HSEx_GetReady_Local</a> from mdr_rst_clock_ve8x.o(i._HSEx_GetReady_Local) referenced from mdr_rst_clock_ve8x.o(i.MDR_HSEx_WaitReady)
 <LI><a href="#[59]">_PLLx_GetReady_Local</a> from mdr_rst_clock_ve8x.o(i._PLLx_GetReady_Local) referenced from mdr_rst_clock_ve8x.o(i.MDR_PLLx_WaitReady)
 <LI><a href="#[5a]">__main</a> from __main.o(!!!main) referenced from startup_mdr1986ve8.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b4]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[b5]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[63]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[5e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[b6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[be]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ca]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[cb]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[cc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[cd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[cf]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[60]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[62]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[64]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MDRB_LED_Init &rArr; MDR_Port_Init_PortOUT &rArr; MDR_Port_InitDigPort &rArr; MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[67]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[d4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[69]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemoryMngFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>FT_RESET0_4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_RESET0_4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_RESET0_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>FT_EVENT0_4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_EVENT0_4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_EVENT0_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FT_EVENT5_8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_EVENT5_8_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_EVENT5_8_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FT_EVENT9_12_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_EVENT9_12_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_EVENT9_12_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CLK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>POWER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BKP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EBC_ERROR0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EBC_ERROR1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EBC_ERROR2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EBC_ERROR3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EBC_ERROR4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EBC_ERROR5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EBC_ERROR6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EBC_ERROR7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_ERROR7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_ERR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA_DONE0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_DONE1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA_DONE2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_DONE3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_DONE4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_DONE5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA_DONE6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_DONE7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_DONE8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE8_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE8_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_DONE9_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE9_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE9_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_DONE10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE10_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_DONE11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE11_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE11_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_DONE12_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE12_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE12_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_DONE13_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE13_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE13_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_DONE14_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE14_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_DONE15_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE15_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE15_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_DONE16_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE16_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE16_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_DONE17_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE17_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE17_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA_DONE18_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE18_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE18_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_DONE19_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE19_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE19_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA_DONE20_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE20_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE20_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA_DONE21_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE21_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE21_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA_DONE22_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE22_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE22_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA_DONE23_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE23_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE23_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA_DONE24_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE24_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE24_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA_DONE25_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE25_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE25_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA_DONE26_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE26_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE26_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA_DONE27_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE27_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE27_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA_DONE28_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE28_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE28_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA_DONE29_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE29_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE29_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA_DONE30_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE30_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE30_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA_DONE31_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE31_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE31_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PORTA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PORTB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PORTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PORTD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PORTE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ETH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPW1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPW1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPW1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SSP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ARC1_RX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC1_RX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC1_RX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ARC1_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC1_TX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC1_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>MIL1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>MIL2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ADC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ADC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DAC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DAC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr1986ve8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[66]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[da]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>ChangeClockCPU</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, clockitems.o(i.ChangeClockCPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ChangeClockCPU &rArr; MDR_CPU_SetClock_PLL_srcHSE &rArr; MDR_PLLx_EnableAndWaitReady &rArr; MDR_PLLx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcHSEx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSE
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSI
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_HSI
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_GetFreqHz
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrySwitchToClock
</UL>

<P><STRONG><a name="[ac]"></a>MDRB_Buttons_ChangeDebounceTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdrb_buttons.o(i.MDRB_Buttons_ChangeDebounceTick))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewClockToDrivers
</UL>

<P><STRONG><a name="[78]"></a>MDRB_Buttons_InitTick</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdrb_buttons.o(i.MDRB_Buttons_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = MDRB_Buttons_InitTick &rArr; MDR_Port_Init_PortIN &rArr; MDR_Port_InitDigPort &rArr; MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init_PortIN
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>MDRB_IsKeyClicked</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mdrb_buttons.o(i.MDRB_IsKeyClicked))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MDRB_IsKeyClicked &rArr; MDRB_IsKeyPushed &rArr; MDRB_IsKeyPushedEx &rArr; MDR_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_IsKeyPushed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>MDRB_IsKeyPushed</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mdrb_buttons.o(i.MDRB_IsKeyPushed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MDRB_IsKeyPushed &rArr; MDRB_IsKeyPushedEx &rArr; MDR_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_IsKeyPushedEx
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_IsKeyClicked
</UL>

<P><STRONG><a name="[7c]"></a>MDRB_IsKeyPushedEx</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mdrb_buttons.o(i.MDRB_IsKeyPushedEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDRB_IsKeyPushedEx &rArr; MDR_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_GetMaskClr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_IsKeyPushed
</UL>

<P><STRONG><a name="[7f]"></a>MDRB_LED_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mdrb_leds.o(i.MDRB_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = MDRB_LED_Init &rArr; MDR_Port_Init_PortOUT &rArr; MDR_Port_InitDigPort &rArr; MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init_PortOUT
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>MDRB_LED_NumToSel</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdrb_leds.o(i.MDRB_LED_NumToSel))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[81]"></a>MDRB_LED_Set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mdrb_leds.o(i.MDRB_LED_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDRB_LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_SetPins
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_ClearPins
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[aa]"></a>MDRB_LED_Toggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdrb_leds.o(i.MDRB_LED_Toggle))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[84]"></a>MDR_CLK_ApplyFreqSupport_LDO</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_CLK_ApplyFreqSupport_LDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_MaskClrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_ApplyFreqSupport
</UL>

<P><STRONG><a name="[88]"></a>MDR_CLK_ApplyFreqSupport_OTP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr_rst_clock_ve8x.o(i.MDR_CLK_ApplyFreqSupport_OTP))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_ApplyFreqSupport
</UL>

<P><STRONG><a name="[86]"></a>MDR_CLK_ResetBlock</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_CLK_ResetBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MDR_CLK_ResetBlock &rArr; MDR_CPU_SetClock_HSI &rArr; MDR_CPU_SetClock_srcMAXCLK &rArr; MDR_CPU_ApplyFreqSupport &rArr; MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>MDR_CPU_GetFreqHz</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_GetFreqHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MDR_CPU_GetFreqHz &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockCPU
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewClockToDrivers
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempToHSI
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[74]"></a>MDR_CPU_SetClock_HSI</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MDR_CPU_SetClock_HSI &rArr; MDR_CPU_SetClock_srcMAXCLK &rArr; MDR_CPU_ApplyFreqSupport &rArr; MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcMAXCLK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSI_EnableAndWaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CLK_ResetBlock
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockCPU
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempToHSI
</UL>

<P><STRONG><a name="[73]"></a>MDR_CPU_SetClock_LSE</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_LSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MDR_CPU_SetClock_LSE &rArr; MDR_CPU_SetClock_srcMAXCLK &rArr; MDR_CPU_ApplyFreqSupport &rArr; MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCondition
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcMAXCLK
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_Set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_ClrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockCPU
</UL>

<P><STRONG><a name="[72]"></a>MDR_CPU_SetClock_LSI</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_LSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MDR_CPU_SetClock_LSI &rArr; MDR_CPU_SetClock_srcMAXCLK &rArr; MDR_CPU_ApplyFreqSupport &rArr; MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCondition
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcMAXCLK
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_ClrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockCPU
</UL>

<P><STRONG><a name="[77]"></a>MDR_CPU_SetClock_PLL_srcHSE</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_PLL_srcHSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MDR_CPU_SetClock_PLL_srcHSE &rArr; MDR_PLLx_EnableAndWaitReady &rArr; MDR_PLLx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcMAXCLK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_PLLx_EnableAndWaitReady
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSEx_EnableAndWaitReady
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CLK_GetMAXCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockCPU
</UL>

<P><STRONG><a name="[76]"></a>MDR_CPU_SetClock_PLL_srcHSI</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_PLL_srcHSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MDR_CPU_SetClock_PLL_srcHSI &rArr; MDR_PLLx_EnableAndWaitReady &rArr; MDR_PLLx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcMAXCLK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_PLLx_EnableAndWaitReady
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSI_EnableAndWaitReady
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CLK_GetMAXCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockCPU
</UL>

<P><STRONG><a name="[75]"></a>MDR_CPU_SetClock_srcHSEx</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_srcHSEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MDR_CPU_SetClock_srcHSEx &rArr; MDR_CPU_SetClock_srcMAXCLK &rArr; MDR_CPU_ApplyFreqSupport &rArr; MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcMAXCLK
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSEx_EnableAndWaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockCPU
</UL>

<P><STRONG><a name="[8b]"></a>MDR_CPU_SetClock_srcMAXCLK</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_srcMAXCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MDR_CPU_SetClock_srcMAXCLK &rArr; MDR_CPU_ApplyFreqSupport &rArr; MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_MaskClrSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_ApplyFreqSupport
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcHSEx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSE
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSI
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_HSI
</UL>

<P><STRONG><a name="[7e]"></a>MDR_Delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mdr_funcs.o(i.MDR_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MDR_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_IsKeyPushedEx
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>MDR_HSEx_WaitReady</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_HSEx_WaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDR_HSEx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSEx_EnableAndWaitReady
</UL>

<P><STRONG><a name="[58]"></a>MDR_HSI_GetReady</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mdr_rst_clock_ve8x.o(i.MDR_HSI_GetReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MDR_HSI_GetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr_rst_clock_ve8x.o(i.MDR_HSI_EnableAndWaitReady)
</UL>
<P><STRONG><a name="[55]"></a>MDR_LSE_GetReady</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mdr_rst_clock_ve8x.o(i.MDR_LSE_GetReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MDR_LSE_GetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_LSE)
</UL>
<P><STRONG><a name="[56]"></a>MDR_LSI_GetReady</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mdr_rst_clock_ve8x.o(i.MDR_LSI_GetReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MDR_LSI_GetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr_rst_clock_ve8x.o(i.MDR_CPU_SetClock_LSI)
</UL>
<P><STRONG><a name="[92]"></a>MDR_PLLx_Enable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_PLLx_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDR_PLLx_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_PLLx_EnableAndWaitReady
</UL>

<P><STRONG><a name="[93]"></a>MDR_PLLx_WaitReady</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_PLLx_WaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDR_PLLx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_PLLx_EnableAndWaitReady
</UL>

<P><STRONG><a name="[96]"></a>MDR_Port_Clear_ClearCfg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr_gpio_ve8x.o(i.MDR_Port_Clear_ClearCfg))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init
</UL>

<P><STRONG><a name="[95]"></a>MDR_Port_Clear_SetCfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr_gpio_ve8x.o(i.MDR_Port_Clear_SetCfg))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init
</UL>

<P><STRONG><a name="[94]"></a>MDR_Port_Init</STRONG> (Thumb, 44 bytes, Stack size 96 bytes, mdr_gpio_ve8x.o(i.MDR_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_MaskApply
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Clear_SetCfg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Clear_ClearCfg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_MaskAddCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_InitDig
</UL>

<P><STRONG><a name="[99]"></a>MDR_Port_InitDig</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, mdr_gpio_ve8x.o(i.MDR_Port_InitDig))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_ToPinCfg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_InitDigPort
</UL>

<P><STRONG><a name="[79]"></a>MDR_Port_Init_PortIN</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mdr_gpio_ve8x.o(i.MDR_Port_Init_PortIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = MDR_Port_Init_PortIN &rArr; MDR_Port_InitDigPort &rArr; MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_InitDigPort
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_Buttons_InitTick
</UL>

<P><STRONG><a name="[80]"></a>MDR_Port_Init_PortOUT</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mdr_gpio_ve8x.o(i.MDR_Port_Init_PortOUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = MDR_Port_Init_PortOUT &rArr; MDR_Port_InitDigPort &rArr; MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_InitDigPort
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_LED_Init
</UL>

<P><STRONG><a name="[98]"></a>MDR_Port_MaskApply</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, mdr_gpio_ve8x.o(i.MDR_Port_MaskApply))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MDR_Port_MaskApply
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init
</UL>

<P><STRONG><a name="[9a]"></a>MDR_Port_ToPinCfg</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mdr_gpio_ve8x.o(i.MDR_Port_ToPinCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDR_Port_ToPinCfg &rArr; IO_ToCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_InitDig
</UL>

<P><STRONG><a name="[9c]"></a>MDR_Port_WriteRegs</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, mdr_gpio_ve8x.o(i.MDR_Port_WriteRegs))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_MaskApply
</UL>

<P><STRONG><a name="[a9]"></a>MDR_SysTimerStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr_systimer.o(i.MDR_SysTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[9f]"></a>MDR_SysTimerStop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr_systimer.o(i.MDR_SysTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[9e]"></a>SetNextClockItem</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, main.o(i.SetNextClockItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetNextClockItem &rArr; TrySwitchToClock &rArr; ChangeClockCPU &rArr; MDR_CPU_SetClock_PLL_srcHSE &rArr; MDR_PLLx_EnableAndWaitReady &rArr; MDR_PLLx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_SysTimerStop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_SysTimerStart
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_GetFreqHz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_LED_Set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_LED_NumToSel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrySwitchToClock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempToHSI
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSetItemResult
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowClearResult
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>ShowClearResult</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.ShowClearResult))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[a3]"></a>ShowSetItemResult</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.ShowSetItemResult))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_LED_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, system_mdr1986ve8.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_GetFreqHz
</UL>

<P><STRONG><a name="[53]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, system_mdr1986ve8.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>TempToHSI</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i.TempToHSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TempToHSI &rArr; UpdateNewClockToDrivers &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_HSI
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_GetFreqHz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewClockToDrivers
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[a1]"></a>TrySwitchToClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i.TrySwitchToClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TrySwitchToClock &rArr; ChangeClockCPU &rArr; MDR_CPU_SetClock_PLL_srcHSE &rArr; MDR_PLLx_EnableAndWaitReady &rArr; MDR_PLLx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockCPU
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewClockToDrivers
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[ab]"></a>UpdateNewClockToDrivers</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, main.o(i.UpdateNewClockToDrivers))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UpdateNewClockToDrivers &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_GetFreqHz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_Buttons_ChangeDebounceTick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrySwitchToClock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempToHSI
</UL>

<P><STRONG><a name="[8c]"></a>WaitCondition</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mdr_funcs.o(i.WaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSI
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSE
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_PLLx_WaitReady
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSEx_WaitReady
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSI_EnableAndWaitReady
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = main &rArr; MDRB_LED_Init &rArr; MDR_Port_Init_PortOUT &rArr; MDR_Port_InitDigPort &rArr; MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Delay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CLK_ResetBlock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_LED_Set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_LED_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_IsKeyClicked
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_Buttons_InitTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewClockToDrivers
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[ad]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewClockToDrivers
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[b0]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewClockToDrivers
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[dd]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewClockToDrivers
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextClockItem
</UL>

<P><STRONG><a name="[b1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[af]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[ae]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[5f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[de]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[df]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>MDR_Port_GetMaskClr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdrb_buttons.o(i.MDR_Port_GetMaskClr))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_IsKeyPushedEx
</UL>

<P><STRONG><a name="[83]"></a>MDR_Port_ClearPins</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdrb_leds.o(i.MDR_Port_ClearPins))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_LED_Set
</UL>

<P><STRONG><a name="[82]"></a>MDR_Port_SetPins</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdrb_leds.o(i.MDR_Port_SetPins))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDRB_LED_Set
</UL>

<P><STRONG><a name="[9d]"></a>IO_ToCfg</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdr_gpio_ve8x.o(i.IO_ToCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_ToCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_ToPinCfg
</UL>

<P><STRONG><a name="[9b]"></a>MDR_Port_InitDigPort</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, mdr_gpio_ve8x.o(i.MDR_Port_InitDigPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = MDR_Port_InitDigPort &rArr; MDR_Port_InitDig &rArr; MDR_Port_Init &rArr; MDR_Port_MaskAddCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_InitDig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init_PortOUT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init_PortIN
</UL>

<P><STRONG><a name="[97]"></a>MDR_Port_MaskAddCfg</STRONG> (Thumb, 532 bytes, Stack size 100 bytes, mdr_gpio_ve8x.o(i.MDR_Port_MaskAddCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MDR_Port_MaskAddCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_Port_Init
</UL>

<P><STRONG><a name="[6e]"></a>BKP_REG63x_ClrSet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.BKP_REG63x_ClrSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BKP_REG63x_ClrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSI
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSE
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSI_EnableAndWaitReady
</UL>

<P><STRONG><a name="[91]"></a>BKP_REG63x_Get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr_rst_clock_ve8x.o(i.BKP_REG63x_Get))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_LSI_GetReady
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_LSE_GetReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSI_GetReady
</UL>

<P><STRONG><a name="[6f]"></a>BKP_REG63x_Set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mdr_rst_clock_ve8x.o(i.BKP_REG63x_Set))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_LSE
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_ClrSet
</UL>

<P><STRONG><a name="[8d]"></a>MDR_CLK_GetMAXCLK</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr_rst_clock_ve8x.o(i.MDR_CLK_GetMAXCLK))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSE
</UL>

<P><STRONG><a name="[87]"></a>MDR_CPU_ApplyFreqSupport</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr_rst_clock_ve8x.o(i.MDR_CPU_ApplyFreqSupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MDR_CPU_ApplyFreqSupport &rArr; MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CLK_ApplyFreqSupport_OTP
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CLK_ApplyFreqSupport_LDO
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcMAXCLK
</UL>

<P><STRONG><a name="[8e]"></a>MDR_HSEx_EnableAndWaitReady</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_HSEx_EnableAndWaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MDR_HSEx_EnableAndWaitReady &rArr; MDR_HSEx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_HSEx_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcHSEx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSE
</UL>

<P><STRONG><a name="[8a]"></a>MDR_HSI_EnableAndWaitReady</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mdr_rst_clock_ve8x.o(i.MDR_HSI_EnableAndWaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDR_HSI_EnableAndWaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCondition
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_REG63x_ClrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSI
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_HSI
</UL>

<P><STRONG><a name="[85]"></a>MDR_MaskClrSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr_rst_clock_ve8x.o(i.MDR_MaskClrSet))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_srcMAXCLK
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CLK_ApplyFreqSupport_LDO
</UL>

<P><STRONG><a name="[8f]"></a>MDR_PLLx_EnableAndWaitReady</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, mdr_rst_clock_ve8x.o(i.MDR_PLLx_EnableAndWaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MDR_PLLx_EnableAndWaitReady &rArr; MDR_PLLx_WaitReady &rArr; WaitCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_PLLx_WaitReady
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_PLLx_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDR_CPU_SetClock_PLL_srcHSE
</UL>

<P><STRONG><a name="[57]"></a>_HSEx_GetReady_Local</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr_rst_clock_ve8x.o(i._HSEx_GetReady_Local))
<BR>[Address Reference Count : 1]<UL><LI> mdr_rst_clock_ve8x.o(i.MDR_HSEx_WaitReady)
</UL>
<P><STRONG><a name="[59]"></a>_PLLx_GetReady_Local</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr_rst_clock_ve8x.o(i._PLLx_GetReady_Local))
<BR>[Address Reference Count : 1]<UL><LI> mdr_rst_clock_ve8x.o(i.MDR_PLLx_WaitReady)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
